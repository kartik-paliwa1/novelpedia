{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/dist/index.js","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/tableproperties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/utils/common.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/upcasttable.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablewalker.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/downcast.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/inserttablecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/insertrowcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/insertcolumncommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/splitcellcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/utils/structure.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/mergecellcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/removerowcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/removecolumncommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/constants.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/utils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableutils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/mergecellscommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/selectrowcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/selectcolumncommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-headings-refresh-handler.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-cell-refresh-handler.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/ui/inserttableview.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableselection.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableclipboard.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablekeyboard.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablemouse.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/table.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/plaintableoutput.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/utils/ui/widget.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tabletoolbar.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/ui/colorinputview.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/utils/ui/table-properties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/utils/table-properties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellwidth/commands/tablecellwidthcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpaddingcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellheightcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbackgroundcolorcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellverticalalignmentcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellhorizontalalignmentcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderstylecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbordercolorcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderwidthcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablelayout/tablelayoutui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/commands/inserttablelayoutcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/tablewidthscommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/converters.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablelayout/commands/tabletypecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablelayout/tablelayoutediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablelayout.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablebackgroundcolorcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablebordercolorcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderstylecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderwidthcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablewidthcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tableheightcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablealignmentcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-caption-post-fixer.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/utils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/toggletablecaptioncommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption.ts"],"sourcesContent":["import { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toWidgetEditable, toWidget, Widget, isWidget, WidgetToolbarRepository } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { first, global, CKEditorError, KeystrokeHandler, FocusTracker, Collection, getLocalizedArrowKeyCodeDirection, Rect, DomEmitterMixin, toUnit } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { IconTable, IconTableColumn, IconTableRow, IconTableMergeCell, IconCheck, IconCancel, IconAlignBottom, IconAlignMiddle, IconAlignTop, IconAlignJustify, IconAlignRight, IconAlignCenter, IconAlignLeft, IconTableCellProperties, IconTableLayout, IconTableProperties, IconObjectInlineRight, IconObjectCenter, IconObjectInlineLeft, IconCaption } from '@ckeditor/ckeditor5-icons/dist/index.js';\nimport { View, addKeyboardHandlingForGrid, ButtonView, createDropdown, MenuBarMenuView, SwitchButtonView, SplitButtonView, addListToDropdown, UIModel, ViewCollection, FocusCycler, InputTextView, ColorSelectorView, FormHeaderView, FormRowView, submitHandler, LabelView, LabeledFieldView, createLabeledDropdown, createLabeledInputText, ToolbarView, BalloonPanelView, ContextualBalloon, normalizeColorOptions, getLocalizedColorOptions, clickOutsideHandler, DropdownButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { ClipboardMarkersUtils, ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { DomEventObserver, isColorStyleValue, isLengthStyleValue, isPercentageStyleValue, addBorderStylesRules, addPaddingStylesRules, addBackgroundStylesRules, enableViewPlaceholder, ModelElement } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { isObject, debounce, isEqual, throttle } from 'es-toolkit/compat';\n\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param options.modelAttribute The attribute to set.\n * @param options.styleName The style name to convert.\n * @param options.attributeName The HTML attribute name to convert.\n * @param options.attributeType The HTML attribute type for value normalization.\n * @param options.viewElement The view element name that should be converted.\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n * @param options.shouldUpcast The function which returns `true` if style should be upcasted from this element.\n * @internal\n */ function upcastStyleToAttribute(conversion, options) {\n    const { modelAttribute, styleName, attributeName, attributeType, viewElement, defaultValue, shouldUpcast = ()=>true, reduceBoxSides = false } = options;\n    conversion.for('upcast').attributeToAttribute({\n        view: {\n            name: viewElement,\n            styles: {\n                [styleName]: /[\\s\\S]+/\n            }\n        },\n        model: {\n            key: modelAttribute,\n            value: (viewElement, conversionApi, data)=>{\n                // Ignore table elements inside figures and figures without the table class.\n                if (!shouldUpcast(viewElement)) {\n                    return;\n                }\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, '', data);\n                const normalized = viewElement.getNormalizedStyle(styleName);\n                const value = reduceBoxSides ? reduceBoxSidesValue(normalized) : normalized;\n                if (localDefaultValue !== value) {\n                    return value;\n                }\n                // Consume the style even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    styles: styleName\n                });\n            }\n        }\n    });\n    if (attributeName) {\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: viewElement,\n                attributes: {\n                    [attributeName]: /.+/\n                }\n            },\n            model: {\n                key: modelAttribute,\n                value: (viewElement, conversionApi, data)=>{\n                    // Convert attributes of table and table cell elements, ignore figure.\n                    // Do not convert attribute if related style is set as it has a higher priority.\n                    // Do not convert attribute if the element is a table inside a figure with the related style set.\n                    if (viewElement.name == 'figure' || viewElement.hasStyle(styleName) || viewElement.name == 'table' && viewElement.parent.name == 'figure' && viewElement.parent.hasStyle(styleName)) {\n                        return;\n                    }\n                    const localDefaultValue = getDefaultValueAdjusted(defaultValue, '', data);\n                    let value = viewElement.getAttribute(attributeName);\n                    if (value && attributeType == 'length' && !value.endsWith('px')) {\n                        value += 'px';\n                    }\n                    if (localDefaultValue !== value) {\n                        return value;\n                    }\n                    // Consume the attribute even if not applied to the element so it won't be processed by other converters.\n                    conversionApi.consumable.consume(viewElement, {\n                        attributes: attributeName\n                    });\n                }\n            }\n        });\n    }\n}\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `borderColor` value.\n * @param defaultBorder.style The default `borderStyle` value.\n * @param defaultBorder.width The default `borderWidth` value.\n * @internal\n */ function upcastBorderStyles(conversion, viewElementName, modelAttributes, defaultBorder) {\n    conversion.for('upcast').add((dispatcher)=>dispatcher.on('element:' + viewElementName, (evt, data, conversionApi)=>{\n            // If the element was not converted by element-to-element converter,\n            // we should not try to convert the style. See #8393.\n            if (!data.modelRange) {\n                return;\n            }\n            // Check the most detailed properties. These will be always set directly or\n            // when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n            const stylesToConsume = [\n                'border-top-width',\n                'border-top-color',\n                'border-top-style',\n                'border-bottom-width',\n                'border-bottom-color',\n                'border-bottom-style',\n                'border-right-width',\n                'border-right-color',\n                'border-right-style',\n                'border-left-width',\n                'border-left-color',\n                'border-left-style'\n            ].filter((styleName)=>data.viewItem.hasStyle(styleName));\n            if (!stylesToConsume.length) {\n                return;\n            }\n            const matcherPattern = {\n                styles: stylesToConsume\n            };\n            // Try to consume appropriate values from consumable values list.\n            if (!conversionApi.consumable.test(data.viewItem, matcherPattern)) {\n                return;\n            }\n            const modelElement = [\n                ...data.modelRange.getItems({\n                    shallow: true\n                })\n            ].pop();\n            const tableElement = modelElement.findAncestor('table', {\n                includeSelf: true\n            });\n            let localDefaultBorder = defaultBorder;\n            if (tableElement && tableElement.getAttribute('tableType') == 'layout') {\n                localDefaultBorder = {\n                    style: 'none',\n                    color: '',\n                    width: ''\n                };\n            }\n            conversionApi.consumable.consume(data.viewItem, matcherPattern);\n            const normalizedBorder = {\n                style: data.viewItem.getNormalizedStyle('border-style'),\n                color: data.viewItem.getNormalizedStyle('border-color'),\n                width: data.viewItem.getNormalizedStyle('border-width')\n            };\n            const reducedBorder = {\n                style: reduceBoxSidesValue(normalizedBorder.style),\n                color: reduceBoxSidesValue(normalizedBorder.color),\n                width: reduceBoxSidesValue(normalizedBorder.width)\n            };\n            if (reducedBorder.style !== localDefaultBorder.style) {\n                conversionApi.writer.setAttribute(modelAttributes.style, reducedBorder.style, modelElement);\n            }\n            if (reducedBorder.color !== localDefaultBorder.color) {\n                conversionApi.writer.setAttribute(modelAttributes.color, reducedBorder.color, modelElement);\n            }\n            if (reducedBorder.width !== localDefaultBorder.width) {\n                conversionApi.writer.setAttribute(modelAttributes.width, reducedBorder.width, modelElement);\n            }\n        }));\n}\n/**\n * Conversion helper for downcasting an attribute to a style.\n *\n * @internal\n */ function downcastAttributeToStyle(conversion, options) {\n    const { modelElement, modelAttribute, styleName } = options;\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: modelElement,\n            key: modelAttribute\n        },\n        view: (modelAttributeValue)=>({\n                key: 'style',\n                value: {\n                    [styleName]: modelAttributeValue\n                }\n            })\n    });\n}\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n *\n * @internal\n */ function downcastTableAttribute(conversion, options) {\n    const { modelAttribute, styleName } = options;\n    conversion.for('downcast').add((dispatcher)=>dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi)=>{\n            const { item, attributeNewValue } = data;\n            const { mapper, writer } = conversionApi;\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const table = [\n                ...mapper.toViewElement(item).getChildren()\n            ].find((child)=>child.is('element', 'table'));\n            if (attributeNewValue) {\n                writer.setStyle(styleName, attributeNewValue, table);\n            } else {\n                writer.removeStyle(styleName, table);\n            }\n        }));\n}\n/**\n * Returns the default value for table or table cell property adjusted for layout tables.\n *\n * @internal\n */ function getDefaultValueAdjusted(defaultValue, layoutTableDefault, data) {\n    const modelElement = data.modelRange && first(data.modelRange.getItems({\n        shallow: true\n    }));\n    const tableElement = modelElement && modelElement.is('element') && modelElement.findAncestor('table', {\n        includeSelf: true\n    });\n    if (tableElement && tableElement.getAttribute('tableType') === 'layout') {\n        return layoutTableDefault;\n    }\n    return defaultValue;\n}\n/**\n * Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n * Returns original style otherwise.\n */ function reduceBoxSidesValue(style) {\n    if (!style) {\n        return;\n    }\n    const sides = [\n        'top',\n        'right',\n        'bottom',\n        'left'\n    ];\n    const allSidesDefined = sides.every((side)=>style[side]);\n    if (!allSidesDefined) {\n        return style;\n    }\n    const topSideStyle = style.top;\n    const allSidesEqual = sides.every((side)=>style[side] === topSideStyle);\n    if (!allSidesEqual) {\n        return style;\n    }\n    return topSideStyle;\n}\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @internal\n * @param key An attribute key.\n * @param value The new attribute value.\n * @param item A model item on which the attribute will be set.\n * @param defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */ function updateNumericAttribute(key, value, item, writer, defaultValue = 1) {\n    if (value !== undefined && value !== null && defaultValue !== undefined && defaultValue !== null && value > defaultValue) {\n        writer.setAttribute(key, value, item);\n    } else {\n        writer.removeAttribute(key, item);\n    }\n}\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @internal\n * @param writer The model writer.\n * @param insertPosition The position at which the table cell should be inserted.\n * @param attributes The element attributes.\n * @returns Created table cell.\n */ function createEmptyTableCell(writer, insertPosition, attributes = {}) {\n    const tableCell = writer.createElement('tableCell', attributes);\n    writer.insertElement('paragraph', tableCell);\n    writer.insert(tableCell, insertPosition);\n    return tableCell;\n}\n/**\n * Checks if a table cell belongs to the heading column section.\n *\n * @internal\n */ function isHeadingColumnCell(tableUtils, tableCell) {\n    const table = tableCell.parent.parent;\n    const headingColumns = parseInt(table.getAttribute('headingColumns') || '0');\n    const { column } = tableUtils.getCellLocation(tableCell);\n    return !!headingColumns && column < headingColumns;\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @internal\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */ function enableProperty$1(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('tableCell', {\n        allowAttributes: [\n            modelAttribute\n        ]\n    });\n    schema.setAttributeProperties(modelAttribute, {\n        isFormatting: true\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: /^(td|th)$/,\n        ...options\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        ...options\n    });\n}\n/**\n * Depending on the position of the selection we either return the table under cursor or look for the table higher in the hierarchy.\n *\n * @internal\n */ function getSelectionAffectedTable(selection) {\n    const selectedElement = selection.getSelectedElement();\n    // Is the command triggered from the `tableToolbar`?\n    if (selectedElement && selectedElement.is('element', 'table')) {\n        return selectedElement;\n    }\n    return selection.getFirstPosition().findAncestor('table');\n}\n\n/**\n * Returns a function that converts the table view representation:\n *\n * ```xml\n * <figure class=\"table\"><table>...</table></figure>\n * ```\n *\n * to the model representation:\n *\n * ```xml\n * <table></table>\n * ```\n *\n * @internal\n */ function upcastTableFigure() {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            // Do not convert if this is not a \"table figure\".\n            if (!conversionApi.consumable.test(data.viewItem, {\n                name: true,\n                classes: 'table'\n            })) {\n                return;\n            }\n            // Find a table element inside the figure element.\n            const viewTable = getViewTableFromFigure(data.viewItem);\n            // Do not convert if table element is absent or was already converted.\n            if (!viewTable || !conversionApi.consumable.test(viewTable, {\n                name: true\n            })) {\n                return;\n            }\n            // Consume the figure to prevent other converters from processing it again.\n            conversionApi.consumable.consume(data.viewItem, {\n                name: true,\n                classes: 'table'\n            });\n            // Convert view table to model table.\n            const conversionResult = conversionApi.convertItem(viewTable, data.modelCursor);\n            // Get table element from conversion result.\n            const modelTable = first(conversionResult.modelRange.getItems());\n            // When table wasn't successfully converted then finish conversion.\n            if (!modelTable) {\n                // Revert consumed figure so other features can convert it.\n                conversionApi.consumable.revert(data.viewItem, {\n                    name: true,\n                    classes: 'table'\n                });\n                return;\n            }\n            conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelTable, 'end'));\n            conversionApi.updateConversionResult(modelTable, data);\n        });\n    };\n}\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns Conversion helper.\n * @internal\n */ function upcastTable() {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            const viewTable = data.viewItem;\n            // When element was already consumed then skip it.\n            if (!conversionApi.consumable.test(viewTable, {\n                name: true\n            })) {\n                return;\n            }\n            const { rows, headingRows, headingColumns } = scanTable(viewTable);\n            // Only set attributes if values is greater then 0.\n            const attributes = {};\n            if (headingColumns) {\n                attributes.headingColumns = headingColumns;\n            }\n            if (headingRows) {\n                attributes.headingRows = headingRows;\n            }\n            const table = conversionApi.writer.createElement('table', attributes);\n            if (!conversionApi.safeInsert(table, data.modelCursor)) {\n                return;\n            }\n            conversionApi.consumable.consume(viewTable, {\n                name: true\n            });\n            // Upcast table rows in proper order (heading rows first).\n            rows.forEach((row)=>conversionApi.convertItem(row, conversionApi.writer.createPositionAt(table, 'end')));\n            // Convert everything else.\n            conversionApi.convertChildren(viewTable, conversionApi.writer.createPositionAt(table, 'end'));\n            // Create one row and one table cell for empty table.\n            if (table.isEmpty) {\n                const row = conversionApi.writer.createElement('tableRow');\n                conversionApi.writer.insert(row, conversionApi.writer.createPositionAt(table, 'end'));\n                createEmptyTableCell(conversionApi.writer, conversionApi.writer.createPositionAt(row, 'end'));\n            }\n            conversionApi.updateConversionResult(table, data);\n        });\n    };\n}\n/**\n * A conversion helper that skips empty <tr> elements from upcasting at the beginning of the table.\n *\n * An empty row is considered a table model error but when handling clipboard data there could be rows that contain only row-spanned cells\n * and empty TR-s are used to maintain the table structure (also {@link module:table/tablewalker~TableWalker} assumes that there are only\n * rows that have related `tableRow` elements).\n *\n * *Note:* Only the first empty rows are removed because they have no meaning and it solves the issue\n * of an improper table with all empty rows.\n *\n * @internal\n * @returns Conversion helper.\n */ function skipEmptyTableRow() {\n    return (dispatcher)=>{\n        dispatcher.on('element:tr', (evt, data)=>{\n            if (data.viewItem.isEmpty && data.modelCursor.index == 0) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    };\n}\n/**\n * A converter that ensures an empty paragraph is inserted in a table cell if no other content was converted.\n *\n * @internal\n * @returns Conversion helper.\n */ function ensureParagraphInTableCell(elementName) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${elementName}`, (evt, data, { writer })=>{\n            // The default converter will create a model range on converted table cell.\n            if (!data.modelRange) {\n                return;\n            }\n            const tableCell = data.modelRange.start.nodeAfter;\n            const modelCursor = writer.createPositionAt(tableCell, 0);\n            // Ensure a paragraph in the model for empty table cells for converted table cells.\n            if (data.viewItem.isEmpty) {\n                writer.insertElement('paragraph', modelCursor);\n                return;\n            }\n            const childNodes = Array.from(tableCell.getChildren());\n            // In case there are only markers inside the table cell then move them to the paragraph.\n            if (childNodes.every((node)=>node.is('element', '$marker'))) {\n                const paragraph = writer.createElement('paragraph');\n                writer.insert(paragraph, writer.createPositionAt(tableCell, 0));\n                for (const node of childNodes){\n                    writer.move(writer.createRangeOn(node), writer.createPositionAt(paragraph, 'end'));\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Get view `<table>` element from the view widget (`<figure>`).\n */ function getViewTableFromFigure(figureView) {\n    for (const figureChild of figureView.getChildren()){\n        if (figureChild.is('element', 'table')) {\n            return figureChild;\n        }\n    }\n}\n/**\n * Scans table rows and extracts required metadata from the table:\n *\n * headingRows    - The number of rows that go as table headers.\n * headingColumns - The maximum number of row headings.\n * rows           - Sorted `<tr>` elements as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n */ function scanTable(viewTable) {\n    let headingRows = 0;\n    let headingColumns = undefined;\n    // The `<tbody>` and `<thead>` sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more than one\n    // of them.\n    // As the model does not have these sections, rows from different sections must be sorted.\n    // For example, below is a valid HTML table:\n    //\n    // <table>\n    //   <tbody><tr><td>2</td></tr></tbody>\n    //   <thead><tr><td>1</td></tr></thead>\n    //   <tbody><tr><td>3</td></tr></tbody>\n    // </table>\n    //\n    // But browsers will render rows in order as: 1 as the heading and 2 and 3 as the body.\n    const headRows = [];\n    const bodyRows = [];\n    // Currently the editor does not support more then one <thead> section.\n    // Only the first <thead> from the view will be used as a heading row and the others will be converted to body rows.\n    let firstTheadElement;\n    for (const tableChild of Array.from(viewTable.getChildren())){\n        // Only `<thead>`, `<tbody>` & `<tfoot>` from allowed table children can have `<tr>`s.\n        // The else is for future purposes (mainly `<caption>`).\n        if (tableChild.name !== 'tbody' && tableChild.name !== 'thead' && tableChild.name !== 'tfoot') {\n            continue;\n        }\n        // Save the first `<thead>` in the table as table header - all other ones will be converted to table body rows.\n        if (tableChild.name === 'thead' && !firstTheadElement) {\n            firstTheadElement = tableChild;\n        }\n        // There might be some extra empty text nodes between the `<tr>`s.\n        // Make sure further code operates on `tr`s only. (#145)\n        const trs = Array.from(tableChild.getChildren()).filter((el)=>el.is('element', 'tr'));\n        // Keep tracking of the previous row columns count to improve detection of heading rows.\n        let maxPrevColumns = null;\n        for (const tr of trs){\n            const trColumns = Array.from(tr.getChildren()).filter((el)=>el.is('element', 'td') || el.is('element', 'th'));\n            // This <tr> is a child of a first <thead> element.\n            if (firstTheadElement && tableChild === firstTheadElement || tableChild.name === 'tbody' && trColumns.length > 0 && // These conditions handles the case when the first column is a <th> element and it's the only column in the row.\n            // This case is problematic because it's not clear if this row should be a heading row or not, as it may be result\n            // of the cell span from the previous row.\n            // Issue: https://github.com/ckeditor/ckeditor5/issues/17556\n            (maxPrevColumns === null || trColumns.length === maxPrevColumns) && trColumns.every((e)=>e.is('element', 'th'))) {\n                headingRows++;\n                headRows.push(tr);\n            } else {\n                bodyRows.push(tr);\n                // For other rows check how many column headings this row has.\n                const headingCols = scanRowForHeadingColumns(tr);\n                if (!headingColumns || headingCols < headingColumns) {\n                    headingColumns = headingCols;\n                }\n            }\n            // We use the maximum number of columns to avoid false positives when detecting\n            // multiple rows with single column within `rowspan`. Without it the last row of `rowspan=3`\n            // would be detected as a heading row because it has only one column (identical to the previous row).\n            maxPrevColumns = Math.max(maxPrevColumns || 0, trColumns.length);\n        }\n    }\n    return {\n        headingRows,\n        headingColumns: headingColumns || 0,\n        rows: [\n            ...headRows,\n            ...bodyRows\n        ]\n    };\n}\n/**\n * Scans a `<tr>` element and its children for metadata:\n * - For heading row:\n *     - Adds this row to either the heading or the body rows.\n *     - Updates the number of heading rows.\n * - For body rows:\n *     - Calculates the number of column headings.\n */ function scanRowForHeadingColumns(tr) {\n    let headingColumns = 0;\n    let index = 0;\n    // Filter out empty text nodes from tr children.\n    const children = Array.from(tr.getChildren()).filter((child)=>child.name === 'th' || child.name === 'td');\n    // Count starting adjacent <th> elements of a <tr>.\n    while(index < children.length && children[index].name === 'th'){\n        const th = children[index];\n        // Adjust columns calculation by the number of spanned columns.\n        const colspan = parseInt(th.getAttribute('colspan') || '1');\n        headingColumns = headingColumns + colspan;\n        index++;\n    }\n    return headingColumns;\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/tablewalker\n */ /**\n * The table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableSlot} with proper table cell attributes.\n */ class TableWalker {\n    /**\n\t * The walker's table element.\n\t *\n\t * @internal\n\t */ _table;\n    /**\n\t * A row index from which this iterator will start.\n\t */ _startRow;\n    /**\n\t * A row index at which this iterator will end.\n\t */ _endRow;\n    /**\n\t * If set, the table walker will only output cells from a given column and following ones or cells that overlap them.\n\t */ _startColumn;\n    /**\n\t * If set, the table walker will only output cells up to a given column.\n\t */ _endColumn;\n    /**\n\t * Enables output of spanned cells that are normally not yielded.\n\t */ _includeAllSlots;\n    /**\n\t * Row indexes to skip from the iteration.\n\t */ _skipRows;\n    /**\n\t * The current row index.\n\t *\n\t * @internal\n\t */ _row;\n    /**\n\t * The index of the current row element in the table.\n\t *\n\t * @internal\n\t */ _rowIndex;\n    /**\n\t * The current column index.\n\t *\n\t * @internal\n\t */ _column;\n    /**\n\t * The cell index in a parent row. For spanned cells when {@link #_includeAllSlots} is set to `true`,\n\t * this represents the index of the next table cell.\n\t *\n\t * @internal\n\t */ _cellIndex;\n    /**\n\t * Holds a map of spanned cells in a table.\n\t */ _spannedCells;\n    /**\n\t * Index of the next column where a cell is anchored.\n\t */ _nextCellAtColumn;\n    /**\n\t * Indicates whether the iterator jumped to (or close to) the start row, ignoring rows that don't need to be traversed.\n\t */ _jumpedToStartRow = false;\n    /**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * See {@link module:table/tablewalker~TableSlot} what values are returned by the table walker.\n\t *\n\t * To iterate over a given row:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'A cell at row', tableSlot.row, 'and column', tableSlot.column );\n\t * }\n\t * ```\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *  +----+----+----+----+----+----+\n\t *  | 00      | 02 | 03 | 04 | 05 |\n\t *  |         +----+----+----+----+\n\t *  |         | 12      | 14 | 15 |\n\t *  |         +----+----+----+    +\n\t *  |         | 22           |    |\n\t *  |----+----+----+----+----+    +\n\t *  | 30 | 31 | 32 | 33 | 34 |    |\n\t *  +----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *  'A cell at row 1 and column 2'\n\t *  'A cell at row 1 and column 4'\n\t *  'A cell at row 1 and column 5'\n\t *  'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { row: 1, includeAllSlots: true } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'Slot at', tableSlot.row, 'x', tableSlot.column, ':', tableSlot.isAnchor ? 'is anchored' : 'is spanned' );\n\t * }\n\t * ```\n\t *\n\t * will log in the console for the table from the previous example:\n\t *\n\t *  'Cell at 1 x 0 : is spanned'\n\t *  'Cell at 1 x 1 : is spanned'\n\t *  'Cell at 1 x 2 : is anchored'\n\t *  'Cell at 1 x 3 : is spanned'\n\t *  'Cell at 1 x 4 : is anchored'\n\t *  'Cell at 1 x 5 : is anchored'\n\t *\n\t * **Note**: Option `row` is a shortcut that sets both `startRow` and `endRow` to the same row.\n\t * (Use either `row` or `startRow` and `endRow` but never together). Similarly the `column` option sets both `startColumn`\n\t * and `endColumn` to the same column (Use either `column` or `startColumn` and `endColumn` but never together).\n\t *\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t * @param options.row A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n\t * @param options.startRow A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n\t * @param options.endRow A row index at which this iterator should end. Can't be used together with `row`.\n\t * @param options.column A column index for which this iterator will output cells.\n\t * Can't be used together with `startColumn` and `endColumn`.\n\t * @param options.startColumn A column index from which this iterator should start.\n\t * Can't be used together with `column`. Default value is 0.\n\t * @param options.endColumn A column index at which this iterator should end. Can't be used together with `column`.\n\t * @param options.includeAllSlots Also return values for spanned cells. Default value is \"false\".\n\t */ constructor(table, options = {}){\n        this._table = table;\n        this._startRow = options.row !== undefined ? options.row : options.startRow || 0;\n        this._endRow = options.row !== undefined ? options.row : options.endRow;\n        this._startColumn = options.column !== undefined ? options.column : options.startColumn || 0;\n        this._endColumn = options.column !== undefined ? options.column : options.endColumn;\n        this._includeAllSlots = !!options.includeAllSlots;\n        this._skipRows = new Set();\n        this._row = 0;\n        this._rowIndex = 0;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._spannedCells = new Map();\n        this._nextCellAtColumn = -1;\n    }\n    /**\n\t * Iterable interface.\n\t */ [Symbol.iterator]() {\n        return this;\n    }\n    /**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns The next table walker's value.\n\t */ next() {\n        if (this._canJumpToStartRow()) {\n            this._jumpToNonSpannedRowClosestToStartRow();\n        }\n        const row = this._table.getChild(this._rowIndex);\n        // Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n        if (!row || this._isOverEndRow()) {\n            return {\n                done: true,\n                value: undefined\n            };\n        }\n        // We step over current element when it is not a tableRow instance.\n        if (!row.is('element', 'tableRow')) {\n            this._rowIndex++;\n            return this.next();\n        }\n        if (this._isOverEndColumn()) {\n            return this._advanceToNextRow();\n        }\n        let outValue = null;\n        const spanData = this._getSpanned();\n        if (spanData) {\n            if (this._includeAllSlots && !this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(spanData.cell, spanData.row, spanData.column);\n            }\n        } else {\n            const cell = row.getChild(this._cellIndex);\n            if (!cell) {\n                // If there are no more cells left in row advance to the next row.\n                return this._advanceToNextRow();\n            }\n            const colspan = parseInt(cell.getAttribute('colspan') || '1');\n            const rowspan = parseInt(cell.getAttribute('rowspan') || '1');\n            // Record this cell spans if it's not 1x1 cell.\n            if (colspan > 1 || rowspan > 1) {\n                this._recordSpans(cell, rowspan, colspan);\n            }\n            if (!this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(cell);\n            }\n            this._nextCellAtColumn = this._column + colspan;\n        }\n        // Advance to the next column before returning value.\n        this._column++;\n        if (this._column == this._nextCellAtColumn) {\n            this._cellIndex++;\n        }\n        // The current value will be returned only if current row and column are not skipped.\n        return outValue || this.next();\n    }\n    /**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param row The row index to skip.\n\t */ skipRow(row) {\n        this._skipRows.add(row);\n    }\n    /**\n\t * Advances internal cursor to the next row.\n\t */ _advanceToNextRow() {\n        this._row++;\n        this._rowIndex++;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._nextCellAtColumn = -1;\n        return this.next();\n    }\n    /**\n\t * Checks if the current row is over {@link #_endRow}.\n\t */ _isOverEndRow() {\n        // If #_endRow is defined skip all rows after it.\n        return this._endRow !== undefined && this._row > this._endRow;\n    }\n    /**\n\t * Checks if the current cell is over {@link #_endColumn}\n\t */ _isOverEndColumn() {\n        // If #_endColumn is defined skip all cells after it.\n        return this._endColumn !== undefined && this._column > this._endColumn;\n    }\n    /**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @param cell The table cell to output.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */ _formatOutValue(cell, anchorRow = this._row, anchorColumn = this._column) {\n        return {\n            done: false,\n            value: new TableSlot(this, cell, anchorRow, anchorColumn)\n        };\n    }\n    /**\n\t * Checks if the current slot should be skipped.\n\t */ _shouldSkipSlot() {\n        const rowIsMarkedAsSkipped = this._skipRows.has(this._row);\n        const rowIsBeforeStartRow = this._row < this._startRow;\n        const columnIsBeforeStartColumn = this._column < this._startColumn;\n        const columnIsAfterEndColumn = this._endColumn !== undefined && this._column > this._endColumn;\n        return rowIsMarkedAsSkipped || rowIsBeforeStartRow || columnIsBeforeStartColumn || columnIsAfterEndColumn;\n    }\n    /**\n\t * Returns the cell element that is spanned over the current cell location.\n\t */ _getSpanned() {\n        const rowMap = this._spannedCells.get(this._row);\n        // No spans for given row.\n        if (!rowMap) {\n            return null;\n        }\n        // If spans for given rows has entry for column it means that this location if spanned by other cell.\n        return rowMap.get(this._column) || null;\n    }\n    /**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @param cell A cell that is spanned.\n\t * @param rowspan Cell height.\n\t * @param colspan Cell width.\n\t */ _recordSpans(cell, rowspan, colspan) {\n        const data = {\n            cell,\n            row: this._row,\n            column: this._column\n        };\n        for(let rowToUpdate = this._row; rowToUpdate < this._row + rowspan; rowToUpdate++){\n            for(let columnToUpdate = this._column; columnToUpdate < this._column + colspan; columnToUpdate++){\n                if (rowToUpdate != this._row || columnToUpdate != this._column) {\n                    this._markSpannedCell(rowToUpdate, columnToUpdate, data);\n                }\n            }\n        }\n    }\n    /**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @param row The row index of the cell location.\n\t * @param column The column index of the cell location.\n\t * @param data A spanned cell details (cell element, anchor row and column).\n\t */ _markSpannedCell(row, column, data) {\n        if (!this._spannedCells.has(row)) {\n            this._spannedCells.set(row, new Map());\n        }\n        const rowSpans = this._spannedCells.get(row);\n        rowSpans.set(column, data);\n    }\n    /**\n\t * Checks if part of the table can be skipped.\n\t */ _canJumpToStartRow() {\n        return !!this._startRow && this._startRow > 0 && !this._jumpedToStartRow;\n    }\n    /**\n\t * Sets the current row to `this._startRow` or the first row before it that has the number of cells\n\t * equal to the number of columns in the table.\n\t *\n\t * Example:\n\t * \t+----+----+----+\n\t *  | 00 | 01 | 02 |\n\t *  |----+----+----+\n\t *  | 10      | 12 |\n\t *  |         +----+\n\t *  |         | 22 |\n\t *  |         +----+\n\t *  |         | 32 | <--- Start row\n\t *  +----+----+----+\n\t *  | 40 | 41 | 42 |\n\t *  +----+----+----+\n\t *\n\t * If the 4th row is a `this._startRow`, this method will:\n\t * 1.) Count the number of columns this table has based on the first row (3 columns in this case).\n\t * 2.) Check if the 4th row contains 3 cells. It doesn't, so go to the row before it.\n\t * 3.) Check if the 3rd row contains 3 cells. It doesn't, so go to the row before it.\n\t * 4.) Check if the 2nd row contains 3 cells. It does, so set the current row to that row.\n\t *\n\t * Setting the current row this way is necessary to let the `next()`  method loop over the cells\n\t * spanning multiple rows or columns and update the `this._spannedCells` property.\n\t */ _jumpToNonSpannedRowClosestToStartRow() {\n        const firstRowLength = this._getRowLength(0);\n        for(let i = this._startRow; !this._jumpedToStartRow; i--){\n            if (firstRowLength === this._getRowLength(i)) {\n                this._row = i;\n                this._rowIndex = i;\n                this._jumpedToStartRow = true;\n            }\n        }\n    }\n    /**\n\t * Returns a number of columns in a row taking `colspan` into consideration.\n\t */ _getRowLength(rowIndex) {\n        const row = this._table.getChild(rowIndex);\n        return [\n            ...row.getChildren()\n        ].reduce((cols, row)=>{\n            return cols + parseInt(row.getAttribute('colspan') || '1');\n        }, 0);\n    }\n}\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n */ class TableSlot {\n    /**\n\t * The current table cell.\n\t */ cell;\n    /**\n\t * The row index of a table slot.\n\t */ row;\n    /**\n\t * The column index of a table slot.\n\t */ column;\n    /**\n\t * The row index of a cell anchor slot.\n\t */ cellAnchorRow;\n    /**\n\t * The column index of a cell anchor slot.\n\t */ cellAnchorColumn;\n    /**\n\t * The index of the current cell in the parent row.\n\t */ _cellIndex;\n    /**\n\t * The index of the current row element in the table.\n\t */ _rowIndex;\n    /**\n\t * The table element.\n\t */ _table;\n    /**\n\t * Creates an instance of the table walker value.\n\t *\n\t * @param tableWalker The table walker instance.\n\t * @param cell The current table cell.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */ constructor(tableWalker, cell, anchorRow, anchorColumn){\n        this.cell = cell;\n        this.row = tableWalker._row;\n        this.column = tableWalker._column;\n        this.cellAnchorRow = anchorRow;\n        this.cellAnchorColumn = anchorColumn;\n        this._cellIndex = tableWalker._cellIndex;\n        this._rowIndex = tableWalker._rowIndex;\n        this._table = tableWalker._table;\n    }\n    // @if CK_DEBUG // public get isSpanned(): unknown { return throwMissingGetterError( 'isSpanned' ); }\n    // @if CK_DEBUG // public get colspan(): unknown { return throwMissingGetterError( 'colspan' ); }\n    // @if CK_DEBUG // public get rowspan(): unknown { return throwMissingGetterError( 'rowspan' ); }\n    // @if CK_DEBUG // public get cellIndex(): unknown { return throwMissingGetterError( 'cellIndex' ); }\n    /**\n\t * Whether the cell is anchored in the current slot.\n\t */ get isAnchor() {\n        return this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;\n    }\n    /**\n\t * The width of a cell defined by a `colspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */ get cellWidth() {\n        return parseInt(this.cell.getAttribute('colspan') || '1');\n    }\n    /**\n\t * The height of a cell defined by a `rowspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */ get cellHeight() {\n        return parseInt(this.cell.getAttribute('rowspan') || '1');\n    }\n    /**\n\t * The index of the current row element in the table.\n\t */ get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n\t * Returns the {@link module:engine/model/position~ModelPosition} before the table slot.\n\t */ getPositionBefore() {\n        const model = this._table.root.document.model;\n        return model.createPositionAt(this._table.getChild(this.row), this._cellIndex);\n    }\n}\n /**\n * This `TableSlot`'s getter (property) was removed in CKEditor 5 v20.0.0.\n *\n * Check out the new `TableWalker`'s API in the documentation.\n *\n * @error tableslot-getter-removed\n * @param getterName\n */  // @if CK_DEBUG // function throwMissingGetterError( getterName: string ): void {\n // @if CK_DEBUG //\t\tthrow new CKEditorError( 'tableslot-getter-removed', null, {\n // @if CK_DEBUG //\t\t\tgetterName\n // @if CK_DEBUG //\t\t} );\n // @if CK_DEBUG // }\n\n/**\n * Model table element to view table element conversion helper.\n *\n * @internal\n */ function downcastTable(tableUtils, options) {\n    return (table, { writer })=>{\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const tableElement = writer.createContainerElement('table', null, []);\n        const figureElement = writer.createContainerElement('figure', {\n            class: 'table'\n        }, tableElement);\n        // Table head slot.\n        if (headingRows > 0) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('thead', null, writer.createSlot((element)=>element.is('element', 'tableRow') && element.index < headingRows)));\n        }\n        // Table body slot.\n        if (headingRows < tableUtils.getRows(table)) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('tbody', null, writer.createSlot((element)=>element.is('element', 'tableRow') && element.index >= headingRows)));\n        }\n        // Dynamic slots.\n        for (const { positionOffset, filter } of options.additionalSlots){\n            writer.insert(writer.createPositionAt(tableElement, positionOffset), writer.createSlot(filter));\n        }\n        // Create a slot with items that don't fit into the table.\n        writer.insert(writer.createPositionAt(tableElement, 'after'), writer.createSlot((element)=>{\n            if (element.is('element', 'tableRow')) {\n                return false;\n            }\n            return !options.additionalSlots.some(({ filter })=>filter(element));\n        }));\n        return options.asWidget ? toTableWidget(figureElement, writer) : figureElement;\n    };\n}\n/**\n * Model table row element to view `<tr>` element conversion helper.\n *\n * @internal\n * @returns Element creator.\n */ function downcastRow() {\n    return (tableRow, { writer })=>{\n        return tableRow.isEmpty ? writer.createEmptyElement('tr') : writer.createContainerElement('tr');\n    };\n}\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @internal\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */ function downcastCell(options = {}) {\n    return (tableCell, { writer })=>{\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new TableWalker(table, {\n            row: rowIndex\n        });\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        let result = null;\n        // We need to iterate over a table in order to get proper row & column values from a walker.\n        for (const tableSlot of tableWalker){\n            if (tableSlot.cell == tableCell) {\n                const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n                const cellElementName = isHeading ? 'th' : 'td';\n                result = options.asWidget ? toWidgetEditable(writer.createEditableElement(cellElementName), writer, {\n                    withAriaRole: false\n                }) : writer.createContainerElement(cellElementName);\n                break;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Overrides paragraph inside table cell conversion.\n *\n * This converter:\n * * should be used to override default paragraph conversion.\n * * It will only convert `<paragraph>` placed directly inside `<tableCell>`.\n * * For a single paragraph without attributes it returns `<span>` to simulate data table.\n * * For all other cases it returns `<p>` element.\n *\n * @internal\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */ function convertParagraphInTableCell(options = {}) {\n    return (modelElement, { writer })=>{\n        if (!modelElement.parent.is('element', 'tableCell')) {\n            return null;\n        }\n        if (!isSingleParagraphWithoutAttributes(modelElement)) {\n            return null;\n        }\n        if (options.asWidget) {\n            return writer.createContainerElement('span', {\n                class: 'ck-table-bogus-paragraph'\n            });\n        } else {\n            // Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n            const viewElement = writer.createContainerElement('p');\n            writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n            return viewElement;\n        }\n    };\n}\n/**\n * Checks if given model `<paragraph>` is an only child of a parent (`<tableCell>`) and if it has any attribute set.\n *\n * The paragraph should be converted in the editing view to:\n *\n * * If returned `true` - to a `<span class=\"ck-table-bogus-paragraph\">`\n * * If returned `false` - to a `<p>`\n *\n * @internal\n */ function isSingleParagraphWithoutAttributes(modelElement) {\n    const tableCell = modelElement.parent;\n    const isSingleParagraph = tableCell.childCount == 1;\n    return isSingleParagraph && !hasAnyAttribute(modelElement);\n}\n/**\n * Converts a given {@link module:engine/view/element~ViewElement} to a table widget:\n * * Adds a {@link module:engine/view/element~ViewElement#_setCustomProperty custom property}\n * allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n */ function toTableWidget(viewElement, writer) {\n    writer.setCustomProperty('table', true, viewElement);\n    return toWidget(viewElement, writer, {\n        hasSelectionHandle: true\n    });\n}\n/**\n * Checks if an element has any attributes set.\n */ function hasAnyAttribute(element) {\n    for (const attributeKey of element.getAttributeKeys()){\n        // Ignore selection attributes stored on block elements.\n        if (attributeKey.startsWith('selection:') || attributeKey == 'htmlEmptyBlock') {\n            continue;\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTable', { rows: 20, columns: 5 } );\n * ```\n */ class InsertTableCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        this.isEnabled = isAllowedInParent$1(selection, schema);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n\t * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n\t * @param options.headingRows The number of heading rows. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.rows`} table config.\n\t * @param options.headingColumns The number of heading columns. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.columns`} table config.\n\t * @fires execute\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const defaultRows = editor.config.get('table.defaultHeadings.rows');\n        const defaultColumns = editor.config.get('table.defaultHeadings.columns');\n        if (options.headingRows === undefined && defaultRows) {\n            options.headingRows = defaultRows;\n        }\n        if (options.headingColumns === undefined && defaultColumns) {\n            options.headingColumns = defaultColumns;\n        }\n        model.change((writer)=>{\n            const table = tableUtils.createTable(writer, options);\n            model.insertObject(table, null, null, {\n                findOptimalPosition: 'auto'\n            });\n            writer.setSelection(writer.createPositionAt(table.getNodeByPath([\n                0,\n                0,\n                0\n            ]), 0));\n        });\n    }\n}\n/**\n * Checks if the table is allowed in the parent.\n */ function isAllowedInParent$1(selection, schema) {\n    const positionParent = selection.getFirstPosition().parent;\n    const validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n    return schema.checkChild(validParent, 'table');\n}\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowBelow' );\n * ```\n *\n * To insert a row above the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowAbove' );\n * ```\n */ class InsertRowCommand extends Command {\n    /**\n\t * The order of insertion relative to the row in which the caret is located.\n\t */ order;\n    /**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`. Default value is \"below\"\n\t */ constructor(editor, options = {}){\n        super(editor);\n        this.order = options.order || 'below';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertAbove = this.order === 'above';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const rowIndexes = tableUtils.getRowIndexes(affectedTableCells);\n        const row = insertAbove ? rowIndexes.first : rowIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertRows(table, {\n            at: insertAbove ? row : row + 1,\n            copyStructureFromAbove: !insertAbove\n        });\n    }\n}\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnLeft' );\n * ```\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnRight' );\n * ```\n */ class InsertColumnCommand extends Command {\n    /**\n\t * The order of insertion relative to the column in which the caret is located.\n\t */ order;\n    /**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param editor An editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`. Default value is \"right\".\n\t */ constructor(editor, options = {}){\n        super(editor);\n        this.order = options.order || 'right';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertBefore = this.order === 'left';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const columnIndexes = tableUtils.getColumnIndexes(affectedTableCells);\n        const column = insertBefore ? columnIndexes.first : columnIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertColumns(table, {\n            columns: 1,\n            at: insertBefore ? column : column + 1\n        });\n    }\n}\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n * ```ts\n * editor.execute( 'splitTableCellVertically' );\n * ```\n */ class SplitCellCommand extends Command {\n    /**\n\t * The direction that indicates which cell will be split.\n\t */ direction;\n    /**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */ constructor(editor, options = {}){\n        super(editor);\n        this.direction = options.direction || 'horizontally';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length === 1;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection)[0];\n        const isHorizontal = this.direction === 'horizontally';\n        if (isHorizontal) {\n            tableUtils.splitCellHorizontally(tableCell, 2);\n        } else {\n            tableUtils.splitCellVertically(tableCell, 2);\n        }\n    }\n}\n\n/**\n * Returns a cropped table according to given dimensions.\n\n * To return a cropped table that starts at first row and first column and end in third row and column:\n *\n * ```ts\n * const croppedTable = cropTableToDimensions( table, {\n *   startRow: 1,\n *   endRow: 3,\n *   startColumn: 1,\n *   endColumn: 3\n * }, writer );\n * ```\n *\n * Calling the code above for the table below:\n *\n *        0   1   2   3   4                      0   1   2\n *      ┌───┬───┬───┬───┬───┐\n *   0  │ a │ b │ c │ d │ e │\n *      ├───┴───┤   ├───┴───┤                  ┌───┬───┬───┐\n *   1  │ f     │   │ g     │                  │   │   │ g │  0\n *      ├───┬───┴───┼───┬───┤   will return:   ├───┴───┼───┤\n *   2  │ h │ i     │ j │ k │                  │ i     │ j │  1\n *      ├───┤       ├───┤   │                  │       ├───┤\n *   3  │ l │       │ m │   │                  │       │ m │  2\n *      ├───┼───┬───┤   ├───┤                  └───────┴───┘\n *   4  │ n │ o │ p │   │ q │\n *      └───┴───┴───┴───┴───┘\n *\n * @internal\n */ function cropTableToDimensions(sourceTable, cropDimensions, writer) {\n    const { startRow, startColumn, endRow, endColumn } = cropDimensions;\n    // Initialize the cropped table element.\n    const croppedTable = writer.createElement('table');\n    // Copy table type attribute if present.\n    const sourceTableType = sourceTable.getAttribute('tableType');\n    if (sourceTableType) {\n        writer.setAttribute('tableType', sourceTableType, croppedTable);\n    }\n    // Create empty table with empty rows equal to crop height.\n    const cropHeight = endRow - startRow + 1;\n    for(let i = 0; i < cropHeight; i++){\n        writer.insertElement('tableRow', croppedTable, 'end');\n    }\n    const tableMap = [\n        ...new TableWalker(sourceTable, {\n            startRow,\n            endRow,\n            startColumn,\n            endColumn,\n            includeAllSlots: true\n        })\n    ];\n    // Iterate over source table slots (including empty - spanned - ones).\n    for (const { row: sourceRow, column: sourceColumn, cell: tableCell, isAnchor, cellAnchorRow, cellAnchorColumn } of tableMap){\n        // Row index in cropped table.\n        const rowInCroppedTable = sourceRow - startRow;\n        const row = croppedTable.getChild(rowInCroppedTable);\n        // For empty slots: fill the gap with empty table cell.\n        if (!isAnchor) {\n            // But fill the gap only if the spanning cell is anchored outside cropped area.\n            // In the table from method jsdoc those cells are: \"c\" & \"f\".\n            if (cellAnchorRow < startRow || cellAnchorColumn < startColumn) {\n                createEmptyTableCell(writer, writer.createPositionAt(row, 'end'));\n            }\n        } else {\n            const tableCellCopy = writer.cloneElement(tableCell);\n            writer.append(tableCellCopy, row);\n            // Trim table if it exceeds cropped area.\n            // In the table from method jsdoc those cells are: \"g\" & \"m\".\n            trimTableCellIfNeeded(tableCellCopy, sourceRow, sourceColumn, endRow, endColumn, writer);\n        }\n    }\n    // Adjust heading rows & columns in cropped table if crop selection includes headings parts.\n    addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer);\n    return croppedTable;\n}\n/**\n * Returns slot info of cells that starts above and overlaps a given row.\n *\n * In a table below, passing `overlapRow = 3`\n *\n *     ┌───┬───┬───┬───┬───┐\n *  0  │ a │ b │ c │ d │ e │\n *     │   ├───┼───┼───┼───┤\n *  1  │   │ f │ g │ h │ i │\n *     ├───┤   ├───┼───┤   │\n *  2  │ j │   │ k │ l │   │\n *     │   │   │   ├───┼───┤\n *  3  │   │   │   │ m │ n │  <- overlap row to check\n *     ├───┼───┤   │   ├───│\n *  4  │ o │ p │   │   │ q │\n *     └───┴───┴───┴───┴───┘\n *\n * will return slot info for cells: \"j\", \"f\", \"k\".\n *\n * @internal\n * @param table The table to check.\n * @param overlapRow The index of the row to check.\n * @param startRow row to start analysis. Use it when it is known that the cells above that row will not overlap. Default value is 0.\n */ function getVerticallyOverlappingCells(table, overlapRow, startRow = 0) {\n    const cells = [];\n    const tableWalker = new TableWalker(table, {\n        startRow,\n        endRow: overlapRow - 1\n    });\n    for (const slotInfo of tableWalker){\n        const { row, cellHeight } = slotInfo;\n        const cellEndRow = row + cellHeight - 1;\n        if (row < overlapRow && overlapRow <= cellEndRow) {\n            cells.push(slotInfo);\n        }\n    }\n    return cells;\n}\n/**\n * Splits the table cell horizontally.\n *\n * @internal\n * @returns Created table cell, if any were created.\n */ function splitHorizontally(tableCell, splitRow, writer) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = tableRow.index;\n    const rowspan = parseInt(tableCell.getAttribute('rowspan'));\n    const newRowspan = splitRow - rowIndex;\n    const newCellAttributes = {};\n    const newCellRowSpan = rowspan - newRowspan;\n    if (newCellRowSpan > 1) {\n        newCellAttributes.rowspan = newCellRowSpan;\n    }\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    if (colspan > 1) {\n        newCellAttributes.colspan = colspan;\n    }\n    const startRow = rowIndex;\n    const endRow = startRow + newRowspan;\n    const tableMap = [\n        ...new TableWalker(table, {\n            startRow,\n            endRow,\n            includeAllSlots: true\n        })\n    ];\n    let newCell = null;\n    let columnIndex;\n    for (const tableSlot of tableMap){\n        const { row, column, cell } = tableSlot;\n        if (cell === tableCell && columnIndex === undefined) {\n            columnIndex = column;\n        }\n        if (columnIndex !== undefined && columnIndex === column && row === endRow) {\n            newCell = createEmptyTableCell(writer, tableSlot.getPositionBefore(), newCellAttributes);\n        }\n    }\n    // Update the rowspan attribute after updating table.\n    updateNumericAttribute('rowspan', newRowspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Returns slot info of cells that starts before and overlaps a given column.\n *\n * In a table below, passing `overlapColumn = 3`\n *\n *    0   1   2   3   4\n *  ┌───────┬───────┬───┐\n *  │ a     │ b     │ c │\n *  │───┬───┴───────┼───┤\n *  │ d │ e         │ f │\n *  ├───┼───┬───────┴───┤\n *  │ g │ h │ i         │\n *  ├───┼───┼───┬───────┤\n *  │ j │ k │ l │ m     │\n *  ├───┼───┴───┼───┬───┤\n *  │ n │ o     │ p │ q │\n *  └───┴───────┴───┴───┘\n *                ^\n *                Overlap column to check\n *\n * will return slot info for cells: \"b\", \"e\", \"i\".\n *\n * @internal\n * @param table The table to check.\n * @param overlapColumn The index of the column to check.\n */ function getHorizontallyOverlappingCells(table, overlapColumn) {\n    const cellsToSplit = [];\n    const tableWalker = new TableWalker(table);\n    for (const slotInfo of tableWalker){\n        const { column, cellWidth } = slotInfo;\n        const cellEndColumn = column + cellWidth - 1;\n        if (column < overlapColumn && overlapColumn <= cellEndColumn) {\n            cellsToSplit.push(slotInfo);\n        }\n    }\n    return cellsToSplit;\n}\n/**\n * Splits the table cell vertically.\n *\n * @internal\n * @param columnIndex The table cell column index.\n * @param splitColumn The index of column to split cell on.\n * @returns Created table cell.\n */ function splitVertically(tableCell, columnIndex, splitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan'));\n    const newColspan = splitColumn - columnIndex;\n    const newCellAttributes = {};\n    const newCellColSpan = colspan - newColspan;\n    if (newCellColSpan > 1) {\n        newCellAttributes.colspan = newCellColSpan;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    if (rowspan > 1) {\n        newCellAttributes.rowspan = rowspan;\n    }\n    const newCell = createEmptyTableCell(writer, writer.createPositionAfter(tableCell), newCellAttributes);\n    // Update the colspan attribute after updating table.\n    updateNumericAttribute('colspan', newColspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Adjusts table cell dimensions to not exceed limit row and column.\n *\n * If table cell width (or height) covers a column (or row) that is after a limit column (or row)\n * this method will trim \"colspan\" (or \"rowspan\") attribute so the table cell will fit in a defined limits.\n *\n * @internal\n */ function trimTableCellIfNeeded(tableCell, cellRow, cellColumn, limitRow, limitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const endColumn = cellColumn + colspan - 1;\n    if (endColumn > limitColumn) {\n        const trimmedSpan = limitColumn - cellColumn + 1;\n        updateNumericAttribute('colspan', trimmedSpan, tableCell, writer, 1);\n    }\n    const endRow = cellRow + rowspan - 1;\n    if (endRow > limitRow) {\n        const trimmedSpan = limitRow - cellRow + 1;\n        updateNumericAttribute('rowspan', trimmedSpan, tableCell, writer, 1);\n    }\n}\n/**\n * Sets proper heading attributes to a cropped table.\n */ function addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer) {\n    const headingRows = parseInt(sourceTable.getAttribute('headingRows') || '0');\n    if (headingRows > 0) {\n        const headingRowsInCrop = headingRows - startRow;\n        updateNumericAttribute('headingRows', headingRowsInCrop, croppedTable, writer, 0);\n    }\n    const headingColumns = parseInt(sourceTable.getAttribute('headingColumns') || '0');\n    if (headingColumns > 0) {\n        const headingColumnsInCrop = headingColumns - startColumn;\n        updateNumericAttribute('headingColumns', headingColumnsInCrop, croppedTable, writer, 0);\n    }\n}\n/**\n * Removes columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+----+----+----+\n *     | 00 | 01      | 03 | 04      | 06 |\n *     +----+----+----+----+         +----+\n *     | 10 | 11      | 13 |         | 16 |\n *     +----+----+----+----+----+----+----+\n *     | 20 | 21      | 23 | 24      | 26 |\n *     +----+----+----+----+----+----+----+\n *                  ^--- empty ---^\n *\n * Will remove columns 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a column from a table use {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`}.\n *\n * @internal\n * @returns True if removed some columns.\n */ function removeEmptyColumns(table, tableUtils) {\n    const width = tableUtils.getColumns(table);\n    const columnsMap = new Array(width).fill(0);\n    for (const { column } of new TableWalker(table)){\n        columnsMap[column]++;\n    }\n    const emptyColumns = columnsMap.reduce((result, cellsCount, column)=>{\n        return cellsCount ? result : [\n            ...result,\n            column\n        ];\n    }, []);\n    if (emptyColumns.length > 0) {\n        // Remove only last empty column because it will recurrently trigger removing empty rows.\n        const emptyColumn = emptyColumns[emptyColumns.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty column: ${ emptyColumn }.` );\n        tableUtils.removeColumns(table, {\n            at: emptyColumn\n        });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+\n *     | 00 | 01 | 02 |\n *     +----+----+----+\n *     | 10 | 11 | 12 |\n *     +    +    +    +\n *     |    |    |    | <-- empty\n *     +----+----+----+\n *     | 30 | 31 | 32 |\n *     +----+----+----+\n *     | 40      | 42 |\n *     +         +    +\n *     |         |    | <-- empty\n *     +----+----+----+\n *     | 60 | 61 | 62 |\n *     +----+----+----+\n *\n * Will remove rows 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a row from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`}.\n *\n * @internal\n * @returns True if removed some rows.\n */ function removeEmptyRows(table, tableUtils) {\n    const emptyRows = [];\n    const tableRowCount = tableUtils.getRows(table);\n    for(let rowIndex = 0; rowIndex < tableRowCount; rowIndex++){\n        const tableRow = table.getChild(rowIndex);\n        if (tableRow.isEmpty) {\n            emptyRows.push(rowIndex);\n        }\n    }\n    if (emptyRows.length > 0) {\n        // Remove only last empty row because it will recurrently trigger removing empty columns.\n        const emptyRow = emptyRows[emptyRows.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty row: ${ emptyRow }.` );\n        tableUtils.removeRows(table, {\n            at: emptyRow\n        });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows and columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+\n *     | 00      | 02      |\n *     +----+----+         +\n *     | 10      |         |\n *     +----+----+----+----+\n *     | 20      | 22 | 23 |\n *     +         +    +    +\n *     |         |    |    | <-- empty row\n *     +----+----+----+----+\n *             ^--- empty column\n *\n * Will remove row 3 and column 1.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a rows from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`} and\n * {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`} to remove a column.\n *\n * @internal\n */ function removeEmptyRowsColumns(table, tableUtils) {\n    const removedColumns = removeEmptyColumns(table, tableUtils);\n    // If there was some columns removed then cleaning empty rows was already triggered.\n    if (!removedColumns) {\n        removeEmptyRows(table, tableUtils);\n    }\n}\n/**\n * Returns adjusted last row index if selection covers part of a row with empty slots (spanned by other cells).\n * The `dimensions.lastRow` is equal to last row index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *        +---+---+---+---+\n *      0 | a | b | c | d |\n *        +   +   +---+---+\n *      1 |   | e | f | g |\n *        +   +---+   +---+\n *      2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n *        +   +   +   +   +    so we need to return 3, not 2\n *      3 |   |   |   |   |\n *        +---+---+---+---+\n *\n * @internal\n * @returns Adjusted last row index.\n */ function adjustLastRowIndex(table, dimensions) {\n    const lastRowMap = Array.from(new TableWalker(table, {\n        startColumn: dimensions.firstColumn,\n        endColumn: dimensions.lastColumn,\n        row: dimensions.lastRow\n    }));\n    const everyCellHasSingleRowspan = lastRowMap.every(({ cellHeight })=>cellHeight === 1);\n    // It is a \"flat\" row, so the last row index is OK.\n    if (everyCellHasSingleRowspan) {\n        return dimensions.lastRow;\n    }\n    // Otherwise get any cell's rowspan and adjust the last row index.\n    const rowspanAdjustment = lastRowMap[0].cellHeight - 1;\n    return dimensions.lastRow + rowspanAdjustment;\n}\n/**\n * Returns adjusted last column index if selection covers part of a column with empty slots (spanned by other cells).\n * The `dimensions.lastColumn` is equal to last column index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *       0   1   2   3\n *     +---+---+---+---+\n *     | a             |\n *     +---+---+---+---+\n *     | b | c | d     |\n *     +---+---+---+---+\n *     | e     | f     |\n *     +---+---+---+---+\n *     | g | h         |\n *     +---+---+---+---+\n *               ^\n *              last column, each cell has colspan = 2, so we need to return 3, not 2\n *\n * @internal\n * @returns Adjusted last column index.\n */ function adjustLastColumnIndex(table, dimensions) {\n    const lastColumnMap = Array.from(new TableWalker(table, {\n        startRow: dimensions.firstRow,\n        endRow: dimensions.lastRow,\n        column: dimensions.lastColumn\n    }));\n    const everyCellHasSingleColspan = lastColumnMap.every(({ cellWidth })=>cellWidth === 1);\n    // It is a \"flat\" column, so the last column index is OK.\n    if (everyCellHasSingleColspan) {\n        return dimensions.lastColumn;\n    }\n    // Otherwise get any cell's colspan and adjust the last column index.\n    const colspanAdjustment = lastColumnMap[0].cellWidth - 1;\n    return dimensions.lastColumn + colspanAdjustment;\n}\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n * ```ts\n * editor.execute( 'mergeTableCellRight' );\n * ```\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n */ class MergeCellCommand extends Command {\n    /**\n\t * The direction that indicates which cell will be merged with the currently selected one.\n\t */ direction;\n    /**\n\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t */ isHorizontal;\n    /**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */ constructor(editor, options){\n        super(editor);\n        this.direction = options.direction;\n        this.isHorizontal = this.direction == 'right' || this.direction == 'left';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const cellToMerge = this._getMergeableCell();\n        this.value = cellToMerge;\n        this.isEnabled = !!cellToMerge;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        const cellToMerge = this.value;\n        const direction = this.direction;\n        model.change((writer)=>{\n            const isMergeNext = direction == 'right' || direction == 'down';\n            // The merge mechanism is always the same so sort cells to be merged.\n            const cellToExpand = isMergeNext ? tableCell : cellToMerge;\n            const cellToRemove = isMergeNext ? cellToMerge : tableCell;\n            // Cache the parent of cell to remove for later check.\n            const removedTableCellRow = cellToRemove.parent;\n            mergeTableCells$1(cellToRemove, cellToExpand, writer);\n            const spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n            const cellSpan = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n            const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n            // Update table cell span attribute and merge set selection on merged contents.\n            writer.setAttribute(spanAttribute, cellSpan + cellToMergeSpan, cellToExpand);\n            writer.setSelection(writer.createRangeIn(cellToExpand));\n            const tableUtils = this.editor.plugins.get('TableUtils');\n            const table = removedTableCellRow.findAncestor('table');\n            // Remove empty rows and columns after merging.\n            removeEmptyRowsColumns(table, tableUtils);\n        });\n    }\n    /**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t */ _getMergeableCell() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        if (!tableCell) {\n            return;\n        }\n        // First get the cell on proper direction.\n        const cellToMerge = this.isHorizontal ? getHorizontalCell(tableCell, this.direction, tableUtils) : getVerticalCell(tableCell, this.direction, tableUtils);\n        if (!cellToMerge) {\n            return;\n        }\n        // If found check if the span perpendicular to merge direction is equal on both cells.\n        const spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n        const span = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n        const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n        if (cellToMergeSpan === span) {\n            return cellToMerge;\n        }\n    }\n}\n/**\n * Returns the cell that can be merged horizontally.\n */ function getHorizontalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n    const hasHeadingColumns = (table.getAttribute('headingColumns') || 0) > 0;\n    if (!horizontalCell) {\n        return;\n    }\n    // Sort cells:\n    const cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n    const cellOnRight = direction == 'right' ? horizontalCell : tableCell;\n    // Get their column indexes:\n    const { column: leftCellColumn } = tableUtils.getCellLocation(cellOnLeft);\n    const { column: rightCellColumn } = tableUtils.getCellLocation(cellOnRight);\n    const leftCellSpan = parseInt(cellOnLeft.getAttribute('colspan') || '1');\n    const isCellOnLeftInHeadingColumn = isHeadingColumnCell(tableUtils, cellOnLeft);\n    const isCellOnRightInHeadingColumn = isHeadingColumnCell(tableUtils, cellOnRight);\n    // We cannot merge heading columns cells with regular cells.\n    if (hasHeadingColumns && isCellOnLeftInHeadingColumn != isCellOnRightInHeadingColumn) {\n        return;\n    }\n    // The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n    const cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n    // If the right cell's column index is different it means that there are rowspanned cells between them.\n    return cellsAreTouching ? horizontalCell : undefined;\n}\n/**\n * Returns the cell that can be merged vertically.\n */ function getVerticalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = table.getChildIndex(tableRow);\n    // Don't search for mergeable cell if direction points out of the table.\n    if (direction == 'down' && rowIndex === tableUtils.getRows(table) - 1 || direction == 'up' && rowIndex === 0) {\n        return null;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const headingRows = table.getAttribute('headingRows') || 0;\n    const isMergeWithBodyCell = direction == 'down' && rowIndex + rowspan === headingRows;\n    const isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n    // Don't search for mergeable cell if direction points out of the current table section.\n    if (headingRows && (isMergeWithBodyCell || isMergeWithHeadCell)) {\n        return null;\n    }\n    const currentCellRowSpan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n    const tableMap = [\n        ...new TableWalker(table, {\n            endRow: rowOfCellToMerge\n        })\n    ];\n    const currentCellData = tableMap.find((value)=>value.cell === tableCell);\n    const mergeColumn = currentCellData.column;\n    const cellToMergeData = tableMap.find(({ row, cellHeight, column })=>{\n        if (column !== mergeColumn) {\n            return false;\n        }\n        if (direction == 'down') {\n            // If merging a cell below the mergeRow is already calculated.\n            return row === rowOfCellToMerge;\n        } else {\n            // If merging a cell above calculate if it spans to mergeRow.\n            return rowOfCellToMerge === row + cellHeight;\n        }\n    });\n    return cellToMergeData && cellToMergeData.cell ? cellToMergeData.cell : null;\n}\n/**\n * Merges two table cells. It will ensure that after merging cells with an empty paragraph, the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have the contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */ function mergeTableCells$1(cellToRemove, cellToExpand, writer) {\n    if (!isEmpty$2(cellToRemove)) {\n        if (isEmpty$2(cellToExpand)) {\n            writer.remove(writer.createRangeIn(cellToExpand));\n        }\n        writer.move(writer.createRangeIn(cellToRemove), writer.createPositionAt(cellToExpand, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellToRemove);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */ function isEmpty$2(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableRow' );\n * ```\n */ class RemoveRowCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableRowCount = tableUtils.getRows(table);\n            const lastRowIndex = tableRowCount - 1;\n            const selectedRowIndexes = tableUtils.getRowIndexes(selectedCells);\n            const areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n            // Disallow selecting whole table -> delete whole table should be used instead.\n            this.isEnabled = !areAllRowsSelected;\n        } else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const removedRowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const firstCell = referenceCells[0];\n        const table = firstCell.findAncestor('table');\n        const columnIndexToFocus = tableUtils.getCellLocation(firstCell).column;\n        model.change((writer)=>{\n            const rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n            tableUtils.removeRows(table, {\n                at: removedRowIndexes.first,\n                rows: rowsToRemove\n            });\n            const cellToFocus = getCellToFocus$1(table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows(table));\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n * - If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n * - If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n */ function getCellToFocus$1(table, removedRowIndex, columnToFocus, tableRowCount) {\n    // Don't go beyond last row's index.\n    const row = table.getChild(Math.min(removedRowIndex, tableRowCount - 1));\n    // Default to first table cell.\n    let cellToFocus = row.getChild(0);\n    let column = 0;\n    for (const tableCell of row.getChildren()){\n        if (column > columnToFocus) {\n            return cellToFocus;\n        }\n        cellToFocus = tableCell;\n        column += parseInt(tableCell.getAttribute('colspan') || '1');\n    }\n    return cellToFocus;\n}\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableColumn' );\n * ```\n */ class RemoveColumnCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableColumnCount = tableUtils.getColumns(table);\n            const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n            this.isEnabled = last - first < tableColumnCount - 1;\n        } else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const [firstCell, lastCell] = getBoundaryCells(this.editor.model.document.selection, tableUtils);\n        const table = firstCell.parent.parent;\n        // Cache the table before removing or updating colspans.\n        const tableMap = [\n            ...new TableWalker(table)\n        ];\n        // Store column indexes of removed columns.\n        const removedColumnIndexes = {\n            first: tableMap.find((value)=>value.cell === firstCell).column,\n            last: tableMap.find((value)=>value.cell === lastCell).column\n        };\n        const cellToFocus = getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes);\n        this.editor.model.change((writer)=>{\n            const columnsToRemove = removedColumnIndexes.last - removedColumnIndexes.first + 1;\n            tableUtils.removeColumns(table, {\n                at: removedColumnIndexes.first,\n                columns: columnsToRemove\n            });\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a proper table cell to focus after removing a column.\n * - selection is on last table cell it will return previous cell.\n */ function getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes) {\n    const colspan = parseInt(lastCell.getAttribute('colspan') || '1');\n    // If the table cell is spanned over 2+ columns - it will be truncated so the selection should\n    // stay in that cell.\n    if (colspan > 1) {\n        return lastCell;\n    } else if (firstCell.previousSibling || lastCell.nextSibling) {\n        return lastCell.nextSibling || firstCell.previousSibling;\n    } else {\n        // Look for any cell in a column that precedes the first removed column.\n        if (removedColumnIndexes.first) {\n            return tableMap.reverse().find(({ column })=>{\n                return column < removedColumnIndexes.first;\n            }).cell;\n        } else {\n            return tableMap.reverse().find(({ column })=>{\n                return column > removedColumnIndexes.last;\n            }).cell;\n        }\n    }\n}\n/**\n * Returns helper object returning the first and the last cell contained in given selection, based on DOM order.\n */ function getBoundaryCells(selection, tableUtils) {\n    const referenceCells = tableUtils.getSelectionAffectedTableCells(selection);\n    const firstCell = referenceCells[0];\n    const lastCell = referenceCells.pop();\n    const returnValue = [\n        firstCell,\n        lastCell\n    ];\n    return firstCell.isBefore(lastCell) ? returnValue : returnValue.reverse();\n}\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n * ```ts\n * editor.execute( 'setTableRowHeader' );\n * ```\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n */ class SetHeaderRowCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        if (selectedCells.length === 0) {\n            this.isEnabled = false;\n            this.value = false;\n            return;\n        }\n        const table = selectedCells[0].findAncestor('table');\n        this.isEnabled = model.schema.checkAttribute(table, 'headingRows');\n        this.value = selectedCells.every((cell)=>this._isInHeading(cell, cell.parent.parent));\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header rows according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */ execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getRowIndexes(selectedCells);\n        const headingRowsToSet = this.value ? first : last + 1;\n        const currentHeadingRows = table.getAttribute('headingRows') || 0;\n        model.change((writer)=>{\n            if (headingRowsToSet) {\n                // Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n                // Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n                const startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n                const overlappingCells = getVerticallyOverlappingCells(table, headingRowsToSet, startRow);\n                for (const { cell } of overlappingCells){\n                    splitHorizontally(cell, headingRowsToSet, writer);\n                }\n            }\n            updateNumericAttribute('headingRows', headingRowsToSet, table, writer, 0);\n        });\n    }\n    /**\n\t * Checks if a table cell is in the heading section.\n\t */ _isInHeading(tableCell, table) {\n        const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n        return !!headingRows && tableCell.parent.index < headingRows;\n    }\n}\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n * ```ts\n * editor.execute( 'setTableColumnHeader' );\n * ```\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n */ class SetHeaderColumnCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        if (selectedCells.length === 0) {\n            this.isEnabled = false;\n            this.value = false;\n            return;\n        }\n        const table = selectedCells[0].findAncestor('table');\n        this.isEnabled = model.schema.checkAttribute(table, 'headingColumns');\n        this.value = selectedCells.every((cell)=>isHeadingColumnCell(tableUtils, cell));\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header columns according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */ execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n        const headingColumnsToSet = this.value ? first : last + 1;\n        model.change((writer)=>{\n            if (headingColumnsToSet) {\n                // Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n                // Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n                const overlappingCells = getHorizontallyOverlappingCells(table, headingColumnsToSet);\n                for (const { cell, column } of overlappingCells){\n                    splitVertically(cell, column, headingColumnsToSet, writer);\n                }\n            }\n            updateNumericAttribute('headingColumns', headingColumnsToSet, table, writer, 0);\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/tablecolumnresize/constants\n */ /**\n * The minimum column width given as a percentage value. Used in situations when the table is not yet rendered, so it is impossible to\n * calculate how many percentage of the table width would be {@link ~COLUMN_MIN_WIDTH_IN_PIXELS minimum column width in pixels}.\n *\n * @internal\n */ const COLUMN_MIN_WIDTH_AS_PERCENTAGE = 5;\n/**\n * The minimum column width in pixels when the maximum table width is known.\n * This value is an equivalent of `10%` of the default editor width (600px).\n *\n * @internal\n */ const COLUMN_MIN_WIDTH_IN_PIXELS = 40;\n/**\n * Determines how many digits after the decimal point are used to store the column width as a percentage value.\n *\n * @internal\n */ const COLUMN_WIDTH_PRECISION = 2;\n/**\n * The distance in pixels that the mouse has to move to start resizing the column.\n *\n * @internal\n */ const COLUMN_RESIZE_DISTANCE_THRESHOLD = 3;\n\n/**\n * Returns all the inserted or changed table model elements in a given change set. Only the tables\n * with 'columnsWidth' attribute are taken into account. The returned set may be empty.\n *\n * Most notably if an entire table is removed it will not be included in returned set.\n *\n * @internal\n * @param model The model to collect the affected elements from.\n * @returns A set of table model elements.\n */ function getChangedResizedTables(model) {\n    const affectedTables = new Set();\n    for (const change of model.document.differ.getChanges()){\n        let referencePosition = null;\n        // Checks if the particular change from the differ is:\n        // - an insertion or removal of a table, a row or a cell,\n        // - an attribute change on a table, a row or a cell.\n        switch(change.type){\n            case 'insert':\n                referencePosition = [\n                    'table',\n                    'tableRow',\n                    'tableCell'\n                ].includes(change.name) ? change.position : null;\n                break;\n            case 'remove':\n                // If the whole table is removed, there's no need to update its column widths (#12201).\n                referencePosition = [\n                    'tableRow',\n                    'tableCell'\n                ].includes(change.name) ? change.position : null;\n                break;\n            case 'attribute':\n                if (change.range.start.nodeAfter) {\n                    referencePosition = [\n                        'table',\n                        'tableRow',\n                        'tableCell'\n                    ].includes(change.range.start.nodeAfter.name) ? change.range.start : null;\n                }\n                break;\n        }\n        if (!referencePosition) {\n            continue;\n        }\n        const tableNode = referencePosition.nodeAfter && referencePosition.nodeAfter.is('element', 'table') ? referencePosition.nodeAfter : referencePosition.findAncestor('table');\n        // We iterate over the whole table looking for the nested tables that are also affected.\n        for (const node of model.createRangeOn(tableNode).getItems()){\n            if (!node.is('element', 'table')) {\n                continue;\n            }\n            if (!getColumnGroupElement(node)) {\n                continue;\n            }\n            affectedTables.add(node);\n        }\n    }\n    return affectedTables;\n}\n/**\n * Calculates the percentage of the minimum column width given in pixels for a given table.\n *\n * @internal\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The minimal column width in percentage.\n */ function getColumnMinWidthAsPercentage(modelTable, editor) {\n    return COLUMN_MIN_WIDTH_IN_PIXELS * 100 / getTableWidthInPixels(modelTable, editor);\n}\n/**\n * Calculates the table width in pixels.\n *\n * @internal\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The width of the table in pixels.\n */ function getTableWidthInPixels(modelTable, editor) {\n    // It is possible for a table to not have a <tbody> element - see #11878.\n    const referenceElement = getChildrenViewElement(modelTable, 'tbody', editor) || getChildrenViewElement(modelTable, 'thead', editor);\n    const domReferenceElement = editor.editing.view.domConverter.mapViewToDom(referenceElement);\n    return getElementWidthInPixels(domReferenceElement);\n}\n/**\n * Returns the a view element with a given name that is nested directly in a `<table>` element\n * related to a given `modelTable`.\n *\n * @param elementName Name of a view to be looked for, e.g. `'colgroup`', `'thead`'.\n * @returns Matched view or `undefined` otherwise.\n */ function getChildrenViewElement(modelTable, elementName, editor) {\n    const viewFigure = editor.editing.mapper.toViewElement(modelTable);\n    const viewTable = [\n        ...viewFigure.getChildren()\n    ].find((node)=>node.is('element', 'table'));\n    return [\n        ...viewTable.getChildren()\n    ].find((node)=>node.is('element', elementName));\n}\n/**\n * Returns the computed width (in pixels) of the DOM element without padding and borders.\n *\n * @internal\n * @param domElement A DOM element.\n * @returns The width of the DOM element in pixels.\n */ function getElementWidthInPixels(domElement) {\n    const styles = global.window.getComputedStyle(domElement);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseFloat(styles.width) - parseFloat(styles.paddingLeft) - parseFloat(styles.paddingRight) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\n    } else {\n        return parseFloat(styles.width);\n    }\n}\n/**\n * Returns the column indexes on the left and right edges of a cell. They differ if the cell spans\n * across multiple columns.\n *\n * @internal\n * @param cell A table cell model element.\n * @param tableUtils The Table Utils plugin instance.\n * @returns An object containing the indexes of the left and right edges of the cell.\n */ function getColumnEdgesIndexes(cell, tableUtils) {\n    const cellColumnIndex = tableUtils.getCellLocation(cell).column;\n    const cellWidth = cell.getAttribute('colspan') || 1;\n    return {\n        leftEdge: cellColumnIndex,\n        rightEdge: cellColumnIndex + cellWidth - 1\n    };\n}\n/**\n * Rounds the provided value to a fixed-point number with defined number of digits after the decimal point.\n *\n * @internal\n * @param value A number to be rounded.\n * @returns The rounded number.\n */ function toPrecision(value) {\n    const multiplier = Math.pow(10, COLUMN_WIDTH_PRECISION);\n    const number = typeof value === 'number' ? value : parseFloat(value);\n    return Math.round(number * multiplier) / multiplier;\n}\n/**\n * Clamps the number within the inclusive lower (min) and upper (max) bounds. Returned number is rounded using the\n * {@link ~toPrecision `toPrecision()`} function.\n *\n * @internal\n * @param number A number to be clamped.\n * @param min A lower bound.\n * @param max An upper bound.\n * @returns The clamped number.\n */ function clamp(number, min, max) {\n    if (number <= min) {\n        return toPrecision(min);\n    }\n    if (number >= max) {\n        return toPrecision(max);\n    }\n    return toPrecision(number);\n}\n/**\n * Creates an array with defined length and fills all elements with defined value.\n *\n * @internal\n * @param length The length of the array.\n * @param value The value to fill the array with.\n * @returns An array with defined length and filled with defined value.\n */ function createFilledArray(length, value) {\n    return Array(length).fill(value);\n}\n/**\n * Sums all array values that can be parsed to a float.\n *\n * @internal\n * @param array An array of numbers.\n * @returns The sum of all array values.\n */ function sumArray(array) {\n    return array.map((value)=>typeof value === 'number' ? value : parseFloat(value)).filter((value)=>!Number.isNaN(value)).reduce((result, item)=>result + item, 0);\n}\n/**\n * Makes sure that the sum of the widths from all columns is 100%. If the sum of all the widths is not equal 100%, all the widths are\n * changed proportionally so that they all sum back to 100%. If there are columns without specified width, the amount remaining\n * after assigning the known widths will be distributed equally between them.\n *\n * @internal\n * @param columnWidths An array of column widths.\n * @returns An array of column widths guaranteed to sum up to 100%.\n */ function normalizeColumnWidths(columnWidths) {\n    const widths = columnWidths.map((width)=>{\n        if (width === 'auto' || width === undefined) {\n            return 'auto';\n        }\n        return parseFloat(width.replace('%', ''));\n    });\n    let normalizedWidths = calculateMissingColumnWidths(widths);\n    const totalWidth = sumArray(normalizedWidths);\n    if (totalWidth !== 100) {\n        normalizedWidths = normalizedWidths// Adjust all the columns proportionally.\n        .map((width)=>toPrecision(width * 100 / totalWidth))// Due to rounding of numbers it may happen that the sum of the widths of all columns will not be exactly 100%.\n        // Therefore, the width of the last column is explicitly adjusted (narrowed or expanded), since all the columns\n        // have been proportionally changed already.\n        .map((columnWidth, columnIndex, width)=>{\n            const isLastColumn = columnIndex === width.length - 1;\n            if (!isLastColumn) {\n                return columnWidth;\n            }\n            const totalWidth = sumArray(width);\n            return toPrecision(columnWidth + 100 - totalWidth);\n        });\n    }\n    return normalizedWidths.map((width)=>width + '%');\n}\n/**\n * Initializes the column widths by parsing the attribute value and calculating the uninitialized column widths. The special value 'auto'\n * indicates that width for the column must be calculated. The width of such uninitialized column is calculated as follows:\n * - If there is enough free space in the table for all uninitialized columns to have at least the minimum allowed width for all of them,\n *   then set this width equally for all uninitialized columns.\n * - Otherwise, just set the minimum allowed width for all uninitialized columns. The sum of all column widths will be greater than 100%,\n *   but then it will be adjusted proportionally to 100% in {@link #normalizeColumnWidths `normalizeColumnWidths()`}.\n *\n * @param columnWidths An array of column widths.\n * @returns An array with 'auto' values replaced with calculated widths.\n */ function calculateMissingColumnWidths(columnWidths) {\n    const numberOfUninitializedColumns = columnWidths.filter((columnWidth)=>columnWidth === 'auto').length;\n    if (numberOfUninitializedColumns === 0) {\n        return columnWidths.map((columnWidth)=>toPrecision(columnWidth));\n    }\n    const totalWidthOfInitializedColumns = sumArray(columnWidths);\n    const widthForUninitializedColumn = Math.max((100 - totalWidthOfInitializedColumns) / numberOfUninitializedColumns, COLUMN_MIN_WIDTH_AS_PERCENTAGE);\n    return columnWidths.map((columnWidth)=>columnWidth === 'auto' ? widthForUninitializedColumn : columnWidth).map((columnWidth)=>toPrecision(columnWidth));\n}\n/**\n * Calculates the total horizontal space taken by the cell. That includes:\n *  * width,\n *  * left and red padding,\n *  * border width.\n *\n * @internal\n * @param domCell A DOM cell element.\n * @returns Width in pixels without `px` at the end.\n */ function getDomCellOuterWidth(domCell) {\n    const styles = global.window.getComputedStyle(domCell);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseInt(styles.width);\n    } else {\n        return parseFloat(styles.width) + parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight) + parseFloat(styles.borderWidth);\n    }\n}\n/**\n * Updates column elements to match columns widths.\n *\n * @internal\n * @param columns\n * @param tableColumnGroup\n * @param normalizedWidths\n * @param writer\n */ function updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer) {\n    for(let i = 0; i < Math.max(normalizedWidths.length, columns.length); i++){\n        const column = columns[i];\n        const columnWidth = normalizedWidths[i];\n        if (!columnWidth) {\n            // Number of `<tableColumn>` elements exceeds actual number of columns.\n            writer.remove(column);\n        } else if (!column) {\n            // There is fewer `<tableColumn>` elements than actual columns.\n            writer.appendElement('tableColumn', {\n                columnWidth\n            }, tableColumnGroup);\n        } else {\n            // Update column width.\n            writer.setAttribute('columnWidth', columnWidth, column);\n        }\n    }\n}\n/**\n * Returns a 'tableColumnGroup' element from the 'table'.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns A 'tableColumnGroup' element.\n */ function getColumnGroupElement(element) {\n    if (element.is('element', 'tableColumnGroup')) {\n        return element;\n    }\n    const children = element.getChildren();\n    return Array.from(children).find((element)=>element.is('element', 'tableColumnGroup'));\n}\n/**\n * Returns an array of 'tableColumn' elements. It may be empty if there's no `tableColumnGroup` element.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of 'tableColumn' elements.\n */ function getTableColumnElements(element) {\n    const columnGroupElement = getColumnGroupElement(element);\n    if (!columnGroupElement) {\n        return [];\n    }\n    return Array.from(columnGroupElement.getChildren());\n}\n/**\n * Returns an array of table column widths.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of table column widths.\n */ function getTableColumnsWidths(element) {\n    return getTableColumnElements(element).map((column)=>column.getAttribute('columnWidth'));\n}\n/**\n * Translates the `colSpan` model attribute into additional column widths and returns the resulting array.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @param writer A writer instance.\n * @returns An array of table column widths.\n */ function translateColSpanAttribute(element, writer) {\n    const tableColumnElements = getTableColumnElements(element);\n    return tableColumnElements.reduce((acc, element)=>{\n        const columnWidth = element.getAttribute('columnWidth');\n        const colSpan = element.getAttribute('colSpan');\n        if (!colSpan) {\n            acc.push(columnWidth);\n            return acc;\n        }\n        // Translate the `colSpan` model attribute on to the proper number of column widths\n        // and remove it from the element.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        for(let i = 0; i < colSpan; i++){\n            acc.push(columnWidth);\n        }\n        writer.removeAttribute('colSpan', element);\n        return acc;\n    }, []);\n}\n\n/**\n * The table utilities plugin.\n */ class TableUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this.decorate('insertColumns');\n        this.decorate('insertRows');\n    }\n    /**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance, in the table below:\n\t *\n\t *      0   1   2   3\n\t *    +---+---+---+---+\n\t *  0 | a     | b | c |\n\t *    +       +   +---+\n\t *  1 |       |   | d |\n\t *    +---+---+   +---+\n\t *  2 | e     |   | f |\n\t *    +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t * ```ts\n\t * const cellA = table.getNodeByPath( [ 0, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t * // will return { row: 0, column: 0 }\n\t *\n\t * const cellD = table.getNodeByPath( [ 1, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t * // will return { row: 1, column: 3 }\n\t * ```\n\t *\n\t * @returns Returns a `{row, column}` object.\n\t */ getCellLocation(tableCell) {\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new TableWalker(table, {\n            row: rowIndex\n        });\n        for (const { cell, row, column } of tableWalker){\n            if (cell === tableCell) {\n                return {\n                    row,\n                    column\n                };\n            }\n        }\n        // Should be unreachable code.\n        /* istanbul ignore next -- @preserve */ return undefined;\n    }\n    /**\n\t * Creates an empty table with a proper structure. The table needs to be inserted into the model,\n\t * for example, by using the {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t * ```ts\n\t * model.change( ( writer ) => {\n\t *   // Create a table of 2 rows and 7 columns:\n\t *   const table = tableUtils.createTable( writer, { rows: 2, columns: 7 } );\n\t *\n\t *   // Insert a table to the model at the best position taking the current selection:\n\t *   model.insertContent( table );\n\t * }\n\t * ```\n\t *\n\t * @param writer The model writer.\n\t * @param options.rows The number of rows to create. Default value is 2.\n\t * @param options.columns The number of columns to create. Default value is 2.\n\t * @param options.headingRows The number of heading rows. Default value is 0.\n\t * @param options.headingColumns The number of heading columns. Default value is 0.\n\t * @returns The created table element.\n\t */ createTable(writer, options) {\n        const table = writer.createElement('table');\n        const rows = options.rows || 2;\n        const columns = options.columns || 2;\n        createEmptyRows(writer, table, 0, rows, columns);\n        if (options.headingRows) {\n            updateNumericAttribute('headingRows', Math.min(options.headingRows, rows), table, writer, 0);\n        }\n        if (options.headingColumns) {\n            updateNumericAttribute('headingColumns', Math.min(options.headingColumns, columns), table, writer, 0);\n        }\n        return table;\n    }\n    /**\n\t * Inserts rows into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  row index\n\t *    0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *      | a | b | c |       `rows` = 2,    | a | b | c |\n\t *    1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *      |   | d | e |                      |   |   |   |\n\t *    2 +   +---+---+       will give:     +   +---+---+ 2\n\t *      |   | f | g |                      |   |   |   |\n\t *    3 +---+---+---+                      +   +---+---+ 3\n\t *                                         |   | d | e |\n\t *                                         +   +---+---+ 4\n\t *                                         +   + f | g |\n\t *                                         +---+---+---+ 5\n\t *\n\t * @param table The table model element where the rows will be inserted.\n\t * @param options.at The row index at which the rows will be inserted.  Default value is 0.\n\t * @param options.rows The number of rows to insert.  Default value is 1.\n\t * @param options.copyStructureFromAbove The flag for copying row structure. Note that\n\t * the row structure will not be copied if this option is not provided.\n\t */ insertRows(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const rowsToInsert = options.rows || 1;\n        const isCopyStructure = options.copyStructureFromAbove !== undefined;\n        const copyStructureFrom = options.copyStructureFromAbove ? insertAt - 1 : insertAt;\n        const rows = this.getRows(table);\n        const columns = this.getColumns(table);\n        if (insertAt > rows) {\n            /**\n\t\t\t * The `options.at` points at a row position that does not exist.\n\t\t\t *\n\t\t\t * @error tableutils-insertrows-insert-out-of-range\n\t\t\t */ throw new CKEditorError('tableutils-insertrows-insert-out-of-range', this, {\n                options\n            });\n        }\n        model.change((writer)=>{\n            const headingRows = table.getAttribute('headingRows') || 0;\n            // Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n            if (headingRows > insertAt) {\n                updateNumericAttribute('headingRows', headingRows + rowsToInsert, table, writer, 0);\n            }\n            // Inserting at the end or at the beginning of a table doesn't require to calculate anything special.\n            if (!isCopyStructure && (insertAt === 0 || insertAt === rows)) {\n                createEmptyRows(writer, table, insertAt, rowsToInsert, columns);\n                return;\n            }\n            // Iterate over all the rows above the inserted rows in order to check for the row-spanned cells.\n            const walkerEndRow = isCopyStructure ? Math.max(insertAt, copyStructureFrom) : insertAt;\n            const tableIterator = new TableWalker(table, {\n                endRow: walkerEndRow\n            });\n            // Store spans of the reference row to reproduce it's structure. This array is column number indexed.\n            const rowColSpansMap = new Array(columns).fill(1);\n            for (const { row, column, cellHeight, cellWidth, cell } of tableIterator){\n                const lastCellRow = row + cellHeight - 1;\n                const isOverlappingInsertedRow = row < insertAt && insertAt <= lastCellRow;\n                const isReferenceRow = row <= copyStructureFrom && copyStructureFrom <= lastCellRow;\n                // If the cell is row-spanned and overlaps the inserted row, then reserve space for it in the row map.\n                if (isOverlappingInsertedRow) {\n                    // This cell overlaps the inserted rows so we need to expand it further.\n                    writer.setAttribute('rowspan', cellHeight + rowsToInsert, cell);\n                    // Mark this cell with negative number to indicate how many cells should be skipped when adding the new cells.\n                    rowColSpansMap[column] = -cellWidth;\n                } else if (isCopyStructure && isReferenceRow) {\n                    rowColSpansMap[column] = cellWidth;\n                }\n            }\n            for(let rowIndex = 0; rowIndex < rowsToInsert; rowIndex++){\n                const tableRow = writer.createElement('tableRow');\n                writer.insert(tableRow, table, insertAt);\n                for(let cellIndex = 0; cellIndex < rowColSpansMap.length; cellIndex++){\n                    const colspan = rowColSpansMap[cellIndex];\n                    const insertPosition = writer.createPositionAt(tableRow, 'end');\n                    // Insert the empty cell only if this slot is not row-spanned from any other cell.\n                    if (colspan > 0) {\n                        createEmptyTableCell(writer, insertPosition, colspan > 1 ? {\n                            colspan\n                        } : undefined);\n                    }\n                    // Skip the col-spanned slots, there won't be any cells.\n                    cellIndex += Math.abs(colspan) - 1;\n                }\n            }\n        });\n    }\n    /**\n\t * Inserts columns into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  0   1   2   3                   0   1   2   3   4   5\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | a     | b |                   | a             | b |\n\t *  +       +---+                   +               +---+\n\t *  |       | c |                   |               | c |\n\t *  +---+---+---+     will give:    +---+---+---+---+---+\n\t *  | d | e | f |                   | d |   |   | e | f |\n\t *  +---+   +---+                   +---+---+---+   +---+\n\t *  | g |   | h |                   | g |   |   |   | h |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | i         |                   | i                 |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *      ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param table The table model element where the columns will be inserted.\n\t * @param options.at The column index at which the columns will be inserted. Default value is 0.\n\t * @param options.columns The number of columns to insert. Default value is 1.\n\t */ insertColumns(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const columnsToInsert = options.columns || 1;\n        model.change((writer)=>{\n            const headingColumns = table.getAttribute('headingColumns');\n            // Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n            if (insertAt < headingColumns) {\n                writer.setAttribute('headingColumns', headingColumns + columnsToInsert, table);\n            }\n            const tableColumns = this.getColumns(table);\n            // Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n            if (insertAt === 0 || tableColumns === insertAt) {\n                for (const tableRow of table.getChildren()){\n                    // Ignore non-row elements inside the table (e.g. caption).\n                    if (!tableRow.is('element', 'tableRow')) {\n                        continue;\n                    }\n                    createCells(columnsToInsert, writer, writer.createPositionAt(tableRow, insertAt ? 'end' : 0));\n                }\n                return;\n            }\n            const tableWalker = new TableWalker(table, {\n                column: insertAt,\n                includeAllSlots: true\n            });\n            for (const tableSlot of tableWalker){\n                const { row, cell, cellAnchorColumn, cellAnchorRow, cellWidth, cellHeight } = tableSlot;\n                // When iterating over column the table walker outputs either:\n                // - cells at given column index (cell \"e\" from method docs),\n                // - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeAllSlots: true`),\n                // - or a cell from the same row which spans over this column (cell \"a\").\n                if (cellAnchorColumn < insertAt) {\n                    // If cell is anchored in previous column, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n                    // For such cells expand them by a number of columns inserted.\n                    writer.setAttribute('colspan', cellWidth + columnsToInsert, cell);\n                    // This cell will overlap cells in rows below so skip them (because of `includeAllSlots` option) - (cell \"a\")\n                    const lastCellRow = cellAnchorRow + cellHeight - 1;\n                    for(let i = row; i <= lastCellRow; i++){\n                        tableWalker.skipRow(i);\n                    }\n                } else {\n                    // It's either cell at this column index or spanned cell by a row-spanned cell from row above.\n                    // In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n                    createCells(columnsToInsert, writer, tableSlot.getPositionBefore());\n                }\n            }\n        });\n    }\n    /**\n\t * Removes rows from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including `rowspan` attribute of table cells overlapping removed rows\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *  row index\n\t *      ┌───┬───┬───┐        `at` = 1        ┌───┬───┬───┐\n\t *    0 │ a │ b │ c │        `rows` = 2      │ a │ b │ c │ 0\n\t *      │   ├───┼───┤                        │   ├───┼───┤\n\t *    1 │   │ d │ e │  <-- remove from here  │   │ d │ g │ 1\n\t *      │   │   ├───┤        will give:      ├───┼───┼───┤\n\t *    2 │   │   │ f │                        │ h │ i │ j │ 2\n\t *      │   │   ├───┤                        └───┴───┴───┘\n\t *    3 │   │   │ g │\n\t *      ├───┼───┼───┤\n\t *    4 │ h │ i │ j │\n\t *      └───┴───┴───┘\n\t *\n\t * @param options.at The row index at which the removing rows will start.\n\t * @param options.rows The number of rows to remove. Default value is 1.\n\t */ removeRows(table, options) {\n        const model = this.editor.model;\n        const rowsToRemove = options.rows || 1;\n        const rowCount = this.getRows(table);\n        const first = options.at;\n        const last = first + rowsToRemove - 1;\n        if (last > rowCount - 1) {\n            /**\n\t\t\t * The `options.at` param must point at existing row and `options.rows` must not exceed the rows in the table.\n\t\t\t *\n\t\t\t * @error tableutils-removerows-row-index-out-of-range\n\t\t\t */ throw new CKEditorError('tableutils-removerows-row-index-out-of-range', this, {\n                table,\n                options\n            });\n        }\n        model.change((writer)=>{\n            const indexesObject = {\n                first,\n                last\n            };\n            // Removing rows from the table require that most calculations to be done prior to changing table structure.\n            // Preparations must be done in the same enqueueChange callback to use the current table structure.\n            // 1. Preparation - get row-spanned cells that have to be modified after removing rows.\n            const { cellsToMove, cellsToTrim } = getCellsToMoveAndTrimOnRemoveRow(table, indexesObject);\n            // 2. Execution\n            // 2a. Move cells from removed rows that extends over a removed section - must be done before removing rows.\n            // This will fill any gaps in a rows below that previously were empty because of row-spanned cells.\n            if (cellsToMove.size) {\n                const rowAfterRemovedSection = last + 1;\n                moveCellsToRow(table, rowAfterRemovedSection, cellsToMove, writer);\n            }\n            // 2b. Remove all required rows.\n            for(let i = last; i >= first; i--){\n                writer.remove(table.getChild(i));\n            }\n            // 2c. Update cells from rows above that overlap removed section. Similar to step 2 but does not involve moving cells.\n            for (const { rowspan, cell } of cellsToTrim){\n                updateNumericAttribute('rowspan', rowspan, cell, writer);\n            }\n            // 2d. Adjust heading rows if removed rows were in a heading section.\n            updateHeadingRows(table, indexesObject, writer);\n            // 2e. Remove empty columns (without anchored cells) if there are any.\n            if (!removeEmptyColumns(table, this)) {\n                // If there wasn't any empty columns then we still need to check if this wasn't called\n                // because of cleaning empty rows and we only removed one of them.\n                removeEmptyRows(table, this);\n            }\n        });\n    }\n    /**\n\t * Removes columns from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including the `colspan` attribute of table cells overlapping removed columns\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *    0   1   2   3   4                       0   1   2\n\t *  ┌───────────────┬───┐                   ┌───────┬───┐\n\t *  │ a             │ b │                   │ a     │ b │\n\t *  │               ├───┤                   │       ├───┤\n\t *  │               │ c │                   │       │ c │\n\t *  ├───┬───┬───┬───┼───┤     will give:    ├───┬───┼───┤\n\t *  │ d │ e │ f │ g │ h │                   │ d │ g │ h │\n\t *  ├───┼───┼───┤   ├───┤                   ├───┤   ├───┤\n\t *  │ i │ j │ k │   │ l │                   │ i │   │ l │\n\t *  ├───┴───┴───┴───┴───┤                   ├───┴───┴───┤\n\t *  │ m                 │                   │ m         │\n\t *  └───────────────────┘                   └───────────┘\n\t *        ^---- remove from here, `at` = 1, `columns` = 2\n\t *\n\t * @param options.at The row index at which the removing columns will start.\n\t * @param options.columns The number of columns to remove.\n\t */ removeColumns(table, options) {\n        const model = this.editor.model;\n        const first = options.at;\n        const columnsToRemove = options.columns || 1;\n        const last = options.at + columnsToRemove - 1;\n        model.change((writer)=>{\n            adjustHeadingColumns(table, {\n                first,\n                last\n            }, writer);\n            const tableColumns = getTableColumnElements(table);\n            for(let removedColumnIndex = last; removedColumnIndex >= first; removedColumnIndex--){\n                for (const { cell, column, cellWidth } of [\n                    ...new TableWalker(table)\n                ]){\n                    // If colspaned cell overlaps removed column decrease its span.\n                    if (column <= removedColumnIndex && cellWidth > 1 && column + cellWidth > removedColumnIndex) {\n                        updateNumericAttribute('colspan', cellWidth - 1, cell, writer);\n                    } else if (column === removedColumnIndex) {\n                        // The cell in removed column has colspan of 1.\n                        writer.remove(cell);\n                    }\n                }\n                // If table has `tableColumn` elements, we need to update it manually.\n                // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for details.\n                if (tableColumns[removedColumnIndex]) {\n                    // If the removed column is the first one then we need to add its width to the next column.\n                    // Otherwise we add it to the previous column.\n                    const adjacentColumn = removedColumnIndex === 0 ? tableColumns[1] : tableColumns[removedColumnIndex - 1];\n                    const removedColumnWidth = parseFloat(tableColumns[removedColumnIndex].getAttribute('columnWidth'));\n                    const adjacentColumnWidth = parseFloat(adjacentColumn.getAttribute('columnWidth'));\n                    writer.remove(tableColumns[removedColumnIndex]);\n                    // Add the removed column width (in %) to the adjacent column.\n                    writer.setAttribute('columnWidth', removedColumnWidth + adjacentColumnWidth + '%', adjacentColumn);\n                }\n            }\n            // Remove empty rows that could appear after removing columns.\n            if (!removeEmptyRows(table, this)) {\n                // If there wasn't any empty rows then we still need to check if this wasn't called\n                // because of cleaning empty columns and we only removed one of them.\n                removeEmptyColumns(table, this);\n            }\n        });\n    }\n    /**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *  +---+---+---+---+---+\n\t *  | a |   |   | b | c |\n\t *  +---+---+---+---+---+\n\t *  | d         | e | f |\n\t *  +---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a         |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` into 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a     |   |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t */ splitCellVertically(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change((writer)=>{\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (colspan > 1) {\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(colspan, numberOfCells);\n                updateNumericAttribute('colspan', updatedSpan, tableCell, writer);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.colspan = newCellsSpan;\n                }\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                const cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n            }\n            // Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n            if (colspan < numberOfCells) {\n                const cellsToInsert = numberOfCells - colspan;\n                // First step: expand cells on the same column as split cell.\n                const tableMap = [\n                    ...new TableWalker(table)\n                ];\n                // Get the column index of split cell.\n                const { column: splitCellColumn } = tableMap.find(({ cell })=>cell === tableCell);\n                // Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n                const cellsToUpdate = tableMap.filter(({ cell, cellWidth, column })=>{\n                    const isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n                    const spansOverColumn = column < splitCellColumn && column + cellWidth > splitCellColumn;\n                    return isOnSameColumn || spansOverColumn;\n                });\n                // Expand cells vertically.\n                for (const { cell, cellWidth } of cellsToUpdate){\n                    writer.setAttribute('colspan', cellWidth + cellsToInsert, cell);\n                }\n                // Second step: create columns after split cell.\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n                const headingColumns = table.getAttribute('headingColumns') || 0;\n                // Update heading section if split cell is in heading section.\n                if (headingColumns > splitCellColumn) {\n                    updateNumericAttribute('headingColumns', headingColumns + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +   +---+---+\n\t *  |   | f | g |\n\t *  +   +---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` into 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +---+---+---+\n\t *  |   | f | g |\n\t *  +---+---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t */ splitCellHorizontally(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const splitCellRow = table.getChildIndex(tableRow);\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change((writer)=>{\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (rowspan > 1) {\n                // Cache table map before updating table.\n                const tableMap = [\n                    ...new TableWalker(table, {\n                        startRow: splitCellRow,\n                        endRow: splitCellRow + rowspan - 1,\n                        includeAllSlots: true\n                    })\n                ];\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(rowspan, numberOfCells);\n                updateNumericAttribute('rowspan', updatedSpan, tableCell, writer);\n                const { column: cellColumn } = tableMap.find(({ cell })=>cell === tableCell);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.rowspan = newCellsSpan;\n                }\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                // Accumulator that stores distance from the last inserted cell span.\n                // It helps with evenly splitting larger cell spans (for example 10 cells collapsing into 3 cells).\n                // We split these cells into 3, 3, 4 cells and we have to call `createCells` only when distance between\n                // these cells is equal or greater than the new cells span size.\n                let distanceFromLastCellSpan = 0;\n                for (const tableSlot of tableMap){\n                    const { column, row } = tableSlot;\n                    // As both newly created cells and the split cell might have rowspan,\n                    // the insertion of new cells must go to appropriate rows:\n                    //\n                    // 1. It's a row after split cell + it's height.\n                    const isAfterSplitCell = row >= splitCellRow + updatedSpan;\n                    // 2. Is on the same column.\n                    const isOnSameColumn = column === cellColumn;\n                    // Reset distance from the last cell span if we are on the same column and we exceeded the new cells span size.\n                    if (distanceFromLastCellSpan >= newCellsSpan && isOnSameColumn) {\n                        distanceFromLastCellSpan = 0;\n                    }\n                    if (isAfterSplitCell && isOnSameColumn) {\n                        // Create new cells only if the distance from the last cell span is equal or greater than the new cells span.\n                        if (!distanceFromLastCellSpan) {\n                            createCells(1, writer, tableSlot.getPositionBefore(), newCellsAttributes);\n                        }\n                        // Increase the distance from the last cell span.\n                        distanceFromLastCellSpan++;\n                    }\n                }\n            }\n            // Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n            if (rowspan < numberOfCells) {\n                // We already split the cell in check one so here we split to the remaining number of cells only.\n                const cellsToInsert = numberOfCells - rowspan;\n                // This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n                const tableMap = [\n                    ...new TableWalker(table, {\n                        startRow: 0,\n                        endRow: splitCellRow\n                    })\n                ];\n                // First step: expand cells.\n                for (const { cell, cellHeight, row } of tableMap){\n                    // Expand rowspan of cells that are either:\n                    // - on the same row as current cell,\n                    // - or are below split cell row and overlaps that row.\n                    if (cell !== tableCell && row + cellHeight > splitCellRow) {\n                        const rowspanToSet = cellHeight + cellsToInsert;\n                        writer.setAttribute('rowspan', rowspanToSet, cell);\n                    }\n                }\n                // Second step: create rows with single cell below split cell.\n                const newCellsAttributes = {};\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                createEmptyRows(writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes);\n                // Update heading section if split cell is in heading section.\n                const headingRows = table.getAttribute('headingRows') || 0;\n                if (headingRows > splitCellRow) {\n                    updateNumericAttribute('headingRows', headingRows + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n\t * Returns the number of columns for a given table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getColumns( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */ getColumns(table) {\n        // Analyze first row only as all the rows should have the same width.\n        // Using the first row without checking if it's a tableRow because we expect\n        // that table will have only tableRow model elements at the beginning.\n        const row = table.getChild(0);\n        return [\n            ...row.getChildren()\n        ]// $marker elements can also be children of a row too (when TrackChanges is on). Don't include them in the count.\n        .filter((node)=>node.is('element', 'tableCell')).reduce((columns, row)=>{\n            const columnWidth = parseInt(row.getAttribute('colspan') || '1');\n            return columns + columnWidth;\n        }, 0);\n    }\n    /**\n\t * Returns the number of rows for a given table. Any other element present in the table model is omitted.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getRows( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */ getRows(table) {\n        // Rowspan not included due to #6427.\n        return Array.from(table.getChildren()).reduce((rowCount, child)=>child.is('element', 'tableRow') ? rowCount + 1 : rowCount, 0);\n    }\n    /**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the options.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option.\n\t *\n\t * @internal\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t */ createTableWalker(table, options = {}) {\n        return new TableWalker(table, options);\n    }\n    /**\n\t * Returns all model table cells that are fully selected (from the outside)\n\t * within the provided model selection's ranges.\n\t *\n\t * To obtain the cells selected from the inside, use\n\t * {@link #getTableCellsContainingSelection}.\n\t */ getSelectedTableCells(selection) {\n        const cells = [];\n        for (const range of this.sortRanges(selection.getRanges())){\n            const element = range.getContainedElement();\n            if (element && element.is('element', 'tableCell')) {\n                cells.push(element);\n            }\n        }\n        return cells;\n    }\n    /**\n\t * Returns all model table cells that the provided model selection's ranges\n\t * {@link module:engine/model/range~ModelRange#start} inside.\n\t *\n\t * To obtain the cells selected from the outside, use\n\t * {@link #getSelectedTableCells}.\n\t */ getTableCellsContainingSelection(selection) {\n        const cells = [];\n        for (const range of selection.getRanges()){\n            const cellWithSelection = range.start.findAncestor('tableCell');\n            if (cellWithSelection) {\n                cells.push(cellWithSelection);\n            }\n        }\n        return cells;\n    }\n    /**\n\t * Returns all model table cells that are either completely selected\n\t * by selection ranges or host selection range\n\t * {@link module:engine/model/range~ModelRange#start start positions} inside them.\n\t *\n\t * Combines {@link #getTableCellsContainingSelection} and\n\t * {@link #getSelectedTableCells}.\n\t */ getSelectionAffectedTableCells(selection) {\n        const selectedCells = this.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            return selectedCells;\n        }\n        return this.getTableCellsContainingSelection(selection);\n    }\n    /**\n\t * Returns an object with the `first` and `last` row index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getRowIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected rows: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table row indexes.\n\t */ getRowIndexes(tableCells) {\n        const indexes = tableCells.map((cell)=>cell.parent.index);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n\t * Returns an object with the `first` and `last` column index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getColumnIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected columns: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table column indexes.\n\t */ getColumnIndexes(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const tableMap = [\n            ...new TableWalker(table)\n        ];\n        const indexes = tableMap.filter((entry)=>tableCells.includes(entry.cell)).map((entry)=>entry.column);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n\t * Checks if the selection contains cells that do not exceed rectangular selection.\n\t *\n\t * In a table below:\n\t *\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ b │ c │ d │\n\t *  ├───┴───┼───┤   │\n\t *  │ e     │ f │   │\n\t *  │       ├───┼───┤\n\t *  │       │ g │ h │\n\t *  └───────┴───┴───┘\n\t *\n\t * Valid selections are these which create a solid rectangle (without gaps), such as:\n\t *   - a, b (two horizontal cells)\n\t *   - c, f (two vertical cells)\n\t *   - a, b, e (cell \"e\" spans over four cells)\n\t *   - c, d, f (cell d spans over a cell in the row below)\n\t *\n\t * While an invalid selection would be:\n\t *   - a, c (the unselected cell \"b\" creates a gap)\n\t *   - f, g, h (cell \"d\" spans over a cell from the row of \"f\" cell - thus creates a gap)\n\t */ isSelectionRectangular(selectedTableCells) {\n        if (selectedTableCells.length < 2 || !this._areCellInTheSameTableSection(selectedTableCells)) {\n            return false;\n        }\n        // A valid selection is a fully occupied rectangle composed of table cells.\n        // Below we will calculate the area of a selected table cells and the area of valid selection.\n        // The area of a valid selection is defined by top-left and bottom-right cells.\n        const rows = new Set();\n        const columns = new Set();\n        let areaOfSelectedCells = 0;\n        for (const tableCell of selectedTableCells){\n            const { row, column } = this.getCellLocation(tableCell);\n            const rowspan = parseInt(tableCell.getAttribute('rowspan')) || 1;\n            const colspan = parseInt(tableCell.getAttribute('colspan')) || 1;\n            // Record row & column indexes of current cell.\n            rows.add(row);\n            columns.add(column);\n            // For cells that spans over multiple rows add also the last row that this cell spans over.\n            if (rowspan > 1) {\n                rows.add(row + rowspan - 1);\n            }\n            // For cells that spans over multiple columns add also the last column that this cell spans over.\n            if (colspan > 1) {\n                columns.add(column + colspan - 1);\n            }\n            areaOfSelectedCells += rowspan * colspan;\n        }\n        // We can only merge table cells that are in adjacent rows...\n        const areaOfValidSelection = getBiggestRectangleArea(rows, columns);\n        return areaOfValidSelection == areaOfSelectedCells;\n    }\n    /**\n\t * Returns array of sorted ranges.\n\t */ sortRanges(ranges) {\n        return Array.from(ranges).sort(compareRangeOrder);\n    }\n    /**\n\t * Helper method to get an object with `first` and `last` indexes from an unsorted array of indexes.\n\t */ _getFirstLastIndexesObject(indexes) {\n        const allIndexesSorted = indexes.sort((indexA, indexB)=>indexA - indexB);\n        const first = allIndexesSorted[0];\n        const last = allIndexesSorted[allIndexesSorted.length - 1];\n        return {\n            first,\n            last\n        };\n    }\n    /**\n\t * Checks if the selection does not mix a header (column or row) with other cells.\n\t *\n\t * For instance, in the table below valid selections consist of cells with the same letter only.\n\t * So, a-a (same heading row and column) or d-d (body cells) are valid while c-d or a-b are not.\n\t *\n\t * header columns\n\t *    ↓   ↓\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ a │ b │ b │  ← header row\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  └───┴───┴───┴───┘\n\t */ _areCellInTheSameTableSection(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const rowIndexes = this.getRowIndexes(tableCells);\n        const headingRows = parseInt(table.getAttribute('headingRows')) || 0;\n        // Calculating row indexes is a bit cheaper so if this check fails we can't merge.\n        if (!this._areIndexesInSameSection(rowIndexes, headingRows)) {\n            return false;\n        }\n        const columnIndexes = this.getColumnIndexes(tableCells);\n        const headingColumns = parseInt(table.getAttribute('headingColumns')) || 0;\n        // Similarly cells must be in same column section.\n        return this._areIndexesInSameSection(columnIndexes, headingColumns);\n    }\n    /**\n\t * Unified check if table rows/columns indexes are in the same heading/body section.\n\t */ _areIndexesInSameSection({ first, last }, headingSectionSize) {\n        const firstCellIsInHeading = first < headingSectionSize;\n        const lastCellIsInHeading = last < headingSectionSize;\n        return firstCellIsInHeading === lastCellIsInHeading;\n    }\n}\n/**\n * Creates empty rows at the given index in an existing table.\n *\n * @param insertAt The row index of row insertion.\n * @param rows The number of rows to create.\n * @param tableCellToInsert The number of cells to insert in each row.\n */ function createEmptyRows(writer, table, insertAt, rows, tableCellToInsert, attributes = {}) {\n    for(let i = 0; i < rows; i++){\n        const tableRow = writer.createElement('tableRow');\n        writer.insert(tableRow, table, insertAt);\n        createCells(tableCellToInsert, writer, writer.createPositionAt(tableRow, 'end'), attributes);\n    }\n}\n/**\n * Creates cells at a given position.\n *\n * @param cells The number of cells to create\n */ function createCells(cells, writer, insertPosition, attributes = {}) {\n    for(let i = 0; i < cells; i++){\n        createEmptyTableCell(writer, insertPosition, attributes);\n    }\n}\n/**\n * Evenly distributes the span of a cell to a number of provided cells.\n * The resulting spans will always be integer values.\n *\n * For instance breaking a span of 7 into 3 cells will return:\n *\n * ```ts\n * { newCellsSpan: 2, updatedSpan: 3 }\n * ```\n *\n * as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n *\n * @param span The span value do break.\n * @param numberOfCells The number of resulting spans.\n */ function breakSpanEvenly(span, numberOfCells) {\n    if (span < numberOfCells) {\n        return {\n            newCellsSpan: 1,\n            updatedSpan: 1\n        };\n    }\n    const newCellsSpan = Math.floor(span / numberOfCells);\n    const updatedSpan = span - newCellsSpan * numberOfCells + newCellsSpan;\n    return {\n        newCellsSpan,\n        updatedSpan\n    };\n}\n/**\n * Updates heading columns attribute if removing a row from head section.\n */ function adjustHeadingColumns(table, removedColumnIndexes, writer) {\n    const headingColumns = table.getAttribute('headingColumns') || 0;\n    if (headingColumns && removedColumnIndexes.first < headingColumns) {\n        const headingsRemoved = Math.min(headingColumns - 1 /* Other numbers are 0-based */ , removedColumnIndexes.last) - removedColumnIndexes.first + 1;\n        writer.setAttribute('headingColumns', headingColumns - headingsRemoved, table);\n    }\n}\n/**\n * Calculates a new heading rows value for removing rows from heading section.\n */ function updateHeadingRows(table, { first, last }, writer) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    if (first < headingRows) {\n        const newRows = last < headingRows ? headingRows - (last - first + 1) : first;\n        updateNumericAttribute('headingRows', newRows, table, writer, 0);\n    }\n}\n/**\n * Finds cells that will be:\n * - trimmed - Cells that are \"above\" removed rows sections and overlap the removed section - their rowspan must be trimmed.\n * - moved - Cells from removed rows section might stick out of. These cells are moved to the next row after a removed section.\n *\n * Sample table with overlapping & sticking out cells:\n *\n *      +----+----+----+----+----+\n *      | 00 | 01 | 02 | 03 | 04 |\n *      +----+    +    +    +    +\n *      | 10 |    |    |    |    |\n *      +----+----+    +    +    +\n *      | 20 | 21 |    |    |    | <-- removed row\n *      +    +    +----+    +    +\n *      |    |    | 32 |    |    | <-- removed row\n *      +----+    +    +----+    +\n *      | 40 |    |    | 43 |    |\n *      +----+----+----+----+----+\n *\n * In a table above:\n * - cells to trim: '02', '03' & '04'.\n * - cells to move: '21' & '32'.\n */ function getCellsToMoveAndTrimOnRemoveRow(table, { first, last }) {\n    const cellsToMove = new Map();\n    const cellsToTrim = [];\n    for (const { row, column, cellHeight, cell } of new TableWalker(table, {\n        endRow: last\n    })){\n        const lastRowOfCell = row + cellHeight - 1;\n        const isCellStickingOutFromRemovedRows = row >= first && row <= last && lastRowOfCell > last;\n        if (isCellStickingOutFromRemovedRows) {\n            const rowspanInRemovedSection = last - row + 1;\n            const rowSpanToSet = cellHeight - rowspanInRemovedSection;\n            cellsToMove.set(column, {\n                cell,\n                rowspan: rowSpanToSet\n            });\n        }\n        const isCellOverlappingRemovedRows = row < first && lastRowOfCell >= first;\n        if (isCellOverlappingRemovedRows) {\n            let rowspanAdjustment;\n            // Cell fully covers removed section - trim it by removed rows count.\n            if (lastRowOfCell >= last) {\n                rowspanAdjustment = last - first + 1;\n            } else {\n                rowspanAdjustment = lastRowOfCell - first + 1;\n            }\n            cellsToTrim.push({\n                cell,\n                rowspan: cellHeight - rowspanAdjustment\n            });\n        }\n    }\n    return {\n        cellsToMove,\n        cellsToTrim\n    };\n}\nfunction moveCellsToRow(table, targetRowIndex, cellsToMove, writer) {\n    const tableWalker = new TableWalker(table, {\n        includeAllSlots: true,\n        row: targetRowIndex\n    });\n    const tableRowMap = [\n        ...tableWalker\n    ];\n    const row = table.getChild(targetRowIndex);\n    let previousCell;\n    for (const { column, cell, isAnchor } of tableRowMap){\n        if (cellsToMove.has(column)) {\n            const { cell: cellToMove, rowspan } = cellsToMove.get(column);\n            const targetPosition = previousCell ? writer.createPositionAfter(previousCell) : writer.createPositionAt(row, 0);\n            writer.move(writer.createRangeOn(cellToMove), targetPosition);\n            updateNumericAttribute('rowspan', rowspan, cellToMove, writer);\n            previousCell = cellToMove;\n        } else if (isAnchor) {\n            // If cell is spanned then `cell` holds reference to overlapping cell. See ckeditor/ckeditor5#6502.\n            previousCell = cell;\n        }\n    }\n}\nfunction compareRangeOrder(rangeA, rangeB) {\n    // Since table cell ranges are disjoint, it's enough to check their start positions.\n    const posA = rangeA.start;\n    const posB = rangeB.start;\n    // Checking for equal position (returning 0) is not needed because this would be either:\n    // a. Intersecting range (not allowed by model)\n    // b. Collapsed range on the same position (allowed by model but should not happen).\n    return posA.isBefore(posB) ? -1 : 1;\n}\n/**\n * Calculates the area of a maximum rectangle that can span over the provided row & column indexes.\n */ function getBiggestRectangleArea(rows, columns) {\n    const rowsIndexes = Array.from(rows.values());\n    const columnIndexes = Array.from(columns.values());\n    const lastRow = Math.max(...rowsIndexes);\n    const firstRow = Math.min(...rowsIndexes);\n    const lastColumn = Math.max(...columnIndexes);\n    const firstColumn = Math.min(...columnIndexes);\n    return (lastRow - firstRow + 1) * (lastColumn - firstColumn + 1);\n}\n\n/**\n * The merge cells command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCells'` editor command.\n *\n * For example, to merge selected table cells:\n *\n * ```ts\n * editor.execute( 'mergeTableCells' );\n * ```\n */ class MergeCellsCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selectedTableCells = tableUtils.getSelectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = tableUtils.isSelectionRectangular(selectedTableCells);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        model.change((writer)=>{\n            const selectedTableCells = tableUtils.getSelectedTableCells(model.document.selection);\n            // All cells will be merged into the first one.\n            const firstTableCell = selectedTableCells.shift();\n            // Update target cell dimensions.\n            const { mergeWidth, mergeHeight } = getMergeDimensions(firstTableCell, selectedTableCells, tableUtils);\n            updateNumericAttribute('colspan', mergeWidth, firstTableCell, writer);\n            updateNumericAttribute('rowspan', mergeHeight, firstTableCell, writer);\n            for (const tableCell of selectedTableCells){\n                mergeTableCells(tableCell, firstTableCell, writer);\n            }\n            const table = firstTableCell.findAncestor('table');\n            // Remove rows and columns that become empty (have no anchored cells).\n            removeEmptyRowsColumns(table, tableUtils);\n            writer.setSelection(firstTableCell, 'in');\n        });\n    }\n}\n/**\n *  Merges two table cells. It will ensure that after merging cells with empty paragraphs the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */ function mergeTableCells(cellBeingMerged, targetCell, writer) {\n    if (!isEmpty$1(cellBeingMerged)) {\n        if (isEmpty$1(targetCell)) {\n            writer.remove(writer.createRangeIn(targetCell));\n        }\n        writer.move(writer.createRangeIn(cellBeingMerged), writer.createPositionAt(targetCell, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellBeingMerged);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */ function isEmpty$1(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\nfunction getMergeDimensions(firstTableCell, selectedTableCells, tableUtils) {\n    let maxWidthOffset = 0;\n    let maxHeightOffset = 0;\n    for (const tableCell of selectedTableCells){\n        const { row, column } = tableUtils.getCellLocation(tableCell);\n        maxWidthOffset = getMaxOffset(tableCell, column, maxWidthOffset, 'colspan');\n        maxHeightOffset = getMaxOffset(tableCell, row, maxHeightOffset, 'rowspan');\n    }\n    // Update table cell span attribute and merge set selection on a merged contents.\n    const { row: firstCellRow, column: firstCellColumn } = tableUtils.getCellLocation(firstTableCell);\n    const mergeWidth = maxWidthOffset - firstCellColumn;\n    const mergeHeight = maxHeightOffset - firstCellRow;\n    return {\n        mergeWidth,\n        mergeHeight\n    };\n}\nfunction getMaxOffset(tableCell, start, currentMaxOffset, which) {\n    const dimensionValue = parseInt(tableCell.getAttribute(which) || '1');\n    return Math.max(currentMaxOffset, start + dimensionValue);\n}\n\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableRow' );\n * ```\n */ class SelectRowCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const rowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const table = referenceCells[0].findAncestor('table');\n        const rangesToSelect = [];\n        for(let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++){\n            for (const cell of table.getChild(rowIndex).getChildren()){\n                rangesToSelect.push(model.createRangeOn(cell));\n            }\n        }\n        model.change((writer)=>{\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableColumn' );\n * ```\n */ class SelectColumnCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const firstCell = referenceCells[0];\n        const lastCell = referenceCells.pop();\n        const table = firstCell.findAncestor('table');\n        const startLocation = tableUtils.getCellLocation(firstCell);\n        const endLocation = tableUtils.getCellLocation(lastCell);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        const rangesToSelect = [];\n        for (const cellInfo of new TableWalker(table, {\n            startColumn,\n            endColumn\n        })){\n            rangesToSelect.push(model.createRangeOn(cellInfo.cell));\n        }\n        model.change((writer)=>{\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of the table cells extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as a child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extend beyond their section.\n * 2. It will add empty table cells to the rows that are narrower than the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or a part of a table) to the editor from external sources.\n *\n * For example, see the following table which has a cell (FOO) with the rowspan attribute (2):\n *\n * ```xml\n * <table headingRows=\"1\">\n *   <tableRow>\n *     <tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *     <tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *   </tableRow>\n *   <tableRow>\n *     <tableCell><paragraph>BAZ</paragraph></tableCell>\n *     <tableCell><paragraph>XYZ</paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * It will be rendered in the view as:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * In the above example the table will be rendered as a table with two rows: one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would extend from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is the default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ in the content will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table row sizes (the number of columns).\n * The size of a table row is calculated by counting column spans of table cells, both horizontal (from the same row) and\n * vertical (from the rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header: it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and the second with colspan (2).\n * The table cell (FOO) does not extend beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * ## Collaboration and undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without a deeper analysis of the nature of the change. As such, it might lead\n * to a structure which was not intended by the user. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which the editor content might not return to the original state.\n *\n * This will usually happen when one or more users change the size of the table.\n *\n * As an example see the table below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * and the user actions:\n *\n * 1. Both users have a table with two rows and two columns.\n * 2. User A adds a column at the end of the table. This will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table. This will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * The last row is shorter then others so the table post-fixer will add an empty row to the last row:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by the post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * Unfortunately undo does not know the nature of the changes and depending on which user applies the post-fixer changes, undoing them\n * might lead to a broken table. If User B undoes inserting the column to the table, the undo engine will undo only the operations of\n * inserting empty cells to rows from the initial table state (row 1 and 2) but the cell in the post-fixed row will remain:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * After undo, the table post-fixer will detect that two rows are shorter than others and will fix the table to:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * @internal\n */ function injectTableLayoutPostFixer(model) {\n    model.document.registerPostFixer((writer)=>tableLayoutPostFixer(writer, model));\n}\n/**\n * The table layout post-fixer.\n */ function tableLayoutPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    // Do not analyze the same table more then once - may happen for multiple changes in the same table.\n    const analyzedTables = new Set();\n    for (const entry of changes){\n        let table = null;\n        if (entry.type == 'insert' && entry.name == 'table') {\n            table = entry.position.nodeAfter;\n        }\n        // Fix table on adding/removing table cells and rows.\n        if ((entry.type == 'insert' || entry.type == 'remove') && (entry.name == 'tableRow' || entry.name == 'tableCell')) {\n            table = entry.position.findAncestor('table');\n        }\n        // Fix table on any table's attribute change - including attributes of table cells.\n        if (isTableAttributeEntry(entry)) {\n            table = entry.range.start.findAncestor('table');\n        }\n        if (table && !analyzedTables.has(table)) {\n            // Step 1: correct rowspans of table cells if necessary.\n            // The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n            wasFixed = fixTableCellsRowspan(table, writer) || wasFixed;\n            // Step 2: fix table rows sizes.\n            wasFixed = fixTableRowsSizes(table, writer) || wasFixed;\n            analyzedTables.add(table);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes the invalid value of the `rowspan` attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n *\n * @returns Returns `true` if the table was fixed.\n */ function fixTableCellsRowspan(table, writer) {\n    let wasFixed = false;\n    const cellsToTrim = findCellsToTrim(table);\n    if (cellsToTrim.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: trimming cells row-spans (${ cellsToTrim.length }).` );\n        wasFixed = true;\n        for (const data of cellsToTrim){\n            updateNumericAttribute('rowspan', data.rowspan, data.cell, writer, 1);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Makes all table rows in a table the same size.\n *\n * @returns Returns `true` if the table was fixed.\n */ function fixTableRowsSizes(table, writer) {\n    let wasFixed = false;\n    const childrenLengths = getChildrenLengths(table);\n    const rowsToRemove = [];\n    // Find empty rows.\n    for (const [rowIndex, size] of childrenLengths.entries()){\n        // Ignore all non-row models.\n        if (!size && table.getChild(rowIndex).is('element', 'tableRow')) {\n            rowsToRemove.push(rowIndex);\n        }\n    }\n    // Remove empty rows.\n    if (rowsToRemove.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: remove empty rows (${ rowsToRemove.length }).` );\n        wasFixed = true;\n        for (const rowIndex of rowsToRemove.reverse()){\n            writer.remove(table.getChild(rowIndex));\n            childrenLengths.splice(rowIndex, 1);\n        }\n    }\n    // Filter out everything that's not a table row.\n    const rowsLengths = childrenLengths.filter((row, rowIndex)=>table.getChild(rowIndex).is('element', 'tableRow'));\n    // Verify if all the rows have the same number of columns.\n    const tableSize = rowsLengths[0];\n    const isValid = rowsLengths.every((length)=>length === tableSize);\n    if (!isValid) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: adding missing cells.' );\n        // Find the maximum number of columns.\n        const maxColumns = rowsLengths.reduce((prev, current)=>current > prev ? current : prev, 0);\n        for (const [rowIndex, size] of rowsLengths.entries()){\n            const columnsToInsert = maxColumns - size;\n            if (columnsToInsert) {\n                for(let i = 0; i < columnsToInsert; i++){\n                    createEmptyTableCell(writer, writer.createPositionAt(table.getChild(rowIndex), 'end'));\n                }\n                wasFixed = true;\n            }\n        }\n    }\n    return wasFixed;\n}\n/**\n * Searches for table cells that extend beyond the table section to which they belong to. It will return an array of objects\n * that stores table cells to be trimmed and the correct value of the `rowspan` attribute to set.\n */ function findCellsToTrim(table) {\n    const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n    const maxRows = Array.from(table.getChildren()).reduce((count, row)=>row.is('element', 'tableRow') ? count + 1 : count, 0);\n    const cellsToTrim = [];\n    for (const { row, cell, cellHeight } of new TableWalker(table)){\n        // Skip cells that do not expand over its row.\n        if (cellHeight < 2) {\n            continue;\n        }\n        const isInHeader = row < headingRows;\n        // Row limit is either end of header section or whole table as table body is after the header.\n        const rowLimit = isInHeader ? headingRows : maxRows;\n        // If table cell expands over its limit reduce it height to proper value.\n        if (row + cellHeight > rowLimit) {\n            const newRowspan = rowLimit - row;\n            cellsToTrim.push({\n                cell,\n                rowspan: newRowspan\n            });\n        }\n    }\n    return cellsToTrim;\n}\n/**\n * Returns an array with lengths of rows assigned to the corresponding row index.\n */ function getChildrenLengths(table) {\n    // TableWalker will not provide items for the empty rows, we need to pre-fill this array.\n    const lengths = new Array(table.childCount).fill(0);\n    for (const { rowIndex } of new TableWalker(table, {\n        includeAllSlots: true\n    })){\n        lengths[rowIndex]++;\n    }\n    return lengths;\n}\n/**\n * Checks if the differ entry for an attribute change is one of the table's attributes.\n */ function isTableAttributeEntry(entry) {\n    if (entry.type !== 'attribute') {\n        return false;\n    }\n    const key = entry.attributeKey;\n    return key === 'headingRows' || key === 'colspan' || key === 'rowspan';\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/converters/table-cell-paragraph-post-fixer\n */ /**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * Will be fixed to:\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell><paragraph></paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * @internal\n */ function injectTableCellParagraphPostFixer(model) {\n    model.document.registerPostFixer((writer)=>tableCellContentsPostFixer(writer, model));\n}\n/**\n * The table cell contents post-fixer.\n */ function tableCellContentsPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes){\n        if (entry.type == 'insert' && entry.name == 'table') {\n            wasFixed = fixTable(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableRow') {\n            wasFixed = fixTableRow(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableCell') {\n            wasFixed = fixTableCellContent(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if ((entry.type == 'remove' || entry.type == 'insert') && checkTableCellChange(entry)) {\n            wasFixed = fixTableCellContent(entry.position.parent, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table.\n */ function fixTable(table, writer) {\n    let wasFixed = false;\n    for (const row of table.getChildren()){\n        if (row.is('element', 'tableRow')) {\n            wasFixed = fixTableRow(row, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table row.\n */ function fixTableRow(tableRow, writer) {\n    let wasFixed = false;\n    for (const tableCell of tableRow.getChildren()){\n        wasFixed = fixTableCellContent(tableCell, writer) || wasFixed;\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cell content by:\n * - Adding a paragraph to a table cell without any child.\n * - Wrapping direct $text in a `<paragraph>`.\n */ function fixTableCellContent(tableCell, writer) {\n    // Insert paragraph to an empty table cell.\n    if (tableCell.childCount == 0) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n        writer.insertElement('paragraph', tableCell);\n        return true;\n    }\n    // Check table cell children for directly placed text nodes.\n    // Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n    const textNodes = Array.from(tableCell.getChildren()).filter((child)=>child.is('$text'));\n    // @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n    for (const child of textNodes){\n        writer.wrap(writer.createRangeOn(child), 'paragraph');\n    }\n    // Return true when there were text nodes to fix.\n    return !!textNodes.length;\n}\n/**\n * Checks if a differ change should fix the table cell. This happens on:\n * - Removing content from the table cell (i.e. `tableCell` can be left empty).\n * - Adding a text node directly into a table cell.\n */ function checkTableCellChange(entry) {\n    if (!entry.position.parent.is('element', 'tableCell')) {\n        return false;\n    }\n    return entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n\n/**\n * A table headings refresh handler which marks the table cells or rows in the differ to have it re-rendered\n * if the headings attribute changed.\n *\n * Table heading rows and heading columns are represented in the model by a `headingRows` and `headingColumns` attributes.\n *\n * When table headings attribute changes, all the cells/rows are marked to re-render to change between `<td>` and `<th>`.\n *\n * @internal\n */ function tableHeadingsRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    for (const change of differ.getChanges()){\n        let table;\n        let isRowChange = false;\n        if (change.type == 'attribute') {\n            const element = change.range.start.nodeAfter;\n            if (!element || !element.is('element', 'table')) {\n                continue;\n            }\n            if (change.attributeKey != 'headingRows' && change.attributeKey != 'headingColumns') {\n                continue;\n            }\n            table = element;\n            isRowChange = change.attributeKey == 'headingRows';\n        } else if (change.name == 'tableRow' || change.name == 'tableCell') {\n            table = change.position.findAncestor('table');\n            isRowChange = change.name == 'tableRow';\n        }\n        if (!table) {\n            continue;\n        }\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        const tableWalker = new TableWalker(table);\n        for (const tableSlot of tableWalker){\n            const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n            const expectedElementName = isHeading ? 'th' : 'td';\n            const viewElement = editing.mapper.toViewElement(tableSlot.cell);\n            if (viewElement && viewElement.is('element') && viewElement.name != expectedElementName) {\n                editing.reconvertItem(isRowChange ? tableSlot.cell.parent : tableSlot.cell);\n            }\n        }\n    }\n}\n\n/**\n * A table cell refresh handler which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it does not have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added, we need to ensure that the first `paragraph` is\n * re-rendered so it changes from `<span>` to `<p>`. The easiest way to do it is to re-render the entire table cell.\n *\n * @internal\n */ function tableCellRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    // Stores cells to be refreshed, so the table cell will be refreshed once for multiple changes.\n    const cellsToCheck = new Set();\n    for (const change of differ.getChanges()){\n        const parent = change.type == 'attribute' ? change.range.start.parent : change.position.parent;\n        if (parent.is('element', 'tableCell')) {\n            cellsToCheck.add(parent);\n        }\n    }\n    for (const tableCell of cellsToCheck.values()){\n        const paragraphsToRefresh = Array.from(tableCell.getChildren()).filter((child)=>shouldRefresh(child, editing.mapper));\n        for (const paragraph of paragraphsToRefresh){\n            editing.reconvertItem(paragraph);\n        }\n    }\n}\n/**\n * Check if given model element needs refreshing.\n */ function shouldRefresh(child, mapper) {\n    if (!child.is('element', 'paragraph')) {\n        return false;\n    }\n    const viewElement = mapper.toViewElement(child);\n    if (!viewElement) {\n        return false;\n    }\n    return isSingleParagraphWithoutAttributes(child) !== viewElement.is('element', 'span');\n}\n\n/**\n * The table editing feature.\n */ class TableEditing extends Plugin {\n    /**\n\t * Handlers for creating additional slots in the table.\n\t */ _additionalSlots;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._additionalSlots = [];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const conversion = editor.conversion;\n        const tableUtils = editor.plugins.get(TableUtils);\n        schema.register('table', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: [\n                'headingRows',\n                'headingColumns'\n            ]\n        });\n        schema.register('tableRow', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        schema.register('tableCell', {\n            allowContentOf: '$container',\n            allowIn: 'tableRow',\n            allowAttributes: [\n                'colspan',\n                'rowspan'\n            ],\n            isLimit: true,\n            isSelectable: true\n        });\n        // Figure conversion.\n        conversion.for('upcast').add(upcastTableFigure());\n        // Table conversion.\n        conversion.for('upcast').add(upcastTable());\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: [\n                    'headingRows'\n                ]\n            },\n            view: downcastTable(tableUtils, {\n                asWidget: true,\n                additionalSlots: this._additionalSlots\n            })\n        });\n        conversion.for('dataDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: [\n                    'headingRows'\n                ]\n            },\n            view: downcastTable(tableUtils, {\n                additionalSlots: this._additionalSlots\n            })\n        });\n        // Table row conversion.\n        conversion.for('upcast').elementToElement({\n            model: 'tableRow',\n            view: 'tr'\n        });\n        conversion.for('upcast').add(skipEmptyTableRow());\n        conversion.for('downcast').elementToElement({\n            model: 'tableRow',\n            view: downcastRow()\n        });\n        // Table cell conversion.\n        conversion.for('upcast').elementToElement({\n            model: 'tableCell',\n            view: 'td'\n        });\n        conversion.for('upcast').elementToElement({\n            model: 'tableCell',\n            view: 'th'\n        });\n        conversion.for('upcast').add(ensureParagraphInTableCell('td'));\n        conversion.for('upcast').add(ensureParagraphInTableCell('th'));\n        conversion.for('editingDowncast').elementToElement({\n            model: 'tableCell',\n            view: downcastCell({\n                asWidget: true\n            })\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'tableCell',\n            view: downcastCell()\n        });\n        // Duplicates code - needed to properly refresh paragraph inside a table cell.\n        conversion.for('editingDowncast').elementToElement({\n            model: 'paragraph',\n            view: convertParagraphInTableCell({\n                asWidget: true\n            }),\n            converterPriority: 'high'\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'paragraph',\n            view: convertParagraphInTableCell(),\n            converterPriority: 'high'\n        });\n        // Table attributes conversion.\n        conversion.for('downcast').attributeToAttribute({\n            model: 'colspan',\n            view: 'colspan'\n        });\n        conversion.for('upcast').attributeToAttribute({\n            model: {\n                key: 'colspan',\n                value: upcastCellSpan('colspan')\n            },\n            view: 'colspan'\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: 'rowspan',\n            view: 'rowspan'\n        });\n        conversion.for('upcast').attributeToAttribute({\n            model: {\n                key: 'rowspan',\n                value: upcastCellSpan('rowspan')\n            },\n            view: 'rowspan'\n        });\n        // Define the config.\n        editor.config.define('table.defaultHeadings.rows', 0);\n        editor.config.define('table.defaultHeadings.columns', 0);\n        // Define all the commands.\n        editor.commands.add('insertTable', new InsertTableCommand(editor));\n        editor.commands.add('insertTableRowAbove', new InsertRowCommand(editor, {\n            order: 'above'\n        }));\n        editor.commands.add('insertTableRowBelow', new InsertRowCommand(editor, {\n            order: 'below'\n        }));\n        editor.commands.add('insertTableColumnLeft', new InsertColumnCommand(editor, {\n            order: 'left'\n        }));\n        editor.commands.add('insertTableColumnRight', new InsertColumnCommand(editor, {\n            order: 'right'\n        }));\n        editor.commands.add('removeTableRow', new RemoveRowCommand(editor));\n        editor.commands.add('removeTableColumn', new RemoveColumnCommand(editor));\n        editor.commands.add('splitTableCellVertically', new SplitCellCommand(editor, {\n            direction: 'vertically'\n        }));\n        editor.commands.add('splitTableCellHorizontally', new SplitCellCommand(editor, {\n            direction: 'horizontally'\n        }));\n        editor.commands.add('mergeTableCells', new MergeCellsCommand(editor));\n        editor.commands.add('mergeTableCellRight', new MergeCellCommand(editor, {\n            direction: 'right'\n        }));\n        editor.commands.add('mergeTableCellLeft', new MergeCellCommand(editor, {\n            direction: 'left'\n        }));\n        editor.commands.add('mergeTableCellDown', new MergeCellCommand(editor, {\n            direction: 'down'\n        }));\n        editor.commands.add('mergeTableCellUp', new MergeCellCommand(editor, {\n            direction: 'up'\n        }));\n        editor.commands.add('setTableColumnHeader', new SetHeaderColumnCommand(editor));\n        editor.commands.add('setTableRowHeader', new SetHeaderRowCommand(editor));\n        editor.commands.add('selectTableRow', new SelectRowCommand(editor));\n        editor.commands.add('selectTableColumn', new SelectColumnCommand(editor));\n        injectTableLayoutPostFixer(model);\n        injectTableCellParagraphPostFixer(model);\n        this.listenTo(model.document, 'change:data', ()=>{\n            tableHeadingsRefreshHandler(model, editor.editing);\n            tableCellRefreshHandler(model, editor.editing);\n        });\n    }\n    /**\n\t * Registers downcast handler for the additional table slot.\n\t */ registerAdditionalSlot(slotHandler) {\n        this._additionalSlots.push(slotHandler);\n    }\n}\n/**\n * Returns fixed colspan and rowspan attrbutes values.\n *\n * @param type colspan or rowspan.\n * @returns conversion value function.\n */ function upcastCellSpan(type) {\n    return (cell)=>{\n        const span = parseInt(cell.getAttribute(type));\n        if (Number.isNaN(span) || span <= 0) {\n            return null;\n        }\n        return span;\n    };\n}\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n *\n * @internal\n */ class InsertTableView extends View {\n    /**\n\t * A collection of table size box items.\n\t */ items;\n    /**\n\t * Listen to `keydown` events fired in this view's main element.\n\t */ keystrokes;\n    /**\n\t * Tracks information about the DOM focus in the grid.\n\t */ focusTracker;\n    /**\n\t * @inheritDoc\n\t */ constructor(locale){\n        super(locale);\n        const bind = this.bindTemplate;\n        this.items = this._createGridCollection();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.set('rows', 0);\n        this.set('columns', 0);\n        this.bind('label').to(this, 'columns', this, 'rows', (columns, rows)=>`${rows} × ${columns}`);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck'\n                ]\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-insert-table-dropdown__grid'\n                        ]\n                    },\n                    on: {\n                        'mouseover@.ck-insert-table-dropdown-grid-box': bind.to('boxover')\n                    },\n                    children: this.items\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-insert-table-dropdown__label'\n                        ],\n                        'aria-hidden': true\n                    },\n                    children: [\n                        {\n                            text: bind.to('label')\n                        }\n                    ]\n                }\n            ],\n            on: {\n                mousedown: bind.to((evt)=>{\n                    evt.preventDefault();\n                }),\n                click: bind.to(()=>{\n                    this.fire('execute');\n                })\n            }\n        });\n        // #rows and #columns are set via changes to #focusTracker on mouse over.\n        this.on('boxover', (evt, domEvt)=>{\n            const { row, column } = domEvt.target.dataset;\n            this.items.get((parseInt(row, 10) - 1) * 10 + (parseInt(column, 10) - 1)).focus();\n        });\n        // This allows the #rows and #columns to be updated when:\n        // * the user navigates the grid using the keyboard,\n        // * the user moves the mouse over grid items.\n        this.focusTracker.on('change:focusedElement', (evt, name, focusedElement)=>{\n            if (!focusedElement) {\n                return;\n            }\n            const { row, column } = focusedElement.dataset;\n            // As row & column indexes are zero-based transform it to number of selected rows & columns.\n            this.set({\n                rows: parseInt(row),\n                columns: parseInt(column)\n            });\n        });\n        this.on('change:columns', ()=>this._highlightGridBoxes());\n        this.on('change:rows', ()=>this._highlightGridBoxes());\n    }\n    render() {\n        super.render();\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.items,\n            numberOfColumns: 10,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n        for (const item of this.items){\n            this.focusTracker.add(item.element);\n        }\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Resets the rows and columns selection.\n\t */ reset() {\n        this.set({\n            rows: 1,\n            columns: 1\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ focus() {\n        this.items.get(0).focus();\n    }\n    /**\n\t * @inheritDoc\n\t */ focusLast() {\n        this.items.get(0).focus();\n    }\n    /**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t */ _highlightGridBoxes() {\n        const rows = this.rows;\n        const columns = this.columns;\n        this.items.map((boxView, index)=>{\n            // Translate box index to the row & column index.\n            const itemRow = Math.floor(index / 10);\n            const itemColumn = index % 10;\n            // Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n            const isOn = itemRow < rows && itemColumn < columns;\n            boxView.set('isOn', isOn);\n        });\n    }\n    /**\n\t * Creates a new Button for the grid.\n\t *\n\t * @param locale The locale instance.\n\t * @param row Row number.\n\t * @param column Column number.\n\t * @param label The grid button label.\n\t */ _createGridButton(locale, row, column, label) {\n        const button = new ButtonView(locale);\n        button.set({\n            label,\n            class: 'ck-insert-table-dropdown-grid-box'\n        });\n        button.extendTemplate({\n            attributes: {\n                'data-row': row,\n                'data-column': column\n            }\n        });\n        return button;\n    }\n    /**\n\t * @returns A view collection containing boxes to be placed in a table grid.\n\t */ _createGridCollection() {\n        const boxes = [];\n        // Add grid boxes to table selection view.\n        for(let index = 0; index < 100; index++){\n            const row = Math.floor(index / 10);\n            const column = index % 10;\n            const label = `${row + 1} × ${column + 1}`;\n            boxes.push(this._createGridButton(this.locale, row + 1, column + 1, label));\n        }\n        return this.createCollection(boxes);\n    }\n}\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'menuBar:insertTable'` menu bar menu,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n */ class TableUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const contentLanguageDirection = editor.locale.contentLanguageDirection;\n        const isContentLtr = contentLanguageDirection === 'ltr';\n        editor.ui.componentFactory.add('insertTable', (locale)=>{\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: IconTable,\n                label: t('Insert table'),\n                tooltip: true\n            });\n            let insertTableView;\n            dropdownView.on('change:isOpen', ()=>{\n                if (insertTableView) {\n                    return;\n                }\n                // Prepare custom view for dropdown's panel.\n                insertTableView = new InsertTableView(locale);\n                dropdownView.panelView.children.add(insertTableView);\n                insertTableView.delegate('execute').to(dropdownView);\n                dropdownView.on('execute', ()=>{\n                    editor.execute('insertTable', {\n                        rows: insertTableView.rows,\n                        columns: insertTableView.columns\n                    });\n                    editor.editing.view.focus();\n                });\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('menuBar:insertTable', (locale)=>{\n            const command = editor.commands.get('insertTable');\n            const menuView = new MenuBarMenuView(locale);\n            const insertTableView = new InsertTableView(locale);\n            insertTableView.delegate('execute').to(menuView);\n            menuView.on('change:isOpen', (event, name, isOpen)=>{\n                if (!isOpen) {\n                    insertTableView.reset();\n                }\n            });\n            insertTableView.on('execute', ()=>{\n                editor.execute('insertTable', {\n                    rows: insertTableView.rows,\n                    columns: insertTableView.columns\n                });\n                editor.editing.view.focus();\n            });\n            menuView.buttonView.set({\n                label: t('Table'),\n                icon: IconTable\n            });\n            menuView.panelView.children.add(insertTableView);\n            menuView.bind('isEnabled').to(command);\n            return menuView;\n        });\n        editor.ui.componentFactory.add('tableColumn', (locale)=>{\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('Header column'),\n                        bindIsOn: true\n                    }\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n                        label: t('Insert column left')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n                        label: t('Insert column right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('Delete column')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableColumn',\n                        label: t('Select column')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Column'), IconTableColumn, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', (locale)=>{\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('Header row'),\n                        bindIsOn: true\n                    }\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('Insert row above')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('Insert row below')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('Delete row')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableRow',\n                        label: t('Select row')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Row'), IconTableRow, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', (locale)=>{\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('Merge cell up')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n                        label: t('Merge cell right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('Merge cell down')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n                        label: t('Merge cell left')\n                    }\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('Split cell vertically')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('Split cell horizontally')\n                    }\n                }\n            ];\n            return this._prepareMergeSplitButtonDropdown(t('Merge cells'), IconTableMergeCell, options, locale);\n        });\n    }\n    /**\n\t * Creates a dropdown view from a set of options.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */ _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>{\n            return areEnabled.some((isEnabled)=>isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', (evt)=>{\n            editor.execute(evt.source.commandName);\n            // Toggling a switch button view should not move the focus to the editable.\n            if (!(evt.source instanceof SwitchButtonView)) {\n                editor.editing.view.focus();\n            }\n        });\n        return dropdownView;\n    }\n    /**\n\t * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n\t * merge (and split)–related commands.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */ _prepareMergeSplitButtonDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale, SplitButtonView);\n        const mergeCommandName = 'mergeTableCells';\n        // Main command.\n        const mergeCommand = editor.commands.get(mergeCommandName);\n        // Subcommands in the dropdown.\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true,\n            isEnabled: true\n        });\n        // Make dropdown button disabled when all options are disabled together with the main command.\n        dropdownView.bind('isEnabled').toMany([\n            mergeCommand,\n            ...commands\n        ], 'isEnabled', (...areEnabled)=>{\n            return areEnabled.some((isEnabled)=>isEnabled);\n        });\n        // Merge selected table cells when the main part of the split button is clicked.\n        this.listenTo(dropdownView.buttonView, 'execute', ()=>{\n            editor.execute(mergeCommandName);\n            editor.editing.view.focus();\n        });\n        // Execute commands for events coming from the list in the dropdown panel.\n        this.listenTo(dropdownView, 'execute', (evt)=>{\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n    /**\n\t * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n\t * which execute editor commands as configured in passed options.\n\t *\n\t * @param options The list of options for the dropdown.\n\t * @returns Commands the list options are interacting with.\n\t */ _fillDropdownWithListOptions(dropdownView, options) {\n        const editor = this.editor;\n        const commands = [];\n        const itemDefinitions = new Collection();\n        for (const option of options){\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        return commands;\n    }\n}\n/**\n * Adds an option to a list view.\n *\n * @param option A configuration option.\n * @param commands The list of commands to update.\n * @param itemDefinitions A collection of dropdown items to update with the given option.\n */ function addListOption(option, editor, commands, itemDefinitions) {\n    if (option.type === 'button' || option.type === 'switchbutton') {\n        const model = option.model = new UIModel(option.model);\n        const { commandName, bindIsOn } = option.model;\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({\n            commandName\n        });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n        model.set({\n            withText: true\n        });\n    }\n    itemDefinitions.add(option);\n}\n\n/**\n * This plugin enables the advanced table cells, rows and columns selection.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableSelection extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableSelection';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableUtils,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        this.listenTo(model, 'deleteContent', (evt, args)=>this._handleDeleteContent(evt, args), {\n            priority: 'high'\n        });\n        this.listenTo(view.document, 'insertText', (evt, data)=>this._handleInsertTextEvent(evt, data), {\n            priority: 'high'\n        });\n        this._defineSelectionConverter();\n        this._enablePluginDisabling(); // sic!\n    }\n    /**\n\t * Returns the currently selected table cells or `null` if it is not a table cells selection.\n\t */ getSelectedTableCells() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selection = this.editor.model.document.selection;\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length == 0) {\n            return null;\n        }\n        // This should never happen, but let's know if it ever happens.\n        // @if CK_DEBUG //\tif ( selectedCells.length != selection.rangeCount ) {\n        // @if CK_DEBUG //\t\tconsole.warn( 'Mixed selection warning. The selection contains table cells and some other ranges.' );\n        // @if CK_DEBUG //\t}\n        return selectedCells;\n    }\n    /**\n\t * Returns the selected table fragment as a document fragment.\n\t */ getSelectionAsFragment() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return null;\n        }\n        return this.editor.model.change((writer)=>{\n            const documentFragment = writer.createDocumentFragment();\n            const { first: firstColumn, last: lastColumn } = tableUtils.getColumnIndexes(selectedCells);\n            const { first: firstRow, last: lastRow } = tableUtils.getRowIndexes(selectedCells);\n            const sourceTable = selectedCells[0].findAncestor('table');\n            let adjustedLastRow = lastRow;\n            let adjustedLastColumn = lastColumn;\n            // If the selection is rectangular there could be a case of all cells in the last row/column spanned over\n            // next row/column so the real lastRow/lastColumn should be updated.\n            if (tableUtils.isSelectionRectangular(selectedCells)) {\n                const dimensions = {\n                    firstColumn,\n                    lastColumn,\n                    firstRow,\n                    lastRow\n                };\n                adjustedLastRow = adjustLastRowIndex(sourceTable, dimensions);\n                adjustedLastColumn = adjustLastColumnIndex(sourceTable, dimensions);\n            }\n            const cropDimensions = {\n                startRow: firstRow,\n                startColumn: firstColumn,\n                endRow: adjustedLastRow,\n                endColumn: adjustedLastColumn\n            };\n            const table = cropTableToDimensions(sourceTable, cropDimensions, writer);\n            writer.insert(table, documentFragment, 0);\n            return documentFragment;\n        });\n    }\n    /**\n\t * Sets the model selection based on given anchor and target cells (can be the same cell).\n\t * Takes care of setting the backward flag.\n\t *\n\t * ```ts\n\t * const modelRoot = editor.model.document.getRoot();\n\t * const firstCell = modelRoot.getNodeByPath( [ 0, 0, 0 ] );\n\t * const lastCell = modelRoot.getNodeByPath( [ 0, 0, 1 ] );\n\t *\n\t * const tableSelection = editor.plugins.get( 'TableSelection' );\n\t * tableSelection.setCellSelection( firstCell, lastCell );\n\t * ```\n\t */ setCellSelection(anchorCell, targetCell) {\n        const cellsToSelect = this._getCellsToSelect(anchorCell, targetCell);\n        this.editor.model.change((writer)=>{\n            writer.setSelection(cellsToSelect.cells.map((cell)=>writer.createRangeOn(cell)), {\n                backward: cellsToSelect.backward\n            });\n        });\n    }\n    /**\n\t * Returns the focus cell from the current selection.\n\t */ getFocusCell() {\n        const selection = this.editor.model.document.selection;\n        const focusCellRange = [\n            ...selection.getRanges()\n        ].pop();\n        const element = focusCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n\t * Returns the anchor cell from the current selection.\n\t */ getAnchorCell() {\n        const selection = this.editor.model.document.selection;\n        const anchorCellRange = first(selection.getRanges());\n        const element = anchorCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n\t * Defines a selection converter which marks the selected cells with a specific class.\n\t *\n\t * The real DOM selection is put in the last cell. Since the order of ranges is dependent on whether the\n\t * selection is backward or not, the last cell will usually be close to the \"focus\" end of the selection\n\t * (a selection has anchor and focus).\n\t *\n\t * The real DOM selection is then hidden with CSS.\n\t */ _defineSelectionConverter() {\n        const editor = this.editor;\n        const highlighted = new Set();\n        editor.conversion.for('editingDowncast').add((dispatcher)=>dispatcher.on('selection', (evt, data, conversionApi)=>{\n                const viewWriter = conversionApi.writer;\n                clearHighlightedTableCells(viewWriter);\n                const selectedCells = this.getSelectedTableCells();\n                if (!selectedCells) {\n                    return;\n                }\n                for (const tableCell of selectedCells){\n                    const viewElement = conversionApi.mapper.toViewElement(tableCell);\n                    viewWriter.addClass('ck-editor__editable_selected', viewElement);\n                    highlighted.add(viewElement);\n                }\n                const lastViewCell = conversionApi.mapper.toViewElement(selectedCells[selectedCells.length - 1]);\n                viewWriter.setSelection(lastViewCell, 0);\n            }, {\n                priority: 'lowest'\n            }));\n        function clearHighlightedTableCells(viewWriter) {\n            for (const previouslyHighlighted of highlighted){\n                viewWriter.removeClass('ck-editor__editable_selected', previouslyHighlighted);\n            }\n            highlighted.clear();\n        }\n    }\n    /**\n\t * Creates a listener that reacts to changes in {@link #isEnabled} and, if the plugin was disabled,\n\t * it collapses the multi-cell selection to a regular selection placed inside a table cell.\n\t *\n\t * This listener helps features that disable the table selection plugin bring the selection\n\t * to a clear state they can work with (for instance, because they don't support multiple cell selection).\n\t */ _enablePluginDisabling() {\n        const editor = this.editor;\n        this.on('change:isEnabled', ()=>{\n            if (!this.isEnabled) {\n                const selectedCells = this.getSelectedTableCells();\n                if (!selectedCells) {\n                    return;\n                }\n                editor.model.change((writer)=>{\n                    const position = writer.createPositionAt(selectedCells[0], 0);\n                    const range = editor.model.schema.getNearestSelectionRange(position);\n                    writer.setSelection(range);\n                });\n            }\n        });\n    }\n    /**\n\t * Overrides the default `model.deleteContent()` behavior over a selected table fragment.\n\t *\n\t * @param args Delete content method arguments.\n\t */ _handleDeleteContent(event, args) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selection = args[0];\n        const options = args[1];\n        const model = this.editor.model;\n        const isBackward = !options || options.direction == 'backward';\n        const selectedTableCells = tableUtils.getSelectedTableCells(selection);\n        if (!selectedTableCells.length) {\n            return;\n        }\n        event.stop();\n        model.change((writer)=>{\n            const tableCellToSelect = selectedTableCells[isBackward ? selectedTableCells.length - 1 : 0];\n            model.change((writer)=>{\n                for (const tableCell of selectedTableCells){\n                    model.deleteContent(writer.createSelection(tableCell, 'in'));\n                }\n            });\n            const rangeToSelect = model.schema.getNearestSelectionRange(writer.createPositionAt(tableCellToSelect, 0));\n            // Note: we ignore the case where rangeToSelect may be null because deleteContent() will always (unless someone broke it)\n            // create an empty paragraph to accommodate the selection.\n            if (selection.is('documentSelection')) {\n                writer.setSelection(rangeToSelect);\n            } else {\n                selection.setTo(rangeToSelect);\n            }\n        });\n    }\n    /**\n\t * This handler makes it possible to remove the content of all selected cells by starting to type.\n\t * If you take a look at {@link #_defineSelectionConverter} you will find out that despite the multi-cell selection being set\n\t * in the model, the view selection is collapsed in the last cell (because most browsers are unable to render multi-cell selections;\n\t * yes, it's a hack).\n\t *\n\t * When multiple cells are selected in the model and the user starts to type, the\n\t * {@link module:engine/view/document~ViewDocument#event:insertText} event carries information provided by the\n\t * beforeinput DOM  event, that in turn only knows about this collapsed DOM selection in the last cell.\n\t *\n\t * As a result, the selected cells have no chance to be cleaned up. To fix this, this listener intercepts\n\t * the event and injects the custom view selection in the data that translates correctly to the actual state\n\t * of the multi-cell selection in the model.\n\t *\n\t * @param data Insert text event data.\n\t */ _handleInsertTextEvent(evt, data) {\n        const editor = this.editor;\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return;\n        }\n        const view = editor.editing.view;\n        const mapper = editor.editing.mapper;\n        const viewRanges = selectedCells.map((tableCell)=>view.createRangeOn(mapper.toViewElement(tableCell)));\n        data.selection = view.createSelection(viewRanges);\n        // Do not let the browser handle it itself. We must modify the model and then apply changes to the view and DOM.\n        data.preventDefault();\n    }\n    /**\n\t * Returns an array of table cells that should be selected based on the\n\t * given anchor cell and target (focus) cell.\n\t *\n\t * The cells are returned in a reverse direction if the selection is backward.\n\t */ _getCellsToSelect(anchorCell, targetCell) {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const startLocation = tableUtils.getCellLocation(anchorCell);\n        const endLocation = tableUtils.getCellLocation(targetCell);\n        const startRow = Math.min(startLocation.row, endLocation.row);\n        const endRow = Math.max(startLocation.row, endLocation.row);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        // Adjust the selection to include the entire row if a cell with colspan is selected.\n        // This ensures that the selection covers the full width of the colspan cell.\n        //\n        // Example:\n        // +---+---+---+---+\n        // | A | B | C | D |\n        // +---+---+---+---+\n        // | E             |\n        // +---+---+---+---+\n        //\n        // If the selection starts at `B` and ends at `E`, the entire first row should be selected.\n        //\n        // In other words, the selection will represent the following cells:\n        // \t* Without this adjustment, only `B`, `A` and `E` would be selected.\n        // \t* With this adjustment, `A`, `B`, `C`, `D`, and `E` are selected.\n        //\n        // See: https://github.com/ckeditor/ckeditor5/issues/17538\n        const endColumnExtraColspan = parseInt(targetCell.getAttribute('colspan') || '1') - 1;\n        const endColumn = Math.max(startLocation.column, endLocation.column + endColumnExtraColspan);\n        // 2-dimensional array of the selected cells to ease flipping the order of cells for backward selections.\n        const selectionMap = new Array(endRow - startRow + 1).fill(null).map(()=>[]);\n        const walkerOptions = {\n            startRow,\n            endRow,\n            startColumn,\n            endColumn\n        };\n        for (const { row, cell } of new TableWalker(anchorCell.findAncestor('table'), walkerOptions)){\n            selectionMap[row - startRow].push(cell);\n        }\n        const flipVertically = endLocation.row < startLocation.row;\n        const flipHorizontally = endLocation.column < startLocation.column;\n        if (flipVertically) {\n            selectionMap.reverse();\n        }\n        if (flipHorizontally) {\n            selectionMap.forEach((row)=>row.reverse());\n        }\n        return {\n            cells: selectionMap.flat(),\n            backward: flipVertically || flipHorizontally\n        };\n    }\n}\n\n/**\n * This plugin adds support for copying/cutting/pasting fragments of tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableClipboard extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableClipboard';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardMarkersUtils,\n            ClipboardPipeline,\n            TableSelection,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        this.listenTo(viewDocument, 'copy', (evt, data)=>this._onCopyCut(evt, data));\n        this.listenTo(viewDocument, 'cut', (evt, data)=>this._onCopyCut(evt, data));\n        this._listenToContentInsertion();\n        this.decorate('_replaceTableSlotCell');\n    }\n    /**\n\t * Sets up listening for events from the clipboard pipeline to properly handle\n\t * table content merging during paste/drop operations.\n\t *\n\t * When a user is dragging and dropping a table, we want to insert the entire table into\n\t * a table cell instead of merging table contents. For paste and other events,\n\t * the normal table merge behavior is applied.\n\t */ _listenToContentInsertion() {\n        const { editor } = this;\n        const clipboardPipeline = editor.plugins.get(ClipboardPipeline);\n        const tableSelection = editor.plugins.get(TableSelection);\n        let isPaste = false;\n        clipboardPipeline.on('contentInsertion', (evt, data)=>{\n            isPaste = data.method === 'paste';\n        });\n        this.listenTo(editor.model, 'insertContent', (evt, [content, selectable])=>{\n            // Handles drag-and-drop of tables, where tables are inserted into selected cells rather than merged.\n            // The `isPaste` flag handles scenarios where other features (e.g., Templates) insert tables into specific cells.\n            if (isPaste || tableSelection.getSelectedTableCells() !== null) {\n                this._onInsertContent(evt, content, selectable);\n            }\n        }, {\n            priority: 'high'\n        });\n        clipboardPipeline.on('contentInsertion', ()=>{\n            isPaste = false;\n        }, {\n            priority: 'lowest'\n        });\n    }\n    /**\n\t * Copies table content to a clipboard on \"copy\" & \"cut\" events.\n\t *\n\t * @param evt An object containing information about the handled event.\n\t * @param data Clipboard event data.\n\t */ _onCopyCut(evt, data) {\n        const view = this.editor.editing.view;\n        const tableSelection = this.editor.plugins.get(TableSelection);\n        const clipboardMarkersUtils = this.editor.plugins.get(ClipboardMarkersUtils);\n        if (!tableSelection.getSelectedTableCells()) {\n            return;\n        }\n        if (evt.name == 'cut' && !this.editor.model.canEditAt(this.editor.model.document.selection)) {\n            return;\n        }\n        data.preventDefault();\n        evt.stop();\n        this.editor.model.enqueueChange({\n            isUndoable: evt.name === 'cut'\n        }, ()=>{\n            const documentFragment = clipboardMarkersUtils._copySelectedFragmentWithMarkers(evt.name, this.editor.model.document.selection, ()=>tableSelection.getSelectionAsFragment());\n            view.document.fire('clipboardOutput', {\n                dataTransfer: data.dataTransfer,\n                content: this.editor.data.toView(documentFragment),\n                method: evt.name\n            });\n        });\n    }\n    /**\n\t * Overrides default {@link module:engine/model/model~Model#insertContent `model.insertContent()`} method to handle pasting table inside\n\t * selected table fragment.\n\t *\n\t * Depending on selected table fragment:\n\t * - If a selected table fragment is smaller than paste table it will crop pasted table to match dimensions.\n\t * - If dimensions are equal it will replace selected table fragment with a pasted table contents.\n\t *\n\t * @param content The content to insert.\n\t * @param selectable The selection into which the content should be inserted.\n\t * If not provided the current model document selection will be used.\n\t */ _onInsertContent(evt, content, selectable) {\n        if (selectable && !selectable.is('documentSelection')) {\n            return;\n        }\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const clipboardMarkersUtils = this.editor.plugins.get(ClipboardMarkersUtils);\n        // We might need to crop table before inserting so reference might change.\n        const pastedTable = this.getTableIfOnlyTableInContent(content, model);\n        if (!pastedTable) {\n            return;\n        }\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        if (!selectedTableCells.length) {\n            removeEmptyRowsColumns(pastedTable, tableUtils);\n            return;\n        }\n        // Override default model.insertContent() handling at this point.\n        evt.stop();\n        if (content.is('documentFragment')) {\n            clipboardMarkersUtils._pasteMarkersIntoTransformedElement(content.markers, (writer)=>this._replaceSelectedCells(pastedTable, selectedTableCells, writer));\n        } else {\n            this.editor.model.change((writer)=>{\n                this._replaceSelectedCells(pastedTable, selectedTableCells, writer);\n            });\n        }\n    }\n    /**\n\t * Inserts provided `selectedTableCells` into `pastedTable`.\n\t */ _replaceSelectedCells(pastedTable, selectedTableCells, writer) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const pastedDimensions = {\n            width: tableUtils.getColumns(pastedTable),\n            height: tableUtils.getRows(pastedTable)\n        };\n        // Prepare the table for pasting.\n        const selection = prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils);\n        // Beyond this point we operate on a fixed content table with rectangular selection and proper last row/column values.\n        const selectionHeight = selection.lastRow - selection.firstRow + 1;\n        const selectionWidth = selection.lastColumn - selection.firstColumn + 1;\n        // Crop pasted table if:\n        // - Pasted table dimensions exceeds selection area.\n        // - Pasted table has broken layout (ie some cells sticks out by the table dimensions established by the first and last row).\n        //\n        // Note: The table dimensions are established by the width of the first row and the total number of rows.\n        // It is possible to programmatically create a table that has rows which would have cells anchored beyond first row width but\n        // such table will not be created by other editing solutions.\n        const cropDimensions = {\n            startRow: 0,\n            startColumn: 0,\n            endRow: Math.min(selectionHeight, pastedDimensions.height) - 1,\n            endColumn: Math.min(selectionWidth, pastedDimensions.width) - 1\n        };\n        pastedTable = cropTableToDimensions(pastedTable, cropDimensions, writer);\n        // Content table to which we insert a pasted table.\n        const selectedTable = selectedTableCells[0].findAncestor('table');\n        const cellsToSelect = this._replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer);\n        if (this.editor.plugins.get('TableSelection').isEnabled) {\n            // Selection ranges must be sorted because the first and last selection ranges are considered\n            // as anchor/focus cell ranges for multi-cell selection.\n            const selectionRanges = tableUtils.sortRanges(cellsToSelect.map((cell)=>writer.createRangeOn(cell)));\n            writer.setSelection(selectionRanges);\n        } else {\n            // Set selection inside first cell if multi-cell selection is disabled.\n            writer.setSelection(cellsToSelect[0], 0);\n        }\n        return selectedTable;\n    }\n    /**\n\t * Replaces the part of selectedTable with pastedTable.\n\t */ _replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer) {\n        const { width: pastedWidth, height: pastedHeight } = pastedDimensions;\n        // Holds two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n        const pastedTableLocationMap = createLocationMap(pastedTable, pastedWidth, pastedHeight);\n        const selectedTableMap = [\n            ...new TableWalker(selectedTable, {\n                startRow: selection.firstRow,\n                endRow: selection.lastRow,\n                startColumn: selection.firstColumn,\n                endColumn: selection.lastColumn,\n                includeAllSlots: true\n            })\n        ];\n        // Selection must be set to pasted cells (some might be removed or new created).\n        const cellsToSelect = [];\n        // Store next cell insert position.\n        let insertPosition;\n        // Content table replace cells algorithm iterates over a selected table fragment and:\n        //\n        // - Removes existing table cells at current slot (location).\n        // - Inserts cell from a pasted table for a matched slots.\n        //\n        // This ensures proper table geometry after the paste\n        for (const tableSlot of selectedTableMap){\n            const { row, column } = tableSlot;\n            // Save the insert position for current row start.\n            if (column === selection.firstColumn) {\n                insertPosition = tableSlot.getPositionBefore();\n            }\n            // Map current table slot location to an pasted table slot location.\n            const pastedRow = row - selection.firstRow;\n            const pastedColumn = column - selection.firstColumn;\n            const pastedCell = pastedTableLocationMap[pastedRow % pastedHeight][pastedColumn % pastedWidth];\n            // Clone cell to insert (to duplicate its attributes and children).\n            // Cloning is required to support repeating pasted table content when inserting to a bigger selection.\n            const cellToInsert = pastedCell ? writer.cloneElement(pastedCell) : null;\n            // Replace the cell from the current slot with new table cell.\n            const newTableCell = this._replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer);\n            // The cell was only removed.\n            if (!newTableCell) {\n                continue;\n            }\n            // Trim the cell if it's row/col-spans would exceed selection area.\n            trimTableCellIfNeeded(newTableCell, row, column, selection.lastRow, selection.lastColumn, writer);\n            cellsToSelect.push(newTableCell);\n            insertPosition = writer.createPositionAfter(newTableCell);\n        }\n        // If there are any headings, all the cells that overlap from heading must be splitted.\n        const headingRows = parseInt(selectedTable.getAttribute('headingRows') || '0');\n        const headingColumns = parseInt(selectedTable.getAttribute('headingColumns') || '0');\n        const areHeadingRowsIntersectingSelection = selection.firstRow < headingRows && headingRows <= selection.lastRow;\n        const areHeadingColumnsIntersectingSelection = selection.firstColumn < headingColumns && headingColumns <= selection.lastColumn;\n        if (areHeadingRowsIntersectingSelection) {\n            const columnsLimit = {\n                first: selection.firstColumn,\n                last: selection.lastColumn\n            };\n            const newCells = doHorizontalSplit(selectedTable, headingRows, columnsLimit, writer, selection.firstRow);\n            cellsToSelect.push(...newCells);\n        }\n        if (areHeadingColumnsIntersectingSelection) {\n            const rowsLimit = {\n                first: selection.firstRow,\n                last: selection.lastRow\n            };\n            const newCells = doVerticalSplit(selectedTable, headingColumns, rowsLimit, writer);\n            cellsToSelect.push(...newCells);\n        }\n        return cellsToSelect;\n    }\n    /**\n\t * Replaces a single table slot.\n\t *\n\t * @returns Inserted table cell or null if slot should remain empty.\n\t * @private\n\t */ _replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer) {\n        const { cell, isAnchor } = tableSlot;\n        // If the slot is occupied by a cell in a selected table - remove it.\n        // The slot of this cell will be either:\n        // - Replaced by a pasted table cell.\n        // - Spanned by a previously pasted table cell.\n        if (isAnchor) {\n            writer.remove(cell);\n        }\n        // There is no cell to insert (might be spanned by other cell in a pasted table) - advance to the next content table slot.\n        if (!cellToInsert) {\n            return null;\n        }\n        writer.insert(cellToInsert, insertPosition);\n        return cellToInsert;\n    }\n    /**\n\t * Extracts the table for pasting into a table.\n\t *\n\t * @param content The content to insert.\n\t * @param model The editor model.\n\t */ getTableIfOnlyTableInContent(content, model) {\n        if (!content.is('documentFragment') && !content.is('element')) {\n            return null;\n        }\n        // Table passed directly.\n        if (content.is('element', 'table')) {\n            return content;\n        }\n        // We do not support mixed content when pasting table into table.\n        // See: https://github.com/ckeditor/ckeditor5/issues/6817.\n        if (content.childCount == 1 && content.getChild(0).is('element', 'table')) {\n            return content.getChild(0);\n        }\n        // If there are only whitespaces around a table then use that table for pasting.\n        const contentRange = model.createRangeIn(content);\n        for (const element of contentRange.getItems()){\n            if (element.is('element', 'table')) {\n                // Stop checking if there is some content before table.\n                const rangeBefore = model.createRange(contentRange.start, model.createPositionBefore(element));\n                if (model.hasContent(rangeBefore, {\n                    ignoreWhitespaces: true\n                })) {\n                    return null;\n                }\n                // Stop checking if there is some content after table.\n                const rangeAfter = model.createRange(model.createPositionAfter(element), contentRange.end);\n                if (model.hasContent(rangeAfter, {\n                    ignoreWhitespaces: true\n                })) {\n                    return null;\n                }\n                // There wasn't any content neither before nor after.\n                return element;\n            }\n        }\n        return null;\n    }\n}\n/**\n * Prepares a table for pasting and returns adjusted selection dimensions.\n */ function prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils) {\n    const selectedTable = selectedTableCells[0].findAncestor('table');\n    const columnIndexes = tableUtils.getColumnIndexes(selectedTableCells);\n    const rowIndexes = tableUtils.getRowIndexes(selectedTableCells);\n    const selection = {\n        firstColumn: columnIndexes.first,\n        lastColumn: columnIndexes.last,\n        firstRow: rowIndexes.first,\n        lastRow: rowIndexes.last\n    };\n    // Single cell selected - expand selection to pasted table dimensions.\n    const shouldExpandSelection = selectedTableCells.length === 1;\n    if (shouldExpandSelection) {\n        selection.lastRow += pastedDimensions.height - 1;\n        selection.lastColumn += pastedDimensions.width - 1;\n        expandTableSize(selectedTable, selection.lastRow + 1, selection.lastColumn + 1, tableUtils);\n    }\n    // In case of expanding selection we do not reset the selection so in this case we will always try to fix selection\n    // like in the case of a non-rectangular area. This might be fixed by re-setting selected cells array but this shortcut is safe.\n    if (shouldExpandSelection || !tableUtils.isSelectionRectangular(selectedTableCells)) {\n        // For a non-rectangular selection (ie in which some cells sticks out from a virtual selection rectangle) we need to create\n        // a table layout that has a rectangular selection. This will split cells so the selection become rectangular.\n        // Beyond this point we will operate on fixed content table.\n        splitCellsToRectangularSelection(selectedTable, selection, writer);\n    } else {\n        selection.lastRow = adjustLastRowIndex(selectedTable, selection);\n        selection.lastColumn = adjustLastColumnIndex(selectedTable, selection);\n    }\n    return selection;\n}\n/**\n * Expand table (in place) to expected size.\n */ function expandTableSize(table, expectedHeight, expectedWidth, tableUtils) {\n    const tableWidth = tableUtils.getColumns(table);\n    const tableHeight = tableUtils.getRows(table);\n    if (expectedWidth > tableWidth) {\n        tableUtils.insertColumns(table, {\n            at: tableWidth,\n            columns: expectedWidth - tableWidth\n        });\n    }\n    if (expectedHeight > tableHeight) {\n        tableUtils.insertRows(table, {\n            at: tableHeight,\n            rows: expectedHeight - tableHeight\n        });\n    }\n}\n/**\n * Returns two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n *\n * At given row & column location it might be one of:\n *\n * * cell - cell from pasted table anchored at this location.\n * * null - if no cell is anchored at this location.\n *\n * For instance, from a table below:\n *\n *   +----+----+----+----+\n *   | 00 | 01 | 02 | 03 |\n *   +    +----+----+----+\n *   |    | 11      | 13 |\n *   +----+         +----+\n *   | 20 |         | 23 |\n *   +----+----+----+----+\n *\n * The method will return an array (numbers represents cell element):\n *\n * ```ts\n * const map = [\n *   [ '00', '01', '02', '03' ],\n *   [ null, '11', null, '13' ],\n *   [ '20', null, null, '23' ]\n * ]\n * ```\n *\n * This allows for a quick access to table at give row & column. For instance to access table cell \"13\" from pasted table call:\n *\n * ```ts\n * const cell = map[ 1 ][ 3 ]\n * ```\n */ function createLocationMap(table, width, height) {\n    // Create height x width (row x column) two-dimensional table to store cells.\n    const map = new Array(height).fill(null).map(()=>new Array(width).fill(null));\n    for (const { column, row, cell } of new TableWalker(table)){\n        map[row][column] = cell;\n    }\n    return map;\n}\n/**\n * Make selected cells rectangular by splitting the cells that stand out from a rectangular selection.\n *\n * In the table below a selection is shown with \"::\" and slots with anchor cells are named.\n *\n * +----+----+----+----+----+                    +----+----+----+----+----+\n * | 00 | 01 | 02 | 03      |                    | 00 | 01 | 02 | 03      |\n * +    +----+    +----+----+                    |    ::::::::::::::::----+\n * |    | 11 |    | 13 | 14 |                    |    ::11 |    | 13:: 14 |    <- first row\n * +----+----+    +    +----+                    +----::---|    |   ::----+\n * | 20 | 21 |    |    | 24 |   select cells:    | 20 ::21 |    |   :: 24 |\n * +----+----+    +----+----+     11 -> 33       +----::---|    |---::----+\n * | 30      |    | 33 | 34 |                    | 30 ::   |    | 33:: 34 |    <- last row\n * +         +    +----+    +                    |    ::::::::::::::::    +\n * |         |    | 43 |    |                    |         |    | 43 |    |\n * +----+----+----+----+----+                    +----+----+----+----+----+\n *                                                      ^          ^\n *                                                     first & last columns\n *\n * Will update table to:\n *\n *                       +----+----+----+----+----+\n *                       | 00 | 01 | 02 | 03      |\n *                       +    +----+----+----+----+\n *                       |    | 11 |    | 13 | 14 |\n *                       +----+----+    +    +----+\n *                       | 20 | 21 |    |    | 24 |\n *                       +----+----+    +----+----+\n *                       | 30 |    |    | 33 | 34 |\n *                       +    +----+----+----+    +\n *                       |    |    |    | 43 |    |\n *                       +----+----+----+----+----+\n *\n * In th example above:\n * - Cell \"02\" which have `rowspan = 4` must be trimmed at first and at after last row.\n * - Cell \"03\" which have `rowspan = 2` and `colspan = 2` must be trimmed at first column and after last row.\n * - Cells \"00\", \"03\" & \"30\" which cannot be cut by this algorithm as they are outside the trimmed area.\n * - Cell \"13\" cannot be cut as it is inside the trimmed area.\n */ function splitCellsToRectangularSelection(table, dimensions, writer) {\n    const { firstRow, lastRow, firstColumn, lastColumn } = dimensions;\n    const rowIndexes = {\n        first: firstRow,\n        last: lastRow\n    };\n    const columnIndexes = {\n        first: firstColumn,\n        last: lastColumn\n    };\n    // 1. Split cells vertically in two steps as first step might create cells that needs to split again.\n    doVerticalSplit(table, firstColumn, rowIndexes, writer);\n    doVerticalSplit(table, lastColumn + 1, rowIndexes, writer);\n    // 2. Split cells horizontally in two steps as first step might create cells that needs to split again.\n    doHorizontalSplit(table, firstRow, columnIndexes, writer);\n    doHorizontalSplit(table, lastRow + 1, columnIndexes, writer, firstRow);\n}\nfunction doHorizontalSplit(table, splitRow, limitColumns, writer, startRow = 0) {\n    // If selection starts at first row then no split is needed.\n    if (splitRow < 1) {\n        return;\n    }\n    const overlappingCells = getVerticallyOverlappingCells(table, splitRow, startRow);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ column, cellWidth })=>isAffectedBySelection(column, cellWidth, limitColumns));\n    return cellsToSplit.map(({ cell })=>splitHorizontally(cell, splitRow, writer));\n}\nfunction doVerticalSplit(table, splitColumn, limitRows, writer) {\n    // If selection starts at first column then no split is needed.\n    if (splitColumn < 1) {\n        return;\n    }\n    const overlappingCells = getHorizontallyOverlappingCells(table, splitColumn);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ row, cellHeight })=>isAffectedBySelection(row, cellHeight, limitRows));\n    return cellsToSplit.map(({ cell, column })=>splitVertically(cell, column, splitColumn, writer));\n}\n/**\n * Checks if cell at given row (column) is affected by a rectangular selection defined by first/last column (row).\n *\n * The same check is used for row as for column.\n */ function isAffectedBySelection(index, span, limit) {\n    const endIndex = index + span - 1;\n    const { first, last } = limit;\n    const isInsideSelection = index >= first && index <= last;\n    const overlapsSelectionFromOutside = index < first && endIndex >= first;\n    return isInsideSelection || overlapsSelectionFromOutside;\n}\n\n/**\n * This plugin enables keyboard navigation for tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableKeyboard extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableKeyboard';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableSelection,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = editor.t;\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>this._onArrowKey(...args), {\n            context: 'table'\n        });\n        this.listenTo(viewDocument, 'tab', (...args)=>this._handleTabOnSelectedTable(...args), {\n            context: 'figure'\n        });\n        this.listenTo(viewDocument, 'tab', (...args)=>this._handleTab(...args), {\n            context: [\n                'th',\n                'td'\n            ]\n        });\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'table',\n            label: t('Keystrokes that can be used in a table cell'),\n            keystrokes: [\n                {\n                    label: t('Move the selection to the next cell'),\n                    keystroke: 'Tab'\n                },\n                {\n                    label: t('Move the selection to the previous cell'),\n                    keystroke: 'Shift+Tab'\n                },\n                {\n                    label: t('Insert a new table row (when in the last cell of a table)'),\n                    keystroke: 'Tab'\n                },\n                {\n                    label: t('Navigate through the table'),\n                    keystroke: [\n                        [\n                            'arrowup'\n                        ],\n                        [\n                            'arrowright'\n                        ],\n                        [\n                            'arrowdown'\n                        ],\n                        [\n                            'arrowleft'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t */ _handleTabOnSelectedTable(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        if (!selectedElement || !selectedElement.is('element', 'table')) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeIn(selectedElement.getChild(0).getChild(0)));\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * inside table cells.\n\t */ _handleTab(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const selection = editor.model.document.selection;\n        const isForward = !domEventData.shiftKey;\n        let tableCell = tableUtils.getTableCellsContainingSelection(selection)[0];\n        if (!tableCell) {\n            tableCell = tableSelection.getFocusCell();\n        }\n        if (!tableCell) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const currentRowIndex = table.getChildIndex(tableRow);\n        const currentCellIndex = tableRow.getChildIndex(tableCell);\n        const isFirstCellInRow = currentCellIndex === 0;\n        if (!isForward && isFirstCellInRow && currentRowIndex === 0) {\n            // Set the selection over the whole table if the selection was in the first table cell.\n            editor.model.change((writer)=>{\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        const isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n        const isLastRow = currentRowIndex === tableUtils.getRows(table) - 1;\n        if (isForward && isLastRow && isLastCellInRow) {\n            editor.execute('insertTableRowBelow');\n            // Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n            // or it got overwritten) set the selection over the whole table to mirror the first cell case.\n            if (currentRowIndex === tableUtils.getRows(table) - 1) {\n                editor.model.change((writer)=>{\n                    writer.setSelection(writer.createRangeOn(table));\n                });\n                return;\n            }\n        }\n        let cellToFocus;\n        // Move to the first cell in the next row.\n        if (isForward && isLastCellInRow) {\n            const nextRow = table.getChild(currentRowIndex + 1);\n            cellToFocus = nextRow.getChild(0);\n        } else if (!isForward && isFirstCellInRow) {\n            const previousRow = table.getChild(currentRowIndex - 1);\n            cellToFocus = previousRow.getChild(previousRow.childCount - 1);\n        } else {\n            cellToFocus = tableRow.getChild(currentCellIndex + (isForward ? 1 : -1));\n        }\n        editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeIn(cellToFocus));\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:keydown keydown} events.\n\t */ _onArrowKey(eventInfo, domEventData) {\n        const editor = this.editor;\n        const keyCode = domEventData.keyCode;\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, editor.locale.contentLanguageDirection);\n        const wasHandled = this._handleArrowKeys(direction, domEventData.shiftKey);\n        if (wasHandled) {\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles arrow keys to move the selection around the table.\n\t *\n\t * @param direction The direction of the arrow key.\n\t * @param expandSelection If the current selection should be expanded.\n\t * @returns Returns `true` if key was handled.\n\t */ _handleArrowKeys(direction, expandSelection) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const isForward = [\n            'right',\n            'down'\n        ].includes(direction);\n        // In case one or more table cells are selected (from outside),\n        // move the selection to a cell adjacent to the selected table fragment.\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            let focusCell;\n            if (expandSelection) {\n                focusCell = tableSelection.getFocusCell();\n            } else {\n                focusCell = isForward ? selectedCells[selectedCells.length - 1] : selectedCells[0];\n            }\n            this._navigateFromCellInDirection(focusCell, direction, expandSelection);\n            return true;\n        }\n        // Abort if we're not in a table cell.\n        const tableCell = selection.focus.findAncestor('tableCell');\n        /* istanbul ignore if: paranoid check -- @preserve */ if (!tableCell) {\n            return false;\n        }\n        // When the selection is not collapsed.\n        if (!selection.isCollapsed) {\n            if (expandSelection) {\n                // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n                // Selection for sure will not approach cell edge.\n                //\n                // With a special case when all cell content is selected - then selection should expand to the other cell.\n                // Note: When the entire cell gets selected using CTRL+A, the selection is always forward.\n                if (selection.isBackward == isForward && !selection.containsEntireContent(tableCell)) {\n                    return false;\n                }\n            } else {\n                const selectedElement = selection.getSelectedElement();\n                // It will collapse for non-object selected so it's not going to move to other cell.\n                if (!selectedElement || !model.schema.isObject(selectedElement)) {\n                    return false;\n                }\n            }\n        }\n        // Let's check if the selection is at the beginning/end of the cell.\n        if (this._isSelectionAtCellEdge(selection, tableCell, isForward)) {\n            this._navigateFromCellInDirection(tableCell, direction, expandSelection);\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Returns `true` if the selection is at the boundary of a table cell according to the navigation direction.\n\t *\n\t * @param selection The current selection.\n\t * @param tableCell The current table cell element.\n\t * @param isForward The expected navigation direction.\n\t */ _isSelectionAtCellEdge(selection, tableCell, isForward) {\n        const model = this.editor.model;\n        const schema = this.editor.model.schema;\n        const focus = isForward ? selection.getLastPosition() : selection.getFirstPosition();\n        // If the current limit element is not table cell we are for sure not at the cell edge.\n        // Also `modifySelection` will not let us out of it.\n        if (!schema.getLimitElement(focus).is('element', 'tableCell')) {\n            const boundaryPosition = model.createPositionAt(tableCell, isForward ? 'end' : 0);\n            return boundaryPosition.isTouching(focus);\n        }\n        const probe = model.createSelection(focus);\n        model.modifySelection(probe, {\n            direction: isForward ? 'forward' : 'backward'\n        });\n        // If there was no change in the focus position, then it's not possible to move the selection there.\n        return focus.isEqual(probe.focus);\n    }\n    /**\n\t * Moves the selection from the given table cell in the specified direction.\n\t *\n\t * @param focusCell The table cell that is current multi-cell selection focus.\n\t * @param direction Direction in which selection should move.\n\t * @param expandSelection If the current selection should be expanded. Default value is false.\n\t */ _navigateFromCellInDirection(focusCell, direction, expandSelection = false) {\n        const model = this.editor.model;\n        const table = focusCell.findAncestor('table');\n        const tableMap = [\n            ...new TableWalker(table, {\n                includeAllSlots: true\n            })\n        ];\n        const { row: lastRow, column: lastColumn } = tableMap[tableMap.length - 1];\n        const currentCellInfo = tableMap.find(({ cell })=>cell == focusCell);\n        let { row, column } = currentCellInfo;\n        switch(direction){\n            case 'left':\n                column--;\n                break;\n            case 'up':\n                row--;\n                break;\n            case 'right':\n                column += currentCellInfo.cellWidth;\n                break;\n            case 'down':\n                row += currentCellInfo.cellHeight;\n                break;\n        }\n        const isOutsideVertically = row < 0 || row > lastRow;\n        const isBeforeFirstCell = column < 0 && row <= 0;\n        const isAfterLastCell = column > lastColumn && row >= lastRow;\n        // Note that if the table cell at the end of a row is row-spanned then isAfterLastCell will never be true.\n        // However, we don't know if user was navigating on the last row or not, so let's stay in the table.\n        if (isOutsideVertically || isBeforeFirstCell || isAfterLastCell) {\n            model.change((writer)=>{\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        if (column < 0) {\n            column = expandSelection ? 0 : lastColumn;\n            row--;\n        } else if (column > lastColumn) {\n            column = expandSelection ? lastColumn : 0;\n            row++;\n        }\n        const cellToSelect = tableMap.find((cellInfo)=>cellInfo.row == row && cellInfo.column == column).cell;\n        const isForward = [\n            'right',\n            'down'\n        ].includes(direction);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        if (expandSelection && tableSelection.isEnabled) {\n            const anchorCell = tableSelection.getAnchorCell() || focusCell;\n            tableSelection.setCellSelection(anchorCell, cellToSelect);\n        } else {\n            const positionToSelect = model.createPositionAt(cellToSelect, isForward ? 0 : 'end');\n            model.change((writer)=>{\n                writer.setSelection(positionToSelect);\n            });\n        }\n    }\n}\n\n/**\n * The mouse selection event observer.\n *\n * It registers listeners for the following DOM events:\n *\n * - `'mousemove'`\n * - `'mouseleave'`\n *\n * Note that this observer is disabled by default. To enable this observer, it needs to be added to\n * {@link module:engine/view/view~EditingView} using the {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * The observer is registered by the {@link module:table/tableselection~TableSelection} plugin.\n *\n * @internal\n */ class MouseEventsObserver extends DomEventObserver {\n    domEventType = [\n        'mousemove',\n        'mouseleave'\n    ];\n    /**\n\t * @inheritDoc\n\t */ onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n}\n\n/**\n * This plugin enables a table cells' selection with the mouse.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableMouse extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableMouse';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableSelection,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Currently the MouseObserver only handles `mousedown` and `mouseup` events.\n        // TODO move to the engine?\n        editor.editing.view.addObserver(MouseEventsObserver);\n        this._enableShiftClickSelection();\n        this._enableMouseDragSelection();\n    }\n    /**\n\t * Enables making cells selection by <kbd>Shift</kbd>+click. Creates a selection from the cell which previously held\n\t * the selection to the cell which was clicked. It can be the same cell, in which case it selects a single cell.\n\t */ _enableShiftClickSelection() {\n        const editor = this.editor;\n        const tableUtils = editor.plugins.get(TableUtils);\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(TableSelection);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData)=>{\n            const selection = editor.model.document.selection;\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            if (!domEventData.domEvent.shiftKey) {\n                return;\n            }\n            const anchorCell = tableSelection.getAnchorCell() || tableUtils.getTableCellsContainingSelection(selection)[0];\n            if (!anchorCell) {\n                return;\n            }\n            const targetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (targetCell && haveSameTableParent(anchorCell, targetCell)) {\n                blockSelectionChange = true;\n                tableSelection.setCellSelection(anchorCell, targetCell);\n                domEventData.preventDefault();\n            }\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', ()=>{\n            blockSelectionChange = false;\n        });\n        // We need to ignore a `selectionChange` event that is fired after we render our new table cells selection.\n        // When downcasting table cells selection to the view, we put the view selection in the last selected cell\n        // in a place that may not be natively a \"correct\" location. This is – we put it directly in the `<td>` element.\n        // All browsers fire the native `selectionchange` event.\n        // However, all browsers except Safari return the selection in the exact place where we put it\n        // (even though it's visually normalized). Safari returns `<td><p>^foo` that makes our selection observer\n        // fire our `selectionChange` event (because the view selection that we set in the first step differs from the DOM selection).\n        // Since `selectionChange` is fired, we automatically update the model selection that moves it that paragraph.\n        // This breaks our dear cells selection.\n        //\n        // Theoretically this issue concerns only Safari that is the only browser that do normalize the selection.\n        // However, to avoid code branching and to have a good coverage for this event blocker, I enabled it for all browsers.\n        //\n        // Note: I'm keeping the `blockSelectionChange` state separately for shift+click and mouse drag (exact same logic)\n        // so I don't have to try to analyze whether they don't overlap in some weird cases. Probably they don't.\n        // But I have other things to do, like writing this comment.\n        this.listenTo(editor.editing.view.document, 'selectionChange', (evt)=>{\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Enables making cells selection by dragging.\n\t *\n\t * The selection is made only on mousemove. Mouse tracking is started on mousedown.\n\t * However, the cells selection is enabled only after the mouse cursor left the anchor cell.\n\t * Thanks to that normal text selection within one cell works just fine. However, you can still select\n\t * just one cell by leaving the anchor cell and moving back to it.\n\t */ _enableMouseDragSelection() {\n        const editor = this.editor;\n        let anchorCell, targetCell;\n        let beganCellSelection = false;\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(TableSelection);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData)=>{\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            // Make sure to not conflict with the shift+click listener and any other possible handler.\n            if (domEventData.domEvent.shiftKey || domEventData.domEvent.ctrlKey || domEventData.domEvent.altKey) {\n                return;\n            }\n            anchorCell = this._getModelTableCellFromDomEvent(domEventData);\n        });\n        this.listenTo(editor.editing.view.document, 'mousemove', (evt, domEventData)=>{\n            if (!domEventData.domEvent.buttons) {\n                return;\n            }\n            if (!anchorCell) {\n                return;\n            }\n            const newTargetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (newTargetCell && haveSameTableParent(anchorCell, newTargetCell)) {\n                targetCell = newTargetCell;\n                // Switch to the cell selection mode after the mouse cursor left the anchor cell.\n                // Switch off only on mouseup (makes selecting a single cell possible).\n                if (!beganCellSelection && targetCell != anchorCell) {\n                    beganCellSelection = true;\n                }\n            }\n            // Yep, not making a cell selection yet. See method docs.\n            if (!beganCellSelection) {\n                return;\n            }\n            blockSelectionChange = true;\n            tableSelection.setCellSelection(anchorCell, targetCell);\n            domEventData.preventDefault();\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', ()=>{\n            beganCellSelection = false;\n            blockSelectionChange = false;\n            anchorCell = null;\n            targetCell = null;\n        });\n        // See the explanation in `_enableShiftClickSelection()`.\n        this.listenTo(editor.editing.view.document, 'selectionChange', (evt)=>{\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Returns the model table cell element based on the target element of the passed DOM event.\n\t *\n\t * @returns Returns the table cell or `undefined`.\n\t */ _getModelTableCellFromDomEvent(domEventData) {\n        // Note: Work with positions (not element mapping) because the target element can be an attribute or other non-mapped element.\n        const viewTargetElement = domEventData.target;\n        const viewPosition = this.editor.editing.view.createPositionAt(viewTargetElement, 0);\n        const modelPosition = this.editor.editing.mapper.toModelPosition(viewPosition);\n        const modelElement = modelPosition.parent;\n        return modelElement.findAncestor('tableCell', {\n            includeSelf: true\n        });\n    }\n}\nfunction haveSameTableParent(cellA, cellB) {\n    return cellA.parent.parent == cellB.parent.parent;\n}\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/tables Table feature documentation}.\n *\n * This is a \"glue\" plugin that loads the following table features:\n *\n * * {@link module:table/tableediting~TableEditing editing feature},\n * * {@link module:table/tableselection~TableSelection selection feature},\n * * {@link module:table/tablekeyboard~TableKeyboard keyboard navigation feature},\n * * {@link module:table/tablemouse~TableMouse mouse selection feature},\n * * {@link module:table/tableclipboard~TableClipboard clipboard feature},\n * * {@link module:table/tableui~TableUI UI feature}.\n */ class Table extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing,\n            TableUI,\n            TableSelection,\n            TableMouse,\n            TableKeyboard,\n            TableClipboard,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Table';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The plain table output feature.\n *\n * This feature strips the `<figure>` tag from the table data. This is because this tag is not supported\n * by most popular email clients and removing it ensures compatibility.\n */ class PlainTableOutput extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PlainTableOutput';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Table\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Override default table data downcast converter.\n        editor.conversion.for('dataDowncast').elementToStructure({\n            model: 'table',\n            view: downcastTableElement,\n            converterPriority: 'high'\n        });\n        // Make sure table <caption> is downcasted into <caption> in the data pipeline when necessary.\n        if (editor.plugins.has('TableCaption')) {\n            editor.conversion.for('dataDowncast').elementToElement({\n                model: 'caption',\n                view: (modelElement, { writer })=>{\n                    if (modelElement.parent.name === 'table') {\n                        return writer.createContainerElement('caption');\n                    }\n                },\n                converterPriority: 'high'\n            });\n        }\n        // Handle border-style, border-color, border-width and background-color table attributes.\n        if (editor.plugins.has('TableProperties')) {\n            downcastTableBorderAndBackgroundAttributes(editor);\n        }\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            dispatcher.on('element:table', (evt, data, conversionApi)=>{\n                // It's not necessary to upcast the `table` class. This class was only added in data downcast\n                // to center a plain table in the editor output.\n                // See: https://github.com/ckeditor/ckeditor5/issues/17888.\n                conversionApi.consumable.consume(data.viewItem, {\n                    classes: 'table'\n                });\n            });\n        });\n    }\n}\n/**\n * The plain table downcast converter callback.\n *\n * @param table Table model element.\n * @param conversionApi The conversion API object.\n * @returns Created element.\n */ function downcastTableElement(table, { writer }) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    // Table head rows slot.\n    const headRowsSlot = writer.createSlot((element)=>element.is('element', 'tableRow') && element.index < headingRows);\n    // Table body rows slot.\n    const bodyRowsSlot = writer.createSlot((element)=>element.is('element', 'tableRow') && element.index >= headingRows);\n    // Table children slot.\n    const childrenSlot = writer.createSlot((element)=>!element.is('element', 'tableRow'));\n    // Table <thead> element with all the heading rows.\n    const theadElement = writer.createContainerElement('thead', null, headRowsSlot);\n    // Table <tbody> element with all the body rows.\n    const tbodyElement = writer.createContainerElement('tbody', null, bodyRowsSlot);\n    // Table contents element containing <thead> and <tbody> when necessary.\n    const tableContentElements = [];\n    if (headingRows) {\n        tableContentElements.push(theadElement);\n    }\n    if (headingRows < table.childCount) {\n        tableContentElements.push(tbodyElement);\n    }\n    // Create table structure.\n    //\n    // <table>\n    //    {children-slot-like-caption}\n    //    <thead>\n    //        {table-head-rows-slot}\n    //    </thead>\n    //    <tbody>\n    //        {table-body-rows-slot}\n    //    </tbody>\n    // </table>\n    return writer.createContainerElement('table', {\n        class: 'table'\n    }, [\n        childrenSlot,\n        ...tableContentElements\n    ]);\n}\n/**\n * Register table border and background attributes converters.\n */ function downcastTableBorderAndBackgroundAttributes(editor) {\n    const modelAttributes = {\n        'border-width': 'tableBorderWidth',\n        'border-color': 'tableBorderColor',\n        'border-style': 'tableBorderStyle',\n        'background-color': 'tableBackgroundColor'\n    };\n    for (const [styleName, modelAttribute] of Object.entries(modelAttributes)){\n        editor.conversion.for('dataDowncast').add((dispatcher)=>{\n            return dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi)=>{\n                const { item, attributeNewValue } = data;\n                const { mapper, writer } = conversionApi;\n                if (!conversionApi.consumable.consume(item, evt.name)) {\n                    return;\n                }\n                const table = mapper.toViewElement(item);\n                if (attributeNewValue) {\n                    writer.setStyle(styleName, attributeNewValue, table);\n                } else {\n                    writer.removeStyle(styleName, table);\n                }\n            }, {\n                priority: 'high'\n            });\n        });\n    }\n}\n\n/**\n * Depending on the position of the selection either return the selected table or the table higher in the hierarchy.\n *\n * @internal\n */ function getSelectionAffectedTableWidget(selection) {\n    const selectedTable = getSelectedTableWidget(selection);\n    if (selectedTable) {\n        return selectedTable;\n    }\n    return getTableWidgetAncestor(selection);\n}\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @internal\n */ function getSelectedTableWidget(selection) {\n    const viewElement = selection.getSelectedElement();\n    if (viewElement && isTableWidget(viewElement)) {\n        return viewElement;\n    }\n    return null;\n}\n/**\n * Returns a table widget editing view element if one is among the selection's ancestors.\n *\n * @internal\n */ function getTableWidgetAncestor(selection) {\n    const selectionPosition = selection.getFirstPosition();\n    if (!selectionPosition) {\n        return null;\n    }\n    let parent = selectionPosition.parent;\n    while(parent){\n        if (parent.is('element') && isTableWidget(parent)) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n/**\n * Checks if a given view element is a table widget.\n */ function isTableWidget(viewElement) {\n    return !!viewElement.getCustomProperty('table') && isWidget(viewElement);\n}\n\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for the table cell content).\n *\n * The table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/tableconfig~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/tableconfig~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n */ class TableToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            WidgetToolbarRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('Table toolbar'),\n                items: tableContentToolbarItems,\n                getRelatedElement: getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('Table toolbar'),\n                items: tableToolbarItems,\n                getRelatedElement: getSelectedTableWidget\n            });\n        }\n    }\n}\n\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @internal\n */ class ColorInputView extends View {\n    /**\n\t * A cached reference to the options passed to the constructor.\n\t */ options;\n    /**\n\t * Tracks information about the DOM focus in the view.\n\t */ focusTracker;\n    /**\n\t * Helps cycling over focusable children in the input view.\n\t */ focusCycler;\n    /**\n\t * A collection of views that can be focused in the view.\n\t */ _focusables;\n    /**\n\t * An instance of the dropdown allowing to select a color from a grid.\n\t */ dropdownView;\n    /**\n\t * An instance of the input allowing the user to type a color value.\n\t */ inputView;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * The flag that indicates whether the user is still typing.\n\t * If set to true, it means that the text input field ({@link #inputView}) still has the focus.\n\t * So, we should interrupt the user by replacing the input's value.\n\t */ _stillTyping;\n    /**\n\t * Creates an instance of the color input view.\n\t *\n\t * @param locale The locale instance.\n\t * @param options The input options.\n\t * @param options.colorDefinitions The colors to be displayed in the palette inside the input's dropdown.\n\t * @param options.columns The number of columns in which the colors will be displayed.\n\t * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n\t * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n\t */ constructor(locale, options){\n        super(locale);\n        this.set('value', '');\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('isEmpty', true);\n        this.options = options;\n        this.focusTracker = new FocusTracker();\n        this._focusables = new ViewCollection();\n        this.dropdownView = this._createDropdownView();\n        this.inputView = this._createInputTextView();\n        this.keystrokes = new KeystrokeHandler();\n        this._stillTyping = false;\n        this.focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate items forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color'\n                ]\n            },\n            children: [\n                this.dropdownView,\n                this.inputView\n            ]\n        });\n        this.on('change:value', (evt, name, inputValue)=>this._setInputValue(inputValue));\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        [\n            this.inputView,\n            this.dropdownView.buttonView\n        ].forEach((view)=>{\n            this.focusTracker.add(view.element);\n            this._focusables.add(view);\n        });\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the view.\n\t */ focus(direction) {\n        if (direction === -1) {\n            this.focusCycler.focusLast();\n        } else {\n            this.focusCycler.focusFirst();\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Creates and configures the {@link #dropdownView}.\n\t */ _createDropdownView() {\n        const locale = this.locale;\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        const colorSelector = this._createColorSelector(locale);\n        const dropdown = createDropdown(locale);\n        const colorPreview = new View();\n        colorPreview.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color__button__preview'\n                ],\n                style: {\n                    backgroundColor: bind.to('value')\n                }\n            },\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-input-color__button__preview__no-color-indicator',\n                            bind.if('value', 'ck-hidden', (value)=>value != '')\n                        ]\n                    }\n                }\n            ]\n        });\n        dropdown.buttonView.extendTemplate({\n            attributes: {\n                class: 'ck-input-color__button'\n            }\n        });\n        dropdown.buttonView.children.add(colorPreview);\n        dropdown.buttonView.label = t('Color picker');\n        dropdown.buttonView.tooltip = true;\n        dropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n        dropdown.panelView.children.add(colorSelector);\n        dropdown.bind('isEnabled').to(this, 'isReadOnly', (value)=>!value);\n        dropdown.on('change:isOpen', (evt, name, isVisible)=>{\n            if (isVisible) {\n                colorSelector.updateSelectedColors();\n                colorSelector.showColorGridsFragment();\n            }\n        });\n        return dropdown;\n    }\n    /**\n\t * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n\t *\n\t * @returns A configured instance to be set as {@link #inputView}.\n\t */ _createInputTextView() {\n        const locale = this.locale;\n        const inputView = new InputTextView(locale);\n        inputView.extendTemplate({\n            on: {\n                blur: inputView.bindTemplate.to('blur')\n            }\n        });\n        inputView.value = this.value;\n        inputView.bind('isReadOnly', 'hasError').to(this);\n        this.bind('isFocused', 'isEmpty').to(inputView);\n        inputView.on('input', ()=>{\n            const inputValue = inputView.element.value;\n            // Check if the value matches one of our defined colors' label.\n            const mappedColor = this.options.colorDefinitions.find((def)=>inputValue === def.label);\n            this._stillTyping = true;\n            this.value = mappedColor && mappedColor.color || inputValue;\n        });\n        inputView.on('blur', ()=>{\n            this._stillTyping = false;\n            this._setInputValue(inputView.element.value);\n        });\n        inputView.delegate('input').to(this);\n        return inputView;\n    }\n    /**\n\t * Creates and configures the panel with \"color grid\" and \"color picker\" inside the {@link #dropdownView}.\n\t */ _createColorSelector(locale) {\n        const t = locale.t;\n        const defaultColor = this.options.defaultColorValue || '';\n        const removeColorButtonLabel = defaultColor ? t('Restore default') : t('Remove color');\n        const colorSelector = new ColorSelectorView(locale, {\n            colors: this.options.colorDefinitions,\n            columns: this.options.columns,\n            removeButtonLabel: removeColorButtonLabel,\n            colorPickerLabel: t('Color picker'),\n            colorPickerViewConfig: this.options.colorPickerConfig === false ? false : {\n                ...this.options.colorPickerConfig,\n                hideInput: true\n            }\n        });\n        colorSelector.appendUI();\n        colorSelector.on('execute', (evt, data)=>{\n            if (data.source === 'colorPickerSaveButton') {\n                this.dropdownView.isOpen = false;\n                return;\n            }\n            this.value = data.value || defaultColor;\n            // Trigger the listener that actually applies the set value.\n            this.fire('input');\n            if (data.source !== 'colorPicker') {\n                this.dropdownView.isOpen = false;\n            }\n        });\n        /**\n\t\t * Color is saved before changes in color picker. In case \"cancel button\" is pressed\n\t\t * this color will be applied.\n\t\t */ let backupColor = this.value;\n        colorSelector.on('colorPicker:cancel', ()=>{\n            /**\n\t\t\t * Revert color to previous value before changes in color picker.\n\t\t\t */ this.value = backupColor;\n            this.fire('input');\n            this.dropdownView.isOpen = false;\n        });\n        colorSelector.colorGridsFragmentView.colorPickerButtonView.on('execute', ()=>{\n            /**\n\t\t\t * Save color value before changes in color picker.\n\t\t\t */ backupColor = this.value;\n        });\n        colorSelector.bind('selectedColor').to(this, 'value');\n        return colorSelector;\n    }\n    /**\n\t * Sets {@link #inputView}'s value property to the color value or color label,\n\t * if there is one and the user is not typing.\n\t *\n\t * Handles cases like:\n\t *\n\t * * Someone picks the color in the grid.\n\t * * The color is set from the plugin level.\n\t *\n\t * @param inputValue Color value to be set.\n\t */ _setInputValue(inputValue) {\n        if (!this._stillTyping) {\n            const normalizedInputValue = normalizeColor(inputValue);\n            // Check if the value matches one of our defined colors.\n            const mappedColor = this.options.colorDefinitions.find((def)=>normalizedInputValue === normalizeColor(def.color));\n            if (mappedColor) {\n                this.inputView.value = mappedColor.label;\n            } else {\n                this.inputView.value = inputValue || '';\n            }\n        }\n    }\n}\n/**\n * Normalizes color value, by stripping extensive whitespace.\n * For example., transforms:\n * * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n * * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n *\n * @param colorString The value to be normalized.\n */ function normalizeColor(colorString) {\n    return colorString// Remove any whitespace right after `(` or `,`.\n    .replace(/([(,])\\s+/g, '$1')// Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n    .replace(/^\\s+|\\s+(?=[),\\s]|$)/g, '')// Then, replace `,` or whitespace with a single space.\n    .replace(/,|\\s/g, ' ');\n}\n\nconst isEmpty = (val)=>val === '';\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @internal\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */ function getBorderStyleLabels(t) {\n    return {\n        none: t('None'),\n        solid: t('Solid'),\n        dotted: t('Dotted'),\n        dashed: t('Dashed'),\n        double: t('Double'),\n        groove: t('Groove'),\n        ridge: t('Ridge'),\n        inset: t('Inset'),\n        outset: t('Outset')\n    };\n}\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @internal\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */ function getLocalizedColorErrorText(t) {\n    return t('The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".');\n}\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @internal\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */ function getLocalizedLengthErrorText(t) {\n    return t('The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".');\n}\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColorStyleValue}.\n *\n * @internal\n */ function colorFieldValidator(value) {\n    value = value.trim().toLowerCase();\n    return isEmpty(value) || isColorStyleValue(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLengthStyleValue}.\n * See {@link module:engine/view/styles/utils~isPercentageStyleValue}.\n *\n * @internal\n */ function lengthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || isLengthStyleValue(value) || isPercentageStyleValue(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLengthStyleValue}.\n *\n * @internal\n */ function lineWidthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || isLengthStyleValue(value);\n}\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @internal\n * @param defaultStyle The default border.\n */ function getBorderStyleDefinitions(view, defaultStyle) {\n    const itemDefinitions = new Collection();\n    const styleLabels = getBorderStyleLabels(view.t);\n    for(const style in styleLabels){\n        const definition = {\n            type: 'button',\n            model: new UIModel({\n                _borderStyleValue: style,\n                label: styleLabels[style],\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        if (style === 'none') {\n            definition.model.bind('isOn').to(view, 'borderStyle', (value)=>{\n                if (defaultStyle === 'none') {\n                    return !value;\n                }\n                return value === style;\n            });\n        } else {\n            definition.model.bind('isOn').to(view, 'borderStyle', (value)=>{\n                return value === style;\n            });\n        }\n        itemDefinitions.add(definition);\n    }\n    return itemDefinitions;\n}\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @internal\n * @param options Configuration options\n * @param options.view The view that has the observable property.\n * @param options.icons Object with button icons.\n * @param options.toolbar The toolbar to fill with buttons.\n * @param options.labels Object with button labels.\n * @param options.propertyName The name of the observable property in the view.\n * @param options.nameToValue A function that maps a button name to a value. By default names are the same as values.\n * @param options.defaultValue Default value for the property.\n */ function fillToolbar(options) {\n    const { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n    for(const name in labels){\n        const button = new ButtonView(view.locale);\n        button.set({\n            role: 'radio',\n            isToggleable: true,\n            label: labels[name],\n            icon: icons[name],\n            tooltip: labels[name]\n        });\n        // If specified the `nameToValue()` callback, map the value based on the option's name.\n        const buttonValue = nameToValue ? nameToValue(name) : name;\n        button.bind('isOn').to(view, propertyName, (value)=>{\n            // `value` comes from `view[ propertyName ]`.\n            let valueToCompare = value;\n            // If it's empty, and the `defaultValue` is specified, use it instead.\n            if (value === '' && defaultValue) {\n                valueToCompare = defaultValue;\n            }\n            return buttonValue === valueToCompare;\n        });\n        button.on('execute', ()=>{\n            // Allow toggling alignment if there is no default value specified (especially for layout tables).\n            if (!defaultValue && buttonValue && view[propertyName] === buttonValue) {\n                view[propertyName] = undefined;\n            } else {\n                view[propertyName] = buttonValue;\n            }\n        });\n        toolbar.items.add(button);\n    }\n}\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/tableconfig~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n * ```ts\n * const defaultColors = [\n *   {\n *     color: 'hsl(0, 0%, 0%)',\n *     label: 'Black'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 30%)',\n *     label: 'Dim grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 60%)',\n *     label: 'Grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 90%)',\n *     label: 'Light grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 100%)',\n *     label: 'White',\n *     hasBorder: true\n *   },\n *   {\n *     color: 'hsl(0, 75%, 60%)',\n *     label: 'Red'\n *   },\n *   {\n *     color: 'hsl(30, 75%, 60%)',\n *     label: 'Orange'\n *   },\n *   {\n *     color: 'hsl(60, 75%, 60%)',\n *     label: 'Yellow'\n *   },\n *   {\n *     color: 'hsl(90, 75%, 60%)',\n *     label: 'Light green'\n *   },\n *   {\n *     color: 'hsl(120, 75%, 60%)',\n *     label: 'Green'\n *   },\n *   {\n *     color: 'hsl(150, 75%, 60%)',\n *     label: 'Aquamarine'\n *   },\n *   {\n *     color: 'hsl(180, 75%, 60%)',\n *     label: 'Turquoise'\n *   },\n *   {\n *     color: 'hsl(210, 75%, 60%)',\n *     label: 'Light blue'\n *   },\n *   {\n *     color: 'hsl(240, 75%, 60%)',\n *     label: 'Blue'\n *   },\n *   {\n *     color: 'hsl(270, 75%, 60%)',\n *     label: 'Purple'\n *   }\n * ];\n * ```\n *\n * @internal\n */ const defaultColors = [\n    {\n        color: 'hsl(0, 0%, 0%)',\n        label: 'Black'\n    },\n    {\n        color: 'hsl(0, 0%, 30%)',\n        label: 'Dim grey'\n    },\n    {\n        color: 'hsl(0, 0%, 60%)',\n        label: 'Grey'\n    },\n    {\n        color: 'hsl(0, 0%, 90%)',\n        label: 'Light grey'\n    },\n    {\n        color: 'hsl(0, 0%, 100%)',\n        label: 'White',\n        hasBorder: true\n    },\n    {\n        color: 'hsl(0, 75%, 60%)',\n        label: 'Red'\n    },\n    {\n        color: 'hsl(30, 75%, 60%)',\n        label: 'Orange'\n    },\n    {\n        color: 'hsl(60, 75%, 60%)',\n        label: 'Yellow'\n    },\n    {\n        color: 'hsl(90, 75%, 60%)',\n        label: 'Light green'\n    },\n    {\n        color: 'hsl(120, 75%, 60%)',\n        label: 'Green'\n    },\n    {\n        color: 'hsl(150, 75%, 60%)',\n        label: 'Aquamarine'\n    },\n    {\n        color: 'hsl(180, 75%, 60%)',\n        label: 'Turquoise'\n    },\n    {\n        color: 'hsl(210, 75%, 60%)',\n        label: 'Light blue'\n    },\n    {\n        color: 'hsl(240, 75%, 60%)',\n        label: 'Blue'\n    },\n    {\n        color: 'hsl(270, 75%, 60%)',\n        label: 'Purple'\n    }\n];\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n * ```ts\n * const colorInputCreator = getLabeledColorInputCreator( {\n *   colorConfig: [ ... ],\n *   columns: 3,\n * } );\n *\n * const labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n * console.log( labeledInputView.view ); // A color input instance.\n * ```\n *\n * @internal\n * @param options Color input options.\n * @param options.colorConfig The configuration of the color palette displayed in the input's dropdown.\n * @param options.columns The configuration of the number of columns the color palette consists of in the input's dropdown.\n * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @param options.colorPickerConfig The configuration of the color picker. You could disable it or define your output format.\n */ function getLabeledColorInputCreator(options) {\n    return (labeledFieldView, viewUid, statusUid)=>{\n        const colorInputView = new ColorInputView(labeledFieldView.locale, {\n            colorDefinitions: colorConfigToColorGridDefinitions(options.colorConfig),\n            columns: options.columns,\n            defaultColorValue: options.defaultColorValue,\n            colorPickerConfig: options.colorPickerConfig\n        });\n        colorInputView.inputView.set({\n            id: viewUid,\n            ariaDescribedById: statusUid\n        });\n        colorInputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', (value)=>!value);\n        colorInputView.bind('hasError').to(labeledFieldView, 'errorText', (value)=>!!value);\n        colorInputView.on('input', ()=>{\n            // UX: Make the error text disappear and disable the error indicator as the user\n            // starts fixing the errors.\n            labeledFieldView.errorText = null;\n        });\n        labeledFieldView.bind('isEmpty', 'isFocused').to(colorInputView);\n        return colorInputView;\n    };\n}\n/**\n * A simple helper method to detect number strings.\n * I allows full number notation, so omitting 0 is not allowed:\n */ function isNumberString(value) {\n    const parsedValue = parseFloat(value);\n    return !Number.isNaN(parsedValue) && value === String(parsedValue);\n}\nfunction colorConfigToColorGridDefinitions(colorConfig) {\n    return colorConfig.map((item)=>({\n            color: item.model,\n            label: item.label,\n            options: {\n                hasBorder: item.hasBorder\n            }\n        }));\n}\n\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */ class TableCellPropertiesView extends View {\n    /**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */ options;\n    /**\n\t * Tracks information about the DOM focus in the form.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * A collection of child views in the form.\n\t */ children;\n    /**\n\t * A dropdown that allows selecting the style of the table cell border.\n\t */ borderStyleDropdown;\n    /**\n\t * An input that allows specifying the width of the table cell border.\n\t */ borderWidthInput;\n    /**\n\t * An input that allows specifying the color of the table cell border.\n\t */ borderColorInput;\n    /**\n\t * An input that allows specifying the table cell background color.\n\t */ backgroundInput;\n    /**\n\t * An input that allows specifying the table cell padding.\n\t */ paddingInput;\n    /**\n\t * An input that allows specifying the table cell width.\n\t */ widthInput;\n    /**\n\t * An input that allows specifying the table cell height.\n\t */ heightInput;\n    /**\n\t * A toolbar with buttons that allow changing the horizontal text alignment in a table cell.\n\t */ horizontalAlignmentToolbar;\n    /**\n\t * A toolbar with buttons that allow changing the vertical text alignment in a table cell.\n\t */ verticalAlignmentToolbar;\n    /**\n\t * The \"Save\" button view.\n\t */ saveButtonView;\n    /**\n\t * The \"Cancel\" button view.\n\t */ cancelButtonView;\n    /**\n\t * A collection of views that can be focused in the form.\n\t */ _focusables;\n    /**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */ _focusCycler;\n    /**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t * @param options.borderColors A configuration of the border color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n\t * @param options.backgroundColors A configuration of the background color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n\t * @param options.defaultTableCellProperties The default table cell properties.\n\t */ constructor(locale, options){\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            padding: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            horizontalAlignment: '',\n            verticalAlignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.paddingInput = this._createPaddingField();\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n        this.verticalAlignmentToolbar = verticalAlignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new FormHeaderView(locale, {\n            label: this.t('Cell properties')\n        }));\n        // Border row.\n        this.children.add(new FormRowView(locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background.\n        this.children.add(new FormRowView(locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        // Dimensions row and padding.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                // Dimensions row.\n                new FormRowView(locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Padding row.\n                new FormRowView(locale, {\n                    children: [\n                        this.paddingInput\n                    ],\n                    class: 'ck-table-cell-properties-form__padding-row'\n                })\n            ]\n        }));\n        // Text alignment row.\n        this.children.add(new FormRowView(locale, {\n            labelView: alignmentLabel,\n            children: [\n                alignmentLabel,\n                horizontalAlignmentToolbar,\n                verticalAlignmentToolbar\n            ],\n            class: 'ck-table-cell-properties-form__alignment-row'\n        }));\n        // Action row.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-cell-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        submitHandler({\n            view: this\n        });\n        // Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n        [\n            this.borderColorInput,\n            this.backgroundInput\n        ].forEach((view)=>{\n            this._focusCycler.chain(view.fieldView.focusCycler);\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput,\n            this.paddingInput,\n            this.horizontalAlignmentToolbar,\n            this.verticalAlignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach((view)=>{\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the fist focusable field in the form.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */ _createBorderFields() {\n        const defaultTableCellProperties = this.options.defaultTableCellProperties;\n        const defaultBorder = {\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth,\n            color: defaultTableCellProperties.borderColor\n        };\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = getBorderStyleLabels(t);\n        const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', (value)=>{\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', (evt)=>{\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', (value)=>!value);\n        addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet$1);\n        borderWidthInput.fieldView.on('input', ()=>{\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet$1);\n        borderColorInput.fieldView.on('input', ()=>{\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue)=>{\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet$1(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet$1(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */ _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableCellProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new LabeledFieldView(locale, colorInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-cell-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', ()=>{\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput}.\n\t * * {@link #heightInput}.\n\t */ _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', ()=>{\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                {\n                    text: '×'\n                }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', ()=>{\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #paddingInput}.\n\t */ _createPaddingField() {\n        const locale = this.locale;\n        const t = this.t;\n        const paddingInput = new LabeledFieldView(locale, createLabeledInputText);\n        paddingInput.set({\n            label: t('Padding'),\n            class: 'ck-table-cell-properties-form__padding'\n        });\n        paddingInput.fieldView.bind('value').to(this, 'padding');\n        paddingInput.fieldView.on('input', ()=>{\n            this.padding = paddingInput.fieldView.element.value;\n        });\n        return paddingInput;\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #horizontalAlignmentToolbar},\n\t * * {@link #verticalAlignmentToolbar}.\n\t */ _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        const alignmentLabel = new LabelView(locale);\n        const ALIGNMENT_ICONS = {\n            left: IconAlignLeft,\n            center: IconAlignCenter,\n            right: IconAlignRight,\n            justify: IconAlignJustify,\n            top: IconAlignTop,\n            middle: IconAlignMiddle,\n            bottom: IconAlignBottom\n        };\n        alignmentLabel.text = t('Table cell text alignment');\n        // -- Horizontal ---------------------------------------------------\n        const horizontalAlignmentToolbar = new ToolbarView(locale);\n        const isContentRTL = locale.contentLanguageDirection === 'rtl';\n        horizontalAlignmentToolbar.set({\n            isCompact: true,\n            role: 'radiogroup',\n            ariaLabel: t('Horizontal text alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: horizontalAlignmentToolbar,\n            labels: this._horizontalAlignmentLabels,\n            propertyName: 'horizontalAlignment',\n            nameToValue: (name)=>{\n                // For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n                if (isContentRTL) {\n                    if (name === 'left') {\n                        return 'right';\n                    } else if (name === 'right') {\n                        return 'left';\n                    }\n                }\n                return name;\n            },\n            defaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n        });\n        // -- Vertical -----------------------------------------------------\n        const verticalAlignmentToolbar = new ToolbarView(locale);\n        verticalAlignmentToolbar.set({\n            isCompact: true,\n            role: 'radiogroup',\n            ariaLabel: t('Vertical text alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: verticalAlignmentToolbar,\n            labels: this._verticalAlignmentLabels,\n            propertyName: 'verticalAlignment',\n            defaultValue: this.options.defaultTableCellProperties.verticalAlignment\n        });\n        return {\n            horizontalAlignmentToolbar,\n            verticalAlignmentToolbar,\n            alignmentLabel\n        };\n    }\n    /**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */ _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.paddingInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: IconCheck,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts)=>{\n            return errorTexts.every((errorText)=>!errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: IconCancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView,\n            cancelButtonView\n        };\n    }\n    /**\n\t * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n\t */ get _horizontalAlignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align cell text to the left');\n        const center = t('Align cell text to the center');\n        const right = t('Align cell text to the right');\n        const justify = t('Justify cell text');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return {\n                right,\n                center,\n                left,\n                justify\n            };\n        } else {\n            return {\n                left,\n                center,\n                right,\n                justify\n            };\n        }\n    }\n    /**\n\t * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n\t */ get _verticalAlignmentLabels() {\n        const t = this.t;\n        return {\n            top: t('Align cell text to the top'),\n            middle: t('Align cell text to the middle'),\n            bottom: t('Align cell text to the bottom')\n        };\n    }\n}\nfunction isBorderStyleSet$1(value) {\n    return value !== 'none';\n}\n\nconst BALLOON_POSITIONS = /* #__PURE__ */ (()=>[\n        BalloonPanelView.defaultPositions.northArrowSouth,\n        BalloonPanelView.defaultPositions.northArrowSouthWest,\n        BalloonPanelView.defaultPositions.northArrowSouthEast,\n        BalloonPanelView.defaultPositions.southArrowNorth,\n        BalloonPanelView.defaultPositions.southArrowNorthWest,\n        BalloonPanelView.defaultPositions.southArrowNorthEast,\n        BalloonPanelView.defaultPositions.viewportStickyNorth\n    ])();\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the table in the editor content, if one is selected.\n *\n * @internal\n * @param editor The editor instance.\n * @param target Either \"cell\" or \"table\". Determines the target the balloon will be attached to.\n */ function repositionContextualBalloon(editor, target) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const selection = editor.editing.view.document.selection;\n    let position;\n    if (target === 'cell') {\n        if (getTableWidgetAncestor(selection)) {\n            position = getBalloonCellPositionData(editor);\n        }\n    } else if (getSelectionAffectedTableWidget(selection)) {\n        position = getBalloonTablePositionData(editor);\n    }\n    if (position) {\n        balloon.updatePosition(position);\n    }\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table in the editor content.\n *\n * @param editor The editor instance.\n */ function getBalloonTablePositionData(editor) {\n    const selection = editor.model.document.selection;\n    const modelTable = getSelectionAffectedTable(selection);\n    const viewTable = editor.editing.mapper.toViewElement(modelTable);\n    return {\n        target: editor.editing.view.domConverter.mapViewToDom(viewTable),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table cell in the editor content.\n *\n * @param editor The editor instance.\n * @internal\n */ function getBalloonCellPositionData(editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const selection = editor.model.document.selection;\n    if (selection.rangeCount > 1) {\n        return {\n            target: ()=>createBoundingRect(selection.getRanges(), editor),\n            positions: BALLOON_POSITIONS\n        };\n    }\n    const modelTableCell = getTableCellAtPosition(selection.getFirstPosition());\n    const viewTableCell = mapper.toViewElement(modelTableCell);\n    return {\n        target: domConverter.mapViewToDom(viewTableCell),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the first selected table cell from a multi-cell or in-cell selection.\n *\n * @param position Document position.\n */ function getTableCellAtPosition(position) {\n    const isTableCellSelected = position.nodeAfter && position.nodeAfter.is('element', 'tableCell');\n    return isTableCellSelected ? position.nodeAfter : position.findAncestor('tableCell');\n}\n/**\n * Returns bounding rectangle for given model ranges.\n *\n * @param ranges Model ranges that the bounding rect should be returned for.\n * @param editor The editor instance.\n */ function createBoundingRect(ranges, editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const rects = Array.from(ranges).map((range)=>{\n        const modelTableCell = getTableCellAtPosition(range.start);\n        const viewTableCell = mapper.toViewElement(modelTableCell);\n        return new Rect(domConverter.mapViewToDom(viewTableCell));\n    });\n    return Rect.getBoundingRect(rects);\n}\n\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n * ```ts\n * // Returns 'foo':\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n * getSingleValue( 'foo' );\n *\n * // Returns undefined:\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n * getSingleValue( { top: 'foo', right: 'foo' } );\n * ```\n *\n * @internal\n */ function getSingleValue(objectOrString) {\n    if (!objectOrString || !isObject(objectOrString)) {\n        return objectOrString;\n    }\n    const { top, right, bottom, left } = objectOrString;\n    if (top == right && right == bottom && bottom == left) {\n        return top;\n    }\n}\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n * ```ts\n * getSingleValue( 25, 'px' ); // '25px'\n * getSingleValue( 25, 'em' ); // '25em'\n * getSingleValue( '25em', 'px' ); // '25em'\n * getSingleValue( 'foo', 'px' ); // 'foo'\n * ```\n *\n * @internal\n * @param defaultUnit A default unit added to a numeric value.\n */ function addDefaultUnitToNumericValue(value, defaultUnit) {\n    const numericValue = parseFloat(value);\n    if (Number.isNaN(numericValue)) {\n        return value;\n    }\n    if (String(numericValue) !== String(value)) {\n        return value;\n    }\n    return `${numericValue}${defaultUnit}`;\n}\n/**\n * Returns the normalized configuration.\n *\n * @internal\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */ function getNormalizedDefaultProperties(config, options = {}) {\n    const normalizedConfig = {\n        borderStyle: 'none',\n        borderWidth: '',\n        borderColor: '',\n        backgroundColor: '',\n        width: '',\n        height: '',\n        ...config\n    };\n    if (options.includeAlignmentProperty && !normalizedConfig.alignment) {\n        normalizedConfig.alignment = 'center';\n    }\n    if (options.includePaddingProperty && !normalizedConfig.padding) {\n        normalizedConfig.padding = '';\n    }\n    if (options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment) {\n        normalizedConfig.verticalAlignment = 'middle';\n    }\n    if (options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment) {\n        normalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n    }\n    return normalizedConfig;\n}\n/**\n * Returns the normalized default table properties.\n *\n * @internal\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */ function getNormalizedDefaultTableProperties(config, options) {\n    return getNormalizedDefaultProperties({\n        // It adds support for border none in the table element, keep it in sync with the content styles\n        // See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n        borderStyle: 'double',\n        borderColor: 'hsl(0, 0%, 70%)',\n        borderWidth: '1px',\n        ...config\n    }, options);\n}\n/**\n * Returns the normalized default cell properties.\n *\n * @internal\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */ function getNormalizedDefaultCellProperties(config, options) {\n    return getNormalizedDefaultProperties({\n        // It adds support for border none in the table element, keep it in sync with the content styles\n        // See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n        borderStyle: 'solid',\n        borderColor: 'hsl(0, 0%, 75%)',\n        borderWidth: '1px',\n        ...config\n    }, options);\n}\n\nconst ERROR_TEXT_TIMEOUT$1 = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap$1 = {\n    borderStyle: 'tableCellBorderStyle',\n    borderColor: 'tableCellBorderColor',\n    borderWidth: 'tableCellBorderWidth',\n    height: 'tableCellHeight',\n    width: 'tableCellWidth',\n    padding: 'tableCellPadding',\n    backgroundColor: 'tableCellBackgroundColor',\n    horizontalAlignment: 'tableCellHorizontalAlignment',\n    verticalAlignment: 'tableCellVerticalAlignment'\n};\n/**\n * The table cell properties UI plugin. It introduces the `'tableCellProperties'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */ class TableCellPropertiesUI extends Plugin {\n    /**\n\t * The default table cell properties.\n\t */ _defaultContentTableCellProperties;\n    /**\n\t * The default layout table cell properties.\n\t */ _defaultLayoutTableCellProperties;\n    /**\n\t * The contextual balloon plugin instance.\n\t */ _balloon;\n    /**\n\t * The cell properties form view displayed inside the balloon.\n\t */ view;\n    /**\n\t * The cell properties form view displayed inside the balloon (content table).\n\t */ _viewWithContentTableDefaults;\n    /**\n\t * The cell properties form view displayed inside the balloon (layout table).\n\t */ _viewWithLayoutTableDefaults;\n    /**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */ _undoStepBatch;\n    /**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */ _isReady;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellPropertiesUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('table.tableCellProperties', {\n            borderColors: defaultColors,\n            backgroundColors: defaultColors\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultContentTableCellProperties = getNormalizedDefaultCellProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        this._defaultLayoutTableCellProperties = getNormalizedDefaultProperties(undefined, {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        this.view = null;\n        this._isReady = false;\n        editor.ui.componentFactory.add('tableCellProperties', (locale)=>{\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Cell properties'),\n                icon: IconTableCellProperties,\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', ()=>this._showView());\n            const commands = Object.values(propertyToCommandMap$1).map((commandName)=>editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>areEnabled.some((isCommandEnabled)=>isCommandEnabled));\n            return view;\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n\t * Creates the {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView} instance.\n\t *\n\t * @returns The cell properties form view instance.\n\t */ _createPropertiesView(defaultTableCellProperties) {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableCellProperties');\n        const borderColorsConfig = normalizeColorOptions(config.borderColors);\n        const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n        const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new TableCellPropertiesView(editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableCellProperties,\n            colorPickerConfig: hasColorPicker ? config.colorPicker || {} : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', ()=>{\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', ()=>{\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel)=>{\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: view,\n            activator: ()=>this._isViewInBalloon,\n            contextElements: [\n                this._balloon.view.element\n            ],\n            callback: ()=>this._hideView()\n        });\n        const colorErrorText = getLocalizedColorErrorText(t);\n        const lengthErrorText = getLocalizedLengthErrorText(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableCellBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableCellBorderColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableCellBorderWidth',\n            errorText: lengthErrorText,\n            validator: lineWidthFieldValidator\n        }));\n        view.on('change:padding', this._getValidatedPropertyChangeCallback({\n            viewField: view.paddingInput,\n            commandName: 'tableCellPadding',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableCellWidth',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableCellHeight',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableCellBackgroundColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:horizontalAlignment', this._getPropertyChangeCallback('tableCellHorizontalAlignment'));\n        view.on('change:verticalAlignment', this._getPropertyChangeCallback('tableCellVerticalAlignment'));\n        return view;\n    }\n    /**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected cell property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */ _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableCellBorderStyle');\n        Object.entries(propertyToCommandMap$1).map(([property, commandName])=>{\n            const propertyKey = property;\n            const defaultValue = this.view === this._viewWithContentTableDefaults ? this._defaultContentTableCellProperties[propertyKey] || '' : this._defaultLayoutTableCellProperties[propertyKey] || '';\n            return [\n                property,\n                commands.get(commandName).value || defaultValue\n            ];\n        }).forEach(([property, value])=>{\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */ _showView() {\n        const editor = this.editor;\n        const viewTable = getSelectionAffectedTableWidget(editor.editing.view.document.selection);\n        const modelTable = viewTable && editor.editing.mapper.toModelElement(viewTable);\n        const useDefaults = !modelTable || modelTable.getAttribute('tableType') !== 'layout';\n        if (useDefaults && !this._viewWithContentTableDefaults) {\n            this._viewWithContentTableDefaults = this._createPropertiesView(this._defaultContentTableCellProperties);\n        } else if (!useDefaults && !this._viewWithLayoutTableDefaults) {\n            this._viewWithLayoutTableDefaults = this._createPropertiesView(this._defaultLayoutTableCellProperties);\n        }\n        this.view = useDefaults ? this._viewWithContentTableDefaults : this._viewWithLayoutTableDefaults;\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: getBalloonCellPositionData(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */ _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n\t */ _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!getTableWidgetAncestor(viewDocument.selection)) {\n            this._hideView();\n        } else if (this._isViewVisible) {\n            repositionContextualBalloon(editor, 'cell');\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n\t */ get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */ get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n\t * Creates a callback that when executed upon the {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * @param commandName The default value of the command.\n\t */ _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue)=>{\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n\t * Creates a callback that when executed upon the {@link #view view's} property change:\n\t * * Executes a related editor command with the new property value if the value is valid,\n\t * * Or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */ _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = debounce(()=>{\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT$1);\n        return (evt, propertyName, newValue)=>{\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            } else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n */ class TableCellPropertyCommand extends Command {\n    /**\n\t * The attribute that will be set by the command.\n\t */ attributeName;\n    /**\n\t * The default value for the attribute.\n\t *\n\t * @readonly\n\t */ _defaultValue;\n    /**\n\t * The default value for the attribute for the content table.\n\t */ _defaultContentTableValue;\n    /**\n\t * The default value for the attribute for the layout table.\n\t */ _defaultLayoutTableValue;\n    /**\n\t * Creates a new `TableCellPropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, attributeName, defaultValue){\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultContentTableValue = defaultValue;\n        // Hardcoded defaults for layout table.\n        switch(attributeName){\n            case 'tableCellBorderStyle':\n                this._defaultLayoutTableValue = 'none';\n                break;\n            case 'tableCellHorizontalAlignment':\n                this._defaultLayoutTableValue = 'left';\n                break;\n            case 'tableCellVerticalAlignment':\n                this._defaultLayoutTableValue = 'middle';\n                break;\n            default:\n                this._defaultLayoutTableValue = undefined;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const table = getSelectionAffectedTable(selection);\n        this._defaultValue = !table || table.getAttribute('tableType') !== 'layout' ? this._defaultContentTableValue : this._defaultLayoutTableValue;\n        this.isEnabled = !!selectedTableCells.length;\n        this.value = this._getSingleValue(selectedTableCells);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on selected table cells.\n\t * If it is not set, the command will remove the attribute from the selected table cells.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example to allow a single undo step for multiple executions.\n\t */ execute(options = {}) {\n        const { value, batch } = options;\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, (writer)=>{\n            if (valueToSet) {\n                tableCells.forEach((tableCell)=>writer.setAttribute(this.attributeName, valueToSet, tableCell));\n            } else {\n                tableCells.forEach((tableCell)=>writer.removeAttribute(this.attributeName, tableCell));\n            }\n        });\n    }\n    /**\n\t * Returns the attribute value for a table cell.\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = tableCell.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */ _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * Returns a single value for all selected table cells. If the value is the same for all cells,\n\t * it will be returned (`undefined` otherwise).\n\t */ _getSingleValue(tableCells) {\n        const firstCellValue = this._getAttribute(tableCells[0]);\n        const everyCellHasAttribute = tableCells.every((tableCells)=>this._getAttribute(tableCells) === firstCellValue);\n        return everyCellHasAttribute ? firstCellValue : undefined;\n    }\n}\n\n/**\n * The table cell width command.\n *\n * The command is registered by the {@link module:table/tablecellwidth/tablecellwidthediting~TableCellWidthEditing} as\n * the `'tableCellWidth'` editor command.\n *\n * To change the width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds a default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */ class TableCellWidthCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table cell width editing feature.\n *\n * Introduces `tableCellWidth` table cell model attribute alongside with its converters\n * and a command.\n */ class TableCellWidthEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellWidthEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const defaultTableCellProperties = getNormalizedDefaultCellProperties(editor.config.get('table.tableCellProperties.defaultProperties'));\n        enableProperty$1(editor.model.schema, editor.conversion, {\n            modelAttribute: 'tableCellWidth',\n            styleName: 'width',\n            attributeName: 'width',\n            attributeType: 'length',\n            defaultValue: defaultTableCellProperties.width\n        });\n        editor.commands.add('tableCellWidth', new TableCellWidthCommand(editor, defaultTableCellProperties.width));\n    }\n}\n\n/**\n * The table cell padding command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellPadding'` editor command.\n *\n * To change the padding of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `padding` attribute to `'5px'` in the model.\n */ class TableCellPaddingCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellPaddingCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellPadding', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n/**\n * The table cell height command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHeight'` editor command.\n *\n * To change the height of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */ class TableCellHeightCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellHeight', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n/**\n * The table cell background color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBackgroundColor'` editor command.\n *\n * To change the background color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableCellBackgroundColorCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBackgroundColor', defaultValue);\n    }\n}\n\n/**\n * The table cell vertical alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellVerticalAlignment'` editor command.\n *\n * To change the vertical text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellVerticalAlignment', {\n *   value: 'top'\n * } );\n * ```\n *\n * The following values, corresponding to the\n * [`vertical-align` CSS attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), are allowed:\n *\n * * `'top'`\n * * `'bottom'`\n *\n * The `'middle'` value is the default one so there is no need to set it.\n */ class TableCellVerticalAlignmentCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellVerticalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellVerticalAlignment', defaultValue);\n    }\n}\n\n/**\n * The table cell horizontal alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHorizontalAlignment'` editor command.\n *\n * To change the horizontal text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHorizontalAlignment', {\n *  value: 'right'\n * } );\n * ```\n */ class TableCellHorizontalAlignmentCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellHorizontalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellHorizontalAlignment', defaultValue);\n    }\n}\n\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderStyle'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */ class TableCellBorderStyleCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBorderStyle', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table cell border color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderColor'` editor command.\n *\n * To change the border color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableCellBorderColorCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBorderColor', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table cell border width command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderWidth'` editor command.\n *\n * To change the border width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */ class TableCellBorderWidthCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBorderWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP$1 = /^(left|center|right|justify)$/;\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n */ class TableCellPropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellPropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing,\n            TableCellWidthEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableCellProperties.defaultProperties', {});\n        const defaultTableCellProperties = getNormalizedDefaultCellProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        editor.data.addStyleProcessorRules(addBorderStylesRules);\n        enableBorderProperties$1(schema, conversion, {\n            color: defaultTableCellProperties.borderColor,\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth\n        });\n        editor.commands.add('tableCellBorderStyle', new TableCellBorderStyleCommand(editor, defaultTableCellProperties.borderStyle));\n        editor.commands.add('tableCellBorderColor', new TableCellBorderColorCommand(editor, defaultTableCellProperties.borderColor));\n        editor.commands.add('tableCellBorderWidth', new TableCellBorderWidthCommand(editor, defaultTableCellProperties.borderWidth));\n        enableProperty$1(schema, conversion, {\n            modelAttribute: 'tableCellHeight',\n            styleName: 'height',\n            attributeName: 'height',\n            attributeType: 'length',\n            defaultValue: defaultTableCellProperties.height\n        });\n        editor.commands.add('tableCellHeight', new TableCellHeightCommand(editor, defaultTableCellProperties.height));\n        editor.data.addStyleProcessorRules(addPaddingStylesRules);\n        enableProperty$1(schema, conversion, {\n            modelAttribute: 'tableCellPadding',\n            styleName: 'padding',\n            reduceBoxSides: true,\n            defaultValue: defaultTableCellProperties.padding\n        });\n        editor.commands.add('tableCellPadding', new TableCellPaddingCommand(editor, defaultTableCellProperties.padding));\n        editor.data.addStyleProcessorRules(addBackgroundStylesRules);\n        enableProperty$1(schema, conversion, {\n            modelAttribute: 'tableCellBackgroundColor',\n            styleName: 'background-color',\n            attributeName: 'bgcolor',\n            attributeType: 'color',\n            defaultValue: defaultTableCellProperties.backgroundColor\n        });\n        editor.commands.add('tableCellBackgroundColor', new TableCellBackgroundColorCommand(editor, defaultTableCellProperties.backgroundColor));\n        enableHorizontalAlignmentProperty(schema, conversion, defaultTableCellProperties.horizontalAlignment);\n        editor.commands.add('tableCellHorizontalAlignment', new TableCellHorizontalAlignmentCommand(editor, defaultTableCellProperties.horizontalAlignment));\n        enableVerticalAlignmentProperty(schema, conversion, defaultTableCellProperties.verticalAlignment);\n        editor.commands.add('tableCellVerticalAlignment', new TableCellVerticalAlignmentCommand(editor, defaultTableCellProperties.verticalAlignment));\n    }\n}\n/**\n * Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableCellBorderColor` value.\n * @param defaultBorder.style The default `tableCellBorderStyle` value.\n * @param defaultBorder.width The default `tableCellBorderWidth` value.\n */ function enableBorderProperties$1(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableCellBorderWidth',\n        color: 'tableCellBorderColor',\n        style: 'tableCellBorderStyle'\n    };\n    schema.extend('tableCell', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    for (const modelAttribute of Object.values(modelAttributes)){\n        schema.setAttributeProperties(modelAttribute, {\n            isFormatting: true\n        });\n    }\n    upcastBorderStyles(conversion, 'td', modelAttributes, defaultBorder);\n    upcastBorderStyles(conversion, 'th', modelAttributes, defaultBorder);\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        modelAttribute: modelAttributes.style,\n        styleName: 'border-style'\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        modelAttribute: modelAttributes.color,\n        styleName: 'border-color'\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        modelAttribute: modelAttributes.width,\n        styleName: 'border-width'\n    });\n}\n/**\n * Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default horizontal alignment value.\n */ function enableHorizontalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: [\n            'tableCellHorizontalAlignment'\n        ]\n    });\n    schema.setAttributeProperties('tableCellHorizontalAlignment', {\n        isFormatting: true\n    });\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellHorizontalAlignment'\n        },\n        view: (alignment)=>({\n                key: 'style',\n                value: {\n                    'text-align': alignment\n                }\n            })\n    });\n    conversion.for('upcast')// Support for the `text-align:*;` CSS definition for the table cell alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'text-align': ALIGN_VALUES_REG_EXP$1\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, 'left', data);\n                const align = viewElement.getStyle('text-align');\n                if (align !== localDefaultValue) {\n                    return align;\n                }\n                // Consume the style even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    styles: 'text-align'\n                });\n            }\n        }\n    })// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP$1\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, 'left', data);\n                const align = viewElement.getAttribute('align');\n                if (align !== localDefaultValue) {\n                    return align;\n                }\n                // Consume the style even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    attributes: 'align'\n                });\n            }\n        }\n    });\n}\n/**\n * Enables the `'verticalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default vertical alignment value.\n */ function enableVerticalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: [\n            'tableCellVerticalAlignment'\n        ]\n    });\n    schema.setAttributeProperties('tableCellVerticalAlignment', {\n        isFormatting: true\n    });\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellVerticalAlignment'\n        },\n        view: (alignment)=>({\n                key: 'style',\n                value: {\n                    'vertical-align': alignment\n                }\n            })\n    });\n    conversion.for('upcast')// Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'vertical-align': VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, 'middle', data);\n                const align = viewElement.getStyle('vertical-align');\n                if (align !== localDefaultValue) {\n                    return align;\n                }\n                // Consume the style even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    styles: 'vertical-align'\n                });\n            }\n        }\n    })// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                valign: VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, 'middle', data);\n                const valign = viewElement.getAttribute('valign');\n                if (valign !== localDefaultValue) {\n                    return valign;\n                }\n                // Consume the attribute even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    attributes: 'valign'\n                });\n            }\n        }\n    });\n}\n\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */ class TableCellProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableCellPropertiesEditing,\n            TableCellPropertiesUI\n        ];\n    }\n}\n\n/**\n * The table layout UI plugin. It introduces:\n *\n * * The `'insertTableLayout'` dropdown,\n * * The `'menuBar:insertTableLayout'` menu bar menu.\n */ class TableLayoutUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableLayoutUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        editor.ui.componentFactory.add('insertTableLayout', (locale)=>{\n            const command = editor.commands.get('insertTableLayout');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: IconTableLayout,\n                label: t('Insert table layout'),\n                tooltip: true\n            });\n            let insertTableLayoutView;\n            dropdownView.on('change:isOpen', ()=>{\n                if (insertTableLayoutView) {\n                    return;\n                }\n                // Prepare custom view for dropdown's panel.\n                insertTableLayoutView = new InsertTableView(locale);\n                dropdownView.panelView.children.add(insertTableLayoutView);\n                insertTableLayoutView.delegate('execute').to(dropdownView);\n                dropdownView.on('execute', ()=>{\n                    editor.execute('insertTableLayout', {\n                        rows: insertTableLayoutView.rows,\n                        columns: insertTableLayoutView.columns\n                    });\n                    editor.editing.view.focus();\n                });\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('menuBar:insertTableLayout', (locale)=>{\n            const command = editor.commands.get('insertTableLayout');\n            const menuView = new MenuBarMenuView(locale);\n            const insertTableLayoutView = new InsertTableView(locale);\n            insertTableLayoutView.delegate('execute').to(menuView);\n            menuView.on('change:isOpen', (event, name, isOpen)=>{\n                if (!isOpen) {\n                    insertTableLayoutView.reset();\n                }\n            });\n            insertTableLayoutView.on('execute', ()=>{\n                editor.execute('insertTableLayout', {\n                    rows: insertTableLayoutView.rows,\n                    columns: insertTableLayoutView.columns\n                });\n                editor.editing.view.focus();\n            });\n            menuView.buttonView.set({\n                label: t('Table layout'),\n                icon: IconTableLayout\n            });\n            menuView.panelView.children.add(insertTableLayoutView);\n            menuView.bind('isEnabled').to(command);\n            return menuView;\n        });\n        // Create table type dropdown button.\n        editor.ui.componentFactory.add('tableType', ()=>{\n            const editor = this.editor;\n            const t = editor.t;\n            const button = new DropdownButtonView(editor.locale);\n            button.set({\n                label: t('Table type'),\n                icon: IconTableProperties,\n                tooltip: true\n            });\n            return createTableTypeDropdown(editor, button);\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        if (!editor.plugins.has('TablePropertiesUI')) {\n            return;\n        }\n        const tablePropertiesUI = editor.plugins.get('TablePropertiesUI');\n        // Override the default table properties button to include the table type dropdown.\n        // It needs to be done in `afterInit()` to make sure that `tableProperties` button is\n        // registered after the initialization of the `TablePropertiesUI`. Otherwise, the\n        // button will be overridden by the default one if the `TablePropertiesUI` is\n        // initialized after the `TableLayoutUI`.\n        editor.ui.componentFactory.add('tableProperties', (locale)=>{\n            const baseButton = tablePropertiesUI._createTablePropertiesButton();\n            const splitButtonView = new SplitButtonView(locale, baseButton);\n            return createTableTypeDropdown(editor, splitButtonView);\n        });\n    }\n}\n/**\n * Creates a dropdown for the table type selection.\n *\n * @param editor The editor instance.\n * @param dropdownButton The button view that will be used as the dropdown trigger.\n * @returns A dropdown view containing table type options.\n */ function createTableTypeDropdown(editor, dropdownButton) {\n    const t = editor.t;\n    const locale = editor.locale;\n    const tableTypeCommand = editor.commands.get('tableType');\n    // Wrap the original button in a SplitButtonView.\n    const dropdownView = createDropdown(locale, dropdownButton);\n    const itemsDefinitions = createTableLayoutTypeDropdownItems(editor);\n    // Add table types to the dropdown.\n    addListToDropdown(dropdownView, itemsDefinitions, {\n        ariaLabel: t('Table type options'),\n        role: 'menu'\n    });\n    dropdownButton.tooltip = t('Choose table type');\n    dropdownView.on('execute', (evt)=>{\n        const tableType = evt.source.tableType;\n        if (tableType) {\n            tableTypeCommand.execute(tableType);\n        }\n    });\n    return dropdownView;\n}\n/**\n * Creates dropdown items for table type selection.\n *\n * @param editor The editor instance.\n * @returns A collection of dropdown items for the table type dropdown.\n */ function createTableLayoutTypeDropdownItems(editor) {\n    const t = editor.t;\n    const tableTypeCommand = editor.commands.get('tableType');\n    const itemDefinitions = new Collection();\n    itemDefinitions.add(createTableTypeDropdownItem(tableTypeCommand, 'layout', t('Layout table')));\n    itemDefinitions.add(createTableTypeDropdownItem(tableTypeCommand, 'content', t('Content table')));\n    return itemDefinitions;\n}\n/**\n * Creates a dropdown item for a specific table type.\n *\n * @param tableTypeCommand The table type command.\n * @param type The table type value ('layout' or 'content').\n * @param label The localized label for the dropdown item.\n * @returns The dropdown item definition.\n */ function createTableTypeDropdownItem(tableTypeCommand, type, label) {\n    const model = new UIModel({\n        label,\n        role: 'menuitemradio',\n        withText: true,\n        tableType: type\n    });\n    model.bind('isEnabled').to(tableTypeCommand, 'isEnabled');\n    model.bind('isOn').to(tableTypeCommand, 'value', (value)=>value === type);\n    return {\n        type: 'button',\n        model\n    };\n}\n\n/**\n * The insert table layout command.\n *\n * The command is registered by {@link module:table/tablelayout/tablelayoutediting~TableLayoutEditing}\n * as the `'insertTableLayout'` editor command.\n *\n * To insert a layout table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTableLayout', { rows: 20, columns: 5 } );\n * ```\n */ class InsertTableLayoutCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        this.isEnabled = isAllowedInParent(selection, schema);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Inserts a layout table with the given number of rows and columns into the editor.\n\t *\n\t * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n\t * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n\t * @fires execute\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const tableUtils = editor.plugins.get('TableUtils');\n        model.change((writer)=>{\n            const normalizedOptions = {\n                rows: options.rows || 2,\n                columns: options.columns || 2\n            };\n            const table = tableUtils.createTable(writer, normalizedOptions);\n            writer.setAttribute('tableType', 'layout', table);\n            model.insertObject(table, null, null, {\n                findOptimalPosition: 'auto'\n            });\n            const singleColumnWidth = `${100 / normalizedOptions.columns}%`;\n            const columnWidths = Array(normalizedOptions.columns).fill(singleColumnWidth);\n            const tableWidthsCommand = editor.commands.get('resizeColumnWidths');\n            // Make the table full-width with equal columns width.\n            tableWidthsCommand.execute({\n                tableWidth: '100%',\n                columnWidths,\n                table\n            });\n            writer.setSelection(writer.createPositionAt(table.getNodeByPath([\n                0,\n                0,\n                0\n            ]), 0));\n        });\n    }\n}\n/**\n * Checks if the table is allowed in the parent.\n */ function isAllowedInParent(selection, schema) {\n    const positionParent = selection.getFirstPosition().parent;\n    const validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n    return schema.checkChild(validParent, 'table');\n}\n\n/**\n * Command used by the {@link module:table/tablecolumnresize~TableColumnResize Table column resize feature} that\n * updates the width of the whole table as well as its individual columns.\n */ class TableWidthsCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        // The command is always enabled as it doesn't care about the actual selection - table can be resized\n        // even if the selection is elsewhere.\n        this.isEnabled = true;\n    }\n    /**\n\t * Updated the `tableWidth` attribute of the table and the `columnWidth` attribute of the columns of that table.\n\t */ execute(options = {}) {\n        const { model, plugins } = this.editor;\n        let { table = model.document.selection.getSelectedElement(), columnWidths, tableWidth } = options;\n        if (columnWidths) {\n            // For backwards compatibility, columnWidths might be an array or a string of comma-separated values.\n            columnWidths = Array.isArray(columnWidths) ? columnWidths : columnWidths.split(',');\n        }\n        model.change((writer)=>{\n            if (tableWidth) {\n                writer.setAttribute('tableWidth', tableWidth, table);\n            } else {\n                writer.removeAttribute('tableWidth', table);\n            }\n            const tableColumnGroup = plugins.get('TableColumnResizeEditing').getColumnGroupElement(table);\n            if (!columnWidths && !tableColumnGroup) {\n                return;\n            }\n            if (!columnWidths) {\n                return writer.remove(tableColumnGroup);\n            }\n            const widths = normalizeColumnWidths(columnWidths);\n            if (!tableColumnGroup) {\n                const colGroupElement = writer.createElement('tableColumnGroup');\n                widths.forEach((columnWidth)=>writer.appendElement('tableColumn', {\n                        columnWidth\n                    }, colGroupElement));\n                writer.append(colGroupElement, table);\n            } else {\n                Array.from(tableColumnGroup.getChildren()).forEach((column, index)=>writer.setAttribute('columnWidth', widths[index], column));\n            }\n        });\n    }\n}\n\n/**\n * Returns a upcast helper that ensures the number of `<tableColumn>` elements corresponds to the actual number of columns in the table,\n * because the input data might have too few or too many <col> elements.\n *\n * @internal\n */ function upcastColgroupElement(tableUtilsPlugin) {\n    return (dispatcher)=>dispatcher.on('element:colgroup', (evt, data, conversionApi)=>{\n            const modelTable = data.modelCursor.findAncestor('table');\n            const tableColumnGroup = getColumnGroupElement(modelTable);\n            if (!tableColumnGroup) {\n                return;\n            }\n            const columnElements = getTableColumnElements(tableColumnGroup);\n            const columnsCount = tableUtilsPlugin.getColumns(modelTable);\n            let columnWidths = translateColSpanAttribute(tableColumnGroup, conversionApi.writer);\n            // Fill the array with 'auto' values if the number of columns is higher than number of declared values.\n            columnWidths = Array.from({\n                length: columnsCount\n            }, (_, index)=>columnWidths[index] || 'auto');\n            if (columnWidths.length != columnElements.length || columnWidths.includes('auto')) {\n                updateColumnElements(columnElements, tableColumnGroup, normalizeColumnWidths(columnWidths), conversionApi.writer);\n            }\n        }, {\n            priority: 'low'\n        });\n}\n/**\n * Returns downcast helper for adding `ck-table-resized` class if there is a `<tableColumnGroup>` element inside the table.\n *\n * @internal\n */ function downcastTableResizedClass() {\n    return (dispatcher)=>dispatcher.on('insert:table', (evt, data, conversionApi)=>{\n            const viewWriter = conversionApi.writer;\n            const modelTable = data.item;\n            const viewElement = conversionApi.mapper.toViewElement(modelTable);\n            const viewTable = viewElement.is('element', 'table') ? viewElement : Array.from(viewElement.getChildren()).find((viewChild)=>viewChild.is('element', 'table'));\n            const tableColumnGroup = getColumnGroupElement(modelTable);\n            if (tableColumnGroup) {\n                viewWriter.addClass('ck-table-resized', viewTable);\n            } else {\n                viewWriter.removeClass('ck-table-resized', viewTable);\n            }\n        }, {\n            priority: 'low'\n        });\n}\n/**\n * Returns a upcast helper that removes the `ck-table-resized` class from the table element.\n *\n * @internal\n */ function upcastTableResizedClass() {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            conversionApi.consumable.consume(data.viewItem, {\n                classes: 'ck-table-resized'\n            });\n        });\n    };\n}\n\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The table column resize editing plugin.\n */ class TableColumnResizeEditing extends Plugin {\n    /**\n\t * A flag indicating if the column resizing is in progress.\n\t */ _isResizingActive;\n    /**\n\t * A temporary storage for the required data needed to correctly calculate the widths of the resized columns. This storage is\n\t * initialized when column resizing begins, and is purged upon completion.\n\t */ _resizingData;\n    /**\n\t * DOM emitter.\n\t */ _domEmitter;\n    /**\n\t * A local reference to the {@link module:table/tableutils~TableUtils} plugin.\n\t */ _tableUtilsPlugin;\n    /**\n\t * Starting mouse position data used to add a threshold to the resizing process.\n\t */ _initialMouseEventData = null;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableColumnResizeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._isResizingActive = false;\n        this.set('_isResizingAllowed', true);\n        this._resizingData = null;\n        this._domEmitter = new (DomEmitterMixin())();\n        this._tableUtilsPlugin = editor.plugins.get('TableUtils');\n        this.on('change:_isResizingAllowed', (evt, name, value)=>{\n            // Toggling the `ck-column-resize_disabled` class shows and hides the resizers through CSS.\n            const classAction = value ? 'removeClass' : 'addClass';\n            editor.editing.view.change((writer)=>{\n                for (const root of editor.editing.view.document.roots){\n                    writer[classAction]('ck-column-resize_disabled', editor.editing.view.document.getRoot(root.rootName));\n                }\n            });\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._extendSchema();\n        this._registerPostFixer();\n        this._registerConverters();\n        this._registerResizingListeners();\n        this._registerResizerInserter();\n        const editor = this.editor;\n        const columnResizePlugin = editor.plugins.get('TableColumnResize');\n        const tableEditing = editor.plugins.get('TableEditing');\n        tableEditing.registerAdditionalSlot({\n            filter: (element)=>element.is('element', 'tableColumnGroup'),\n            positionOffset: 0\n        });\n        const tableWidthsCommand = new TableWidthsCommand(editor);\n        // For backwards compatibility we have two commands that perform exactly the same operation.\n        editor.commands.add('resizeTableWidth', tableWidthsCommand);\n        editor.commands.add('resizeColumnWidths', tableWidthsCommand);\n        // Currently the states of column resize and table resize (which is actually the last column resize) features\n        // are bound together. They can be separated in the future by adding distinct listeners and applying\n        // different CSS classes (e.g. `ck-column-resize_disabled` and `ck-table-resize_disabled`) to the editor root.\n        // See #12148 for the details.\n        this.bind('_isResizingAllowed').to(editor, 'isReadOnly', columnResizePlugin, 'isEnabled', tableWidthsCommand, 'isEnabled', (isEditorReadOnly, isPluginEnabled, isTableWidthsCommandCommandEnabled)=>!isEditorReadOnly && isPluginEnabled && isTableWidthsCommandCommandEnabled);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this._domEmitter.stopListening();\n        super.destroy();\n    }\n    /**\n\t * Returns a 'tableColumnGroup' element from the 'table'.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns A 'tableColumnGroup' element.\n\t */ getColumnGroupElement(element) {\n        return getColumnGroupElement(element);\n    }\n    /**\n\t * Returns an array of 'tableColumn' elements.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of 'tableColumn' elements.\n\t */ getTableColumnElements(element) {\n        return getTableColumnElements(element);\n    }\n    /**\n\t * Returns an array of table column widths.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of table column widths.\n\t */ getTableColumnsWidths(element) {\n        return getTableColumnsWidths(element);\n    }\n    /**\n\t * Registers new attributes for a table model element.\n\t */ _extendSchema() {\n        const schema = this.editor.model.schema;\n        schema.extend('table', {\n            allowAttributes: [\n                'tableWidth'\n            ]\n        });\n        schema.register('tableColumnGroup', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        schema.register('tableColumn', {\n            allowIn: 'tableColumnGroup',\n            allowAttributes: [\n                'columnWidth',\n                'colSpan'\n            ],\n            isLimit: true\n        });\n        schema.setAttributeProperties('columnWidth', {\n            isFormatting: true\n        });\n    }\n    /**\n\t * Registers table column resize post-fixer.\n\t *\n\t * It checks if the change from the differ concerns a table-related element or attribute. For detected changes it:\n\t *  * Adjusts the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n\t *  * Checks if the `columnWidths` attribute gets updated accordingly after columns have been added or removed.\n\t */ _registerPostFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.registerPostFixer((writer)=>{\n            let changed = false;\n            for (const table of getChangedResizedTables(model)){\n                const tableColumnGroup = this.getColumnGroupElement(table);\n                const columns = this.getTableColumnElements(tableColumnGroup);\n                const columnWidths = this.getTableColumnsWidths(tableColumnGroup);\n                // Adjust the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n                let normalizedWidths = normalizeColumnWidths(columnWidths);\n                // If the number of columns has changed, then we need to adjust the widths of the affected columns.\n                normalizedWidths = adjustColumnWidths(normalizedWidths, table, this);\n                if (isEqual(columnWidths, normalizedWidths)) {\n                    continue;\n                }\n                updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer);\n                changed = true;\n            }\n            return changed;\n        });\n        /**\n\t\t * Adjusts if necessary the `columnWidths` in case if the number of column has changed.\n\t\t *\n\t\t * @param columnWidths Note: this array **may be modified** by the function.\n\t\t * @param table Table to be checked.\n\t\t */ function adjustColumnWidths(columnWidths, table, plugin) {\n            const newTableColumnsCount = plugin._tableUtilsPlugin.getColumns(table);\n            const columnsCountDelta = newTableColumnsCount - columnWidths.length;\n            if (columnsCountDelta === 0) {\n                return columnWidths;\n            }\n            const widths = columnWidths.map((width)=>Number(width.replace('%', '')));\n            // Collect all cells that are affected by the change.\n            const cellSet = getAffectedCells(plugin.editor.model.document.differ, table);\n            for (const cell of cellSet){\n                const currentColumnsDelta = newTableColumnsCount - widths.length;\n                if (currentColumnsDelta === 0) {\n                    continue;\n                }\n                // If the column count in the table changed, adjust the widths of the affected columns.\n                const hasMoreColumns = currentColumnsDelta > 0;\n                const currentColumnIndex = plugin._tableUtilsPlugin.getCellLocation(cell).column;\n                if (hasMoreColumns) {\n                    const columnMinWidthAsPercentage = getColumnMinWidthAsPercentage(table, plugin.editor);\n                    const columnWidthsToInsert = createFilledArray(currentColumnsDelta, columnMinWidthAsPercentage);\n                    widths.splice(currentColumnIndex, 0, ...columnWidthsToInsert);\n                } else {\n                    // Moves the widths of the removed columns to the preceding one.\n                    // Other editors either reduce the width of the whole table or adjust the widths\n                    // proportionally, so change of this behavior can be considered in the future.\n                    const removedColumnWidths = widths.splice(currentColumnIndex, Math.abs(currentColumnsDelta));\n                    widths[currentColumnIndex] += sumArray(removedColumnWidths);\n                }\n            }\n            return widths.map((width)=>width + '%');\n        }\n        /**\n\t\t * Returns a set of cells that have been changed in a given table.\n\t\t */ function getAffectedCells(differ, table) {\n            const cellSet = new Set();\n            for (const change of differ.getChanges()){\n                if (change.type == 'insert' && change.position.nodeAfter && change.position.nodeAfter.name == 'tableCell' && change.position.nodeAfter.getAncestors().includes(table)) {\n                    cellSet.add(change.position.nodeAfter);\n                } else if (change.type == 'remove') {\n                    // If the first cell was removed, use the node after the change position instead.\n                    const referenceNode = change.position.nodeBefore || change.position.nodeAfter;\n                    if (referenceNode.name == 'tableCell' && referenceNode.getAncestors().includes(table)) {\n                        cellSet.add(referenceNode);\n                    }\n                }\n            }\n            return cellSet;\n        }\n    }\n    /**\n\t * Registers table column resize converters.\n\t */ _registerConverters() {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        // Table width style\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: /^(figure|table)$/,\n                styles: {\n                    width: /[\\s\\S]+/\n                }\n            },\n            model: {\n                key: 'tableWidth',\n                value: (viewElement)=>{\n                    const parent = viewElement.parent;\n                    if (parent.is('element', 'figure')) {\n                        return;\n                    }\n                    return viewElement.getStyle('width');\n                }\n            }\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'table',\n                key: 'tableWidth'\n            },\n            view: (width)=>({\n                    name: 'figure',\n                    key: 'style',\n                    value: {\n                        width\n                    }\n                })\n        });\n        conversion.elementToElement({\n            model: 'tableColumnGroup',\n            view: 'colgroup'\n        });\n        conversion.elementToElement({\n            model: 'tableColumn',\n            view: 'col'\n        });\n        conversion.for('downcast').add(downcastTableResizedClass());\n        conversion.for('upcast').add(upcastTableResizedClass());\n        conversion.for('upcast').add(upcastColgroupElement(this._tableUtilsPlugin));\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                styles: {\n                    width: /.*/\n                }\n            },\n            model: {\n                key: 'columnWidth',\n                value: (viewElement)=>{\n                    const viewColWidth = viewElement.getStyle('width');\n                    // 'pt' is the default unit for table column width pasted from MS Office.\n                    // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n                    if (!viewColWidth || !viewColWidth.endsWith('%') && !viewColWidth.endsWith('pt')) {\n                        return 'auto';\n                    }\n                    return viewColWidth;\n                }\n            }\n        });\n        // The `col[span]` attribute is present in tables pasted from MS Excel. We use it to set the temporary `colSpan` model attribute,\n        // which is consumed during the `colgroup` element upcast.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                key: 'span'\n            },\n            model: 'colSpan'\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'tableColumn',\n                key: 'columnWidth'\n            },\n            view: (width)=>({\n                    key: 'style',\n                    value: {\n                        width\n                    }\n                })\n        });\n    }\n    /**\n\t * Registers listeners to handle resizing process.\n\t */ _registerResizingListeners() {\n        const editingView = this.editor.editing.view;\n        editingView.addObserver(MouseEventsObserver);\n        editingView.document.on('mouseover', this._onMouseOverHandler.bind(this), {\n            priority: 'high'\n        });\n        editingView.document.on('mousedown', this._onMouseDownHandler.bind(this), {\n            priority: 'high'\n        });\n        editingView.document.on('mouseout', this._onMouseOutHandler.bind(this), {\n            priority: 'high'\n        });\n        this._domEmitter.listenTo(global.window.document, 'mousemove', throttle(this._onMouseMoveHandler.bind(this), 50));\n        this._domEmitter.listenTo(global.window.document, 'mouseup', this._onMouseUpHandler.bind(this));\n    }\n    /**\n\t * Calculate and set `top` and `bottom` styles to the column resizer element to fit the height of the table.\n\t *\n\t * @param viewResizer The column resizer element.\n\t */ _recalculateResizerElement(viewResizer) {\n        const editor = this.editor;\n        const domConverter = editor.editing.view.domConverter;\n        // Get DOM target figure ancestor element.\n        const domTable = domConverter.mapViewToDom(viewResizer.findAncestor('table'));\n        // Get DOM table cell element.\n        const domCell = domConverter.mapViewToDom(viewResizer.findAncestor((item)=>[\n                'td',\n                'th'\n            ].includes(item.name)));\n        const rectTable = new Rect(domTable);\n        const rectCell = new Rect(domCell);\n        // Calculate the top, and bottom positions of the column resizer element.\n        const targetTopPosition = toPx(Number((rectTable.top - rectCell.top).toFixed(4)));\n        const targetBottomPosition = toPx(Number((rectCell.bottom - rectTable.bottom).toFixed(4)));\n        // Set `top` and `bottom` styles to the column resizer element.\n        editor.editing.view.change((viewWriter)=>{\n            viewWriter.setStyle('top', targetTopPosition, viewResizer);\n            viewWriter.setStyle('bottom', targetBottomPosition, viewResizer);\n        });\n    }\n    /**\n\t * Remove `top` and `bottom` styles of the column resizer element.\n\t *\n\t * @param viewResizer The column resizer element.\n\t */ _resetResizerStyles(viewResizer) {\n        this.editor.editing.view.change((viewWriter)=>{\n            viewWriter.removeStyle('top', viewResizer);\n            viewWriter.removeStyle('bottom', viewResizer);\n        });\n    }\n    /**\n\t * Handles the `mouseover` event on column resizer element.\n\t * Recalculates the `top` and `bottom` styles of the column resizer element to fit the height of the table.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */ _onMouseOverHandler(eventInfo, domEventData) {\n        const target = domEventData.target;\n        if (!target.hasClass('ck-table-column-resizer')) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            return;\n        }\n        this._recalculateResizerElement(target);\n    }\n    /**\n\t * Handles the `mouseout` event on column resizer element.\n\t * When resizing is not active, it resets the `top` and `bottom` styles of the column resizer element.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */ _onMouseOutHandler(eventInfo, domEventData) {\n        const target = domEventData.target;\n        if (!target.hasClass('ck-table-column-resizer')) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            return;\n        }\n        if (this._isResizingActive) {\n            return;\n        }\n        this._resetResizerStyles(target);\n    }\n    /**\n\t * Handles the `mousedown` event on column resizer element:\n\t *  * calculates the initial column pixel widths,\n\t *  * inserts the `<colgroup>` element if it is not present in the `<table>`,\n\t *  * puts the necessary data in the temporary storage,\n\t *  * applies the attributes to the `<table>` view element.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */ _onMouseDownHandler(eventInfo, domEventData) {\n        const target = domEventData.target;\n        if (!target.hasClass('ck-table-column-resizer')) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            return;\n        }\n        const editor = this.editor;\n        const modelTable = editor.editing.mapper.toModelElement(target.findAncestor('figure'));\n        // Do not resize if table model is in non-editable place.\n        if (!editor.model.canEditAt(modelTable)) {\n            return;\n        }\n        domEventData.preventDefault();\n        eventInfo.stop();\n        this._initialMouseEventData = domEventData;\n    }\n    /**\n\t * Starts the resizing process after the threshold is reached.\n\t */ _startResizingAfterThreshold() {\n        const domEventData = this._initialMouseEventData;\n        const { target } = domEventData;\n        const modelTable = this.editor.editing.mapper.toModelElement(target.findAncestor('figure'));\n        const viewTable = target.findAncestor('table');\n        // Calculate the initial column widths in pixels.\n        const columnWidthsInPx = _calculateDomColumnWidths(modelTable, this._tableUtilsPlugin, this.editor);\n        // Insert colgroup for the table that is resized for the first time.\n        if (!Array.from(viewTable.getChildren()).find((viewCol)=>viewCol.is('element', 'colgroup'))) {\n            this.editor.editing.view.change((viewWriter)=>{\n                _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable);\n            });\n        }\n        this._isResizingActive = true;\n        this._resizingData = this._getResizingData(domEventData, columnWidthsInPx);\n        // At this point we change only the editor view - we don't want other users to see our changes yet,\n        // so we can't apply them in the model.\n        this.editor.editing.view.change((writer)=>_applyResizingAttributesToTable(writer, viewTable, this._resizingData));\n        /**\n\t\t * Calculates the DOM columns' widths. It is done by taking the width of the widest cell\n\t\t * from each table column (we rely on the  {@link module:table/tablewalker~TableWalker}\n\t\t * to determine which column the cell belongs to).\n\t\t *\n\t\t * @param modelTable A table which columns should be measured.\n\t\t * @param tableUtils The Table Utils plugin instance.\n\t\t * @param editor The editor instance.\n\t\t * @returns Columns' widths expressed in pixels (without unit).\n\t\t */ function _calculateDomColumnWidths(modelTable, tableUtilsPlugin, editor) {\n            const columnWidthsInPx = Array(tableUtilsPlugin.getColumns(modelTable));\n            const tableWalker = new TableWalker(modelTable);\n            for (const cellSlot of tableWalker){\n                const viewCell = editor.editing.mapper.toViewElement(cellSlot.cell);\n                const domCell = editor.editing.view.domConverter.mapViewToDom(viewCell);\n                const domCellWidth = getDomCellOuterWidth(domCell);\n                if (!columnWidthsInPx[cellSlot.column] || domCellWidth < columnWidthsInPx[cellSlot.column]) {\n                    columnWidthsInPx[cellSlot.column] = toPrecision(domCellWidth);\n                }\n            }\n            return columnWidthsInPx;\n        }\n        /**\n\t\t * Creates a `<colgroup>` element with `<col>`s and inserts it into a given view table.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param columnWidthsInPx Column widths.\n\t\t * @param viewTable A table view element.\n\t\t */ function _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable) {\n            const colgroup = viewWriter.createContainerElement('colgroup');\n            for(let i = 0; i < columnWidthsInPx.length; i++){\n                const viewColElement = viewWriter.createEmptyElement('col');\n                const columnWidthInPc = `${toPrecision(columnWidthsInPx[i] / sumArray(columnWidthsInPx) * 100)}%`;\n                viewWriter.setStyle('width', columnWidthInPc, viewColElement);\n                viewWriter.insert(viewWriter.createPositionAt(colgroup, 'end'), viewColElement);\n            }\n            viewWriter.insert(viewWriter.createPositionAt(viewTable, 0), colgroup);\n        }\n        /**\n\t\t * Applies the style and classes to the view table as the resizing begun.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param viewTable A table containing the clicked resizer.\n\t\t * @param resizingData Data related to the resizing.\n\t\t */ function _applyResizingAttributesToTable(viewWriter, viewTable, resizingData) {\n            const figureInitialPcWidth = resizingData.widths.viewFigureWidth / resizingData.widths.viewFigureParentWidth;\n            viewWriter.addClass('ck-table-resized', viewTable);\n            viewWriter.addClass('ck-table-column-resizer__active', resizingData.elements.viewResizer);\n            viewWriter.setStyle('width', `${toPrecision(figureInitialPcWidth * 100)}%`, viewTable.findAncestor('figure'));\n        }\n    }\n    /**\n\t * Handles the `mousemove` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it stops the resizing process instantly calling the `mousedown` event handler.\n\t *  * Otherwise it dynamically updates the widths of the resized columns.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param mouseEventData The native DOM event.\n\t */ _onMouseMoveHandler(eventInfo, mouseEventData) {\n        if (this._initialMouseEventData) {\n            const mouseEvent = this._initialMouseEventData.domEvent;\n            const distanceX = Math.abs(mouseEventData.clientX - mouseEvent.clientX);\n            if (distanceX >= COLUMN_RESIZE_DISTANCE_THRESHOLD) {\n                this._startResizingAfterThreshold();\n                this._initialMouseEventData = null;\n            } else {\n                return;\n            }\n        }\n        if (!this._isResizingActive) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            this._onMouseUpHandler();\n            return;\n        }\n        const { columnPosition, flags: { isRightEdge, isTableCentered, isLtrContent }, elements: { viewFigure, viewLeftColumn, viewRightColumn, viewResizer }, widths: { viewFigureParentWidth, tableWidth, leftColumnWidth, rightColumnWidth } } = this._resizingData;\n        const dxLowerBound = -leftColumnWidth + COLUMN_MIN_WIDTH_IN_PIXELS;\n        const dxUpperBound = isRightEdge ? viewFigureParentWidth - tableWidth : rightColumnWidth - COLUMN_MIN_WIDTH_IN_PIXELS;\n        // The multiplier is needed for calculating the proper movement offset:\n        // - it should negate the sign if content language direction is right-to-left,\n        // - it should double the offset if the table edge is resized and table is centered.\n        const multiplier = (isLtrContent ? 1 : -1) * (isRightEdge && isTableCentered ? 2 : 1);\n        const dx = clamp((mouseEventData.clientX - columnPosition) * multiplier, Math.min(dxLowerBound, 0), Math.max(dxUpperBound, 0));\n        if (dx === 0) {\n            return;\n        }\n        this.editor.editing.view.change((writer)=>{\n            const leftColumnWidthAsPercentage = toPrecision((leftColumnWidth + dx) * 100 / tableWidth);\n            writer.setStyle('width', `${leftColumnWidthAsPercentage}%`, viewLeftColumn);\n            if (isRightEdge) {\n                const tableWidthAsPercentage = toPrecision((tableWidth + dx) * 100 / viewFigureParentWidth);\n                writer.setStyle('width', `${tableWidthAsPercentage}%`, viewFigure);\n            } else {\n                const rightColumnWidthAsPercentage = toPrecision((rightColumnWidth - dx) * 100 / tableWidth);\n                writer.setStyle('width', `${rightColumnWidthAsPercentage}%`, viewRightColumn);\n            }\n        });\n        this._recalculateResizerElement(viewResizer);\n    }\n    /**\n\t * Handles the `mouseup` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it cancels the resizing process restoring the original widths.\n\t *  * Otherwise it propagates the changes from view to the model by executing the adequate commands.\n\t */ _onMouseUpHandler() {\n        this._initialMouseEventData = null;\n        if (!this._isResizingActive) {\n            return;\n        }\n        const { viewResizer, modelTable, viewFigure, viewColgroup } = this._resizingData.elements;\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const tableColumnGroup = this.getColumnGroupElement(modelTable);\n        const viewColumns = Array.from(viewColgroup.getChildren()).filter((column)=>column.is('view:element'));\n        const columnWidthsAttributeOld = tableColumnGroup ? this.getTableColumnsWidths(tableColumnGroup) : null;\n        const columnWidthsAttributeNew = viewColumns.map((column)=>column.getStyle('width'));\n        const isColumnWidthsAttributeChanged = !isEqual(columnWidthsAttributeOld, columnWidthsAttributeNew);\n        const tableWidthAttributeOld = modelTable.getAttribute('tableWidth');\n        const tableWidthAttributeNew = viewFigure.getStyle('width');\n        const isTableWidthAttributeChanged = tableWidthAttributeOld !== tableWidthAttributeNew;\n        if (isColumnWidthsAttributeChanged || isTableWidthAttributeChanged) {\n            if (this._isResizingAllowed) {\n                editor.execute('resizeTableWidth', {\n                    table: modelTable,\n                    tableWidth: `${toPrecision(tableWidthAttributeNew)}%`,\n                    columnWidths: columnWidthsAttributeNew\n                });\n            } else {\n                // In read-only mode revert all changes in the editing view. The model is not touched so it does not need to be restored.\n                // This case can occur if the read-only mode kicks in during the resizing process.\n                editingView.change((writer)=>{\n                    // If table had resized columns before, restore the previous column widths.\n                    // Otherwise clean up the view from the temporary column resizing markup.\n                    if (columnWidthsAttributeOld) {\n                        for (const viewCol of viewColumns){\n                            writer.setStyle('width', columnWidthsAttributeOld.shift(), viewCol);\n                        }\n                    } else {\n                        writer.remove(viewColgroup);\n                    }\n                    if (isTableWidthAttributeChanged) {\n                        // If the whole table was already resized before, restore the previous table width.\n                        // Otherwise clean up the view from the temporary table resizing markup.\n                        if (tableWidthAttributeOld) {\n                            writer.setStyle('width', tableWidthAttributeOld, viewFigure);\n                        } else {\n                            writer.removeStyle('width', viewFigure);\n                        }\n                    }\n                    // If a table and its columns weren't resized before,\n                    // prune the remaining common resizing markup.\n                    if (!columnWidthsAttributeOld && !tableWidthAttributeOld) {\n                        writer.removeClass('ck-table-resized', [\n                            ...viewFigure.getChildren()\n                        ].find((element)=>element.name === 'table'));\n                    }\n                });\n            }\n        }\n        editingView.change((writer)=>{\n            writer.removeClass('ck-table-column-resizer__active', viewResizer);\n        });\n        const element = editingView.domConverter.mapViewToDom(viewResizer);\n        if (!element.matches(':hover')) {\n            this._resetResizerStyles(viewResizer);\n        }\n        this._isResizingActive = false;\n        this._resizingData = null;\n    }\n    /**\n\t * Retrieves and returns required data needed for the resizing process.\n\t *\n\t * @param domEventData The data of the `mousedown` event.\n\t * @param columnWidths The current widths of the columns.\n\t * @returns The data needed for the resizing process.\n\t */ _getResizingData(domEventData, columnWidths) {\n        const editor = this.editor;\n        const columnPosition = domEventData.domEvent.clientX;\n        const viewResizer = domEventData.target;\n        const viewLeftCell = viewResizer.findAncestor('td') || viewResizer.findAncestor('th');\n        const modelLeftCell = editor.editing.mapper.toModelElement(viewLeftCell);\n        const modelTable = modelLeftCell.findAncestor('table');\n        const leftColumnIndex = getColumnEdgesIndexes(modelLeftCell, this._tableUtilsPlugin).rightEdge;\n        const lastColumnIndex = this._tableUtilsPlugin.getColumns(modelTable) - 1;\n        const isRightEdge = leftColumnIndex === lastColumnIndex;\n        const isTableCentered = !modelTable.hasAttribute('tableAlignment');\n        const isLtrContent = editor.locale.contentLanguageDirection !== 'rtl';\n        const viewTable = viewLeftCell.findAncestor('table');\n        const viewFigure = viewTable.findAncestor('figure');\n        const viewColgroup = [\n            ...viewTable.getChildren()\n        ].find((viewCol)=>viewCol.is('element', 'colgroup'));\n        const viewLeftColumn = viewColgroup.getChild(leftColumnIndex);\n        const viewRightColumn = isRightEdge ? undefined : viewColgroup.getChild(leftColumnIndex + 1);\n        const viewFigureParentWidth = getElementWidthInPixels(editor.editing.view.domConverter.mapViewToDom(viewFigure.parent));\n        const viewFigureWidth = getElementWidthInPixels(editor.editing.view.domConverter.mapViewToDom(viewFigure));\n        const tableWidth = getTableWidthInPixels(modelTable, editor);\n        const leftColumnWidth = columnWidths[leftColumnIndex];\n        const rightColumnWidth = isRightEdge ? undefined : columnWidths[leftColumnIndex + 1];\n        return {\n            columnPosition,\n            flags: {\n                isRightEdge,\n                isTableCentered,\n                isLtrContent\n            },\n            elements: {\n                viewResizer,\n                modelTable,\n                viewFigure,\n                viewColgroup,\n                viewLeftColumn,\n                viewRightColumn\n            },\n            widths: {\n                viewFigureParentWidth,\n                viewFigureWidth,\n                tableWidth,\n                leftColumnWidth,\n                rightColumnWidth\n            }\n        };\n    }\n    /**\n\t * Registers a listener ensuring that each resizable cell have a resizer handle.\n\t */ _registerResizerInserter() {\n        this.editor.conversion.for('editingDowncast').add((dispatcher)=>{\n            dispatcher.on('insert:tableCell', (evt, data, conversionApi)=>{\n                const modelElement = data.item;\n                const viewElement = conversionApi.mapper.toViewElement(modelElement);\n                const viewWriter = conversionApi.writer;\n                viewWriter.insert(viewWriter.createPositionAt(viewElement, 'end'), viewWriter.createUIElement('div', {\n                    class: 'ck-table-column-resizer'\n                }));\n            }, {\n                priority: 'lowest'\n            });\n        });\n    }\n}\n\n/**\n * The table column resize feature.\n *\n * It provides the possibility to set the width of each column in a table using a resize handler.\n */ class TableColumnResize extends Plugin {\n    /**\n\t * @inheritDoc\n \t */ static get requires() {\n        return [\n            TableColumnResizeEditing,\n            TableCellWidthEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n \t */ static get pluginName() {\n        return 'TableColumnResize';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The set table type command.\n *\n * The command is registered by {@link module:table/tablelayout/tablelayoutediting~TableLayoutEditing}\n * as the `'tableType'` editor command.\n *\n * To set the table type at the current selection, execute the command and specify the table type:\n *\n * ```ts\n * editor.execute( 'tableType', 'layout' );\n * ```\n */ class TableTypeCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedTable = getSelectionAffectedTable(selection);\n        if (selectedTable) {\n            this.isEnabled = true;\n            this.value = selectedTable.getAttribute('tableType');\n        } else {\n            this.isEnabled = false;\n            this.value = null;\n        }\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Set table type by the given table type parameter.\n\t *\n\t * @param tableType The type of table it should become.\n\t * @fires execute\n\t */ execute(tableType) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const table = getSelectionAffectedTable(selection);\n        const currentTableType = table.getAttribute('tableType');\n        if (currentTableType === tableType) {\n            return;\n        }\n        model.change((writer)=>{\n            writer.setAttribute('tableType', tableType, table);\n            model.schema.removeDisallowedAttributes([\n                table\n            ], writer);\n            const tableChildren = table.getChildren();\n            // Check if all children are allowed for the new table type.\n            for (const child of tableChildren){\n                if (!model.schema.checkChild(table, child)) {\n                    writer.remove(child);\n                }\n            }\n        });\n    }\n}\n\nconst TABLE_TYPES = [\n    'content',\n    'layout'\n];\n/**\n * The table layout editing plugin.\n */ class TableLayoutEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableLayoutEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableColumnResize\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._defineSchema();\n        this._defineConverters();\n        this._defineClipboardPasteHandlers();\n        this._registerTableTypeAttributePostfixer();\n        this.editor.commands.add('insertTableLayout', new InsertTableLayoutCommand(this.editor));\n        this.editor.commands.add('tableType', new TableTypeCommand(this.editor));\n    }\n    /**\n\t * Defines the schema for the table layout feature.\n\t */ _defineSchema() {\n        const { schema } = this.editor.model;\n        schema.extend('table', {\n            allowAttributes: 'tableType'\n        });\n        // Disallow adding `caption` to layout table.\n        schema.addChildCheck(layoutTableCheck, 'caption');\n        // Disallow adding `headingRows` attribute to layout table.\n        schema.addAttributeCheck(layoutTableCheck, 'headingRows');\n        // Disallow adding `headingColumns` attribute to layout table.\n        schema.addAttributeCheck(layoutTableCheck, 'headingColumns');\n    }\n    /**\n\t * Defines the converters for the table layout feature.\n\t */ _defineConverters() {\n        const { editor } = this;\n        const { conversion } = editor;\n        const preferredExternalTableType = editor.config.get('table.tableLayout.preferredExternalTableType');\n        conversion.for('upcast').add(upcastLayoutTable(preferredExternalTableType));\n        conversion.for('dataDowncast').add(dataDowncastLayoutTable());\n        conversion.for('editingDowncast').attributeToAttribute({\n            model: {\n                key: 'tableType',\n                values: [\n                    'layout',\n                    'content'\n                ]\n            },\n            view: {\n                layout: {\n                    key: 'class',\n                    value: [\n                        'layout-table'\n                    ]\n                },\n                content: {\n                    key: 'class',\n                    value: [\n                        'content-table'\n                    ]\n                }\n            }\n        });\n    }\n    /**\n\t * Handles the clipboard content insertion events.\n\t *\n\t * - If the content is from another editor, do not override the table type.\n\t * - If the content is from another source, set the table type to 'content'.\n\t *\n\t * It handles the scenario when user copies `<table></table>` from Word. We do not want to\n\t * change the table type to `layout` because it is really `content` table.\n\t */ _defineClipboardPasteHandlers() {\n        const { plugins } = this.editor;\n        if (!plugins.has('ClipboardPipeline')) {\n            return;\n        }\n        const clipboardPipeline = plugins.get('ClipboardPipeline');\n        this.listenTo(clipboardPipeline, 'contentInsertion', (evt, data)=>{\n            // If content is pasted from the other editor, skip overriding table type.\n            if (data.sourceEditorId) {\n                return;\n            }\n            // For content from other sources, always set table type to 'content'.\n            this.editor.model.change((writer)=>{\n                for (const { item } of writer.createRangeIn(data.content)){\n                    if (item.is('element', 'table')) {\n                        writer.setAttribute('tableType', 'content', item);\n                    }\n                }\n            });\n        });\n    }\n    /**\n\t * Registers a post-fixer that sets the `tableType` attribute to `content` for inserted \"default\" tables.\n\t * Also fixes potential issues with the table structure when the `tableType` attribute has been changed.\n\t */ _registerTableTypeAttributePostfixer() {\n        const editor = this.editor;\n        editor.model.document.registerPostFixer((writer)=>{\n            const changes = editor.model.document.differ.getChanges();\n            let hasChanged = false;\n            for (const entry of changes){\n                if (entry.type == 'insert' && entry.name != '$text') {\n                    const element = entry.position.nodeAfter;\n                    const range = writer.createRangeOn(element);\n                    for (const item of range.getItems()){\n                        if (item.is('element', 'table') && !item.hasAttribute('tableType')) {\n                            writer.setAttribute('tableType', 'content', item);\n                            hasChanged = true;\n                        }\n                    }\n                }\n                // Remove disallowed attributes and children for layout tables\n                // when `tableType` attribute has been changed by `TableTypeCommand`.\n                if (entry.type == 'attribute' && entry.attributeKey == 'tableType') {\n                    for (const item of entry.range.getItems()){\n                        if (item.is('element', 'table')) {\n                            editor.model.schema.removeDisallowedAttributes([\n                                item\n                            ], writer);\n                            const tableChildren = item.getChildren();\n                            // Check if all children are allowed for the new table type.\n                            for (const child of tableChildren){\n                                if (!editor.model.schema.checkChild(item, child)) {\n                                    writer.remove(child);\n                                    hasChanged = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return hasChanged;\n        });\n    }\n}\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper overrides the default table converter to meet table layout conditions.\n *\n * @returns Conversion helper.\n */ function upcastLayoutTable(preferredExternalTableType) {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            const viewTable = data.viewItem;\n            if (!conversionApi.consumable.test(viewTable, {\n                name: true\n            })) {\n                return;\n            }\n            const resolvedTableType = resolveTableType(viewTable, preferredExternalTableType);\n            // When an element is a content table, then skip it.\n            if (resolvedTableType == 'content') {\n                return;\n            }\n            const table = conversionApi.writer.createElement('table', {\n                tableType: 'layout'\n            });\n            if (!conversionApi.safeInsert(table, data.modelCursor)) {\n                return;\n            }\n            conversionApi.consumable.consume(viewTable, {\n                name: true\n            });\n            conversionApi.consumable.consume(viewTable, {\n                attributes: [\n                    'role'\n                ]\n            });\n            conversionApi.consumable.consume(viewTable, {\n                classes: [\n                    'layout-table'\n                ]\n            });\n            // Get all rows from the table and convert them.\n            // While looping over the children of `<table>` we can be sure that first will be `<tbody>`\n            // and optionally `<thead>` and `<tfoot>`, and in these elements are the table rows found.\n            // We can be sure of that because of `DomParser` handle it.\n            for (const tableChild of viewTable.getChildren()){\n                if (tableChild.is('element')) {\n                    for (const row of tableChild.getChildren()){\n                        if (row.is('element', 'tr')) {\n                            conversionApi.convertItem(row, conversionApi.writer.createPositionAt(table, 'end'));\n                        }\n                    }\n                }\n            }\n            // Convert everything else.\n            conversionApi.convertChildren(viewTable, conversionApi.writer.createPositionAt(table, 'end'));\n            // Create one row and one table cell for empty table.\n            if (table.isEmpty) {\n                const row = conversionApi.writer.createElement('tableRow');\n                conversionApi.writer.insert(row, conversionApi.writer.createPositionAt(table, 'end'));\n                createEmptyTableCell(conversionApi.writer, conversionApi.writer.createPositionAt(row, 'end'));\n            }\n            conversionApi.updateConversionResult(table, data);\n        }, {\n            priority: 'high'\n        });\n        // Sets only the table type attribute.\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            const { viewItem, modelRange } = data;\n            if (modelRange) {\n                conversionApi.writer.setAttribute('tableType', resolveTableType(viewItem, preferredExternalTableType), modelRange);\n                conversionApi.consumable.consume(viewItem, {\n                    classes: [\n                        'layout-table'\n                    ]\n                });\n                conversionApi.consumable.consume(viewItem, {\n                    classes: [\n                        'content-table'\n                    ]\n                });\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model table container element to view table element conversion helper.\n *\n * @returns Conversion helper.\n */ function dataDowncastLayoutTable() {\n    return (dispatcher)=>{\n        return dispatcher.on('attribute:tableType:table', (evt, data, conversionApi)=>{\n            const { item, attributeNewValue } = data;\n            const { mapper, writer } = conversionApi;\n            if (!conversionApi.consumable.test(item, evt.name)) {\n                return;\n            }\n            const table = mapper.toViewElement(item);\n            writer.addClass(`${attributeNewValue}-table`, table);\n            if (attributeNewValue == 'layout') {\n                writer.setAttribute('role', 'presentation', table);\n            }\n            conversionApi.consumable.consume(item, evt.name);\n        });\n    };\n}\n/**\n * Resolves the table type based on the view table element and the preferred external table type.\n */ function resolveTableType(viewTable, preferredExternalTableType) {\n    if (viewTable.hasClass('content-table')) {\n        return 'content';\n    }\n    if (viewTable.hasClass('layout-table')) {\n        return 'layout';\n    }\n    if (preferredExternalTableType && TABLE_TYPES.includes(preferredExternalTableType)) {\n        return preferredExternalTableType;\n    }\n    const parent = viewTable.parent;\n    /**\n\t * Checks if the table is a content table if any of the following conditions are met:\n\t * - the `<table>` is wrapped with `<figure>`,\n\t * - the `<table>` has a `<caption>` element.\n\t */ if (parent.is('element', 'figure') || Array.from(viewTable.getChildren()).some((child)=>child.is('element', 'caption'))) {\n        return 'content';\n    }\n    return 'layout';\n}\n/**\n * Checks if the element is a layout table.\n * It is used to disallow attributes or children that is managed by `Schema`.\n */ function layoutTableCheck(context) {\n    if (context.endsWith('table') && context.last.getAttribute('tableType') == 'layout') {\n        return false;\n    }\n}\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/layout-tables Layout table feature documentation}.\n */ class TableLayout extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableLayout';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PlainTableOutput,\n            TableColumnResize,\n            TableLayoutEditing,\n            TableLayoutUI\n        ];\n    }\n}\n\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n */ class TablePropertyCommand extends Command {\n    /**\n\t * The attribute that will be set by the command.\n\t */ attributeName;\n    /**\n\t * The default value for the attribute.\n\t *\n\t * @readonly\n\t */ _defaultValue;\n    /**\n\t * The default value for the attribute for the content table.\n\t */ _defaultContentTableValue;\n    /**\n\t * The default value for the attribute for the layout table.\n\t */ _defaultLayoutTableValue;\n    /**\n\t * Creates a new `TablePropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, attributeName, defaultValue){\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultContentTableValue = defaultValue;\n        this._defaultLayoutTableValue = attributeName === 'tableBorderStyle' ? 'none' : undefined;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const table = getSelectionAffectedTable(selection);\n        this._defaultValue = !table || table.getAttribute('tableType') !== 'layout' ? this._defaultContentTableValue : this._defaultLayoutTableValue;\n        this.isEnabled = !!table;\n        this.value = this._getValue(table);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on the selected table.\n\t * If not set, the command will remove the attribute from the selected table.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example, to allow a single undo step for multiple executions.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const { value, batch } = options;\n        const table = getSelectionAffectedTable(selection);\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, (writer)=>{\n            if (valueToSet) {\n                writer.setAttribute(this.attributeName, valueToSet, table);\n            } else {\n                writer.removeAttribute(this.attributeName, table);\n            }\n        });\n    }\n    /**\n\t * Returns the attribute value for a table.\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = table.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */ _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table background color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBackgroundColor'` editor command.\n *\n * To change the background color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableBackgroundColorCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBackgroundColor', defaultValue);\n    }\n}\n\n/**\n * The table border color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderColor'` editor command.\n *\n * To change the border color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableBorderColorCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBorderColor', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table style border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderStyle'` editor command.\n *\n * To change the border style of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */ class TableBorderStyleCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBorderStyle', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table width border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderWidth'` editor command.\n *\n * To change the border width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */ class TableBorderWidthCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBorderWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n/**\n * The table width command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableWidth'` editor command.\n *\n * To change the width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '400px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */ class TableWidthCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table height command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableHeight'` editor command.\n *\n * To change the height of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '500px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */ class TableHeightCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableHeight', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table alignment command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableAlignment'` editor command.\n *\n * To change the alignment of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableAlignment', {\n *   value: 'right'\n * } );\n * ```\n */ class TableAlignmentCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableAlignment', defaultValue);\n    }\n}\n\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n */ class TablePropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TablePropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableProperties.defaultProperties', {});\n        const defaultTableProperties = getNormalizedDefaultTableProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        editor.data.addStyleProcessorRules(addBorderStylesRules);\n        enableBorderProperties(schema, conversion, {\n            color: defaultTableProperties.borderColor,\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth\n        });\n        editor.commands.add('tableBorderColor', new TableBorderColorCommand(editor, defaultTableProperties.borderColor));\n        editor.commands.add('tableBorderStyle', new TableBorderStyleCommand(editor, defaultTableProperties.borderStyle));\n        editor.commands.add('tableBorderWidth', new TableBorderWidthCommand(editor, defaultTableProperties.borderWidth));\n        enableAlignmentProperty(schema, conversion, defaultTableProperties.alignment);\n        editor.commands.add('tableAlignment', new TableAlignmentCommand(editor, defaultTableProperties.alignment));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableWidth',\n            styleName: 'width',\n            attributeName: 'width',\n            attributeType: 'length',\n            defaultValue: defaultTableProperties.width\n        });\n        editor.commands.add('tableWidth', new TableWidthCommand(editor, defaultTableProperties.width));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableHeight',\n            styleName: 'height',\n            attributeName: 'height',\n            attributeType: 'length',\n            defaultValue: defaultTableProperties.height\n        });\n        editor.commands.add('tableHeight', new TableHeightCommand(editor, defaultTableProperties.height));\n        editor.data.addStyleProcessorRules(addBackgroundStylesRules);\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableBackgroundColor',\n            styleName: 'background-color',\n            attributeName: 'bgcolor',\n            attributeType: 'color',\n            defaultValue: defaultTableProperties.backgroundColor\n        });\n        editor.commands.add('tableBackgroundColor', new TableBackgroundColorCommand(editor, defaultTableProperties.backgroundColor));\n    }\n}\n/**\n * Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableBorderColor` value.\n * @param defaultBorder.style The default `tableBorderStyle` value.\n * @param defaultBorder.width The default `tableBorderWidth` value.\n */ function enableBorderProperties(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableBorderWidth',\n        color: 'tableBorderColor',\n        style: 'tableBorderStyle'\n    };\n    schema.extend('table', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    for (const modelAttribute of Object.values(modelAttributes)){\n        schema.setAttributeProperties(modelAttribute, {\n            isFormatting: true\n        });\n    }\n    upcastBorderStyles(conversion, 'table', modelAttributes, defaultBorder);\n    downcastTableAttribute(conversion, {\n        modelAttribute: modelAttributes.color,\n        styleName: 'border-color'\n    });\n    downcastTableAttribute(conversion, {\n        modelAttribute: modelAttributes.style,\n        styleName: 'border-style'\n    });\n    downcastTableAttribute(conversion, {\n        modelAttribute: modelAttributes.width,\n        styleName: 'border-width'\n    });\n}\n/**\n * Enables the `'alignment'` attribute for table.\n *\n * @param defaultValue The default alignment value.\n */ function enableAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('table', {\n        allowAttributes: [\n            'tableAlignment'\n        ]\n    });\n    schema.setAttributeProperties('tableAlignment', {\n        isFormatting: true\n    });\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: 'table',\n            key: 'tableAlignment',\n            values: [\n                'left',\n                'center',\n                'right'\n            ]\n        },\n        view: {\n            left: {\n                key: 'style',\n                value: {\n                    float: 'left'\n                }\n            },\n            right: {\n                key: 'style',\n                value: {\n                    float: 'right'\n                }\n            },\n            center: (alignment, conversionApi, data)=>{\n                const value = data.item.getAttribute('tableType') !== 'layout' ? {\n                    // Model: `alignment:center` => CSS: `float:none`.\n                    float: 'none'\n                } : {\n                    'margin-left': 'auto',\n                    'margin-right': 'auto'\n                };\n                return {\n                    key: 'style',\n                    value\n                };\n            }\n        },\n        converterPriority: 'high'\n    });\n    conversion.for('upcast')// Support for the `float:*;` CSS definition for the table alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(table|figure)$/,\n            styles: {\n                float: FLOAT_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                // Ignore other figure elements.\n                if (viewElement.name == 'figure' && !viewElement.hasClass('table')) {\n                    return;\n                }\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, '', data);\n                let align = viewElement.getStyle('float');\n                // CSS: `float:none` => Model: `alignment:center`.\n                if (align === 'none') {\n                    align = 'center';\n                }\n                if (align !== localDefaultValue) {\n                    return align;\n                }\n                // Consume the style even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    styles: 'float'\n                });\n            }\n        }\n    })// Support for the `margin-left:auto; margin-right:auto;` CSS definition for the table alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(table|figure)$/,\n            styles: {\n                'margin-left': 'auto',\n                'margin-right': 'auto'\n            }\n        },\n        model: {\n            key: 'tableAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                // Ignore other figure elements.\n                if (viewElement.name == 'figure' && !viewElement.hasClass('table')) {\n                    return;\n                }\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, '', data);\n                const align = 'center';\n                if (align !== localDefaultValue) {\n                    return align;\n                }\n                // Consume the styles even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    styles: [\n                        'margin-left',\n                        'margin-right'\n                    ]\n                });\n            }\n        }\n    })// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n    .attributeToAttribute({\n        view: {\n            name: 'table',\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableAlignment',\n            value: (viewElement, conversionApi, data)=>{\n                const localDefaultValue = getDefaultValueAdjusted(defaultValue, '', data);\n                const align = viewElement.getAttribute('align');\n                if (align !== localDefaultValue) {\n                    return align;\n                }\n                // Consume the attribute even if not applied to the element so it won't be processed by other converters.\n                conversionApi.consumable.consume(viewElement, {\n                    attributes: 'align'\n                });\n            }\n        }\n    });\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */ function enableProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [\n            modelAttribute\n        ]\n    });\n    schema.setAttributeProperties(modelAttribute, {\n        isFormatting: true\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: 'table',\n        ...options\n    });\n    downcastTableAttribute(conversion, options);\n}\n/**\n * Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n */ function enableTableToFigureProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [\n            modelAttribute\n        ]\n    });\n    schema.setAttributeProperties(modelAttribute, {\n        isFormatting: true\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: /^(table|figure)$/,\n        shouldUpcast: (viewElement)=>!(viewElement.name == 'table' && viewElement.parent.name == 'figure' || viewElement.name == 'figure' && !viewElement.hasClass('table')),\n        ...options\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'table',\n        ...options\n    });\n}\n\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n */ class TablePropertiesView extends View {\n    /**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */ options;\n    /**\n\t * Tracks information about the DOM focus in the form.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * A collection of child views in the form.\n\t */ children;\n    /**\n\t * A dropdown that allows selecting the style of the table border.\n\t */ borderStyleDropdown;\n    /**\n\t * An input that allows specifying the width of the table border.\n\t */ borderWidthInput;\n    /**\n\t * An input that allows specifying the color of the table border.\n\t */ borderColorInput;\n    /**\n\t * An input that allows specifying the table background color.\n\t */ backgroundInput;\n    /**\n\t * An input that allows specifying the table width.\n\t */ widthInput;\n    /**\n\t * An input that allows specifying the table height.\n\t */ heightInput;\n    /**\n\t * A toolbar with buttons that allow changing the alignment of an entire table.\n\t */ alignmentToolbar;\n    /**\n\t * The \"Save\" button view.\n\t */ saveButtonView;\n    /**\n\t * The \"Cancel\" button view.\n\t */ cancelButtonView;\n    /**\n\t * A collection of views that can be focused in the form.\n\t */ _focusables;\n    /**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */ _focusCycler;\n    /**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t */ constructor(locale, options){\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            alignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.alignmentToolbar = alignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new FormHeaderView(locale, {\n            label: this.t('Table properties')\n        }));\n        // Border row.\n        this.children.add(new FormRowView(locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background row.\n        this.children.add(new FormRowView(locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        this.children.add(new FormRowView(locale, {\n            children: [\n                // Dimensions row.\n                new FormRowView(locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Alignment row.\n                new FormRowView(locale, {\n                    labelView: alignmentLabel,\n                    children: [\n                        alignmentLabel,\n                        alignmentToolbar\n                    ],\n                    class: 'ck-table-properties-form__alignment-row'\n                })\n            ]\n        }));\n        // Action row.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        submitHandler({\n            view: this\n        });\n        // Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n        [\n            this.borderColorInput,\n            this.backgroundInput\n        ].forEach((view)=>{\n            this._focusCycler.chain(view.fieldView.focusCycler);\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput,\n            this.alignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach((view)=>{\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the fist focusable field in the form.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */ _createBorderFields() {\n        const defaultTableProperties = this.options.defaultTableProperties;\n        const defaultBorder = {\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth,\n            color: defaultTableProperties.borderColor\n        };\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = getBorderStyleLabels(t);\n        const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', (value)=>{\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', (evt)=>{\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', (value)=>!value);\n        addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderWidthInput.fieldView.on('input', ()=>{\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderColorInput.fieldView.on('input', ()=>{\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue)=>{\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */ _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const backgroundInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new LabeledFieldView(locale, backgroundInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', ()=>{\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput},\n\t * * {@link #heightInput}.\n\t */ _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', ()=>{\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                {\n                    text: '×'\n                }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', ()=>{\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #alignmentToolbar}.\n\t */ _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const alignmentLabel = new LabelView(locale);\n        alignmentLabel.text = t('Alignment');\n        // -- Toolbar ---------------------------------------------------\n        const alignmentToolbar = new ToolbarView(locale);\n        alignmentToolbar.set({\n            role: 'radiogroup',\n            isCompact: true,\n            ariaLabel: t('Table alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: {\n                left: IconObjectInlineLeft,\n                center: IconObjectCenter,\n                right: IconObjectInlineRight\n            },\n            toolbar: alignmentToolbar,\n            labels: this._alignmentLabels,\n            propertyName: 'alignment',\n            defaultValue: this.options.defaultTableProperties.alignment\n        });\n        return {\n            alignmentLabel,\n            alignmentToolbar\n        };\n    }\n    /**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */ _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: IconCheck,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts)=>{\n            return errorTexts.every((errorText)=>!errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: IconCancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView,\n            cancelButtonView\n        };\n    }\n    /**\n\t * Provides localized labels for {@link #alignmentToolbar} buttons.\n\t */ get _alignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align table to the left');\n        const center = t('Center table');\n        const right = t('Align table to the right');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return {\n                right,\n                center,\n                left\n            };\n        } else {\n            return {\n                left,\n                center,\n                right\n            };\n        }\n    }\n}\nfunction isBorderStyleSet(value) {\n    return value !== 'none';\n}\n\nconst ERROR_TEXT_TIMEOUT = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n    borderStyle: 'tableBorderStyle',\n    borderColor: 'tableBorderColor',\n    borderWidth: 'tableBorderWidth',\n    backgroundColor: 'tableBackgroundColor',\n    width: 'tableWidth',\n    height: 'tableHeight',\n    alignment: 'tableAlignment'\n};\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */ class TablePropertiesUI extends Plugin {\n    /**\n\t * The default table properties.\n\t */ _defaultContentTableProperties;\n    /**\n\t * The default layout table properties.\n\t */ _defaultLayoutTableProperties;\n    /**\n\t * The contextual balloon plugin instance.\n\t */ _balloon;\n    /**\n\t * The properties form view displayed inside the balloon.\n\t */ view = null;\n    /**\n\t * The properties form view displayed inside the balloon (content table).\n\t */ _viewWithContentTableDefaults = null;\n    /**\n\t * The properties form view displayed inside the balloon (layout table).\n\t */ _viewWithLayoutTableDefaults = null;\n    /**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */ _undoStepBatch;\n    /**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */ _isReady;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TablePropertiesUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('table.tableProperties', {\n            borderColors: defaultColors,\n            backgroundColors: defaultColors\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        this._defaultContentTableProperties = getNormalizedDefaultTableProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        this._defaultLayoutTableProperties = getNormalizedDefaultProperties();\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        editor.ui.componentFactory.add('tableProperties', ()=>this._createTablePropertiesButton());\n    }\n    /**\n\t * Creates the table properties button.\n\t *\n\t * @internal\n\t */ _createTablePropertiesButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = new ButtonView(editor.locale);\n        view.set({\n            label: t('Table properties'),\n            icon: IconTableProperties,\n            tooltip: true\n        });\n        this.listenTo(view, 'execute', ()=>this._showView());\n        const commands = Object.values(propertyToCommandMap).map((commandName)=>editor.commands.get(commandName));\n        view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>areEnabled.some((isCommandEnabled)=>isCommandEnabled));\n        return view;\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n\t * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n\t *\n\t * @returns The table properties form view instance.\n\t */ _createPropertiesView(defaultTableProperties) {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableProperties');\n        const borderColorsConfig = normalizeColorOptions(config.borderColors);\n        const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n        const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new TablePropertiesView(editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableProperties,\n            colorPickerConfig: hasColorPicker ? config.colorPicker || {} : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', ()=>{\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', ()=>{\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel)=>{\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: view,\n            activator: ()=>this._isViewInBalloon,\n            contextElements: [\n                this._balloon.view.element\n            ],\n            callback: ()=>this._hideView()\n        });\n        const colorErrorText = getLocalizedColorErrorText(t);\n        const lengthErrorText = getLocalizedLengthErrorText(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableBorderColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableBorderWidth',\n            errorText: lengthErrorText,\n            validator: lineWidthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableBackgroundColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableWidth',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableHeight',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:alignment', this._getPropertyChangeCallback('tableAlignment'));\n        return view;\n    }\n    /**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected table property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */ _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableBorderStyle');\n        Object.entries(propertyToCommandMap).map(([property, commandName])=>{\n            const propertyKey = property;\n            const defaultValue = this.view === this._viewWithContentTableDefaults ? this._defaultContentTableProperties[propertyKey] || '' : this._defaultLayoutTableProperties[propertyKey] || '';\n            return [\n                propertyKey,\n                commands.get(commandName).value || defaultValue\n            ];\n        }).forEach(([property, value])=>{\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */ _showView() {\n        const editor = this.editor;\n        const viewTable = getSelectionAffectedTableWidget(editor.editing.view.document.selection);\n        const modelTable = viewTable && editor.editing.mapper.toModelElement(viewTable);\n        const useDefaults = !modelTable || modelTable.getAttribute('tableType') !== 'layout';\n        if (useDefaults && !this._viewWithContentTableDefaults) {\n            this._viewWithContentTableDefaults = this._createPropertiesView(this._defaultContentTableProperties);\n        } else if (!useDefaults && !this._viewWithLayoutTableDefaults) {\n            this._viewWithLayoutTableDefaults = this._createPropertiesView(this._defaultLayoutTableProperties);\n        }\n        this.view = useDefaults ? this._viewWithContentTableDefaults : this._viewWithLayoutTableDefaults;\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: getBalloonTablePositionData(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */ _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n\t */ _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!getSelectionAffectedTableWidget(viewDocument.selection)) {\n            this._hideView();\n        } else if (this._isViewVisible) {\n            repositionContextualBalloon(editor, 'table');\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n\t */ get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */ get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n\t * Creates a callback that when executed upon {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * If new value will be set to the default value, the command will not be executed.\n\t *\n\t * @param commandName The command that will be executed.\n\t */ _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue)=>{\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n\t * Creates a callback that when executed upon {@link #view view's} property change:\n\t * * executes a related editor command with the new property value if the value is valid,\n\t * * or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */ _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = debounce(()=>{\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT);\n        return (evt, propertyName, newValue)=>{\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            } else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n\n/**\n * The table properties feature. Enables support for setting properties of tables (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tablecellproperties~TableCellProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing table properties editing feature} and\n * the {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI table properties UI feature}.\n */ class TableProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TablePropertiesEditing,\n            TablePropertiesUI\n        ];\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/converters/table-caption-post-fixer\n */ /**\n * Injects a table caption post-fixer into the model.\n *\n * The role of the table caption post-fixer is to ensure that the table with caption have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * If there are many caption model element, they are merged into one model.\n * * A final, merged caption model is placed at the end of the table.\n *\n * @internal\n */ function injectTableCaptionPostFixer(model) {\n    model.document.registerPostFixer((writer)=>tableCaptionPostFixer(writer, model));\n}\n/**\n * The table caption post-fixer.\n */ function tableCaptionPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes){\n        if (entry.type != 'insert') {\n            continue;\n        }\n        const positionParent = entry.position.parent;\n        if (positionParent.is('element', 'table') || entry.name == 'table') {\n            const table = entry.name == 'table' ? entry.position.nodeAfter : positionParent;\n            const captionsToMerge = Array.from(table.getChildren()).filter((child)=>child.is('element', 'caption'));\n            const firstCaption = captionsToMerge.shift();\n            if (!firstCaption) {\n                continue;\n            }\n            // Move all the contents of the captions to the first one.\n            for (const caption of captionsToMerge){\n                writer.move(writer.createRangeIn(caption), firstCaption, 'end');\n                writer.remove(caption);\n            }\n            // Make sure the final caption is at the end of the table.\n            if (firstCaption.nextSibling) {\n                writer.move(writer.createRangeOn(firstCaption), table, 'end');\n                wasFixed = true;\n            }\n            // Do we merged captions and/or moved the single caption to the end of the table?\n            wasFixed = !!captionsToMerge.length || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n\n/**\n * Checks if the provided model element is a `table`.\n *\n * @param modelElement Element to check if it is a table.\n * @internal\n */ function isTable(modelElement) {\n    return !!modelElement && modelElement.is('element', 'table');\n}\n/**\n * Returns the caption model element from a given table element. Returns `null` if no caption is found.\n *\n * @param tableModelElement Table element in which we will try to find a caption element.\n * @internal\n */ function getCaptionFromTableModelElement(tableModelElement) {\n    for (const node of tableModelElement.getChildren()){\n        if (node.is('element', 'caption')) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param selection The selection checked for caption presence.\n * @internal\n */ function getCaptionFromModelSelection(selection) {\n    const tableElement = getSelectionAffectedTable(selection);\n    if (!tableElement) {\n        return null;\n    }\n    return getCaptionFromTableModelElement(tableElement);\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a caption.\n *\n * There are two possible forms of the valid caption:\n *  - A `<figcaption>` element inside a `<figure class=\"table\">` element.\n *  - A `<caption>` inside a <table>.\n *\n * @returns Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element cannot be matched.\n * @internal\n */ function matchTableCaptionViewElement(element) {\n    const parent = element.parent;\n    if (element.name == 'figcaption' && parent && parent.is('element', 'figure') && parent.hasClass('table')) {\n        return {\n            name: true\n        };\n    }\n    if (element.name == 'caption' && parent && parent.is('element', 'table')) {\n        return {\n            name: true\n        };\n    }\n    return null;\n}\n\n/**\n * The toggle table caption command.\n *\n * This command is registered by {@link module:table/tablecaption/tablecaptionediting~TableCaptionEditing} as the\n * `'toggleTableCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the table caption of a selected table (depending on whether the caption is present or not),\n * * removes the table caption if the selection is anchored in one.\n *\n * ```ts\n * // Toggle the presence of the caption.\n * editor.execute( 'toggleTableCaption' );\n * ```\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n * ```ts\n * editor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n * ```\n */ class ToggleTableCaptionCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const tableElement = getSelectionAffectedTable(editor.model.document.selection);\n        this.isEnabled = !!tableElement && editor.model.schema.checkChild(tableElement, 'caption');\n        if (!this.isEnabled) {\n            this.value = false;\n        } else {\n            this.value = !!getCaptionFromTableModelElement(tableElement);\n        }\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * ```ts\n\t * editor.execute( 'toggleTableCaption' );\n\t * ```\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.focusCaptionOnShow When true and the caption shows up, the selection will be moved into it straight away.\n\t * @fires execute\n\t */ execute({ focusCaptionOnShow = false } = {}) {\n        this.editor.model.change((writer)=>{\n            if (this.value) {\n                this._hideTableCaption(writer);\n            } else {\n                this._showTableCaption(writer, focusCaptionOnShow);\n            }\n        });\n    }\n    /**\n\t * Shows the table caption. Also:\n\t *\n\t * * it attempts to restore the caption content from the `TableCaptionEditing` caption registry,\n\t * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n\t *\n\t * @param focusCaptionOnShow Default focus behavior when showing the caption.\n\t */ _showTableCaption(writer, focusCaptionOnShow) {\n        const model = this.editor.model;\n        const tableElement = getSelectionAffectedTable(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const savedCaptionElement = tableCaptionEditing._getSavedCaption(tableElement);\n        // Try restoring the caption from the TableCaptionEditing plugin storage.\n        const newCaptionElement = savedCaptionElement || writer.createElement('caption');\n        model.insertContent(newCaptionElement, tableElement, 'end');\n        if (focusCaptionOnShow) {\n            writer.setSelection(newCaptionElement, 'in');\n        }\n    }\n    /**\n\t * Hides the caption of a selected table (or an table caption the selection is anchored to).\n\t *\n\t * The content of the caption is stored in the `TableCaptionEditing` caption registry to make this\n\t * a reversible action.\n\t */ _hideTableCaption(writer) {\n        const model = this.editor.model;\n        const tableElement = getSelectionAffectedTable(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const captionElement = getCaptionFromTableModelElement(tableElement);\n        // Store the caption content so it can be restored quickly if the user changes their mind.\n        tableCaptionEditing._saveCaption(tableElement, captionElement);\n        model.deleteContent(writer.createSelection(captionElement, 'on'));\n    }\n}\n\n/**\n * The table caption editing plugin.\n */ class TableCaptionEditing extends Plugin {\n    /**\n\t * A map that keeps saved JSONified table captions and table model elements they are\n\t * associated with.\n\t *\n\t * To learn more about this system, see {@link #_saveCaption}.\n\t */ _savedCaptionsMap;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCaptionEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._savedCaptionsMap = new WeakMap();\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const view = editor.editing.view;\n        const t = editor.t;\n        if (!schema.isRegistered('caption')) {\n            schema.register('caption', {\n                allowIn: 'table',\n                allowContentOf: '$block',\n                isLimit: true\n            });\n        } else {\n            schema.extend('caption', {\n                allowIn: 'table'\n            });\n        }\n        editor.commands.add('toggleTableCaption', new ToggleTableCaptionCommand(this.editor));\n        // View -> model converter for the data pipeline.\n        editor.conversion.for('upcast').elementToElement({\n            view: matchTableCaptionViewElement,\n            model: 'caption'\n        });\n        // Model -> view converter for the data pipeline.\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer })=>{\n                if (!isTable(modelElement.parent)) {\n                    return null;\n                }\n                return writer.createContainerElement('figcaption');\n            }\n        });\n        // Model -> view converter for the editing pipeline.\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer })=>{\n                if (!isTable(modelElement.parent)) {\n                    return null;\n                }\n                const figcaptionElement = writer.createEditableElement('figcaption');\n                writer.setCustomProperty('tableCaption', true, figcaptionElement);\n                figcaptionElement.placeholder = t('Enter table caption');\n                enableViewPlaceholder({\n                    view,\n                    element: figcaptionElement,\n                    keepOnFocus: true\n                });\n                return toWidgetEditable(figcaptionElement, writer);\n            }\n        });\n        injectTableCaptionPostFixer(editor.model);\n    }\n    /**\n\t * Returns the saved {@link module:engine/model/element~ModelElement#toJSON JSONified} caption\n\t * of a table model element.\n\t *\n\t * See {@link #_saveCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption should be returned for.\n\t * @returns The model caption element or `null` if there is none.\n\t */ _getSavedCaption(tableModelElement) {\n        const jsonObject = this._savedCaptionsMap.get(tableModelElement);\n        return jsonObject ? ModelElement.fromJSON(jsonObject) : null;\n    }\n    /**\n\t * Saves a {@link module:engine/model/element~ModelElement#toJSON JSONified} caption for\n\t * a table element to allow restoring it in the future.\n\t *\n\t * A caption is saved every time it gets hidden. The\n\t * user should be able to restore it on demand.\n\t *\n\t * **Note**: The caption cannot be stored in the table model element attribute because,\n\t * for instance, when the model state propagates to collaborators, the attribute would get\n\t * lost (mainly because it does not convert to anything when the caption is hidden) and\n\t * the states of collaborators' models would de-synchronize causing numerous issues.\n\t *\n\t * See {@link #_getSavedCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption is saved for.\n\t * @param caption The caption model element to be saved.\n\t */ _saveCaption(tableModelElement, caption) {\n        this._savedCaptionsMap.set(tableModelElement, caption.toJSON());\n    }\n}\n\n/**\n  * The table caption UI plugin. It introduces the `'toggleTableCaption'` UI button.\n  */ class TableCaptionUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCaptionUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const t = editor.t;\n        editor.ui.componentFactory.add('toggleTableCaption', (locale)=>{\n            const command = editor.commands.get('toggleTableCaption');\n            const view = new ButtonView(locale);\n            view.set({\n                icon: IconCaption,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            view.bind('label').to(command, 'value', (value)=>value ? t('Toggle caption off') : t('Toggle caption on'));\n            this.listenTo(view, 'execute', ()=>{\n                editor.execute('toggleTableCaption', {\n                    focusCaptionOnShow: true\n                });\n                // Scroll to the selection and highlight the caption if the caption showed up.\n                if (command.value) {\n                    const modelCaptionElement = getCaptionFromModelSelection(editor.model.document.selection);\n                    const figcaptionElement = editor.editing.mapper.toViewElement(modelCaptionElement);\n                    if (!figcaptionElement) {\n                        return;\n                    }\n                    editingView.scrollToTheSelection();\n                    editingView.change((writer)=>{\n                        writer.addClass('table__caption_highlighted', figcaptionElement);\n                    });\n                }\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n\n/**\n * The table caption plugin.\n */ class TableCaption extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCaption';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableCaptionEditing,\n            TableCaptionUI\n        ];\n    }\n}\n\nexport { InsertColumnCommand, InsertRowCommand, InsertTableCommand, InsertTableLayoutCommand, MergeCellCommand, MergeCellsCommand, PlainTableOutput, RemoveColumnCommand, RemoveRowCommand, SelectColumnCommand, SelectRowCommand, SetHeaderColumnCommand, SetHeaderRowCommand, SplitCellCommand, Table, TableAlignmentCommand, TableBackgroundColorCommand, TableBorderColorCommand, TableBorderStyleCommand, TableBorderWidthCommand, TableCaption, TableCaptionEditing, TableCaptionUI, TableCellBackgroundColorCommand, TableCellBorderColorCommand, TableCellBorderStyleCommand, TableCellBorderWidthCommand, TableCellHeightCommand, TableCellHorizontalAlignmentCommand, TableCellPaddingCommand, TableCellProperties, TableCellPropertiesEditing, TableCellPropertiesUI, TableCellPropertiesView, TableCellPropertyCommand, TableCellVerticalAlignmentCommand, TableCellWidthCommand, TableCellWidthEditing, TableClipboard, TableColumnResize, TableColumnResizeEditing, TableEditing, TableHeightCommand, TableKeyboard, TableLayout, TableLayoutEditing, TableLayoutUI, TableMouse, TableProperties, TablePropertiesEditing, TablePropertiesUI, TablePropertiesView, TablePropertyCommand, TableSelection, TableToolbar, TableTypeCommand, TableUI, TableUtils, TableWalker, TableWidthCommand, TableWidthsCommand, ToggleTableCaptionCommand, InsertTableView as _InsertTableView, COLUMN_MIN_WIDTH_AS_PERCENTAGE as _TABLE_COLUMN_MIN_WIDTH_AS_PERCENTAGE, COLUMN_MIN_WIDTH_IN_PIXELS as _TABLE_COLUMN_MIN_WIDTH_IN_PIXELS, COLUMN_RESIZE_DISTANCE_THRESHOLD as _TABLE_COLUMN_RESIZE_DISTANCE_THRESHOLD, COLUMN_WIDTH_PRECISION as _TABLE_COLUMN_WIDTH_PRECISION, defaultColors as _TABLE_DEFAULT_COLORS, ColorInputView as _TableColorInputView, MouseEventsObserver as _TableMouseEventsObserver, addDefaultUnitToNumericValue as _addDefaultUnitToNumericValue, adjustLastColumnIndex as _adjustLastTableColumnIndex, adjustLastRowIndex as _adjustLastTableRowIndex, clamp as _clamp, colorFieldValidator as _colorTableFieldValidator, convertParagraphInTableCell as _convertParagraphInTableCell, createEmptyTableCell as _createEmptyTableCell, createFilledArray as _createFilledArray, cropTableToDimensions as _cropTableToDimensions, downcastTable as _downcastTable, downcastTableAttribute as _downcastTableAttribute, downcastAttributeToStyle as _downcastTableAttributeToStyle, downcastCell as _downcastTableCell, downcastTableResizedClass as _downcastTableResizedClass, downcastRow as _downcastTableRow, enableProperty$1 as _enableTableCellProperty, ensureParagraphInTableCell as _ensureParagraphInTableCell, fillToolbar as _fillTableOrCellToolbar, getBalloonCellPositionData as _getBalloonTableCellPositionData, getBalloonTablePositionData as _getBalloonTablePositionData, getBorderStyleLabels as _getBorderTableStyleLabels, getChangedResizedTables as _getChangedResizedTables, getDefaultValueAdjusted as _getDefaultTableValueAdjusted, getDomCellOuterWidth as _getDomTableCellOuterWidth, getElementWidthInPixels as _getElementWidthInPixels, getHorizontallyOverlappingCells as _getHorizontallyOverlappingTableCells, getLabeledColorInputCreator as _getLabeledTableColorInputCreator, getLocalizedColorErrorText as _getLocalizedTableColorErrorText, getLocalizedLengthErrorText as _getLocalizedTableLengthErrorText, getNormalizedDefaultProperties as _getNormalizedDefaultTableBaseProperties, getNormalizedDefaultCellProperties as _getNormalizedDefaultTableCellProperties, getNormalizedDefaultTableProperties as _getNormalizedDefaultTableProperties, getSelectedTableWidget as _getSelectedTableWidget, getSelectionAffectedTable as _getSelectionAffectedTable, getSelectionAffectedTableWidget as _getSelectionAffectedTableWidget, getSingleValue as _getTableBorderBoxSingleValue, getCaptionFromTableModelElement as _getTableCaptionFromModelElement, getCaptionFromModelSelection as _getTableCaptionFromModelSelection, getColumnEdgesIndexes as _getTableColumnEdgesIndexes, getTableColumnElements as _getTableColumnElements, getColumnGroupElement as _getTableColumnGroupElement, getColumnMinWidthAsPercentage as _getTableColumnMinWidthAsPercentage, getTableColumnsWidths as _getTableColumnsWidths, getBorderStyleDefinitions as _getTableOrCellBorderStyleDefinitions, getTableWidgetAncestor as _getTableWidgetAncestor, getTableWidthInPixels as _getTableWidthInPixels, getVerticallyOverlappingCells as _getVerticallyOverlappingTableCells, injectTableCaptionPostFixer as _injectTableCaptionPostFixer, injectTableCellParagraphPostFixer as _injectTableCellParagraphPostFixer, injectTableLayoutPostFixer as _injectTableLayoutPostFixer, isSingleParagraphWithoutAttributes as _isSingleTableParagraphWithoutAttributes, isHeadingColumnCell as _isTableHeadingColumnCell, isTable as _isTableModelElement, lengthFieldValidator as _lengthTableFieldValidator, lineWidthFieldValidator as _lineWidthTableFieldValidator, matchTableCaptionViewElement as _matchTableCaptionViewElement, normalizeColumnWidths as _normalizeTableColumnWidths, removeEmptyColumns as _removeEmptyTableColumns, removeEmptyRows as _removeEmptyTableRows, removeEmptyRowsColumns as _removeEmptyTableRowsColumns, repositionContextualBalloon as _repositionTableContextualBalloon, skipEmptyTableRow as _skipEmptyTableRow, splitHorizontally as _splitTableCellHorizontally, splitVertically as _splitTableCellVertically, sumArray as _sumArray, tableCellRefreshHandler as _tableCellRefreshHandler, tableHeadingsRefreshHandler as _tableHeadingsRefreshHandler, toPrecision as _toPrecision, translateColSpanAttribute as _translateTableColspanAttribute, trimTableCellIfNeeded as _trimTableCellIfNeeded, upcastStyleToAttribute as _upcastNormalizedTableStyleToAttribute, upcastTable as _upcastTable, upcastBorderStyles as _upcastTableBorderStyles, upcastColgroupElement as _upcastTableColgroupElement, upcastTableFigure as _upcastTableFigure, updateColumnElements as _updateTableColumnElements, updateNumericAttribute as _updateTableNumericAttribute };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/tableproperties\n */\n\nimport type { Conversion, UpcastConversionApi, UpcastConversionData, ViewElement } from 'ckeditor5/src/engine.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param options.modelAttribute The attribute to set.\n * @param options.styleName The style name to convert.\n * @param options.attributeName The HTML attribute name to convert.\n * @param options.attributeType The HTML attribute type for value normalization.\n * @param options.viewElement The view element name that should be converted.\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n * @param options.shouldUpcast The function which returns `true` if style should be upcasted from this element.\n * @internal\n */\nexport function upcastStyleToAttribute(\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tattributeName?: string;\n\t\tattributeType?: 'length' | 'color';\n\t\tviewElement: string | RegExp;\n\t\tdefaultValue: string;\n\t\treduceBoxSides?: boolean;\n\t\tshouldUpcast?: ( viewElement: ViewElement ) => boolean;\n\t}\n): void {\n\tconst {\n\t\tmodelAttribute,\n\t\tstyleName,\n\t\tattributeName,\n\t\tattributeType,\n\t\tviewElement,\n\t\tdefaultValue,\n\t\tshouldUpcast = () => true,\n\t\treduceBoxSides = false\n\t} = options;\n\n\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\tview: {\n\t\t\tname: viewElement,\n\t\t\tstyles: {\n\t\t\t\t[ styleName ]: /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\tmodel: {\n\t\t\tkey: modelAttribute,\n\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t// Ignore table elements inside figures and figures without the table class.\n\t\t\t\tif ( !shouldUpcast( viewElement ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, '', data );\n\n\t\t\t\tconst normalized = viewElement.getNormalizedStyle( styleName ) as Record<Side, string>;\n\t\t\t\tconst value = reduceBoxSides ? reduceBoxSidesValue( normalized ) : normalized;\n\n\t\t\t\tif ( localDefaultValue !== value ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\n\t\t\t\t// Consume the style even if not applied to the element so it won't be processed by other converters.\n\t\t\t\tconversionApi.consumable.consume( viewElement, { styles: styleName } );\n\t\t\t}\n\t\t}\n\t} );\n\n\tif ( attributeName ) {\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: viewElement,\n\t\t\t\tattributes: {\n\t\t\t\t\t[ attributeName ]: /.+/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: modelAttribute,\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\t// Convert attributes of table and table cell elements, ignore figure.\n\t\t\t\t\t// Do not convert attribute if related style is set as it has a higher priority.\n\t\t\t\t\t// Do not convert attribute if the element is a table inside a figure with the related style set.\n\t\t\t\t\tif (\n\t\t\t\t\t\tviewElement.name == 'figure' ||\n\t\t\t\t\t\tviewElement.hasStyle( styleName ) ||\n\t\t\t\t\t\tviewElement.name == 'table' && viewElement.parent!.name == 'figure' && viewElement.parent!.hasStyle( styleName )\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, '', data );\n\t\t\t\t\tlet value = viewElement.getAttribute( attributeName );\n\n\t\t\t\t\tif ( value && attributeType == 'length' && !value.endsWith( 'px' ) ) {\n\t\t\t\t\t\tvalue += 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( localDefaultValue !== value ) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the attribute even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { attributes: attributeName } );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * The style values for border styles.\n *\n * @internal\n */\nexport interface StyleValues {\n\tcolor: string;\n\tstyle: string;\n\twidth: string;\n}\n\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `borderColor` value.\n * @param defaultBorder.style The default `borderStyle` value.\n * @param defaultBorder.width The default `borderWidth` value.\n * @internal\n */\nexport function upcastBorderStyles(\n\tconversion: Conversion,\n\tviewElementName: string,\n\tmodelAttributes: StyleValues,\n\tdefaultBorder: StyleValues\n): void {\n\tconversion.for( 'upcast' ).add( dispatcher => dispatcher.on( 'element:' + viewElementName, ( evt, data, conversionApi ) => {\n\t\t// If the element was not converted by element-to-element converter,\n\t\t// we should not try to convert the style. See #8393.\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check the most detailed properties. These will be always set directly or\n\t\t// when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n\t\tconst stylesToConsume = [\n\t\t\t'border-top-width',\n\t\t\t'border-top-color',\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-width',\n\t\t\t'border-bottom-color',\n\t\t\t'border-bottom-style',\n\t\t\t'border-right-width',\n\t\t\t'border-right-color',\n\t\t\t'border-right-style',\n\t\t\t'border-left-width',\n\t\t\t'border-left-color',\n\t\t\t'border-left-style'\n\t\t].filter( styleName => data.viewItem.hasStyle( styleName ) );\n\n\t\tif ( !stylesToConsume.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst matcherPattern = {\n\t\t\tstyles: stylesToConsume\n\t\t};\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, matcherPattern ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelElement = [ ...data.modelRange.getItems( { shallow: true } ) ].pop();\n\t\tconst tableElement = modelElement.findAncestor( 'table', { includeSelf: true } );\n\n\t\tlet localDefaultBorder = defaultBorder;\n\n\t\tif ( tableElement && tableElement.getAttribute( 'tableType' ) == 'layout' ) {\n\t\t\tlocalDefaultBorder = {\n\t\t\t\tstyle: 'none',\n\t\t\t\tcolor: '',\n\t\t\t\twidth: ''\n\t\t\t};\n\t\t}\n\n\t\tconversionApi.consumable.consume( data.viewItem, matcherPattern );\n\n\t\tconst normalizedBorder = {\n\t\t\tstyle: data.viewItem.getNormalizedStyle( 'border-style' ),\n\t\t\tcolor: data.viewItem.getNormalizedStyle( 'border-color' ),\n\t\t\twidth: data.viewItem.getNormalizedStyle( 'border-width' )\n\t\t};\n\n\t\tconst reducedBorder = {\n\t\t\tstyle: reduceBoxSidesValue( normalizedBorder.style ),\n\t\t\tcolor: reduceBoxSidesValue( normalizedBorder.color ),\n\t\t\twidth: reduceBoxSidesValue( normalizedBorder.width )\n\t\t};\n\n\t\tif ( reducedBorder.style !== localDefaultBorder.style ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.style, reducedBorder.style, modelElement );\n\t\t}\n\n\t\tif ( reducedBorder.color !== localDefaultBorder.color ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.color, reducedBorder.color, modelElement );\n\t\t}\n\n\t\tif ( reducedBorder.width !== localDefaultBorder.width ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.width, reducedBorder.width, modelElement );\n\t\t}\n\t} ) );\n}\n\n/**\n * Conversion helper for downcasting an attribute to a style.\n *\n * @internal\n */\nexport function downcastAttributeToStyle(\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelElement: string;\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t}\n): void {\n\tconst { modelElement, modelAttribute, styleName } = options;\n\n\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\tmodel: {\n\t\t\tname: modelElement,\n\t\t\tkey: modelAttribute\n\t\t},\n\t\tview: modelAttributeValue => ( {\n\t\t\tkey: 'style',\n\t\t\tvalue: {\n\t\t\t\t[ styleName ]: modelAttributeValue\n\t\t\t}\n\t\t} )\n\t} );\n}\n\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n *\n * @internal\n */\nexport function downcastTableAttribute(\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t}\n): void {\n\tconst { modelAttribute, styleName } = options;\n\n\tconversion.for( 'downcast' ).add( dispatcher => dispatcher.on( `attribute:${ modelAttribute }:table`, ( evt, data, conversionApi ) => {\n\t\tconst { item, attributeNewValue } = data;\n\t\tconst { mapper, writer } = conversionApi;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = [ ...mapper.toViewElement( item ).getChildren() ].find( child => child.is( 'element', 'table' ) );\n\n\t\tif ( attributeNewValue ) {\n\t\t\twriter.setStyle( styleName, attributeNewValue, table );\n\t\t} else {\n\t\t\twriter.removeStyle( styleName, table );\n\t\t}\n\t} ) );\n}\n\n/**\n * Returns the default value for table or table cell property adjusted for layout tables.\n *\n * @internal\n */\nexport function getDefaultValueAdjusted(\n\tdefaultValue: string,\n\tlayoutTableDefault: string,\n\tdata: UpcastConversionData<ViewElement>\n): string {\n\tconst modelElement = data.modelRange && first( data.modelRange.getItems( { shallow: true } ) );\n\tconst tableElement = modelElement && modelElement.is( 'element' ) && modelElement.findAncestor( 'table', { includeSelf: true } );\n\n\tif ( tableElement && tableElement.getAttribute( 'tableType' ) === 'layout' ) {\n\t\treturn layoutTableDefault;\n\t}\n\n\treturn defaultValue;\n}\n\ntype Side = 'top' | 'right' | 'bottom' | 'left';\ntype Style = Record<Side, string>;\n\n/**\n * Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n * Returns original style otherwise.\n */\nfunction reduceBoxSidesValue( style?: Style ): undefined | string | Style {\n\tif ( !style ) {\n\t\treturn;\n\t}\n\tconst sides: Array<Side> = [ 'top', 'right', 'bottom', 'left' ];\n\tconst allSidesDefined = sides.every( side => style[ side ] );\n\n\tif ( !allSidesDefined ) {\n\t\treturn style;\n\t}\n\n\tconst topSideStyle = style.top;\n\tconst allSidesEqual = sides.every( side => style[ side ] === topSideStyle );\n\n\tif ( !allSidesEqual ) {\n\t\treturn style;\n\t}\n\n\treturn topSideStyle;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/common\n */\n\nimport type {\n\tConversion,\n\tModelElement,\n\tModelItem,\n\tModelPosition,\n\tModelSchema,\n\tModelWriter,\n\tModelDocumentSelection\n} from 'ckeditor5/src/engine.js';\n\nimport { downcastAttributeToStyle, upcastStyleToAttribute } from '../converters/tableproperties.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @internal\n * @param key An attribute key.\n * @param value The new attribute value.\n * @param item A model item on which the attribute will be set.\n * @param defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute(\n\tkey: string, value: unknown, item: ModelItem, writer: ModelWriter, defaultValue: unknown = 1\n): void {\n\tif ( value !== undefined && value !== null && defaultValue !== undefined && defaultValue !== null && value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @internal\n * @param writer The model writer.\n * @param insertPosition The position at which the table cell should be inserted.\n * @param attributes The element attributes.\n * @returns Created table cell.\n */\nexport function createEmptyTableCell(\n\twriter: ModelWriter,\n\tinsertPosition: ModelPosition,\n\tattributes: Record<string, unknown> = {}\n): ModelElement {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n\n\treturn tableCell;\n}\n\n/**\n * Checks if a table cell belongs to the heading column section.\n *\n * @internal\n */\nexport function isHeadingColumnCell( tableUtils: TableUtils, tableCell: ModelElement ): boolean {\n\tconst table = tableCell.parent!.parent as ModelElement;\n\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) as string || '0' );\n\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\treturn !!headingColumns && column < headingColumns;\n}\n\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @internal\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nexport function enableProperty(\n\tschema: ModelSchema,\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tattributeName?: string;\n\t\tattributeType?: 'length' | 'color';\n\t\tdefaultValue: string;\n\t\treduceBoxSides?: boolean;\n\t}\n): void {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\n\tschema.setAttributeProperties( modelAttribute, { isFormatting: true } );\n\n\tupcastStyleToAttribute( conversion, { viewElement: /^(td|th)$/, ...options } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', ...options } );\n}\n\n/**\n * Depending on the position of the selection we either return the table under cursor or look for the table higher in the hierarchy.\n *\n * @internal\n */\nexport function getSelectionAffectedTable( selection: ModelDocumentSelection ): ModelElement {\n\tconst selectedElement = selection.getSelectedElement();\n\n\t// Is the command triggered from the `tableToolbar`?\n\tif ( selectedElement && selectedElement.is( 'element', 'table' ) ) {\n\t\treturn selectedElement;\n\t}\n\n\treturn selection.getFirstPosition()!.findAncestor( 'table' )!;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/upcasttable\n */\n\nimport type { ModelElement, UpcastDispatcher, UpcastElementEvent, ViewElement, ViewNode } from 'ckeditor5/src/engine.js';\n\nimport { createEmptyTableCell } from '../utils/common.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\n/**\n * Returns a function that converts the table view representation:\n *\n * ```xml\n * <figure class=\"table\"><table>...</table></figure>\n * ```\n *\n * to the model representation:\n *\n * ```xml\n * <table></table>\n * ```\n *\n * @internal\n */\nexport function upcastTableFigure() {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:figure', ( evt, data, conversionApi ) => {\n\t\t\t// Do not convert if this is not a \"table figure\".\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, classes: 'table' } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find a table element inside the figure element.\n\t\t\tconst viewTable = getViewTableFromFigure( data.viewItem );\n\n\t\t\t// Do not convert if table element is absent or was already converted.\n\t\t\tif ( !viewTable || !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Consume the figure to prevent other converters from processing it again.\n\t\t\tconversionApi.consumable.consume( data.viewItem, { name: true, classes: 'table' } );\n\n\t\t\t// Convert view table to model table.\n\t\t\tconst conversionResult = conversionApi.convertItem( viewTable, data.modelCursor );\n\n\t\t\t// Get table element from conversion result.\n\t\t\tconst modelTable = first( conversionResult.modelRange!.getItems() as Iterator<ModelElement> );\n\n\t\t\t// When table wasn't successfully converted then finish conversion.\n\t\t\tif ( !modelTable ) {\n\t\t\t\t// Revert consumed figure so other features can convert it.\n\t\t\t\tconversionApi.consumable.revert( data.viewItem, { name: true, classes: 'table' } );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelTable, 'end' ) );\n\t\t\tconversionApi.updateConversionResult( modelTable, data );\n\t\t} );\n\t};\n}\n\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns Conversion helper.\n * @internal\n */\nexport function upcastTable() {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst viewTable = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { rows, headingRows, headingColumns } = scanTable( viewTable );\n\n\t\t\t// Only set attributes if values is greater then 0.\n\t\t\tconst attributes: { headingColumns?: number; headingRows?: number } = {};\n\n\t\t\tif ( headingColumns ) {\n\t\t\t\tattributes.headingColumns = headingColumns;\n\t\t\t}\n\n\t\t\tif ( headingRows ) {\n\t\t\t\tattributes.headingRows = headingRows;\n\t\t\t}\n\n\t\t\tconst table = conversionApi.writer.createElement( 'table', attributes );\n\n\t\t\tif ( !conversionApi.safeInsert( table, data.modelCursor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.consumable.consume( viewTable, { name: true } );\n\n\t\t\t// Upcast table rows in proper order (heading rows first).\n\t\t\trows.forEach( row => conversionApi.convertItem( row, conversionApi.writer.createPositionAt( table, 'end' ) ) );\n\n\t\t\t// Convert everything else.\n\t\t\tconversionApi.convertChildren( viewTable, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t// Create one row and one table cell for empty table.\n\t\t\tif ( table.isEmpty ) {\n\t\t\t\tconst row = conversionApi.writer.createElement( 'tableRow' );\n\t\t\t\tconversionApi.writer.insert( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t\tcreateEmptyTableCell( conversionApi.writer, conversionApi.writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\n\t\t\tconversionApi.updateConversionResult( table, data );\n\t\t} );\n\t};\n}\n\n/**\n * A conversion helper that skips empty <tr> elements from upcasting at the beginning of the table.\n *\n * An empty row is considered a table model error but when handling clipboard data there could be rows that contain only row-spanned cells\n * and empty TR-s are used to maintain the table structure (also {@link module:table/tablewalker~TableWalker} assumes that there are only\n * rows that have related `tableRow` elements).\n *\n * *Note:* Only the first empty rows are removed because they have no meaning and it solves the issue\n * of an improper table with all empty rows.\n *\n * @internal\n * @returns Conversion helper.\n */\nexport function skipEmptyTableRow() {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:tr', ( evt, data ) => {\n\t\t\tif ( data.viewItem.isEmpty && data.modelCursor.index == 0 ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t};\n}\n\n/**\n * A converter that ensures an empty paragraph is inserted in a table cell if no other content was converted.\n *\n * @internal\n * @returns Conversion helper.\n */\nexport function ensureParagraphInTableCell( elementName: string ) {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( `element:${ elementName }`, ( evt, data, { writer } ) => {\n\t\t\t// The default converter will create a model range on converted table cell.\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableCell = data.modelRange.start.nodeAfter as ModelElement;\n\t\t\tconst modelCursor = writer.createPositionAt( tableCell, 0 );\n\n\t\t\t// Ensure a paragraph in the model for empty table cells for converted table cells.\n\t\t\tif ( data.viewItem.isEmpty ) {\n\t\t\t\twriter.insertElement( 'paragraph', modelCursor );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst childNodes = Array.from( tableCell.getChildren() );\n\n\t\t\t// In case there are only markers inside the table cell then move them to the paragraph.\n\t\t\tif ( childNodes.every( node => node.is( 'element', '$marker' ) ) ) {\n\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\t\twriter.insert( paragraph, writer.createPositionAt( tableCell, 0 ) );\n\n\t\t\t\tfor ( const node of childNodes ) {\n\t\t\t\t\twriter.move( writer.createRangeOn( node ), writer.createPositionAt( paragraph, 'end' ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Get view `<table>` element from the view widget (`<figure>`).\n */\nfunction getViewTableFromFigure( figureView: ViewElement ) {\n\tfor ( const figureChild of figureView.getChildren() ) {\n\t\tif ( figureChild.is( 'element', 'table' ) ) {\n\t\t\treturn figureChild;\n\t\t}\n\t}\n}\n\n/**\n * Scans table rows and extracts required metadata from the table:\n *\n * headingRows    - The number of rows that go as table headers.\n * headingColumns - The maximum number of row headings.\n * rows           - Sorted `<tr>` elements as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n */\nfunction scanTable( viewTable: ViewElement ) {\n\tlet headingRows = 0;\n\tlet headingColumns: number | undefined = undefined;\n\n\t// The `<tbody>` and `<thead>` sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more than one\n\t// of them.\n\t// As the model does not have these sections, rows from different sections must be sorted.\n\t// For example, below is a valid HTML table:\n\t//\n\t// <table>\n\t//   <tbody><tr><td>2</td></tr></tbody>\n\t//   <thead><tr><td>1</td></tr></thead>\n\t//   <tbody><tr><td>3</td></tr></tbody>\n\t// </table>\n\t//\n\t// But browsers will render rows in order as: 1 as the heading and 2 and 3 as the body.\n\tconst headRows = [];\n\tconst bodyRows = [];\n\n\t// Currently the editor does not support more then one <thead> section.\n\t// Only the first <thead> from the view will be used as a heading row and the others will be converted to body rows.\n\tlet firstTheadElement;\n\n\tfor ( const tableChild of Array.from( viewTable.getChildren() as IterableIterator<ViewElement> ) ) {\n\t\t// Only `<thead>`, `<tbody>` & `<tfoot>` from allowed table children can have `<tr>`s.\n\t\t// The else is for future purposes (mainly `<caption>`).\n\t\tif ( tableChild.name !== 'tbody' && tableChild.name !== 'thead' && tableChild.name !== 'tfoot' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Save the first `<thead>` in the table as table header - all other ones will be converted to table body rows.\n\t\tif ( tableChild.name === 'thead' && !firstTheadElement ) {\n\t\t\tfirstTheadElement = tableChild;\n\t\t}\n\n\t\t// There might be some extra empty text nodes between the `<tr>`s.\n\t\t// Make sure further code operates on `tr`s only. (#145)\n\t\tconst trs = Array.from( tableChild.getChildren() ).filter(\n\t\t\t( el: ViewNode ): el is ViewElement & { name: 'tr' } => el.is( 'element', 'tr' )\n\t\t);\n\n\t\t// Keep tracking of the previous row columns count to improve detection of heading rows.\n\t\tlet maxPrevColumns = null;\n\n\t\tfor ( const tr of trs ) {\n\t\t\tconst trColumns = Array\n\t\t\t\t.from( tr.getChildren() )\n\t\t\t\t.filter( el => el.is( 'element', 'td' ) || el.is( 'element', 'th' ) );\n\n\t\t\t// This <tr> is a child of a first <thead> element.\n\t\t\tif (\n\t\t\t\t( firstTheadElement && tableChild === firstTheadElement ) ||\n\t\t\t\t(\n\t\t\t\t\ttableChild.name === 'tbody' &&\n\t\t\t\t\ttrColumns.length > 0 &&\n\t\t\t\t\t// These conditions handles the case when the first column is a <th> element and it's the only column in the row.\n\t\t\t\t\t// This case is problematic because it's not clear if this row should be a heading row or not, as it may be result\n\t\t\t\t\t// of the cell span from the previous row.\n\t\t\t\t\t// Issue: https://github.com/ckeditor/ckeditor5/issues/17556\n\t\t\t\t\t( maxPrevColumns === null || trColumns.length === maxPrevColumns ) &&\n\t\t\t\t\ttrColumns.every( e => e.is( 'element', 'th' ) )\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\theadingRows++;\n\t\t\t\theadRows.push( tr );\n\t\t\t} else {\n\t\t\t\tbodyRows.push( tr );\n\t\t\t\t// For other rows check how many column headings this row has.\n\n\t\t\t\tconst headingCols = scanRowForHeadingColumns( tr );\n\n\t\t\t\tif ( !headingColumns || headingCols < headingColumns ) {\n\t\t\t\t\theadingColumns = headingCols;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We use the maximum number of columns to avoid false positives when detecting\n\t\t\t// multiple rows with single column within `rowspan`. Without it the last row of `rowspan=3`\n\t\t\t// would be detected as a heading row because it has only one column (identical to the previous row).\n\t\t\tmaxPrevColumns = Math.max( maxPrevColumns || 0, trColumns.length );\n\t\t}\n\t}\n\n\treturn {\n\t\theadingRows,\n\t\theadingColumns: headingColumns || 0,\n\t\trows: [ ...headRows, ...bodyRows ]\n\t};\n}\n\n/**\n * Scans a `<tr>` element and its children for metadata:\n * - For heading row:\n *     - Adds this row to either the heading or the body rows.\n *     - Updates the number of heading rows.\n * - For body rows:\n *     - Calculates the number of column headings.\n */\nfunction scanRowForHeadingColumns( tr: ViewElement ) {\n\tlet headingColumns = 0;\n\tlet index = 0;\n\n\t// Filter out empty text nodes from tr children.\n\tconst children = Array.from( tr.getChildren() as IterableIterator<ViewElement> )\n\t\t.filter( child => child.name === 'th' || child.name === 'td' );\n\n\t// Count starting adjacent <th> elements of a <tr>.\n\twhile ( index < children.length && children[ index ].name === 'th' ) {\n\t\tconst th = children[ index ];\n\n\t\t// Adjust columns calculation by the number of spanned columns.\n\t\tconst colspan = parseInt( th.getAttribute( 'colspan' ) as string || '1' );\n\n\t\theadingColumns = headingColumns + colspan;\n\t\tindex++;\n\t}\n\n\treturn headingColumns;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablewalker\n */\nimport type { ModelElement, ModelPosition } from 'ckeditor5/src/engine.js';\n\n// @if CK_DEBUG // const CKEditorError = require( '@ckeditor/ckeditor5-utils/src/ckeditorerror' ).default;\n\ninterface CellData {\n\tcell: ModelElement;\n\trow: number;\n\tcolumn: number;\n}\n\n/**\n * An object with configuration for `TableWalker`.\n */\nexport interface TableWalkerOptions {\n\n\t/**\n\t * A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n\t */\n\trow?: number | null;\n\n\t/**\n\t * A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n\t */\n\tstartRow?: number;\n\n\t/**\n\t * A row index at which this iterator should end. Can't be used together with `row`.\n\t */\n\tendRow?: number;\n\n\t/**\n\t * A column index for which this iterator will output cells. Can't be used together with `startColumn` and `endColumn`.\n\t */\n\tcolumn?: number;\n\n\t/**\n\t * A column index from which this iterator should start. Can't be used together with `column`. Default value is 0.\n\t */\n\tstartColumn?: number;\n\n\t/**\n\t * A column index at which this iterator should end. Can't be used together with `column`.\n\t */\n\tendColumn?: number;\n\n\t/**\n\t * Also return values for spanned cells. Default value is false.\n\t */\n\tincludeAllSlots?: boolean;\n}\n\n/**\n * The table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableSlot} with proper table cell attributes.\n */\nexport class TableWalker implements IterableIterator<TableSlot> {\n\t/**\n\t * The walker's table element.\n\t *\n\t * @internal\n\t */\n\tpublic readonly _table: ModelElement;\n\n\t/**\n\t * A row index from which this iterator will start.\n\t */\n\tprivate readonly _startRow: number | null;\n\n\t/**\n\t * A row index at which this iterator will end.\n\t */\n\tprivate readonly _endRow?: number | null;\n\n\t/**\n\t * If set, the table walker will only output cells from a given column and following ones or cells that overlap them.\n\t */\n\tprivate readonly _startColumn: number;\n\n\t/**\n\t * If set, the table walker will only output cells up to a given column.\n\t */\n\tprivate readonly _endColumn?: number;\n\n\t/**\n\t * Enables output of spanned cells that are normally not yielded.\n\t */\n\tprivate readonly _includeAllSlots: boolean;\n\n\t/**\n\t * Row indexes to skip from the iteration.\n\t */\n\tprivate readonly _skipRows: Set<number>;\n\n\t/**\n\t * The current row index.\n\t *\n\t * @internal\n\t */\n\tpublic _row: number;\n\n\t/**\n\t * The index of the current row element in the table.\n\t *\n\t * @internal\n\t */\n\tpublic _rowIndex: number;\n\n\t/**\n\t * The current column index.\n\t *\n\t * @internal\n\t */\n\tpublic _column: number;\n\n\t/**\n\t * The cell index in a parent row. For spanned cells when {@link #_includeAllSlots} is set to `true`,\n\t * this represents the index of the next table cell.\n\t *\n\t * @internal\n\t */\n\tpublic _cellIndex: number;\n\n\t/**\n\t * Holds a map of spanned cells in a table.\n\t */\n\tprivate readonly _spannedCells: Map<number, Map<number, CellData>>;\n\n\t/**\n\t * Index of the next column where a cell is anchored.\n\t */\n\tprivate _nextCellAtColumn: number;\n\n\t/**\n\t * Indicates whether the iterator jumped to (or close to) the start row, ignoring rows that don't need to be traversed.\n\t */\n\tprivate _jumpedToStartRow = false;\n\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * See {@link module:table/tablewalker~TableSlot} what values are returned by the table walker.\n\t *\n\t * To iterate over a given row:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'A cell at row', tableSlot.row, 'and column', tableSlot.column );\n\t * }\n\t * ```\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *  +----+----+----+----+----+----+\n\t *  | 00      | 02 | 03 | 04 | 05 |\n\t *  |         +----+----+----+----+\n\t *  |         | 12      | 14 | 15 |\n\t *  |         +----+----+----+    +\n\t *  |         | 22           |    |\n\t *  |----+----+----+----+----+    +\n\t *  | 30 | 31 | 32 | 33 | 34 |    |\n\t *  +----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *  'A cell at row 1 and column 2'\n\t *  'A cell at row 1 and column 4'\n\t *  'A cell at row 1 and column 5'\n\t *  'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { row: 1, includeAllSlots: true } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'Slot at', tableSlot.row, 'x', tableSlot.column, ':', tableSlot.isAnchor ? 'is anchored' : 'is spanned' );\n\t * }\n\t * ```\n\t *\n\t * will log in the console for the table from the previous example:\n\t *\n\t *  'Cell at 1 x 0 : is spanned'\n\t *  'Cell at 1 x 1 : is spanned'\n\t *  'Cell at 1 x 2 : is anchored'\n\t *  'Cell at 1 x 3 : is spanned'\n\t *  'Cell at 1 x 4 : is anchored'\n\t *  'Cell at 1 x 5 : is anchored'\n\t *\n\t * **Note**: Option `row` is a shortcut that sets both `startRow` and `endRow` to the same row.\n\t * (Use either `row` or `startRow` and `endRow` but never together). Similarly the `column` option sets both `startColumn`\n\t * and `endColumn` to the same column (Use either `column` or `startColumn` and `endColumn` but never together).\n\t *\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t * @param options.row A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n\t * @param options.startRow A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n\t * @param options.endRow A row index at which this iterator should end. Can't be used together with `row`.\n\t * @param options.column A column index for which this iterator will output cells.\n\t * Can't be used together with `startColumn` and `endColumn`.\n\t * @param options.startColumn A column index from which this iterator should start.\n\t * Can't be used together with `column`. Default value is 0.\n\t * @param options.endColumn A column index at which this iterator should end. Can't be used together with `column`.\n\t * @param options.includeAllSlots Also return values for spanned cells. Default value is \"false\".\n\t */\n\tconstructor( table: ModelElement, options: TableWalkerOptions = {} ) {\n\t\tthis._table = table;\n\t\tthis._startRow = options.row !== undefined ? options.row : options.startRow || 0;\n\t\tthis._endRow = options.row !== undefined ? options.row : options.endRow;\n\t\tthis._startColumn = options.column !== undefined ? options.column : options.startColumn || 0;\n\t\tthis._endColumn = options.column !== undefined ? options.column : options.endColumn;\n\t\tthis._includeAllSlots = !!options.includeAllSlots;\n\t\tthis._skipRows = new Set();\n\t\tthis._row = 0;\n\t\tthis._rowIndex = 0;\n\t\tthis._column = 0;\n\t\tthis._cellIndex = 0;\n\t\tthis._spannedCells = new Map();\n\t\tthis._nextCellAtColumn = -1;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t */\n\tpublic [ Symbol.iterator ](): IterableIterator<TableSlot> {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns The next table walker's value.\n\t */\n\tpublic next(): IteratorResult<TableSlot, undefined> {\n\t\tif ( this._canJumpToStartRow() ) {\n\t\t\tthis._jumpToNonSpannedRowClosestToStartRow();\n\t\t}\n\n\t\tconst row = this._table.getChild( this._rowIndex );\n\n\t\t// Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n\t\tif ( !row || this._isOverEndRow() ) {\n\t\t\treturn { done: true, value: undefined };\n\t\t}\n\n\t\t// We step over current element when it is not a tableRow instance.\n\t\tif ( !row.is( 'element', 'tableRow' ) ) {\n\t\t\tthis._rowIndex++;\n\n\t\t\treturn this.next();\n\t\t}\n\n\t\tif ( this._isOverEndColumn() ) {\n\t\t\treturn this._advanceToNextRow();\n\t\t}\n\n\t\tlet outValue: IteratorYieldResult<TableSlot> | null = null;\n\n\t\tconst spanData = this._getSpanned();\n\n\t\tif ( spanData ) {\n\t\t\tif ( this._includeAllSlots && !this._shouldSkipSlot() ) {\n\t\t\t\toutValue = this._formatOutValue( spanData.cell, spanData.row, spanData.column );\n\t\t\t}\n\t\t} else {\n\t\t\tconst cell = row.getChild( this._cellIndex ) as ModelElement;\n\n\t\t\tif ( !cell ) {\n\t\t\t\t// If there are no more cells left in row advance to the next row.\n\t\t\t\treturn this._advanceToNextRow();\n\t\t\t}\n\n\t\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) as string || '1' );\n\t\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) as string || '1' );\n\n\t\t\t// Record this cell spans if it's not 1x1 cell.\n\t\t\tif ( colspan > 1 || rowspan > 1 ) {\n\t\t\t\tthis._recordSpans( cell, rowspan, colspan );\n\t\t\t}\n\n\t\t\tif ( !this._shouldSkipSlot() ) {\n\t\t\t\toutValue = this._formatOutValue( cell );\n\t\t\t}\n\n\t\t\tthis._nextCellAtColumn = this._column + colspan;\n\t\t}\n\n\t\t// Advance to the next column before returning value.\n\t\tthis._column++;\n\n\t\tif ( this._column == this._nextCellAtColumn ) {\n\t\t\tthis._cellIndex++;\n\t\t}\n\n\t\t// The current value will be returned only if current row and column are not skipped.\n\t\treturn outValue || this.next();\n\t}\n\n\t/**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param row The row index to skip.\n\t */\n\tpublic skipRow( row: number ): void {\n\t\tthis._skipRows.add( row );\n\t}\n\n\t/**\n\t * Advances internal cursor to the next row.\n\t */\n\tprivate _advanceToNextRow() {\n\t\tthis._row++;\n\t\tthis._rowIndex++;\n\t\tthis._column = 0;\n\t\tthis._cellIndex = 0;\n\t\tthis._nextCellAtColumn = -1;\n\n\t\treturn this.next();\n\t}\n\n\t/**\n\t * Checks if the current row is over {@link #_endRow}.\n\t */\n\tprivate _isOverEndRow() {\n\t\t// If #_endRow is defined skip all rows after it.\n\t\treturn this._endRow !== undefined && this._row > this._endRow!;\n\t}\n\n\t/**\n\t * Checks if the current cell is over {@link #_endColumn}\n\t */\n\tprivate _isOverEndColumn() {\n\t\t// If #_endColumn is defined skip all cells after it.\n\t\treturn this._endColumn !== undefined && this._column > this._endColumn;\n\t}\n\n\t/**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @param cell The table cell to output.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */\n\tprivate _formatOutValue( cell: ModelElement, anchorRow = this._row, anchorColumn = this._column ): IteratorYieldResult<TableSlot> {\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: new TableSlot( this, cell, anchorRow, anchorColumn )\n\t\t};\n\t}\n\n\t/**\n\t * Checks if the current slot should be skipped.\n\t */\n\tprivate _shouldSkipSlot(): boolean {\n\t\tconst rowIsMarkedAsSkipped = this._skipRows.has( this._row );\n\t\tconst rowIsBeforeStartRow = this._row < this._startRow!;\n\n\t\tconst columnIsBeforeStartColumn = this._column < this._startColumn;\n\t\tconst columnIsAfterEndColumn = this._endColumn !== undefined && this._column > this._endColumn;\n\n\t\treturn rowIsMarkedAsSkipped || rowIsBeforeStartRow || columnIsBeforeStartColumn || columnIsAfterEndColumn;\n\t}\n\n\t/**\n\t * Returns the cell element that is spanned over the current cell location.\n\t */\n\tprivate _getSpanned(): CellData | null {\n\t\tconst rowMap = this._spannedCells.get( this._row );\n\n\t\t// No spans for given row.\n\t\tif ( !rowMap ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If spans for given rows has entry for column it means that this location if spanned by other cell.\n\t\treturn rowMap.get( this._column ) || null;\n\t}\n\n\t/**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @param cell A cell that is spanned.\n\t * @param rowspan Cell height.\n\t * @param colspan Cell width.\n\t */\n\tprivate _recordSpans( cell: ModelElement, rowspan: number, colspan: number ) {\n\t\tconst data = {\n\t\t\tcell,\n\t\t\trow: this._row,\n\t\t\tcolumn: this._column\n\t\t};\n\n\t\tfor ( let rowToUpdate = this._row; rowToUpdate < this._row + rowspan; rowToUpdate++ ) {\n\t\t\tfor ( let columnToUpdate = this._column; columnToUpdate < this._column + colspan; columnToUpdate++ ) {\n\t\t\t\tif ( rowToUpdate != this._row || columnToUpdate != this._column ) {\n\t\t\t\t\tthis._markSpannedCell( rowToUpdate, columnToUpdate, data );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @param row The row index of the cell location.\n\t * @param column The column index of the cell location.\n\t * @param data A spanned cell details (cell element, anchor row and column).\n\t */\n\tprivate _markSpannedCell( row: number, column: number, data: CellData ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\tthis._spannedCells.set( row, new Map() );\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row )!;\n\n\t\trowSpans.set( column, data );\n\t}\n\n\t/**\n\t * Checks if part of the table can be skipped.\n\t */\n\tprivate _canJumpToStartRow(): boolean {\n\t\treturn !!this._startRow &&\n\t\t\tthis._startRow > 0 &&\n\t\t\t!this._jumpedToStartRow;\n\t}\n\n\t/**\n\t * Sets the current row to `this._startRow` or the first row before it that has the number of cells\n\t * equal to the number of columns in the table.\n\t *\n\t * Example:\n\t * \t+----+----+----+\n\t *  | 00 | 01 | 02 |\n\t *  |----+----+----+\n\t *  | 10      | 12 |\n\t *  |         +----+\n\t *  |         | 22 |\n\t *  |         +----+\n\t *  |         | 32 | <--- Start row\n\t *  +----+----+----+\n\t *  | 40 | 41 | 42 |\n\t *  +----+----+----+\n\t *\n\t * If the 4th row is a `this._startRow`, this method will:\n\t * 1.) Count the number of columns this table has based on the first row (3 columns in this case).\n\t * 2.) Check if the 4th row contains 3 cells. It doesn't, so go to the row before it.\n\t * 3.) Check if the 3rd row contains 3 cells. It doesn't, so go to the row before it.\n\t * 4.) Check if the 2nd row contains 3 cells. It does, so set the current row to that row.\n\t *\n\t * Setting the current row this way is necessary to let the `next()`  method loop over the cells\n\t * spanning multiple rows or columns and update the `this._spannedCells` property.\n\t */\n\tprivate _jumpToNonSpannedRowClosestToStartRow(): void {\n\t\tconst firstRowLength = this._getRowLength( 0 );\n\n\t\tfor ( let i = this._startRow!; !this._jumpedToStartRow; i-- ) {\n\t\t\tif ( firstRowLength === this._getRowLength( i ) ) {\n\t\t\t\tthis._row = i;\n\t\t\t\tthis._rowIndex = i;\n\t\t\t\tthis._jumpedToStartRow = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a number of columns in a row taking `colspan` into consideration.\n\t */\n\tprivate _getRowLength( rowIndex: number ): number {\n\t\tconst row = this._table.getChild( rowIndex ) as ModelElement;\n\n\t\treturn [ ...row.getChildren() ].reduce( ( cols, row ) => {\n\t\t\treturn cols + parseInt( row.getAttribute( 'colspan' ) as string || '1' );\n\t\t}, 0 );\n\t}\n}\n\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n */\nclass TableSlot {\n\t/**\n\t * The current table cell.\n\t */\n\tpublic readonly cell: ModelElement;\n\n\t/**\n\t * The row index of a table slot.\n\t */\n\tpublic readonly row: number;\n\n\t/**\n\t * The column index of a table slot.\n\t */\n\tpublic readonly column: number;\n\n\t/**\n\t * The row index of a cell anchor slot.\n\t */\n\tpublic readonly cellAnchorRow: number;\n\n\t/**\n\t * The column index of a cell anchor slot.\n\t */\n\tpublic readonly cellAnchorColumn: number;\n\n\t/**\n\t * The index of the current cell in the parent row.\n\t */\n\tprivate readonly _cellIndex: number;\n\n\t/**\n\t * The index of the current row element in the table.\n\t */\n\tprivate readonly _rowIndex: number;\n\n\t/**\n\t * The table element.\n\t */\n\tprivate readonly _table: ModelElement;\n\n\t/**\n\t * Creates an instance of the table walker value.\n\t *\n\t * @param tableWalker The table walker instance.\n\t * @param cell The current table cell.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */\n\tconstructor( tableWalker: TableWalker, cell: ModelElement, anchorRow: number, anchorColumn: number ) {\n\t\tthis.cell = cell;\n\t\tthis.row = tableWalker._row;\n\t\tthis.column = tableWalker._column;\n\t\tthis.cellAnchorRow = anchorRow;\n\t\tthis.cellAnchorColumn = anchorColumn;\n\t\tthis._cellIndex = tableWalker._cellIndex;\n\t\tthis._rowIndex = tableWalker._rowIndex;\n\t\tthis._table = tableWalker._table;\n\t}\n\n\t// @if CK_DEBUG // public get isSpanned(): unknown { return throwMissingGetterError( 'isSpanned' ); }\n\t// @if CK_DEBUG // public get colspan(): unknown { return throwMissingGetterError( 'colspan' ); }\n\t// @if CK_DEBUG // public get rowspan(): unknown { return throwMissingGetterError( 'rowspan' ); }\n\t// @if CK_DEBUG // public get cellIndex(): unknown { return throwMissingGetterError( 'cellIndex' ); }\n\n\t/**\n\t * Whether the cell is anchored in the current slot.\n\t */\n\tpublic get isAnchor(): boolean {\n\t\treturn this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;\n\t}\n\n\t/**\n\t * The width of a cell defined by a `colspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */\n\tpublic get cellWidth(): number {\n\t\treturn parseInt( this.cell.getAttribute( 'colspan' ) as string || '1' );\n\t}\n\n\t/**\n\t * The height of a cell defined by a `rowspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */\n\tpublic get cellHeight(): number {\n\t\treturn parseInt( this.cell.getAttribute( 'rowspan' ) as string || '1' );\n\t}\n\n\t/**\n\t * The index of the current row element in the table.\n\t */\n\tpublic get rowIndex(): number {\n\t\treturn this._rowIndex;\n\t}\n\n\t/**\n\t * Returns the {@link module:engine/model/position~ModelPosition} before the table slot.\n\t */\n\tpublic getPositionBefore(): ModelPosition {\n\t\tconst model = this._table.root.document!.model;\n\n\t\treturn model.createPositionAt( this._table.getChild( this.row ) as ModelElement, this._cellIndex );\n\t}\n}\n\nexport type { TableSlot };\n\n/**\n * This `TableSlot`'s getter (property) was removed in CKEditor 5 v20.0.0.\n *\n * Check out the new `TableWalker`'s API in the documentation.\n *\n * @error tableslot-getter-removed\n * @param getterName\n */\n// @if CK_DEBUG // function throwMissingGetterError( getterName: string ): void {\n// @if CK_DEBUG //\t\tthrow new CKEditorError( 'tableslot-getter-removed', null, {\n// @if CK_DEBUG //\t\t\tgetterName\n// @if CK_DEBUG //\t\t} );\n// @if CK_DEBUG // }\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/downcast\n */\n\nimport { toWidget, toWidgetEditable } from 'ckeditor5/src/widget.js';\nimport type { ModelNode, ViewElement, ModelElement, ViewDowncastWriter, DowncastElementCreatorFunction } from 'ckeditor5/src/engine.js';\n\nimport { TableWalker } from './../tablewalker.js';\nimport { type TableUtils } from '../tableutils.js';\nimport type { TableConversionAdditionalSlot } from '../tableediting.js';\n\n/**\n * Model table element to view table element conversion helper.\n *\n * @internal\n */\nexport function downcastTable( tableUtils: TableUtils, options: DowncastTableOptions ): DowncastElementCreatorFunction {\n\treturn ( table, { writer } ) => {\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\t\tconst tableElement = writer.createContainerElement( 'table', null, [] );\n\t\tconst figureElement = writer.createContainerElement( 'figure', { class: 'table' }, tableElement );\n\n\t\t// Table head slot.\n\t\tif ( headingRows > 0 ) {\n\t\t\twriter.insert(\n\t\t\t\twriter.createPositionAt( tableElement, 'end' ),\n\t\t\t\twriter.createContainerElement(\n\t\t\t\t\t'thead',\n\t\t\t\t\tnull,\n\t\t\t\t\twriter.createSlot( element => element.is( 'element', 'tableRow' ) && element.index! < headingRows )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Table body slot.\n\t\tif ( headingRows < tableUtils.getRows( table ) ) {\n\t\t\twriter.insert(\n\t\t\t\twriter.createPositionAt( tableElement, 'end' ),\n\t\t\t\twriter.createContainerElement(\n\t\t\t\t\t'tbody',\n\t\t\t\t\tnull,\n\t\t\t\t\twriter.createSlot( element => element.is( 'element', 'tableRow' ) && element.index! >= headingRows )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Dynamic slots.\n\t\tfor ( const { positionOffset, filter } of options.additionalSlots ) {\n\t\t\twriter.insert(\n\t\t\t\twriter.createPositionAt( tableElement, positionOffset ),\n\t\t\t\twriter.createSlot( filter )\n\t\t\t);\n\t\t}\n\n\t\t// Create a slot with items that don't fit into the table.\n\t\twriter.insert(\n\t\t\twriter.createPositionAt( tableElement, 'after' ),\n\t\t\twriter.createSlot( element => {\n\t\t\t\tif ( element.is( 'element', 'tableRow' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn !options.additionalSlots.some( ( { filter } ) => filter( element ) );\n\t\t\t} )\n\t\t);\n\n\t\treturn options.asWidget ? toTableWidget( figureElement, writer ) : figureElement;\n\t};\n}\n\n/**\n * Model table row element to view `<tr>` element conversion helper.\n *\n * @internal\n * @returns Element creator.\n */\nexport function downcastRow(): DowncastElementCreatorFunction {\n\treturn ( tableRow, { writer } ) => {\n\t\treturn tableRow.isEmpty ?\n\t\t\twriter.createEmptyElement( 'tr' ) :\n\t\t\twriter.createContainerElement( 'tr' );\n\t};\n}\n\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @internal\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nexport function downcastCell( options: { asWidget?: boolean } = {} ): DowncastElementCreatorFunction {\n\treturn ( tableCell, { writer } ) => {\n\t\tconst tableRow = tableCell.parent as ModelElement;\n\t\tconst table = tableRow.parent as ModelElement;\n\t\tconst rowIndex = table.getChildIndex( tableRow )!;\n\n\t\tconst tableWalker = new TableWalker( table, { row: rowIndex } );\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\t\tlet result: ViewElement | null = null;\n\n\t\t// We need to iterate over a table in order to get proper row & column values from a walker.\n\t\tfor ( const tableSlot of tableWalker ) {\n\t\t\tif ( tableSlot.cell == tableCell ) {\n\t\t\t\tconst isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n\t\t\t\tconst cellElementName = isHeading ? 'th' : 'td';\n\n\t\t\t\tresult = options.asWidget ?\n\t\t\t\t\ttoWidgetEditable( writer.createEditableElement( cellElementName ), writer, { withAriaRole: false } ) :\n\t\t\t\t\twriter.createContainerElement( cellElementName );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\n/**\n * Overrides paragraph inside table cell conversion.\n *\n * This converter:\n * * should be used to override default paragraph conversion.\n * * It will only convert `<paragraph>` placed directly inside `<tableCell>`.\n * * For a single paragraph without attributes it returns `<span>` to simulate data table.\n * * For all other cases it returns `<p>` element.\n *\n * @internal\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nexport function convertParagraphInTableCell( options: { asWidget?: boolean } = {} ): DowncastElementCreatorFunction {\n\treturn ( modelElement, { writer } ) => {\n\t\tif ( !modelElement.parent!.is( 'element', 'tableCell' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( !isSingleParagraphWithoutAttributes( modelElement ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( options.asWidget ) {\n\t\t\treturn writer.createContainerElement( 'span', { class: 'ck-table-bogus-paragraph' } );\n\t\t} else {\n\t\t\t// Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n\t\t\tconst viewElement = writer.createContainerElement( 'p' );\n\n\t\t\twriter.setCustomProperty( 'dataPipeline:transparentRendering', true, viewElement );\n\n\t\t\treturn viewElement;\n\t\t}\n\t};\n}\n\n/**\n * Checks if given model `<paragraph>` is an only child of a parent (`<tableCell>`) and if it has any attribute set.\n *\n * The paragraph should be converted in the editing view to:\n *\n * * If returned `true` - to a `<span class=\"ck-table-bogus-paragraph\">`\n * * If returned `false` - to a `<p>`\n *\n * @internal\n */\nexport function isSingleParagraphWithoutAttributes( modelElement: ModelElement ): boolean {\n\tconst tableCell = modelElement.parent!;\n\n\tconst isSingleParagraph = tableCell.childCount == 1;\n\n\treturn isSingleParagraph && !hasAnyAttribute( modelElement );\n}\n\n/**\n * Converts a given {@link module:engine/view/element~ViewElement} to a table widget:\n * * Adds a {@link module:engine/view/element~ViewElement#_setCustomProperty custom property}\n * allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n */\nfunction toTableWidget( viewElement: ViewElement, writer: ViewDowncastWriter ): ViewElement {\n\twriter.setCustomProperty( 'table', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { hasSelectionHandle: true } );\n}\n\n/**\n * Checks if an element has any attributes set.\n */\nfunction hasAnyAttribute( element: ModelNode ): boolean {\n\tfor ( const attributeKey of element.getAttributeKeys() ) {\n\t\t// Ignore selection attributes stored on block elements.\n\t\tif ( attributeKey.startsWith( 'selection:' ) || attributeKey == 'htmlEmptyBlock' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Options for the downcast table conversion.\n *\n * @internal\n */\nexport interface DowncastTableOptions {\n\n\t/**\n\t * If set to `true`, the downcast conversion will produce a widget.\n\t */\n\tasWidget?: boolean;\n\n\t/**\n\t * Array of additional slot handlers.\n\t */\n\tadditionalSlots: Array<TableConversionAdditionalSlot>;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\n\nimport type {\n\tModelDocumentSelection,\n\tModelSchema,\n\tModelSelection,\n\tModelElement\n} from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTable', { rows: 20, columns: 5 } );\n * ```\n */\nexport class InsertTableCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tthis.isEnabled = isAllowedInParent( selection, schema );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n\t * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n\t * @param options.headingRows The number of heading rows. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.rows`} table config.\n\t * @param options.headingColumns The number of heading columns. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.columns`} table config.\n\t * @fires execute\n\t */\n\tpublic override execute(\n\t\toptions: {\n\t\t\trows?: number;\n\t\t\tcolumns?: number;\n\t\t\theadingRows?: number;\n\t\t\theadingColumns?: number;\n\t\t} = {}\n\t): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst defaultRows = editor.config.get( 'table.defaultHeadings.rows' );\n\t\tconst defaultColumns = editor.config.get( 'table.defaultHeadings.columns' );\n\n\t\tif ( options.headingRows === undefined && defaultRows ) {\n\t\t\toptions.headingRows = defaultRows;\n\t\t}\n\n\t\tif ( options.headingColumns === undefined && defaultColumns ) {\n\t\t\toptions.headingColumns = defaultColumns;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst table = tableUtils.createTable( writer, options );\n\n\t\t\tmodel.insertObject( table, null, null, { findOptimalPosition: 'auto' } );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Checks if the table is allowed in the parent.\n */\nfunction isAllowedInParent( selection: ModelSelection | ModelDocumentSelection, schema: ModelSchema ) {\n\tconst positionParent = selection.getFirstPosition()!.parent;\n\tconst validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n\n\treturn schema.checkChild( validParent as ModelElement, 'table' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/insertrowcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowBelow' );\n * ```\n *\n * To insert a row above the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowAbove' );\n * ```\n */\nexport class InsertRowCommand extends Command {\n\t/**\n\t * The order of insertion relative to the row in which the caret is located.\n\t */\n\tpublic readonly order: 'above' | 'below';\n\n\t/**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`. Default value is \"below\"\n\t */\n\tconstructor( editor: Editor, options: { order?: 'above' | 'below' } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.order = options.order || 'below';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells( selection ).length;\n\n\t\tthis.isEnabled = isAnyCellSelected;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\t\tconst insertAbove = this.order === 'above';\n\n\t\tconst affectedTableCells = tableUtils.getSelectionAffectedTableCells( selection );\n\t\tconst rowIndexes = tableUtils.getRowIndexes( affectedTableCells );\n\n\t\tconst row = insertAbove ? rowIndexes.first : rowIndexes.last;\n\t\tconst table = affectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\ttableUtils.insertRows( table, { at: insertAbove ? row : row + 1, copyStructureFromAbove: !insertAbove } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/insertcolumncommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnLeft' );\n * ```\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnRight' );\n * ```\n */\nexport class InsertColumnCommand extends Command {\n\t/**\n\t * The order of insertion relative to the column in which the caret is located.\n\t */\n\tpublic readonly order: 'left' | 'right';\n\n\t/**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param editor An editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`. Default value is \"right\".\n\t */\n\tconstructor( editor: Editor, options: { order?: 'left' | 'right' } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.order = options.order || 'right';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells( selection ).length;\n\n\t\tthis.isEnabled = isAnyCellSelected;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\t\tconst insertBefore = this.order === 'left';\n\n\t\tconst affectedTableCells = tableUtils.getSelectionAffectedTableCells( selection );\n\t\tconst columnIndexes = tableUtils.getColumnIndexes( affectedTableCells );\n\n\t\tconst column = insertBefore ? columnIndexes.first : columnIndexes.last;\n\t\tconst table = affectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\ttableUtils.insertColumns( table, { columns: 1, at: insertBefore ? column : column + 1 } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/splitcellcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n * ```ts\n * editor.execute( 'splitTableCellVertically' );\n * ```\n */\nexport class SplitCellCommand extends Command {\n\t/**\n\t * The direction that indicates which cell will be split.\n\t */\n\tpublic readonly direction: 'horizontally' | 'vertically';\n\n\t/**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */\n\tconstructor( editor: Editor, options: { direction?: 'horizontally' | 'vertically' } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.direction = options.direction || 'horizontally';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length === 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCell = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection )[ 0 ];\n\t\tconst isHorizontal = this.direction === 'horizontally';\n\n\t\tif ( isHorizontal ) {\n\t\t\ttableUtils.splitCellHorizontally( tableCell, 2 );\n\t\t} else {\n\t\t\ttableUtils.splitCellVertically( tableCell, 2 );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/structure\n */\n\nimport type { ModelElement, ModelNode, ModelWriter } from 'ckeditor5/src/engine.js';\n\nimport { TableWalker, type TableSlot } from '../tablewalker.js';\nimport { createEmptyTableCell, updateNumericAttribute } from './common.js';\nimport { type TableUtils } from '../tableutils.js';\n\ntype CellAttributes = {\n\trowspan?: number;\n\tcolspan?: number;\n};\n\n/**\n * Returns a cropped table according to given dimensions.\n\n * To return a cropped table that starts at first row and first column and end in third row and column:\n *\n * ```ts\n * const croppedTable = cropTableToDimensions( table, {\n *   startRow: 1,\n *   endRow: 3,\n *   startColumn: 1,\n *   endColumn: 3\n * }, writer );\n * ```\n *\n * Calling the code above for the table below:\n *\n *        0   1   2   3   4                      0   1   2\n *      ┌───┬───┬───┬───┬───┐\n *   0  │ a │ b │ c │ d │ e │\n *      ├───┴───┤   ├───┴───┤                  ┌───┬───┬───┐\n *   1  │ f     │   │ g     │                  │   │   │ g │  0\n *      ├───┬───┴───┼───┬───┤   will return:   ├───┴───┼───┤\n *   2  │ h │ i     │ j │ k │                  │ i     │ j │  1\n *      ├───┤       ├───┤   │                  │       ├───┤\n *   3  │ l │       │ m │   │                  │       │ m │  2\n *      ├───┼───┬───┤   ├───┤                  └───────┴───┘\n *   4  │ n │ o │ p │   │ q │\n *      └───┴───┴───┴───┴───┘\n *\n * @internal\n */\nexport function cropTableToDimensions(\n\tsourceTable: ModelElement,\n\tcropDimensions: {\n\t\tstartRow: number;\n\t\tstartColumn: number;\n\t\tendRow: number;\n\t\tendColumn: number;\n\t},\n\twriter: ModelWriter\n): ModelElement {\n\tconst { startRow, startColumn, endRow, endColumn } = cropDimensions;\n\n\t// Initialize the cropped table element.\n\tconst croppedTable = writer.createElement( 'table' );\n\n\t// Copy table type attribute if present.\n\tconst sourceTableType = sourceTable.getAttribute( 'tableType' );\n\n\tif ( sourceTableType ) {\n\t\twriter.setAttribute( 'tableType', sourceTableType, croppedTable );\n\t}\n\n\t// Create empty table with empty rows equal to crop height.\n\tconst cropHeight = endRow - startRow + 1;\n\n\tfor ( let i = 0; i < cropHeight; i++ ) {\n\t\twriter.insertElement( 'tableRow', croppedTable, 'end' );\n\t}\n\n\tconst tableMap = [ ...new TableWalker( sourceTable, { startRow, endRow, startColumn, endColumn, includeAllSlots: true } ) ];\n\n\t// Iterate over source table slots (including empty - spanned - ones).\n\tfor ( const { row: sourceRow, column: sourceColumn, cell: tableCell, isAnchor, cellAnchorRow, cellAnchorColumn } of tableMap ) {\n\t\t// Row index in cropped table.\n\t\tconst rowInCroppedTable = sourceRow - startRow;\n\t\tconst row = croppedTable.getChild( rowInCroppedTable ) as ModelElement;\n\n\t\t// For empty slots: fill the gap with empty table cell.\n\t\tif ( !isAnchor ) {\n\t\t\t// But fill the gap only if the spanning cell is anchored outside cropped area.\n\t\t\t// In the table from method jsdoc those cells are: \"c\" & \"f\".\n\t\t\tif ( cellAnchorRow < startRow || cellAnchorColumn < startColumn ) {\n\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\t\t}\n\t\t// Otherwise clone the cell with all children and trim if it exceeds cropped area.\n\t\telse {\n\t\t\tconst tableCellCopy = writer.cloneElement( tableCell );\n\n\t\t\twriter.append( tableCellCopy, row );\n\n\t\t\t// Trim table if it exceeds cropped area.\n\t\t\t// In the table from method jsdoc those cells are: \"g\" & \"m\".\n\t\t\ttrimTableCellIfNeeded( tableCellCopy, sourceRow, sourceColumn, endRow, endColumn, writer );\n\t\t}\n\t}\n\n\t// Adjust heading rows & columns in cropped table if crop selection includes headings parts.\n\taddHeadingsToCroppedTable( croppedTable, sourceTable, startRow, startColumn, writer );\n\n\treturn croppedTable;\n}\n\n/**\n * Returns slot info of cells that starts above and overlaps a given row.\n *\n * In a table below, passing `overlapRow = 3`\n *\n *     ┌───┬───┬───┬───┬───┐\n *  0  │ a │ b │ c │ d │ e │\n *     │   ├───┼───┼───┼───┤\n *  1  │   │ f │ g │ h │ i │\n *     ├───┤   ├───┼───┤   │\n *  2  │ j │   │ k │ l │   │\n *     │   │   │   ├───┼───┤\n *  3  │   │   │   │ m │ n │  <- overlap row to check\n *     ├───┼───┤   │   ├───│\n *  4  │ o │ p │   │   │ q │\n *     └───┴───┴───┴───┴───┘\n *\n * will return slot info for cells: \"j\", \"f\", \"k\".\n *\n * @internal\n * @param table The table to check.\n * @param overlapRow The index of the row to check.\n * @param startRow row to start analysis. Use it when it is known that the cells above that row will not overlap. Default value is 0.\n */\nexport function getVerticallyOverlappingCells( table: ModelElement, overlapRow: number, startRow: number = 0 ): Array<TableSlot> {\n\tconst cells: Array<TableSlot> = [];\n\n\tconst tableWalker = new TableWalker( table, { startRow, endRow: overlapRow - 1 } );\n\n\tfor ( const slotInfo of tableWalker ) {\n\t\tconst { row, cellHeight } = slotInfo;\n\t\tconst cellEndRow = row + cellHeight - 1;\n\n\t\tif ( row < overlapRow && overlapRow <= cellEndRow ) {\n\t\t\tcells.push( slotInfo );\n\t\t}\n\t}\n\n\treturn cells;\n}\n\n/**\n * Splits the table cell horizontally.\n *\n * @internal\n * @returns Created table cell, if any were created.\n */\nexport function splitHorizontally( tableCell: ModelElement, splitRow: number, writer: ModelWriter ): ModelElement | null {\n\tconst tableRow = tableCell.parent as ModelNode;\n\tconst table = tableRow.parent as ModelElement;\n\tconst rowIndex = tableRow.index!;\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string );\n\tconst newRowspan = splitRow - rowIndex;\n\n\tconst newCellAttributes: CellAttributes = {};\n\tconst newCellRowSpan = rowspan - newRowspan;\n\n\tif ( newCellRowSpan > 1 ) {\n\t\tnewCellAttributes.rowspan = newCellRowSpan;\n\t}\n\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\n\tif ( colspan > 1 ) {\n\t\tnewCellAttributes.colspan = colspan;\n\t}\n\n\tconst startRow = rowIndex;\n\tconst endRow = startRow + newRowspan;\n\tconst tableMap = [ ...new TableWalker( table, { startRow, endRow, includeAllSlots: true } ) ];\n\n\tlet newCell = null;\n\tlet columnIndex;\n\n\tfor ( const tableSlot of tableMap ) {\n\t\tconst { row, column, cell } = tableSlot;\n\n\t\tif ( cell === tableCell && columnIndex === undefined ) {\n\t\t\tcolumnIndex = column;\n\t\t}\n\n\t\tif ( columnIndex !== undefined && columnIndex === column && row === endRow ) {\n\t\t\tnewCell = createEmptyTableCell( writer, tableSlot.getPositionBefore(), newCellAttributes );\n\t\t}\n\t}\n\n\t// Update the rowspan attribute after updating table.\n\tupdateNumericAttribute( 'rowspan', newRowspan, tableCell, writer );\n\n\treturn newCell;\n}\n\n/**\n * Returns slot info of cells that starts before and overlaps a given column.\n *\n * In a table below, passing `overlapColumn = 3`\n *\n *    0   1   2   3   4\n *  ┌───────┬───────┬───┐\n *  │ a     │ b     │ c │\n *  │───┬───┴───────┼───┤\n *  │ d │ e         │ f │\n *  ├───┼───┬───────┴───┤\n *  │ g │ h │ i         │\n *  ├───┼───┼───┬───────┤\n *  │ j │ k │ l │ m     │\n *  ├───┼───┴───┼───┬───┤\n *  │ n │ o     │ p │ q │\n *  └───┴───────┴───┴───┘\n *                ^\n *                Overlap column to check\n *\n * will return slot info for cells: \"b\", \"e\", \"i\".\n *\n * @internal\n * @param table The table to check.\n * @param overlapColumn The index of the column to check.\n */\nexport function getHorizontallyOverlappingCells( table: ModelElement, overlapColumn: number ): Array<TableSlot> {\n\tconst cellsToSplit = [];\n\n\tconst tableWalker = new TableWalker( table );\n\n\tfor ( const slotInfo of tableWalker ) {\n\t\tconst { column, cellWidth } = slotInfo;\n\t\tconst cellEndColumn = column + cellWidth - 1;\n\n\t\tif ( column < overlapColumn && overlapColumn <= cellEndColumn ) {\n\t\t\tcellsToSplit.push( slotInfo );\n\t\t}\n\t}\n\n\treturn cellsToSplit;\n}\n\n/**\n * Splits the table cell vertically.\n *\n * @internal\n * @param columnIndex The table cell column index.\n * @param splitColumn The index of column to split cell on.\n * @returns Created table cell.\n */\nexport function splitVertically( tableCell: ModelElement, columnIndex: number, splitColumn: number, writer: ModelWriter ): ModelElement {\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string );\n\tconst newColspan = splitColumn - columnIndex;\n\n\tconst newCellAttributes: CellAttributes = {};\n\tconst newCellColSpan = colspan - newColspan;\n\n\tif ( newCellColSpan > 1 ) {\n\t\tnewCellAttributes.colspan = newCellColSpan;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\n\tif ( rowspan > 1 ) {\n\t\tnewCellAttributes.rowspan = rowspan;\n\t}\n\n\tconst newCell = createEmptyTableCell( writer, writer.createPositionAfter( tableCell ), newCellAttributes );\n\n\t// Update the colspan attribute after updating table.\n\tupdateNumericAttribute( 'colspan', newColspan, tableCell, writer );\n\n\treturn newCell;\n}\n\n/**\n * Adjusts table cell dimensions to not exceed limit row and column.\n *\n * If table cell width (or height) covers a column (or row) that is after a limit column (or row)\n * this method will trim \"colspan\" (or \"rowspan\") attribute so the table cell will fit in a defined limits.\n *\n * @internal\n */\nexport function trimTableCellIfNeeded(\n\ttableCell: ModelElement,\n\tcellRow: number,\n\tcellColumn: number,\n\tlimitRow: number,\n\tlimitColumn: number,\n\twriter: ModelWriter\n): void {\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\n\tconst endColumn = cellColumn + colspan - 1;\n\n\tif ( endColumn > limitColumn ) {\n\t\tconst trimmedSpan = limitColumn - cellColumn + 1;\n\n\t\tupdateNumericAttribute( 'colspan', trimmedSpan, tableCell, writer, 1 );\n\t}\n\n\tconst endRow = cellRow + rowspan - 1;\n\n\tif ( endRow > limitRow ) {\n\t\tconst trimmedSpan = limitRow - cellRow + 1;\n\n\t\tupdateNumericAttribute( 'rowspan', trimmedSpan, tableCell, writer, 1 );\n\t}\n}\n\n/**\n * Sets proper heading attributes to a cropped table.\n */\nfunction addHeadingsToCroppedTable(\n\tcroppedTable: ModelElement, sourceTable: ModelElement, startRow: number, startColumn: number, writer: ModelWriter\n) {\n\tconst headingRows = parseInt( sourceTable.getAttribute( 'headingRows' ) as string || '0' );\n\n\tif ( headingRows > 0 ) {\n\t\tconst headingRowsInCrop = headingRows - startRow;\n\t\tupdateNumericAttribute( 'headingRows', headingRowsInCrop, croppedTable, writer, 0 );\n\t}\n\n\tconst headingColumns = parseInt( sourceTable.getAttribute( 'headingColumns' ) as string || '0' );\n\n\tif ( headingColumns > 0 ) {\n\t\tconst headingColumnsInCrop = headingColumns - startColumn;\n\t\tupdateNumericAttribute( 'headingColumns', headingColumnsInCrop, croppedTable, writer, 0 );\n\t}\n}\n\n/**\n * Removes columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+----+----+----+\n *     | 00 | 01      | 03 | 04      | 06 |\n *     +----+----+----+----+         +----+\n *     | 10 | 11      | 13 |         | 16 |\n *     +----+----+----+----+----+----+----+\n *     | 20 | 21      | 23 | 24      | 26 |\n *     +----+----+----+----+----+----+----+\n *                  ^--- empty ---^\n *\n * Will remove columns 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a column from a table use {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`}.\n *\n * @internal\n * @returns True if removed some columns.\n */\nexport function removeEmptyColumns( table: ModelElement, tableUtils: TableUtils ): boolean {\n\tconst width = tableUtils.getColumns( table );\n\tconst columnsMap = new Array( width ).fill( 0 );\n\n\tfor ( const { column } of new TableWalker( table ) ) {\n\t\tcolumnsMap[ column ]++;\n\t}\n\n\tconst emptyColumns = columnsMap.reduce( ( result, cellsCount, column ) => {\n\t\treturn cellsCount ? result : [ ...result, column ];\n\t}, [] );\n\n\tif ( emptyColumns.length > 0 ) {\n\t\t// Remove only last empty column because it will recurrently trigger removing empty rows.\n\t\tconst emptyColumn = emptyColumns[ emptyColumns.length - 1 ];\n\n\t\t// @if CK_DEBUG_TABLE // console.log( `Removing empty column: ${ emptyColumn }.` );\n\t\ttableUtils.removeColumns( table, { at: emptyColumn } );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Removes rows that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+\n *     | 00 | 01 | 02 |\n *     +----+----+----+\n *     | 10 | 11 | 12 |\n *     +    +    +    +\n *     |    |    |    | <-- empty\n *     +----+----+----+\n *     | 30 | 31 | 32 |\n *     +----+----+----+\n *     | 40      | 42 |\n *     +         +    +\n *     |         |    | <-- empty\n *     +----+----+----+\n *     | 60 | 61 | 62 |\n *     +----+----+----+\n *\n * Will remove rows 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a row from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`}.\n *\n * @internal\n * @returns True if removed some rows.\n */\nexport function removeEmptyRows( table: ModelElement, tableUtils: TableUtils ): boolean {\n\tconst emptyRows = [];\n\tconst tableRowCount = tableUtils.getRows( table );\n\n\tfor ( let rowIndex = 0; rowIndex < tableRowCount; rowIndex++ ) {\n\t\tconst tableRow = table.getChild( rowIndex ) as ModelElement;\n\n\t\tif ( tableRow.isEmpty ) {\n\t\t\temptyRows.push( rowIndex );\n\t\t}\n\t}\n\n\tif ( emptyRows.length > 0 ) {\n\t\t// Remove only last empty row because it will recurrently trigger removing empty columns.\n\t\tconst emptyRow = emptyRows[ emptyRows.length - 1 ];\n\n\t\t// @if CK_DEBUG_TABLE // console.log( `Removing empty row: ${ emptyRow }.` );\n\t\ttableUtils.removeRows( table, { at: emptyRow } );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Removes rows and columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+\n *     | 00      | 02      |\n *     +----+----+         +\n *     | 10      |         |\n *     +----+----+----+----+\n *     | 20      | 22 | 23 |\n *     +         +    +    +\n *     |         |    |    | <-- empty row\n *     +----+----+----+----+\n *             ^--- empty column\n *\n * Will remove row 3 and column 1.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a rows from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`} and\n * {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`} to remove a column.\n *\n * @internal\n */\nexport function removeEmptyRowsColumns( table: ModelElement, tableUtils: TableUtils ): void {\n\tconst removedColumns = removeEmptyColumns( table, tableUtils );\n\n\t// If there was some columns removed then cleaning empty rows was already triggered.\n\tif ( !removedColumns ) {\n\t\tremoveEmptyRows( table, tableUtils );\n\t}\n}\n\n/**\n * Returns adjusted last row index if selection covers part of a row with empty slots (spanned by other cells).\n * The `dimensions.lastRow` is equal to last row index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *        +---+---+---+---+\n *      0 | a | b | c | d |\n *        +   +   +---+---+\n *      1 |   | e | f | g |\n *        +   +---+   +---+\n *      2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n *        +   +   +   +   +    so we need to return 3, not 2\n *      3 |   |   |   |   |\n *        +---+---+---+---+\n *\n * @internal\n * @returns Adjusted last row index.\n */\nexport function adjustLastRowIndex(\n\ttable: ModelElement,\n\tdimensions: {\n\t\tfirstRow: number;\n\t\tfirstColumn: number;\n\t\tlastRow: number;\n\t\tlastColumn: number;\n\t}\n): number {\n\tconst lastRowMap = Array.from( new TableWalker( table, {\n\t\tstartColumn: dimensions.firstColumn,\n\t\tendColumn: dimensions.lastColumn,\n\t\trow: dimensions.lastRow\n\t} ) );\n\n\tconst everyCellHasSingleRowspan = lastRowMap.every( ( { cellHeight } ) => cellHeight === 1 );\n\n\t// It is a \"flat\" row, so the last row index is OK.\n\tif ( everyCellHasSingleRowspan ) {\n\t\treturn dimensions.lastRow;\n\t}\n\n\t// Otherwise get any cell's rowspan and adjust the last row index.\n\tconst rowspanAdjustment = lastRowMap[ 0 ].cellHeight - 1;\n\treturn dimensions.lastRow + rowspanAdjustment;\n}\n\n/**\n * Returns adjusted last column index if selection covers part of a column with empty slots (spanned by other cells).\n * The `dimensions.lastColumn` is equal to last column index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *       0   1   2   3\n *     +---+---+---+---+\n *     | a             |\n *     +---+---+---+---+\n *     | b | c | d     |\n *     +---+---+---+---+\n *     | e     | f     |\n *     +---+---+---+---+\n *     | g | h         |\n *     +---+---+---+---+\n *               ^\n *              last column, each cell has colspan = 2, so we need to return 3, not 2\n *\n * @internal\n * @returns Adjusted last column index.\n */\nexport function adjustLastColumnIndex(\n\ttable: ModelElement,\n\tdimensions: {\n\t\tfirstRow: number;\n\t\tfirstColumn: number;\n\t\tlastRow: number;\n\t\tlastColumn: number;\n\t}\n): number {\n\tconst lastColumnMap = Array.from( new TableWalker( table, {\n\t\tstartRow: dimensions.firstRow,\n\t\tendRow: dimensions.lastRow,\n\t\tcolumn: dimensions.lastColumn\n\t} ) );\n\n\tconst everyCellHasSingleColspan = lastColumnMap.every( ( { cellWidth } ) => cellWidth === 1 );\n\n\t// It is a \"flat\" column, so the last column index is OK.\n\tif ( everyCellHasSingleColspan ) {\n\t\treturn dimensions.lastColumn;\n\t}\n\n\t// Otherwise get any cell's colspan and adjust the last column index.\n\tconst colspanAdjustment = lastColumnMap[ 0 ].cellWidth - 1;\n\treturn dimensions.lastColumn + colspanAdjustment;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\n\nimport type {\n\tModelElement,\n\tModelNode,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { TableWalker } from '../tablewalker.js';\nimport { isHeadingColumnCell } from '../utils/common.js';\nimport { removeEmptyRowsColumns } from '../utils/structure.js';\nimport type { ArrowKeyCodeDirection } from 'ckeditor5/src/utils.js';\n\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n * ```ts\n * editor.execute( 'mergeTableCellRight' );\n * ```\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n */\nexport class MergeCellCommand extends Command {\n\t/**\n\t * The direction that indicates which cell will be merged with the currently selected one.\n\t */\n\tpublic readonly direction: ArrowKeyCodeDirection;\n\n\t/**\n\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t */\n\tpublic readonly isHorizontal: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic declare value: ModelNode | undefined;\n\n\t/**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */\n\tconstructor( editor: Editor, options: { direction: ArrowKeyCodeDirection } ) {\n\t\tsuper( editor );\n\n\t\tthis.direction = options.direction;\n\t\tthis.isHorizontal = this.direction == 'right' || this.direction == 'left';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst cellToMerge = this._getMergeableCell();\n\n\t\tthis.value = cellToMerge;\n\t\tthis.isEnabled = !!cellToMerge;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCell = tableUtils.getTableCellsContainingSelection( doc.selection )[ 0 ];\n\n\t\tconst cellToMerge = this.value!;\n\t\tconst direction = this.direction;\n\n\t\tmodel.change( writer => {\n\t\t\tconst isMergeNext = direction == 'right' || direction == 'down';\n\n\t\t\t// The merge mechanism is always the same so sort cells to be merged.\n\t\t\tconst cellToExpand = ( isMergeNext ? tableCell : cellToMerge ) as ModelElement;\n\t\t\tconst cellToRemove = ( isMergeNext ? cellToMerge : tableCell ) as ModelElement;\n\n\t\t\t// Cache the parent of cell to remove for later check.\n\t\t\tconst removedTableCellRow = cellToRemove.parent as ModelElement;\n\n\t\t\tmergeTableCells( cellToRemove, cellToExpand, writer );\n\n\t\t\tconst spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n\t\t\tconst cellSpan = parseInt( tableCell.getAttribute( spanAttribute ) as string || '1' );\n\t\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) as string || '1' );\n\n\t\t\t// Update table cell span attribute and merge set selection on merged contents.\n\t\t\twriter.setAttribute( spanAttribute, cellSpan + cellToMergeSpan, cellToExpand );\n\t\t\twriter.setSelection( writer.createRangeIn( cellToExpand ) );\n\n\t\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\t\tconst table = removedTableCellRow.findAncestor( 'table' )!;\n\n\t\t\t// Remove empty rows and columns after merging.\n\t\t\tremoveEmptyRowsColumns( table, tableUtils );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t */\n\tprivate _getMergeableCell(): ModelNode | undefined {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCell = tableUtils.getTableCellsContainingSelection( doc.selection )[ 0 ];\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// First get the cell on proper direction.\n\t\tconst cellToMerge = this.isHorizontal ?\n\t\t\tgetHorizontalCell( tableCell, this.direction, tableUtils ) :\n\t\t\tgetVerticalCell( tableCell, this.direction, tableUtils );\n\n\t\tif ( !cellToMerge ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If found check if the span perpendicular to merge direction is equal on both cells.\n\t\tconst spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n\t\tconst span = parseInt( tableCell.getAttribute( spanAttribute ) as string || '1' );\n\n\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) as string || '1' );\n\n\t\tif ( cellToMergeSpan === span ) {\n\t\t\treturn cellToMerge;\n\t\t}\n\t}\n}\n\n/**\n * Returns the cell that can be merged horizontally.\n */\nfunction getHorizontalCell( tableCell: ModelElement, direction: ArrowKeyCodeDirection, tableUtils: TableUtils ) {\n\tconst tableRow = tableCell.parent!;\n\tconst table = tableRow.parent as ModelElement;\n\tconst horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\tconst hasHeadingColumns = ( table.getAttribute( 'headingColumns' ) as number || 0 ) > 0;\n\n\tif ( !horizontalCell ) {\n\t\treturn;\n\t}\n\n\t// Sort cells:\n\tconst cellOnLeft = ( direction == 'right' ? tableCell : horizontalCell ) as ModelElement;\n\tconst cellOnRight = ( direction == 'right' ? horizontalCell : tableCell ) as ModelElement;\n\n\t// Get their column indexes:\n\tconst { column: leftCellColumn } = tableUtils.getCellLocation( cellOnLeft );\n\tconst { column: rightCellColumn } = tableUtils.getCellLocation( cellOnRight );\n\n\tconst leftCellSpan = parseInt( cellOnLeft.getAttribute( 'colspan' ) as string || '1' );\n\n\tconst isCellOnLeftInHeadingColumn = isHeadingColumnCell( tableUtils, cellOnLeft );\n\tconst isCellOnRightInHeadingColumn = isHeadingColumnCell( tableUtils, cellOnRight );\n\n\t// We cannot merge heading columns cells with regular cells.\n\tif ( hasHeadingColumns && isCellOnLeftInHeadingColumn != isCellOnRightInHeadingColumn ) {\n\t\treturn;\n\t}\n\n\t// The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\tconst cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n\n\t// If the right cell's column index is different it means that there are rowspanned cells between them.\n\treturn cellsAreTouching ? horizontalCell : undefined;\n}\n\n/**\n * Returns the cell that can be merged vertically.\n */\nfunction getVerticalCell( tableCell: ModelElement, direction: ArrowKeyCodeDirection, tableUtils: TableUtils ): ModelNode | null {\n\tconst tableRow = tableCell.parent as ModelElement;\n\tconst table = tableRow.parent as ModelElement;\n\n\tconst rowIndex = table.getChildIndex( tableRow )!;\n\n\t// Don't search for mergeable cell if direction points out of the table.\n\tif ( ( direction == 'down' && rowIndex === tableUtils.getRows( table ) - 1 ) || ( direction == 'up' && rowIndex === 0 ) ) {\n\t\treturn null;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\tconst isMergeWithBodyCell = direction == 'down' && ( rowIndex + rowspan ) === headingRows;\n\tconst isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n\n\t// Don't search for mergeable cell if direction points out of the current table section.\n\tif ( headingRows && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn null;\n\t}\n\n\tconst currentCellRowSpan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\tconst rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n\n\tconst tableMap = [ ...new TableWalker( table, { endRow: rowOfCellToMerge } ) ];\n\n\tconst currentCellData = tableMap.find( value => value.cell === tableCell )!;\n\tconst mergeColumn = currentCellData.column;\n\n\tconst cellToMergeData = tableMap.find( ( { row, cellHeight, column } ) => {\n\t\tif ( column !== mergeColumn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( direction == 'down' ) {\n\t\t\t// If merging a cell below the mergeRow is already calculated.\n\t\t\treturn row === rowOfCellToMerge;\n\t\t} else {\n\t\t\t// If merging a cell above calculate if it spans to mergeRow.\n\t\t\treturn rowOfCellToMerge === row + cellHeight;\n\t\t}\n\t} );\n\n\treturn cellToMergeData && cellToMergeData.cell ? cellToMergeData.cell : null;\n}\n\n/**\n * Merges two table cells. It will ensure that after merging cells with an empty paragraph, the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have the contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells( cellToRemove: ModelElement, cellToExpand: ModelElement, writer: ModelWriter ) {\n\tif ( !isEmpty( cellToRemove ) ) {\n\t\tif ( isEmpty( cellToExpand ) ) {\n\t\t\twriter.remove( writer.createRangeIn( cellToExpand ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellToRemove ), writer.createPositionAt( cellToExpand, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellToRemove );\n}\n\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty( tableCell: ModelElement ): boolean {\n\tconst firstTableChild = tableCell.getChild( 0 ) as ModelElement;\n\n\treturn tableCell.childCount == 1 && firstTableChild.is( 'element', 'paragraph' ) && firstTableChild.isEmpty;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type { ModelElement, ModelNode } from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableRow' );\n * ```\n */\nexport class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\t\tconst firstCell = selectedCells[ 0 ];\n\n\t\tif ( firstCell ) {\n\t\t\tconst table = firstCell.findAncestor( 'table' )!;\n\t\t\tconst tableRowCount = tableUtils.getRows( table );\n\t\t\tconst lastRowIndex = tableRowCount - 1;\n\n\t\t\tconst selectedRowIndexes = tableUtils.getRowIndexes( selectedCells );\n\n\t\t\tconst areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n\n\t\t\t// Disallow selecting whole table -> delete whole table should be used instead.\n\t\t\tthis.isEnabled = !areAllRowsSelected;\n\t\t} else {\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst removedRowIndexes = tableUtils.getRowIndexes( referenceCells );\n\n\t\tconst firstCell = referenceCells[ 0 ];\n\t\tconst table = firstCell.findAncestor( 'table' )!;\n\n\t\tconst columnIndexToFocus = tableUtils.getCellLocation( firstCell ).column;\n\n\t\tmodel.change( writer => {\n\t\t\tconst rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n\n\t\t\ttableUtils.removeRows( table, {\n\t\t\t\tat: removedRowIndexes.first,\n\t\t\t\trows: rowsToRemove\n\t\t\t} );\n\n\t\t\tconst cellToFocus = getCellToFocus( table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows( table ) );\n\n\t\t\twriter.setSelection( writer.createPositionAt( cellToFocus, 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n * - If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n * - If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n */\nfunction getCellToFocus( table: ModelElement, removedRowIndex: number, columnToFocus: number, tableRowCount: number ): ModelNode {\n\t// Don't go beyond last row's index.\n\tconst row = table.getChild( Math.min( removedRowIndex, tableRowCount - 1 ) ) as ModelElement;\n\n\t// Default to first table cell.\n\tlet cellToFocus = row.getChild( 0 )!;\n\tlet column = 0;\n\n\tfor ( const tableCell of row.getChildren() ) {\n\t\tif ( column > columnToFocus ) {\n\t\t\treturn cellToFocus;\n\t\t}\n\n\t\tcellToFocus = tableCell;\n\t\tcolumn += parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\t}\n\n\treturn cellToFocus;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/removecolumncommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type {\n\tModelDocumentSelection,\n\tModelElement,\n\tModelSelection\n} from 'ckeditor5/src/engine.js';\n\nimport { TableWalker, type TableSlot } from '../tablewalker.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableColumn' );\n * ```\n */\nexport class RemoveColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\t\tconst firstCell = selectedCells[ 0 ];\n\n\t\tif ( firstCell ) {\n\t\t\tconst table = firstCell.findAncestor( 'table' )!;\n\t\t\tconst tableColumnCount = tableUtils.getColumns( table );\n\n\t\t\tconst { first, last } = tableUtils.getColumnIndexes( selectedCells );\n\n\t\t\tthis.isEnabled = last - first < ( tableColumnCount - 1 );\n\t\t} else {\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst [ firstCell, lastCell ] = getBoundaryCells( this.editor.model.document.selection, tableUtils );\n\t\tconst table = firstCell.parent!.parent as ModelElement;\n\n\t\t// Cache the table before removing or updating colspans.\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t// Store column indexes of removed columns.\n\t\tconst removedColumnIndexes = {\n\t\t\tfirst: tableMap.find( value => value.cell === firstCell )!.column,\n\t\t\tlast: tableMap.find( value => value.cell === lastCell )!.column\n\t\t};\n\n\t\tconst cellToFocus = getCellToFocus( tableMap, firstCell, lastCell, removedColumnIndexes )!;\n\n\t\tthis.editor.model.change( writer => {\n\t\t\tconst columnsToRemove = removedColumnIndexes.last - removedColumnIndexes.first + 1;\n\n\t\t\ttableUtils.removeColumns( table, {\n\t\t\t\tat: removedColumnIndexes.first,\n\t\t\t\tcolumns: columnsToRemove\n\t\t\t} );\n\n\t\t\twriter.setSelection( writer.createPositionAt( cellToFocus, 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Returns a proper table cell to focus after removing a column.\n * - selection is on last table cell it will return previous cell.\n */\nfunction getCellToFocus(\n\ttableMap: Array<TableSlot>,\n\tfirstCell: ModelElement,\n\tlastCell: ModelElement,\n\tremovedColumnIndexes: {\n\t\tfirst: number;\n\t\tlast: number;\n\t}\n) {\n\tconst colspan = parseInt( lastCell.getAttribute( 'colspan' ) as string || '1' );\n\n\t// If the table cell is spanned over 2+ columns - it will be truncated so the selection should\n\t// stay in that cell.\n\tif ( colspan > 1 ) {\n\t\treturn lastCell;\n\t}\n\t// Normally, look for the cell in the same row that precedes the first cell to put selection there (\"column on the left\").\n\t// If the deleted column is the first column of the table, there will be no predecessor: use the cell\n\t// from the column that follows then (also in the same row).\n\telse if ( firstCell.previousSibling || lastCell.nextSibling ) {\n\t\treturn lastCell.nextSibling || firstCell.previousSibling;\n\t}\n\t// It can happen that table cells have no siblings in a row, for instance, when there are row spans\n\t// in the table (in the previous row). Then just look for the closest cell that is in a column\n\t// that will not be removed to put the selection there.\n\telse {\n\t\t// Look for any cell in a column that precedes the first removed column.\n\t\tif ( removedColumnIndexes.first ) {\n\t\t\treturn tableMap.reverse().find( ( { column } ) => {\n\t\t\t\treturn column < removedColumnIndexes.first;\n\t\t\t} )!.cell;\n\t\t}\n\t\t// If the first removed column is the first column of the table, then\n\t\t// look for any cell that is in a column that follows the last removed column.\n\t\telse {\n\t\t\treturn tableMap.reverse().find( ( { column } ) => {\n\t\t\t\treturn column > removedColumnIndexes.last;\n\t\t\t} )!.cell;\n\t\t}\n\t}\n}\n\n/**\n * Returns helper object returning the first and the last cell contained in given selection, based on DOM order.\n */\nfunction getBoundaryCells( selection: ModelSelection | ModelDocumentSelection, tableUtils: TableUtils ) {\n\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( selection );\n\tconst firstCell = referenceCells[ 0 ];\n\tconst lastCell = referenceCells.pop()!;\n\n\tconst returnValue = [ firstCell, lastCell ];\n\n\treturn firstCell.isBefore( lastCell ) ? returnValue : returnValue.reverse();\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../tableutils.js';\n\nimport { updateNumericAttribute } from '../utils/common.js';\nimport { getVerticallyOverlappingCells, splitHorizontally } from '../utils/structure.js';\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n * ```ts\n * editor.execute( 'setTableRowHeader' );\n * ```\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n */\nexport class SetHeaderRowCommand extends Command {\n\t/**\n\t * Flag indicating whether the command is active. The command is active when the\n\t * {@link module:engine/model/selection~ModelSelection} is in a header row.\n\t *\n\t * @observable\n\t */\n\tpublic declare value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\n\t\tif ( selectedCells.length === 0 ) {\n\t\t\tthis.isEnabled = false;\n\t\t\tthis.value = false;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tthis.isEnabled = model.schema.checkAttribute( table, 'headingRows' );\n\t\tthis.value = selectedCells.every( cell => this._isInHeading( cell, cell.parent!.parent as ModelElement ) );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header rows according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst { first, last } = tableUtils.getRowIndexes( selectedCells );\n\t\tconst headingRowsToSet = this.value ? first : last + 1;\n\t\tconst currentHeadingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRowsToSet ) {\n\t\t\t\t// Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n\t\t\t\t// Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n\t\t\t\tconst startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n\t\t\t\tconst overlappingCells = getVerticallyOverlappingCells( table, headingRowsToSet, startRow );\n\n\t\t\t\tfor ( const { cell } of overlappingCells ) {\n\t\t\t\t\tsplitHorizontally( cell, headingRowsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingRows', headingRowsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t */\n\tprivate _isInHeading( tableCell: ModelElement, table: ModelElement ): boolean {\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) as string || '0' );\n\n\t\treturn !!headingRows && ( tableCell.parent as ModelElement ).index! < headingRows;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { type TableUtils } from '../tableutils.js';\n\nimport {\n\tisHeadingColumnCell,\n\tupdateNumericAttribute\n} from '../utils/common.js';\nimport { getHorizontallyOverlappingCells, splitVertically } from '../utils/structure.js';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n * ```ts\n * editor.execute( 'setTableColumnHeader' );\n * ```\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n */\nexport class SetHeaderColumnCommand extends Command {\n\t/**\n\t * Flag indicating whether the command is active. The command is active when the\n\t * {@link module:engine/model/selection~ModelSelection} is in a header column.\n\t *\n\t * @observable\n\t */\n\tpublic declare value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\n\t\tif ( selectedCells.length === 0 ) {\n\t\t\tthis.isEnabled = false;\n\t\t\tthis.value = false;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tthis.isEnabled = model.schema.checkAttribute( table, 'headingColumns' );\n\t\tthis.value = selectedCells.every( cell => isHeadingColumnCell( tableUtils, cell ) );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header columns according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst { first, last } = tableUtils.getColumnIndexes( selectedCells );\n\t\tconst headingColumnsToSet = this.value ? first : last + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingColumnsToSet ) {\n\t\t\t\t// Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n\t\t\t\t// Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n\t\t\t\tconst overlappingCells = getHorizontallyOverlappingCells( table, headingColumnsToSet );\n\n\t\t\t\tfor ( const { cell, column } of overlappingCells ) {\n\t\t\t\t\tsplitVertically( cell, column, headingColumnsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/constants\n */\n\n/**\n * The minimum column width given as a percentage value. Used in situations when the table is not yet rendered, so it is impossible to\n * calculate how many percentage of the table width would be {@link ~COLUMN_MIN_WIDTH_IN_PIXELS minimum column width in pixels}.\n *\n * @internal\n */\nexport const COLUMN_MIN_WIDTH_AS_PERCENTAGE = 5;\n\n/**\n * The minimum column width in pixels when the maximum table width is known.\n * This value is an equivalent of `10%` of the default editor width (600px).\n *\n * @internal\n */\nexport const COLUMN_MIN_WIDTH_IN_PIXELS = 40;\n\n/**\n * Determines how many digits after the decimal point are used to store the column width as a percentage value.\n *\n * @internal\n */\nexport const COLUMN_WIDTH_PRECISION = 2;\n\n/**\n * The distance in pixels that the mouse has to move to start resizing the column.\n *\n * @internal\n */\nexport const COLUMN_RESIZE_DISTANCE_THRESHOLD = 3;\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/utils\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement, Model, ViewElement, ViewNode, ModelWriter } from 'ckeditor5/src/engine.js';\nimport { global } from 'ckeditor5/src/utils.js';\nimport { type TableUtils } from '../tableutils.js';\nimport {\n\tCOLUMN_WIDTH_PRECISION,\n\tCOLUMN_MIN_WIDTH_AS_PERCENTAGE,\n\tCOLUMN_MIN_WIDTH_IN_PIXELS\n} from './constants.js';\n\n/**\n * Returns all the inserted or changed table model elements in a given change set. Only the tables\n * with 'columnsWidth' attribute are taken into account. The returned set may be empty.\n *\n * Most notably if an entire table is removed it will not be included in returned set.\n *\n * @internal\n * @param model The model to collect the affected elements from.\n * @returns A set of table model elements.\n */\nexport function getChangedResizedTables( model: Model ): Set<ModelElement> {\n\tconst affectedTables: Set<ModelElement> = new Set();\n\n\tfor ( const change of model.document.differ.getChanges() ) {\n\t\tlet referencePosition = null;\n\n\t\t// Checks if the particular change from the differ is:\n\t\t// - an insertion or removal of a table, a row or a cell,\n\t\t// - an attribute change on a table, a row or a cell.\n\t\tswitch ( change.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treferencePosition = [ 'table', 'tableRow', 'tableCell' ].includes( change.name ) ?\n\t\t\t\t\tchange.position :\n\t\t\t\t\tnull;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'remove':\n\t\t\t\t// If the whole table is removed, there's no need to update its column widths (#12201).\n\t\t\t\treferencePosition = [ 'tableRow', 'tableCell' ].includes( change.name ) ?\n\t\t\t\t\tchange.position :\n\t\t\t\t\tnull;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'attribute':\n\t\t\t\tif ( change.range.start.nodeAfter ) {\n\t\t\t\t\treferencePosition = [ 'table', 'tableRow', 'tableCell' ].includes(\n\t\t\t\t\t\t( change.range.start.nodeAfter as ModelElement ).name\n\t\t\t\t\t) ?\n\t\t\t\t\t\tchange.range.start :\n\t\t\t\t\t\tnull;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( !referencePosition ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst tableNode = ( referencePosition.nodeAfter && referencePosition.nodeAfter.is( 'element', 'table' ) ) ?\n\t\t\treferencePosition.nodeAfter : referencePosition.findAncestor( 'table' )!;\n\n\t\t// We iterate over the whole table looking for the nested tables that are also affected.\n\t\tfor ( const node of model.createRangeOn( tableNode ).getItems() ) {\n\t\t\tif ( !node.is( 'element', 'table' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( !getColumnGroupElement( node ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\taffectedTables.add( node );\n\t\t}\n\t}\n\n\treturn affectedTables;\n}\n\n/**\n * Calculates the percentage of the minimum column width given in pixels for a given table.\n *\n * @internal\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The minimal column width in percentage.\n */\nexport function getColumnMinWidthAsPercentage( modelTable: ModelElement, editor: Editor ): number {\n\treturn COLUMN_MIN_WIDTH_IN_PIXELS * 100 / getTableWidthInPixels( modelTable, editor );\n}\n\n/**\n * Calculates the table width in pixels.\n *\n * @internal\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The width of the table in pixels.\n */\nexport function getTableWidthInPixels( modelTable: ModelElement, editor: Editor ): number {\n\t// It is possible for a table to not have a <tbody> element - see #11878.\n\tconst referenceElement = getChildrenViewElement( modelTable, 'tbody', editor ) || getChildrenViewElement( modelTable, 'thead', editor );\n\tconst domReferenceElement = editor.editing.view.domConverter.mapViewToDom( referenceElement! )!;\n\n\treturn getElementWidthInPixels( domReferenceElement );\n}\n\n/**\n * Returns the a view element with a given name that is nested directly in a `<table>` element\n * related to a given `modelTable`.\n *\n * @param elementName Name of a view to be looked for, e.g. `'colgroup`', `'thead`'.\n * @returns Matched view or `undefined` otherwise.\n */\nfunction getChildrenViewElement( modelTable: ModelElement, elementName: string, editor: Editor ) {\n\tconst viewFigure = editor.editing.mapper.toViewElement( modelTable )!;\n\tconst viewTable = [ ...viewFigure.getChildren() ]\n\t\t.find( ( node: ViewNode ): node is ViewElement & { name: 'table' } => node.is( 'element', 'table' ) )!;\n\n\treturn [ ...viewTable.getChildren() ]\n\t\t.find( ( node: ViewNode ): node is ViewElement => node.is( 'element', elementName ) );\n}\n\n/**\n * Returns the computed width (in pixels) of the DOM element without padding and borders.\n *\n * @internal\n * @param domElement A DOM element.\n * @returns The width of the DOM element in pixels.\n */\nexport function getElementWidthInPixels( domElement: HTMLElement ): number {\n\tconst styles = global.window.getComputedStyle( domElement );\n\n\t// In the 'border-box' box sizing algorithm, the element's width\n\t// already includes the padding and border width (#12335).\n\tif ( styles.boxSizing === 'border-box' ) {\n\t\treturn parseFloat( styles.width ) -\n\t\t\tparseFloat( styles.paddingLeft ) -\n\t\t\tparseFloat( styles.paddingRight ) -\n\t\t\tparseFloat( styles.borderLeftWidth ) -\n\t\t\tparseFloat( styles.borderRightWidth );\n\t} else {\n\t\treturn parseFloat( styles.width );\n\t}\n}\n\n/**\n * Returns the column indexes on the left and right edges of a cell. They differ if the cell spans\n * across multiple columns.\n *\n * @internal\n * @param cell A table cell model element.\n * @param tableUtils The Table Utils plugin instance.\n * @returns An object containing the indexes of the left and right edges of the cell.\n */\nexport function getColumnEdgesIndexes( cell: ModelElement, tableUtils: TableUtils ): { leftEdge: number; rightEdge: number } {\n\tconst cellColumnIndex = tableUtils.getCellLocation( cell ).column;\n\tconst cellWidth = cell.getAttribute( 'colspan' ) as number || 1;\n\n\treturn {\n\t\tleftEdge: cellColumnIndex,\n\t\trightEdge: cellColumnIndex + cellWidth - 1\n\t};\n}\n\n/**\n * Rounds the provided value to a fixed-point number with defined number of digits after the decimal point.\n *\n * @internal\n * @param value A number to be rounded.\n * @returns The rounded number.\n */\nexport function toPrecision( value: number | string ): number {\n\tconst multiplier = Math.pow( 10, COLUMN_WIDTH_PRECISION );\n\tconst number = typeof value === 'number' ? value : parseFloat( value );\n\n\treturn Math.round( number * multiplier ) / multiplier;\n}\n\n/**\n * Clamps the number within the inclusive lower (min) and upper (max) bounds. Returned number is rounded using the\n * {@link ~toPrecision `toPrecision()`} function.\n *\n * @internal\n * @param number A number to be clamped.\n * @param min A lower bound.\n * @param max An upper bound.\n * @returns The clamped number.\n */\nexport function clamp( number: number, min: number, max: number ): number {\n\tif ( number <= min ) {\n\t\treturn toPrecision( min );\n\t}\n\n\tif ( number >= max ) {\n\t\treturn toPrecision( max );\n\t}\n\n\treturn toPrecision( number );\n}\n\n/**\n * Creates an array with defined length and fills all elements with defined value.\n *\n * @internal\n * @param length The length of the array.\n * @param value The value to fill the array with.\n * @returns An array with defined length and filled with defined value.\n */\nexport function createFilledArray<T>( length: number, value: T ): Array<T> {\n\treturn Array( length ).fill( value );\n}\n\n/**\n * Sums all array values that can be parsed to a float.\n *\n * @internal\n * @param array An array of numbers.\n * @returns The sum of all array values.\n */\nexport function sumArray( array: Array<number | string> ): number {\n\treturn array\n\t\t.map( value => typeof value === 'number' ? value : parseFloat( value ) )\n\t\t.filter( value => !Number.isNaN( value ) )\n\t\t.reduce( ( result, item ) => result + item, 0 );\n}\n\n/**\n * Makes sure that the sum of the widths from all columns is 100%. If the sum of all the widths is not equal 100%, all the widths are\n * changed proportionally so that they all sum back to 100%. If there are columns without specified width, the amount remaining\n * after assigning the known widths will be distributed equally between them.\n *\n * @internal\n * @param columnWidths An array of column widths.\n * @returns An array of column widths guaranteed to sum up to 100%.\n */\nexport function normalizeColumnWidths( columnWidths: Array<string> ): Array<string> {\n\tconst widths: Array<number | 'auto'> = columnWidths.map( width => {\n\t\tif ( width === 'auto' || width === undefined ) {\n\t\t\treturn 'auto';\n\t\t}\n\n\t\treturn parseFloat( width.replace( '%', '' ) );\n\t} );\n\n\tlet normalizedWidths: Array<number> = calculateMissingColumnWidths( widths );\n\tconst totalWidth = sumArray( normalizedWidths );\n\n\tif ( totalWidth !== 100 ) {\n\t\tnormalizedWidths = normalizedWidths\n\t\t\t// Adjust all the columns proportionally.\n\t\t\t.map( width => toPrecision( width * 100 / totalWidth ) )\n\t\t\t// Due to rounding of numbers it may happen that the sum of the widths of all columns will not be exactly 100%.\n\t\t\t// Therefore, the width of the last column is explicitly adjusted (narrowed or expanded), since all the columns\n\t\t\t// have been proportionally changed already.\n\t\t\t.map( ( columnWidth, columnIndex, width ) => {\n\t\t\t\tconst isLastColumn = columnIndex === width.length - 1;\n\n\t\t\t\tif ( !isLastColumn ) {\n\t\t\t\t\treturn columnWidth;\n\t\t\t\t}\n\n\t\t\t\tconst totalWidth = sumArray( width );\n\n\t\t\t\treturn toPrecision( columnWidth + 100 - totalWidth );\n\t\t\t} );\n\t}\n\n\treturn normalizedWidths.map( width => width + '%' );\n}\n\n/**\n * Initializes the column widths by parsing the attribute value and calculating the uninitialized column widths. The special value 'auto'\n * indicates that width for the column must be calculated. The width of such uninitialized column is calculated as follows:\n * - If there is enough free space in the table for all uninitialized columns to have at least the minimum allowed width for all of them,\n *   then set this width equally for all uninitialized columns.\n * - Otherwise, just set the minimum allowed width for all uninitialized columns. The sum of all column widths will be greater than 100%,\n *   but then it will be adjusted proportionally to 100% in {@link #normalizeColumnWidths `normalizeColumnWidths()`}.\n *\n * @param columnWidths An array of column widths.\n * @returns An array with 'auto' values replaced with calculated widths.\n */\nfunction calculateMissingColumnWidths( columnWidths: Array<number | string> ): Array<number> {\n\tconst numberOfUninitializedColumns = columnWidths.filter( columnWidth => columnWidth === 'auto' ).length;\n\n\tif ( numberOfUninitializedColumns === 0 ) {\n\t\treturn columnWidths.map( columnWidth => toPrecision( columnWidth ) );\n\t}\n\n\tconst totalWidthOfInitializedColumns = sumArray( columnWidths );\n\n\tconst widthForUninitializedColumn = Math.max(\n\t\t( 100 - totalWidthOfInitializedColumns ) / numberOfUninitializedColumns,\n\t\tCOLUMN_MIN_WIDTH_AS_PERCENTAGE\n\t);\n\n\treturn columnWidths\n\t\t.map( columnWidth => columnWidth === 'auto' ? widthForUninitializedColumn : columnWidth )\n\t\t.map( columnWidth => toPrecision( columnWidth ) );\n}\n\n/**\n * Calculates the total horizontal space taken by the cell. That includes:\n *  * width,\n *  * left and red padding,\n *  * border width.\n *\n * @internal\n * @param domCell A DOM cell element.\n * @returns Width in pixels without `px` at the end.\n */\nexport function getDomCellOuterWidth( domCell: HTMLElement ): number {\n\tconst styles = global.window.getComputedStyle( domCell );\n\n\t// In the 'border-box' box sizing algorithm, the element's width\n\t// already includes the padding and border width (#12335).\n\tif ( styles.boxSizing === 'border-box' ) {\n\t\treturn parseInt( styles.width );\n\t} else {\n\t\treturn parseFloat( styles.width ) +\n\t\t\tparseFloat( styles.paddingLeft ) +\n\t\t\tparseFloat( styles.paddingRight ) +\n\t\t\tparseFloat( styles.borderWidth );\n\t}\n}\n\n/**\n * Updates column elements to match columns widths.\n *\n * @internal\n * @param columns\n * @param tableColumnGroup\n * @param normalizedWidths\n * @param writer\n */\nexport function updateColumnElements(\n\tcolumns: Array<ModelElement>,\n\ttableColumnGroup: ModelElement,\n\tnormalizedWidths: Array<string>,\n\twriter: ModelWriter\n): void {\n\tfor ( let i = 0; i < Math.max( normalizedWidths.length, columns.length ); i++ ) {\n\t\tconst column = columns[ i ];\n\t\tconst columnWidth = normalizedWidths[ i ];\n\n\t\tif ( !columnWidth ) {\n\t\t\t// Number of `<tableColumn>` elements exceeds actual number of columns.\n\t\t\twriter.remove( column );\n\t\t} else if ( !column ) {\n\t\t\t// There is fewer `<tableColumn>` elements than actual columns.\n\t\t\twriter.appendElement( 'tableColumn', { columnWidth }, tableColumnGroup );\n\t\t} else {\n\t\t\t// Update column width.\n\t\t\twriter.setAttribute( 'columnWidth', columnWidth, column );\n\t\t}\n\t}\n}\n\n/**\n * Returns a 'tableColumnGroup' element from the 'table'.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns A 'tableColumnGroup' element.\n */\nexport function getColumnGroupElement( element: ModelElement ): ModelElement {\n\tif ( element.is( 'element', 'tableColumnGroup' ) ) {\n\t\treturn element;\n\t}\n\n\tconst children = element.getChildren()!;\n\n\treturn Array\n\t\t.from( children )\n\t\t.find( element => element.is( 'element', 'tableColumnGroup' ) )! as ModelElement;\n}\n\n/**\n * Returns an array of 'tableColumn' elements. It may be empty if there's no `tableColumnGroup` element.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of 'tableColumn' elements.\n */\nexport function getTableColumnElements( element: ModelElement ): Array<ModelElement> {\n\tconst columnGroupElement = getColumnGroupElement( element );\n\n\tif ( !columnGroupElement ) {\n\t\treturn [];\n\t}\n\n\treturn Array.from( columnGroupElement.getChildren() as IterableIterator<ModelElement> );\n}\n\n/**\n * Returns an array of table column widths.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of table column widths.\n */\nexport function getTableColumnsWidths( element: ModelElement ): Array<string> {\n\treturn getTableColumnElements( element ).map( column => column.getAttribute( 'columnWidth' ) as string );\n}\n\n/**\n * Translates the `colSpan` model attribute into additional column widths and returns the resulting array.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @param writer A writer instance.\n * @returns An array of table column widths.\n */\nexport function translateColSpanAttribute( element: ModelElement, writer: ModelWriter ): Array<string> {\n\tconst tableColumnElements = getTableColumnElements( element );\n\n\treturn tableColumnElements.reduce( ( acc: Array<string>, element ) => {\n\t\tconst columnWidth = element.getAttribute( 'columnWidth' ) as string;\n\t\tconst colSpan = element.getAttribute( 'colSpan' ) as number | undefined;\n\n\t\tif ( !colSpan ) {\n\t\t\tacc.push( columnWidth );\n\t\t\treturn acc;\n\t\t}\n\n\t\t// Translate the `colSpan` model attribute on to the proper number of column widths\n\t\t// and remove it from the element.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n\t\tfor ( let i = 0; i < colSpan; i++ ) {\n\t\t\tacc.push( columnWidth );\n\t\t}\n\n\t\twriter.removeAttribute( 'colSpan', element );\n\n\t\treturn acc;\n\t}, [] );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableutils\n */\n\nimport { CKEditorError } from 'ckeditor5/src/utils.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type {\n\tModelDocumentSelection,\n\tModelElement,\n\tModelNode,\n\tModelPosition,\n\tModelRange,\n\tModelSelection,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { TableWalker, type TableWalkerOptions } from './tablewalker.js';\nimport { createEmptyTableCell, updateNumericAttribute } from './utils/common.js';\nimport { removeEmptyColumns, removeEmptyRows } from './utils/structure.js';\nimport { getTableColumnElements } from './tablecolumnresize/utils.js';\n\ntype Cell = { cell: ModelElement; rowspan: number };\ntype CellsToMove = Map<number, Cell>;\ntype CellsToTrim = Array<Cell>;\n\nexport type TableIndexesObject = { first: number; last: number };\n\n/**\n * The table utilities plugin.\n */\nexport class TableUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tthis.decorate( 'insertColumns' );\n\t\tthis.decorate( 'insertRows' );\n\t}\n\n\t/**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance, in the table below:\n\t *\n\t *      0   1   2   3\n\t *    +---+---+---+---+\n\t *  0 | a     | b | c |\n\t *    +       +   +---+\n\t *  1 |       |   | d |\n\t *    +---+---+   +---+\n\t *  2 | e     |   | f |\n\t *    +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t * ```ts\n\t * const cellA = table.getNodeByPath( [ 0, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t * // will return { row: 0, column: 0 }\n\t *\n\t * const cellD = table.getNodeByPath( [ 1, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t * // will return { row: 1, column: 3 }\n\t * ```\n\t *\n\t * @returns Returns a `{row, column}` object.\n\t */\n\tpublic getCellLocation( tableCell: ModelElement ): { row: number; column: number } {\n\t\tconst tableRow = tableCell.parent!;\n\t\tconst table = tableRow.parent as ModelElement;\n\n\t\tconst rowIndex = table.getChildIndex( tableRow as ModelNode );\n\n\t\tconst tableWalker = new TableWalker( table, { row: rowIndex } );\n\n\t\tfor ( const { cell, row, column } of tableWalker ) {\n\t\t\tif ( cell === tableCell ) {\n\t\t\t\treturn { row, column };\n\t\t\t}\n\t\t}\n\n\t\t// Should be unreachable code.\n\t\t/* istanbul ignore next -- @preserve */\n\t\treturn undefined as any;\n\t}\n\n\t/**\n\t * Creates an empty table with a proper structure. The table needs to be inserted into the model,\n\t * for example, by using the {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t * ```ts\n\t * model.change( ( writer ) => {\n\t *   // Create a table of 2 rows and 7 columns:\n\t *   const table = tableUtils.createTable( writer, { rows: 2, columns: 7 } );\n\t *\n\t *   // Insert a table to the model at the best position taking the current selection:\n\t *   model.insertContent( table );\n\t * }\n\t * ```\n\t *\n\t * @param writer The model writer.\n\t * @param options.rows The number of rows to create. Default value is 2.\n\t * @param options.columns The number of columns to create. Default value is 2.\n\t * @param options.headingRows The number of heading rows. Default value is 0.\n\t * @param options.headingColumns The number of heading columns. Default value is 0.\n\t * @returns The created table element.\n\t */\n\tpublic createTable(\n\t\twriter: ModelWriter,\n\t\toptions: {\n\t\t\trows?: number;\n\t\t\tcolumns?: number;\n\t\t\theadingRows?: number;\n\t\t\theadingColumns?: number;\n\t\t}\n\t): ModelElement {\n\t\tconst table = writer.createElement( 'table' );\n\n\t\tconst rows = options.rows || 2;\n\t\tconst columns = options.columns || 2;\n\n\t\tcreateEmptyRows( writer, table, 0, rows, columns );\n\n\t\tif ( options.headingRows ) {\n\t\t\tupdateNumericAttribute( 'headingRows', Math.min( options.headingRows, rows ), table, writer, 0 );\n\t\t}\n\n\t\tif ( options.headingColumns ) {\n\t\t\tupdateNumericAttribute( 'headingColumns', Math.min( options.headingColumns, columns ), table, writer, 0 );\n\t\t}\n\n\t\treturn table;\n\t}\n\n\t/**\n\t * Inserts rows into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  row index\n\t *    0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *      | a | b | c |       `rows` = 2,    | a | b | c |\n\t *    1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *      |   | d | e |                      |   |   |   |\n\t *    2 +   +---+---+       will give:     +   +---+---+ 2\n\t *      |   | f | g |                      |   |   |   |\n\t *    3 +---+---+---+                      +   +---+---+ 3\n\t *                                         |   | d | e |\n\t *                                         +   +---+---+ 4\n\t *                                         +   + f | g |\n\t *                                         +---+---+---+ 5\n\t *\n\t * @param table The table model element where the rows will be inserted.\n\t * @param options.at The row index at which the rows will be inserted.  Default value is 0.\n\t * @param options.rows The number of rows to insert.  Default value is 1.\n\t * @param options.copyStructureFromAbove The flag for copying row structure. Note that\n\t * the row structure will not be copied if this option is not provided.\n\t */\n\tpublic insertRows( table: ModelElement, options: { at?: number; rows?: number; copyStructureFromAbove?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst rowsToInsert = options.rows || 1;\n\t\tconst isCopyStructure = options.copyStructureFromAbove !== undefined;\n\t\tconst copyStructureFrom = options.copyStructureFromAbove ? insertAt - 1 : insertAt;\n\n\t\tconst rows = this.getRows( table );\n\t\tconst columns = this.getColumns( table );\n\n\t\tif ( insertAt > rows ) {\n\t\t\t/**\n\t\t\t * The `options.at` points at a row position that does not exist.\n\t\t\t *\n\t\t\t * @error tableutils-insertrows-insert-out-of-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'tableutils-insertrows-insert-out-of-range',\n\t\t\t\tthis,\n\t\t\t\t{ options }\n\t\t\t);\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t\t\t// Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n\t\t\tif ( headingRows > insertAt ) {\n\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + rowsToInsert, table, writer, 0 );\n\t\t\t}\n\n\t\t\t// Inserting at the end or at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( !isCopyStructure && ( insertAt === 0 || insertAt === rows ) ) {\n\t\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, columns );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iterate over all the rows above the inserted rows in order to check for the row-spanned cells.\n\t\t\tconst walkerEndRow = isCopyStructure ? Math.max( insertAt, copyStructureFrom ) : insertAt;\n\t\t\tconst tableIterator = new TableWalker( table, { endRow: walkerEndRow } );\n\n\t\t\t// Store spans of the reference row to reproduce it's structure. This array is column number indexed.\n\t\t\tconst rowColSpansMap = new Array( columns ).fill( 1 );\n\n\t\t\tfor ( const { row, column, cellHeight, cellWidth, cell } of tableIterator ) {\n\t\t\t\tconst lastCellRow = row + cellHeight - 1;\n\n\t\t\t\tconst isOverlappingInsertedRow = row < insertAt && insertAt <= lastCellRow;\n\t\t\t\tconst isReferenceRow = row <= copyStructureFrom && copyStructureFrom <= lastCellRow;\n\n\t\t\t\t// If the cell is row-spanned and overlaps the inserted row, then reserve space for it in the row map.\n\t\t\t\tif ( isOverlappingInsertedRow ) {\n\t\t\t\t\t// This cell overlaps the inserted rows so we need to expand it further.\n\t\t\t\t\twriter.setAttribute( 'rowspan', cellHeight + rowsToInsert, cell );\n\n\t\t\t\t\t// Mark this cell with negative number to indicate how many cells should be skipped when adding the new cells.\n\t\t\t\t\trowColSpansMap[ column ] = -cellWidth;\n\t\t\t\t}\n\t\t\t\t// Store the colspan from reference row.\n\t\t\t\telse if ( isCopyStructure && isReferenceRow ) {\n\t\t\t\t\trowColSpansMap[ column ] = cellWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( let rowIndex = 0; rowIndex < rowsToInsert; rowIndex++ ) {\n\t\t\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\t\t\twriter.insert( tableRow, table, insertAt );\n\n\t\t\t\tfor ( let cellIndex = 0; cellIndex < rowColSpansMap.length; cellIndex++ ) {\n\t\t\t\t\tconst colspan = rowColSpansMap[ cellIndex ];\n\t\t\t\t\tconst insertPosition = writer.createPositionAt( tableRow, 'end' );\n\n\t\t\t\t\t// Insert the empty cell only if this slot is not row-spanned from any other cell.\n\t\t\t\t\tif ( colspan > 0 ) {\n\t\t\t\t\t\tcreateEmptyTableCell( writer, insertPosition, colspan > 1 ? { colspan } : undefined );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Skip the col-spanned slots, there won't be any cells.\n\t\t\t\t\tcellIndex += Math.abs( colspan ) - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts columns into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  0   1   2   3                   0   1   2   3   4   5\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | a     | b |                   | a             | b |\n\t *  +       +---+                   +               +---+\n\t *  |       | c |                   |               | c |\n\t *  +---+---+---+     will give:    +---+---+---+---+---+\n\t *  | d | e | f |                   | d |   |   | e | f |\n\t *  +---+   +---+                   +---+---+---+   +---+\n\t *  | g |   | h |                   | g |   |   |   | h |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | i         |                   | i                 |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *      ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param table The table model element where the columns will be inserted.\n\t * @param options.at The column index at which the columns will be inserted. Default value is 0.\n\t * @param options.columns The number of columns to insert. Default value is 1.\n\t */\n\tpublic insertColumns( table: ModelElement, options: { at?: number; columns?: number } = {} ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst columnsToInsert = options.columns || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number;\n\n\t\t\t// Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n\t\t\tif ( insertAt < headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns + columnsToInsert, table );\n\t\t\t}\n\n\t\t\tconst tableColumns = this.getColumns( table );\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || tableColumns === insertAt ) {\n\t\t\t\tfor ( const tableRow of table.getChildren() ) {\n\t\t\t\t\t// Ignore non-row elements inside the table (e.g. caption).\n\t\t\t\t\tif ( !tableRow.is( 'element', 'tableRow' ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tcreateCells( columnsToInsert, writer, writer.createPositionAt( tableRow, insertAt ? 'end' : 0 ) );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableWalker = new TableWalker( table, { column: insertAt, includeAllSlots: true } );\n\n\t\t\tfor ( const tableSlot of tableWalker ) {\n\t\t\t\tconst { row, cell, cellAnchorColumn, cellAnchorRow, cellWidth, cellHeight } = tableSlot;\n\n\t\t\t\t// When iterating over column the table walker outputs either:\n\t\t\t\t// - cells at given column index (cell \"e\" from method docs),\n\t\t\t\t// - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeAllSlots: true`),\n\t\t\t\t// - or a cell from the same row which spans over this column (cell \"a\").\n\n\t\t\t\tif ( cellAnchorColumn < insertAt ) {\n\t\t\t\t\t// If cell is anchored in previous column, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n\t\t\t\t\t// For such cells expand them by a number of columns inserted.\n\t\t\t\t\twriter.setAttribute( 'colspan', cellWidth + columnsToInsert, cell );\n\n\t\t\t\t\t// This cell will overlap cells in rows below so skip them (because of `includeAllSlots` option) - (cell \"a\")\n\t\t\t\t\tconst lastCellRow = cellAnchorRow + cellHeight - 1;\n\n\t\t\t\t\tfor ( let i = row; i <= lastCellRow; i++ ) {\n\t\t\t\t\t\ttableWalker.skipRow( i );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// It's either cell at this column index or spanned cell by a row-spanned cell from row above.\n\t\t\t\t\t// In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n\t\t\t\t\tcreateCells( columnsToInsert, writer, tableSlot.getPositionBefore() );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Removes rows from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including `rowspan` attribute of table cells overlapping removed rows\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *  row index\n\t *      ┌───┬───┬───┐        `at` = 1        ┌───┬───┬───┐\n\t *    0 │ a │ b │ c │        `rows` = 2      │ a │ b │ c │ 0\n\t *      │   ├───┼───┤                        │   ├───┼───┤\n\t *    1 │   │ d │ e │  <-- remove from here  │   │ d │ g │ 1\n\t *      │   │   ├───┤        will give:      ├───┼───┼───┤\n\t *    2 │   │   │ f │                        │ h │ i │ j │ 2\n\t *      │   │   ├───┤                        └───┴───┴───┘\n\t *    3 │   │   │ g │\n\t *      ├───┼───┼───┤\n\t *    4 │ h │ i │ j │\n\t *      └───┴───┴───┘\n\t *\n\t * @param options.at The row index at which the removing rows will start.\n\t * @param options.rows The number of rows to remove. Default value is 1.\n\t */\n\tpublic removeRows( table: ModelElement, options: { at: number; rows?: number } ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst rowsToRemove = options.rows || 1;\n\t\tconst rowCount = this.getRows( table );\n\t\tconst first = options.at;\n\t\tconst last = first + rowsToRemove - 1;\n\n\t\tif ( last > rowCount - 1 ) {\n\t\t\t/**\n\t\t\t * The `options.at` param must point at existing row and `options.rows` must not exceed the rows in the table.\n\t\t\t *\n\t\t\t * @error tableutils-removerows-row-index-out-of-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'tableutils-removerows-row-index-out-of-range',\n\t\t\t\tthis,\n\t\t\t\t{ table, options }\n\t\t\t);\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst indexesObject = { first, last };\n\n\t\t\t// Removing rows from the table require that most calculations to be done prior to changing table structure.\n\t\t\t// Preparations must be done in the same enqueueChange callback to use the current table structure.\n\n\t\t\t// 1. Preparation - get row-spanned cells that have to be modified after removing rows.\n\t\t\tconst { cellsToMove, cellsToTrim } = getCellsToMoveAndTrimOnRemoveRow( table, indexesObject );\n\n\t\t\t// 2. Execution\n\n\t\t\t// 2a. Move cells from removed rows that extends over a removed section - must be done before removing rows.\n\t\t\t// This will fill any gaps in a rows below that previously were empty because of row-spanned cells.\n\t\t\tif ( cellsToMove.size ) {\n\t\t\t\tconst rowAfterRemovedSection = last + 1;\n\t\t\t\tmoveCellsToRow( table, rowAfterRemovedSection, cellsToMove, writer );\n\t\t\t}\n\n\t\t\t// 2b. Remove all required rows.\n\t\t\tfor ( let i = last; i >= first; i-- ) {\n\t\t\t\twriter.remove( table.getChild( i )! );\n\t\t\t}\n\n\t\t\t// 2c. Update cells from rows above that overlap removed section. Similar to step 2 but does not involve moving cells.\n\t\t\tfor ( const { rowspan, cell } of cellsToTrim ) {\n\t\t\t\tupdateNumericAttribute( 'rowspan', rowspan, cell, writer );\n\t\t\t}\n\n\t\t\t// 2d. Adjust heading rows if removed rows were in a heading section.\n\t\t\tupdateHeadingRows( table, indexesObject, writer );\n\n\t\t\t// 2e. Remove empty columns (without anchored cells) if there are any.\n\t\t\tif ( !removeEmptyColumns( table, this ) ) {\n\t\t\t\t// If there wasn't any empty columns then we still need to check if this wasn't called\n\t\t\t\t// because of cleaning empty rows and we only removed one of them.\n\t\t\t\tremoveEmptyRows( table, this );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Removes columns from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including the `colspan` attribute of table cells overlapping removed columns\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *    0   1   2   3   4                       0   1   2\n\t *  ┌───────────────┬───┐                   ┌───────┬───┐\n\t *  │ a             │ b │                   │ a     │ b │\n\t *  │               ├───┤                   │       ├───┤\n\t *  │               │ c │                   │       │ c │\n\t *  ├───┬───┬───┬───┼───┤     will give:    ├───┬───┼───┤\n\t *  │ d │ e │ f │ g │ h │                   │ d │ g │ h │\n\t *  ├───┼───┼───┤   ├───┤                   ├───┤   ├───┤\n\t *  │ i │ j │ k │   │ l │                   │ i │   │ l │\n\t *  ├───┴───┴───┴───┴───┤                   ├───┴───┴───┤\n\t *  │ m                 │                   │ m         │\n\t *  └───────────────────┘                   └───────────┘\n\t *        ^---- remove from here, `at` = 1, `columns` = 2\n\t *\n\t * @param options.at The row index at which the removing columns will start.\n\t * @param options.columns The number of columns to remove.\n\t */\n\tpublic removeColumns( table: ModelElement, options: { at: number; columns?: number } ): void {\n\t\tconst model = this.editor.model;\n\t\tconst first = options.at;\n\t\tconst columnsToRemove = options.columns || 1;\n\t\tconst last = options.at + columnsToRemove - 1;\n\n\t\tmodel.change( writer => {\n\t\t\tadjustHeadingColumns( table, { first, last }, writer );\n\t\t\tconst tableColumns = getTableColumnElements( table );\n\n\t\t\tfor ( let removedColumnIndex = last; removedColumnIndex >= first; removedColumnIndex-- ) {\n\t\t\t\tfor ( const { cell, column, cellWidth } of [ ...new TableWalker( table ) ] ) {\n\t\t\t\t\t// If colspaned cell overlaps removed column decrease its span.\n\t\t\t\t\tif ( column <= removedColumnIndex && cellWidth > 1 && column + cellWidth > removedColumnIndex ) {\n\t\t\t\t\t\tupdateNumericAttribute( 'colspan', cellWidth - 1, cell, writer );\n\t\t\t\t\t} else if ( column === removedColumnIndex ) {\n\t\t\t\t\t\t// The cell in removed column has colspan of 1.\n\t\t\t\t\t\twriter.remove( cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If table has `tableColumn` elements, we need to update it manually.\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for details.\n\t\t\t\tif ( tableColumns[ removedColumnIndex ] ) {\n\t\t\t\t\t// If the removed column is the first one then we need to add its width to the next column.\n\t\t\t\t\t// Otherwise we add it to the previous column.\n\t\t\t\t\tconst adjacentColumn = removedColumnIndex === 0 ? tableColumns[ 1 ] : tableColumns[ removedColumnIndex - 1 ];\n\n\t\t\t\t\tconst removedColumnWidth = parseFloat( tableColumns[ removedColumnIndex ].getAttribute( 'columnWidth' ) as string );\n\t\t\t\t\tconst adjacentColumnWidth = parseFloat( adjacentColumn.getAttribute( 'columnWidth' ) as string );\n\n\t\t\t\t\twriter.remove( tableColumns[ removedColumnIndex ] );\n\n\t\t\t\t\t// Add the removed column width (in %) to the adjacent column.\n\t\t\t\t\twriter.setAttribute( 'columnWidth', removedColumnWidth + adjacentColumnWidth + '%', adjacentColumn );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove empty rows that could appear after removing columns.\n\t\t\tif ( !removeEmptyRows( table, this ) ) {\n\t\t\t\t// If there wasn't any empty rows then we still need to check if this wasn't called\n\t\t\t\t// because of cleaning empty columns and we only removed one of them.\n\t\t\t\tremoveEmptyColumns( table, this );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *  +---+---+---+---+---+\n\t *  | a |   |   | b | c |\n\t *  +---+---+---+---+---+\n\t *  | d         | e | f |\n\t *  +---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a         |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` into 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a     |   |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t */\n\tpublic splitCellVertically( tableCell: ModelElement, numberOfCells = 2 ): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableRow = tableCell.parent!;\n\t\tconst table = tableRow.parent as ModelElement;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( colspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'colspan', updatedSpan, tableCell, writer );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes: { colspan?: number; rowspan?: number } = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tconst cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\t\t\t}\n\n\t\t\t// Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n\t\t\tif ( colspan < numberOfCells ) {\n\t\t\t\tconst cellsToInsert = numberOfCells - colspan;\n\n\t\t\t\t// First step: expand cells on the same column as split cell.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t\t\t// Get the column index of split cell.\n\t\t\t\tconst { column: splitCellColumn } = tableMap.find( ( { cell } ) => cell === tableCell )!;\n\n\t\t\t\t// Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n\t\t\t\tconst cellsToUpdate = tableMap.filter( ( { cell, cellWidth, column } ) => {\n\t\t\t\t\tconst isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n\t\t\t\t\tconst spansOverColumn = ( column < splitCellColumn && column + cellWidth > splitCellColumn );\n\n\t\t\t\t\treturn isOnSameColumn || spansOverColumn;\n\t\t\t\t} );\n\n\t\t\t\t// Expand cells vertically.\n\t\t\t\tfor ( const { cell, cellWidth } of cellsToUpdate ) {\n\t\t\t\t\twriter.setAttribute( 'colspan', cellWidth + cellsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Second step: create columns after split cell.\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes: { rowspan?: number } = {};\n\n\t\t\t\t// Do not store default value in the model.\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\n\t\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tif ( headingColumns > splitCellColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingColumns', headingColumns + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +   +---+---+\n\t *  |   | f | g |\n\t *  +   +---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` into 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +---+---+---+\n\t *  |   | f | g |\n\t *  +---+---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t */\n\tpublic splitCellHorizontally( tableCell: ModelElement, numberOfCells = 2 ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst tableRow = tableCell.parent as ModelNode;\n\t\tconst table = tableRow.parent! as ModelElement;\n\t\tconst splitCellRow = table.getChildIndex( tableRow )!;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t// Cache table map before updating table.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, {\n\t\t\t\t\tstartRow: splitCellRow,\n\t\t\t\t\tendRow: splitCellRow + rowspan - 1,\n\t\t\t\t\tincludeAllSlots: true\n\t\t\t\t} ) ];\n\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( rowspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'rowspan', updatedSpan, tableCell, writer );\n\n\t\t\t\tconst { column: cellColumn } = tableMap.find( ( { cell } ) => cell === tableCell )!;\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes: { rowspan?: number; colspan?: number } = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\t// Accumulator that stores distance from the last inserted cell span.\n\t\t\t\t// It helps with evenly splitting larger cell spans (for example 10 cells collapsing into 3 cells).\n\t\t\t\t// We split these cells into 3, 3, 4 cells and we have to call `createCells` only when distance between\n\t\t\t\t// these cells is equal or greater than the new cells span size.\n\t\t\t\tlet distanceFromLastCellSpan = 0;\n\n\t\t\t\tfor ( const tableSlot of tableMap ) {\n\t\t\t\t\tconst { column, row } = tableSlot;\n\n\t\t\t\t\t// As both newly created cells and the split cell might have rowspan,\n\t\t\t\t\t// the insertion of new cells must go to appropriate rows:\n\t\t\t\t\t//\n\t\t\t\t\t// 1. It's a row after split cell + it's height.\n\t\t\t\t\tconst isAfterSplitCell = row >= splitCellRow + updatedSpan;\n\n\t\t\t\t\t// 2. Is on the same column.\n\t\t\t\t\tconst isOnSameColumn = column === cellColumn;\n\n\t\t\t\t\t// Reset distance from the last cell span if we are on the same column and we exceeded the new cells span size.\n\t\t\t\t\tif ( distanceFromLastCellSpan >= newCellsSpan && isOnSameColumn ) {\n\t\t\t\t\t\tdistanceFromLastCellSpan = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isAfterSplitCell && isOnSameColumn ) {\n\t\t\t\t\t\t// Create new cells only if the distance from the last cell span is equal or greater than the new cells span.\n\t\t\t\t\t\tif ( !distanceFromLastCellSpan ) {\n\t\t\t\t\t\t\tcreateCells( 1, writer, tableSlot.getPositionBefore(), newCellsAttributes );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Increase the distance from the last cell span.\n\t\t\t\t\t\tdistanceFromLastCellSpan++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n\t\t\tif ( rowspan < numberOfCells ) {\n\t\t\t\t// We already split the cell in check one so here we split to the remaining number of cells only.\n\t\t\t\tconst cellsToInsert = numberOfCells - rowspan;\n\n\t\t\t\t// This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, { startRow: 0, endRow: splitCellRow } ) ];\n\n\t\t\t\t// First step: expand cells.\n\t\t\t\tfor ( const { cell, cellHeight, row } of tableMap ) {\n\t\t\t\t\t// Expand rowspan of cells that are either:\n\t\t\t\t\t// - on the same row as current cell,\n\t\t\t\t\t// - or are below split cell row and overlaps that row.\n\t\t\t\t\tif ( cell !== tableCell && row + cellHeight > splitCellRow ) {\n\t\t\t\t\t\tconst rowspanToSet = cellHeight + cellsToInsert;\n\n\t\t\t\t\t\twriter.setAttribute( 'rowspan', rowspanToSet, cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Second step: create rows with single cell below split cell.\n\t\t\t\tconst newCellsAttributes: { colspan?: number } = {};\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tcreateEmptyRows( writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes );\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t\t\t\tif ( headingRows > splitCellRow ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the number of columns for a given table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getColumns( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */\n\tpublic getColumns( table: ModelElement ): number {\n\t\t// Analyze first row only as all the rows should have the same width.\n\t\t// Using the first row without checking if it's a tableRow because we expect\n\t\t// that table will have only tableRow model elements at the beginning.\n\t\tconst row = table.getChild( 0 ) as ModelElement;\n\n\t\treturn [ ...row.getChildren() ]\n\t\t\t// $marker elements can also be children of a row too (when TrackChanges is on). Don't include them in the count.\n\t\t\t.filter( node => node.is( 'element', 'tableCell' ) )\n\t\t\t.reduce( ( columns, row ) => {\n\t\t\t\tconst columnWidth = parseInt( row.getAttribute( 'colspan' ) as string || '1' );\n\n\t\t\t\treturn columns + columnWidth;\n\t\t\t}, 0 );\n\t}\n\n\t/**\n\t * Returns the number of rows for a given table. Any other element present in the table model is omitted.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getRows( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */\n\tpublic getRows( table: ModelElement ): number {\n\t\t// Rowspan not included due to #6427.\n\t\treturn Array.from( table.getChildren() )\n\t\t\t.reduce( ( rowCount, child ) => child.is( 'element', 'tableRow' ) ? rowCount + 1 : rowCount, 0 );\n\t}\n\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the options.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option.\n\t *\n\t * @internal\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t */\n\tpublic createTableWalker( table: ModelElement, options: TableWalkerOptions = {} ): TableWalker {\n\t\treturn new TableWalker( table, options );\n\t}\n\n\t/**\n\t * Returns all model table cells that are fully selected (from the outside)\n\t * within the provided model selection's ranges.\n\t *\n\t * To obtain the cells selected from the inside, use\n\t * {@link #getTableCellsContainingSelection}.\n\t */\n\tpublic getSelectedTableCells( selection: ModelSelection | ModelDocumentSelection ): Array<ModelElement> {\n\t\tconst cells = [];\n\n\t\tfor ( const range of this.sortRanges( selection.getRanges() ) ) {\n\t\t\tconst element = range.getContainedElement();\n\n\t\t\tif ( element && element.is( 'element', 'tableCell' ) ) {\n\t\t\t\tcells.push( element );\n\t\t\t}\n\t\t}\n\n\t\treturn cells;\n\t}\n\n\t/**\n\t * Returns all model table cells that the provided model selection's ranges\n\t * {@link module:engine/model/range~ModelRange#start} inside.\n\t *\n\t * To obtain the cells selected from the outside, use\n\t * {@link #getSelectedTableCells}.\n\t */\n\tpublic getTableCellsContainingSelection( selection: ModelSelection | ModelDocumentSelection ): Array<ModelElement> {\n\t\tconst cells = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst cellWithSelection = range.start.findAncestor( 'tableCell' );\n\n\t\t\tif ( cellWithSelection ) {\n\t\t\t\tcells.push( cellWithSelection );\n\t\t\t}\n\t\t}\n\n\t\treturn cells;\n\t}\n\n\t/**\n\t * Returns all model table cells that are either completely selected\n\t * by selection ranges or host selection range\n\t * {@link module:engine/model/range~ModelRange#start start positions} inside them.\n\t *\n\t * Combines {@link #getTableCellsContainingSelection} and\n\t * {@link #getSelectedTableCells}.\n\t */\n\tpublic getSelectionAffectedTableCells( selection: ModelSelection | ModelDocumentSelection ): Array<ModelElement> {\n\t\tconst selectedCells = this.getSelectedTableCells( selection );\n\n\t\tif ( selectedCells.length ) {\n\t\t\treturn selectedCells;\n\t\t}\n\n\t\treturn this.getTableCellsContainingSelection( selection );\n\t}\n\n\t/**\n\t * Returns an object with the `first` and `last` row index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getRowIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected rows: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table row indexes.\n\t */\n\tpublic getRowIndexes( tableCells: Array<ModelElement> ): TableIndexesObject {\n\t\tconst indexes = tableCells.map( cell => ( cell.parent as ModelElement ).index! );\n\n\t\treturn this._getFirstLastIndexesObject( indexes );\n\t}\n\n\t/**\n\t * Returns an object with the `first` and `last` column index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getColumnIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected columns: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table column indexes.\n\t */\n\tpublic getColumnIndexes( tableCells: Array<ModelElement> ): TableIndexesObject {\n\t\tconst table = tableCells[ 0 ].findAncestor( 'table' )!;\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\tconst indexes = tableMap\n\t\t\t.filter( entry => tableCells.includes( entry.cell ) )\n\t\t\t.map( entry => entry.column );\n\n\t\treturn this._getFirstLastIndexesObject( indexes );\n\t}\n\n\t/**\n\t * Checks if the selection contains cells that do not exceed rectangular selection.\n\t *\n\t * In a table below:\n\t *\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ b │ c │ d │\n\t *  ├───┴───┼───┤   │\n\t *  │ e     │ f │   │\n\t *  │       ├───┼───┤\n\t *  │       │ g │ h │\n\t *  └───────┴───┴───┘\n\t *\n\t * Valid selections are these which create a solid rectangle (without gaps), such as:\n\t *   - a, b (two horizontal cells)\n\t *   - c, f (two vertical cells)\n\t *   - a, b, e (cell \"e\" spans over four cells)\n\t *   - c, d, f (cell d spans over a cell in the row below)\n\t *\n\t * While an invalid selection would be:\n\t *   - a, c (the unselected cell \"b\" creates a gap)\n\t *   - f, g, h (cell \"d\" spans over a cell from the row of \"f\" cell - thus creates a gap)\n\t */\n\tpublic isSelectionRectangular( selectedTableCells: Array<ModelElement> ): boolean {\n\t\tif ( selectedTableCells.length < 2 || !this._areCellInTheSameTableSection( selectedTableCells ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A valid selection is a fully occupied rectangle composed of table cells.\n\t\t// Below we will calculate the area of a selected table cells and the area of valid selection.\n\t\t// The area of a valid selection is defined by top-left and bottom-right cells.\n\t\tconst rows: Set<number> = new Set();\n\t\tconst columns: Set<number> = new Set();\n\n\t\tlet areaOfSelectedCells = 0;\n\n\t\tfor ( const tableCell of selectedTableCells ) {\n\t\t\tconst { row, column } = this.getCellLocation( tableCell );\n\t\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string ) || 1;\n\t\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string ) || 1;\n\n\t\t\t// Record row & column indexes of current cell.\n\t\t\trows.add( row );\n\t\t\tcolumns.add( column );\n\n\t\t\t// For cells that spans over multiple rows add also the last row that this cell spans over.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\trows.add( row + rowspan - 1 );\n\t\t\t}\n\n\t\t\t// For cells that spans over multiple columns add also the last column that this cell spans over.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\tcolumns.add( column + colspan - 1 );\n\t\t\t}\n\n\t\t\tareaOfSelectedCells += ( rowspan * colspan );\n\t\t}\n\n\t\t// We can only merge table cells that are in adjacent rows...\n\t\tconst areaOfValidSelection = getBiggestRectangleArea( rows, columns );\n\n\t\treturn areaOfValidSelection == areaOfSelectedCells;\n\t}\n\n\t/**\n\t * Returns array of sorted ranges.\n\t */\n\tpublic sortRanges( ranges: Iterable<ModelRange> ): Array<ModelRange> {\n\t\treturn Array.from( ranges ).sort( compareRangeOrder );\n\t}\n\n\t/**\n\t * Helper method to get an object with `first` and `last` indexes from an unsorted array of indexes.\n\t */\n\tprivate _getFirstLastIndexesObject( indexes: Array<number> ): TableIndexesObject {\n\t\tconst allIndexesSorted = indexes.sort( ( indexA, indexB ) => indexA - indexB );\n\n\t\tconst first = allIndexesSorted[ 0 ];\n\t\tconst last = allIndexesSorted[ allIndexesSorted.length - 1 ];\n\n\t\treturn { first, last };\n\t}\n\n\t/**\n\t * Checks if the selection does not mix a header (column or row) with other cells.\n\t *\n\t * For instance, in the table below valid selections consist of cells with the same letter only.\n\t * So, a-a (same heading row and column) or d-d (body cells) are valid while c-d or a-b are not.\n\t *\n\t * header columns\n\t *    ↓   ↓\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ a │ b │ b │  ← header row\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  └───┴───┴───┴───┘\n\t */\n\tprivate _areCellInTheSameTableSection( tableCells: Array<ModelElement> ): boolean {\n\t\tconst table = tableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst rowIndexes = this.getRowIndexes( tableCells );\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) as string ) || 0;\n\n\t\t// Calculating row indexes is a bit cheaper so if this check fails we can't merge.\n\t\tif ( !this._areIndexesInSameSection( rowIndexes, headingRows ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst columnIndexes = this.getColumnIndexes( tableCells );\n\t\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) as string ) || 0;\n\n\t\t// Similarly cells must be in same column section.\n\t\treturn this._areIndexesInSameSection( columnIndexes, headingColumns );\n\t}\n\n\t/**\n\t * Unified check if table rows/columns indexes are in the same heading/body section.\n\t */\n\tprivate _areIndexesInSameSection( { first, last }: TableIndexesObject, headingSectionSize: number ): boolean {\n\t\tconst firstCellIsInHeading = first < headingSectionSize;\n\t\tconst lastCellIsInHeading = last < headingSectionSize;\n\n\t\treturn firstCellIsInHeading === lastCellIsInHeading;\n\t}\n}\n\n/**\n * Creates empty rows at the given index in an existing table.\n *\n * @param insertAt The row index of row insertion.\n * @param rows The number of rows to create.\n * @param tableCellToInsert The number of cells to insert in each row.\n */\nfunction createEmptyRows(\n\twriter: ModelWriter, table: ModelElement, insertAt: number, rows: number, tableCellToInsert: number, attributes = {}\n) {\n\tfor ( let i = 0; i < rows; i++ ) {\n\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\twriter.insert( tableRow, table, insertAt );\n\n\t\tcreateCells( tableCellToInsert, writer, writer.createPositionAt( tableRow, 'end' ), attributes );\n\t}\n}\n\n/**\n * Creates cells at a given position.\n *\n * @param cells The number of cells to create\n */\nfunction createCells( cells: number, writer: ModelWriter, insertPosition: ModelPosition, attributes = {} ) {\n\tfor ( let i = 0; i < cells; i++ ) {\n\t\tcreateEmptyTableCell( writer, insertPosition, attributes );\n\t}\n}\n\n/**\n * Evenly distributes the span of a cell to a number of provided cells.\n * The resulting spans will always be integer values.\n *\n * For instance breaking a span of 7 into 3 cells will return:\n *\n * ```ts\n * { newCellsSpan: 2, updatedSpan: 3 }\n * ```\n *\n * as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n *\n * @param span The span value do break.\n * @param numberOfCells The number of resulting spans.\n */\nfunction breakSpanEvenly( span: number, numberOfCells: number ): { newCellsSpan: number; updatedSpan: number } {\n\tif ( span < numberOfCells ) {\n\t\treturn { newCellsSpan: 1, updatedSpan: 1 };\n\t}\n\n\tconst newCellsSpan = Math.floor( span / numberOfCells );\n\tconst updatedSpan = ( span - newCellsSpan * numberOfCells ) + newCellsSpan;\n\n\treturn { newCellsSpan, updatedSpan };\n}\n\n/**\n * Updates heading columns attribute if removing a row from head section.\n */\nfunction adjustHeadingColumns( table: ModelElement, removedColumnIndexes: TableIndexesObject, writer: ModelWriter ) {\n\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\tif ( headingColumns && removedColumnIndexes.first < headingColumns ) {\n\t\tconst headingsRemoved = Math.min( headingColumns - 1 /* Other numbers are 0-based */, removedColumnIndexes.last ) -\n\t\t\tremovedColumnIndexes.first + 1;\n\n\t\twriter.setAttribute( 'headingColumns', headingColumns - headingsRemoved, table );\n\t}\n}\n\n/**\n * Calculates a new heading rows value for removing rows from heading section.\n */\nfunction updateHeadingRows( table: ModelElement, { first, last }: TableIndexesObject, writer: ModelWriter ) {\n\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\tif ( first < headingRows ) {\n\t\tconst newRows = last < headingRows ? headingRows - ( last - first + 1 ) : first;\n\n\t\tupdateNumericAttribute( 'headingRows', newRows, table, writer, 0 );\n\t}\n}\n\n/**\n * Finds cells that will be:\n * - trimmed - Cells that are \"above\" removed rows sections and overlap the removed section - their rowspan must be trimmed.\n * - moved - Cells from removed rows section might stick out of. These cells are moved to the next row after a removed section.\n *\n * Sample table with overlapping & sticking out cells:\n *\n *      +----+----+----+----+----+\n *      | 00 | 01 | 02 | 03 | 04 |\n *      +----+    +    +    +    +\n *      | 10 |    |    |    |    |\n *      +----+----+    +    +    +\n *      | 20 | 21 |    |    |    | <-- removed row\n *      +    +    +----+    +    +\n *      |    |    | 32 |    |    | <-- removed row\n *      +----+    +    +----+    +\n *      | 40 |    |    | 43 |    |\n *      +----+----+----+----+----+\n *\n * In a table above:\n * - cells to trim: '02', '03' & '04'.\n * - cells to move: '21' & '32'.\n */\nfunction getCellsToMoveAndTrimOnRemoveRow( table: ModelElement, { first, last }: TableIndexesObject ) {\n\tconst cellsToMove: CellsToMove = new Map();\n\tconst cellsToTrim: CellsToTrim = [];\n\n\tfor ( const { row, column, cellHeight, cell } of new TableWalker( table, { endRow: last } ) ) {\n\t\tconst lastRowOfCell = row + cellHeight - 1;\n\n\t\tconst isCellStickingOutFromRemovedRows = row >= first && row <= last && lastRowOfCell > last;\n\n\t\tif ( isCellStickingOutFromRemovedRows ) {\n\t\t\tconst rowspanInRemovedSection = last - row + 1;\n\t\t\tconst rowSpanToSet = cellHeight - rowspanInRemovedSection;\n\n\t\t\tcellsToMove.set( column, {\n\t\t\t\tcell,\n\t\t\t\trowspan: rowSpanToSet\n\t\t\t} );\n\t\t}\n\n\t\tconst isCellOverlappingRemovedRows = row < first && lastRowOfCell >= first;\n\n\t\tif ( isCellOverlappingRemovedRows ) {\n\t\t\tlet rowspanAdjustment;\n\n\t\t\t// Cell fully covers removed section - trim it by removed rows count.\n\t\t\tif ( lastRowOfCell >= last ) {\n\t\t\t\trowspanAdjustment = last - first + 1;\n\t\t\t}\n\t\t\t// Cell partially overlaps removed section - calculate cell's span that is in removed section.\n\t\t\telse {\n\t\t\t\trowspanAdjustment = lastRowOfCell - first + 1;\n\t\t\t}\n\n\t\t\tcellsToTrim.push( {\n\t\t\t\tcell,\n\t\t\t\trowspan: cellHeight - rowspanAdjustment\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn { cellsToMove, cellsToTrim };\n}\n\nfunction moveCellsToRow( table: ModelElement, targetRowIndex: number, cellsToMove: CellsToMove, writer: ModelWriter ) {\n\tconst tableWalker = new TableWalker( table, {\n\t\tincludeAllSlots: true,\n\t\trow: targetRowIndex\n\t} );\n\n\tconst tableRowMap = [ ...tableWalker ];\n\tconst row = table.getChild( targetRowIndex )!;\n\n\tlet previousCell;\n\n\tfor ( const { column, cell, isAnchor } of tableRowMap ) {\n\t\tif ( cellsToMove.has( column ) ) {\n\t\t\tconst { cell: cellToMove, rowspan } = cellsToMove.get( column )!;\n\n\t\t\tconst targetPosition = previousCell ?\n\t\t\t\twriter.createPositionAfter( previousCell ) :\n\t\t\t\twriter.createPositionAt( row, 0 );\n\n\t\t\twriter.move( writer.createRangeOn( cellToMove ), targetPosition );\n\t\t\tupdateNumericAttribute( 'rowspan', rowspan, cellToMove, writer );\n\n\t\t\tpreviousCell = cellToMove;\n\t\t} else if ( isAnchor ) {\n\t\t\t// If cell is spanned then `cell` holds reference to overlapping cell. See ckeditor/ckeditor5#6502.\n\t\t\tpreviousCell = cell;\n\t\t}\n\t}\n}\n\nfunction compareRangeOrder( rangeA: ModelRange, rangeB: ModelRange ) {\n\t// Since table cell ranges are disjoint, it's enough to check their start positions.\n\tconst posA = rangeA.start;\n\tconst posB = rangeB.start;\n\n\t// Checking for equal position (returning 0) is not needed because this would be either:\n\t// a. Intersecting range (not allowed by model)\n\t// b. Collapsed range on the same position (allowed by model but should not happen).\n\treturn posA.isBefore( posB ) ? -1 : 1;\n}\n\n/**\n * Calculates the area of a maximum rectangle that can span over the provided row & column indexes.\n */\nfunction getBiggestRectangleArea( rows: Set<number>, columns: Set<number> ): number {\n\tconst rowsIndexes = Array.from( rows.values() );\n\tconst columnIndexes = Array.from( columns.values() );\n\n\tconst lastRow = Math.max( ...rowsIndexes );\n\tconst firstRow = Math.min( ...rowsIndexes );\n\tconst lastColumn = Math.max( ...columnIndexes );\n\tconst firstColumn = Math.min( ...columnIndexes );\n\n\treturn ( lastRow - firstRow + 1 ) * ( lastColumn - firstColumn + 1 );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/mergecellscommand\n */\n\nimport type {\n\tModelElement,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { TableUtils } from '../tableutils.js';\nimport { updateNumericAttribute } from '../utils/common.js';\nimport { removeEmptyRowsColumns } from '../utils/structure.js';\n\n/**\n * The merge cells command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCells'` editor command.\n *\n * For example, to merge selected table cells:\n *\n * ```ts\n * editor.execute( 'mergeTableCells' );\n * ```\n */\nexport class MergeCellsCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tconst selectedTableCells = tableUtils.getSelectedTableCells( this.editor.model.document.selection );\n\t\tthis.isEnabled = tableUtils.isSelectionRectangular( selectedTableCells );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tmodel.change( writer => {\n\t\t\tconst selectedTableCells = tableUtils.getSelectedTableCells( model.document.selection );\n\n\t\t\t// All cells will be merged into the first one.\n\t\t\tconst firstTableCell = selectedTableCells.shift()!;\n\n\t\t\t// Update target cell dimensions.\n\t\t\tconst { mergeWidth, mergeHeight } = getMergeDimensions( firstTableCell, selectedTableCells, tableUtils );\n\t\t\tupdateNumericAttribute( 'colspan', mergeWidth, firstTableCell, writer );\n\t\t\tupdateNumericAttribute( 'rowspan', mergeHeight, firstTableCell, writer );\n\n\t\t\tfor ( const tableCell of selectedTableCells ) {\n\t\t\t\tmergeTableCells( tableCell, firstTableCell, writer );\n\t\t\t}\n\n\t\t\tconst table = firstTableCell.findAncestor( 'table' )!;\n\n\t\t\t// Remove rows and columns that become empty (have no anchored cells).\n\t\t\tremoveEmptyRowsColumns( table, tableUtils );\n\n\t\t\twriter.setSelection( firstTableCell, 'in' );\n\t\t} );\n\t}\n}\n\n/**\n *  Merges two table cells. It will ensure that after merging cells with empty paragraphs the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells( cellBeingMerged: ModelElement, targetCell: ModelElement, writer: ModelWriter ) {\n\tif ( !isEmpty( cellBeingMerged ) ) {\n\t\tif ( isEmpty( targetCell ) ) {\n\t\t\twriter.remove( writer.createRangeIn( targetCell ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellBeingMerged ), writer.createPositionAt( targetCell, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellBeingMerged );\n}\n\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty( tableCell: ModelElement ): boolean {\n\tconst firstTableChild = tableCell.getChild( 0 );\n\n\treturn tableCell.childCount == 1 && firstTableChild!.is( 'element', 'paragraph' ) && firstTableChild.isEmpty;\n}\n\nfunction getMergeDimensions( firstTableCell: ModelElement, selectedTableCells: Array<ModelElement>, tableUtils: TableUtils ) {\n\tlet maxWidthOffset = 0;\n\tlet maxHeightOffset = 0;\n\n\tfor ( const tableCell of selectedTableCells ) {\n\t\tconst { row, column } = tableUtils.getCellLocation( tableCell );\n\n\t\tmaxWidthOffset = getMaxOffset( tableCell, column, maxWidthOffset, 'colspan' );\n\t\tmaxHeightOffset = getMaxOffset( tableCell, row, maxHeightOffset, 'rowspan' );\n\t}\n\n\t// Update table cell span attribute and merge set selection on a merged contents.\n\tconst { row: firstCellRow, column: firstCellColumn } = tableUtils.getCellLocation( firstTableCell );\n\n\tconst mergeWidth = maxWidthOffset - firstCellColumn;\n\tconst mergeHeight = maxHeightOffset - firstCellRow;\n\n\treturn { mergeWidth, mergeHeight };\n}\n\nfunction getMaxOffset( tableCell: ModelElement, start: number, currentMaxOffset: number, which: string ) {\n\tconst dimensionValue = parseInt( tableCell.getAttribute( which ) as string || '1' );\n\n\treturn Math.max( currentMaxOffset, start + dimensionValue );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/selectrowcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelRange, ModelElement } from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../tableutils.js';\n\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableRow' );\n * ```\n */\nexport class SelectRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst rowIndexes = tableUtils.getRowIndexes( referenceCells );\n\n\t\tconst table = referenceCells[ 0 ].findAncestor( 'table' )!;\n\t\tconst rangesToSelect: Array<ModelRange> = [];\n\n\t\tfor ( let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++ ) {\n\t\t\tfor ( const cell of ( table.getChild( rowIndex ) as ModelElement ).getChildren() ) {\n\t\t\t\trangesToSelect.push( model.createRangeOn( cell ) );\n\t\t\t}\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( rangesToSelect );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/selectcolumncommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelRange } from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../tableutils.js';\n\nimport { TableWalker } from '../tablewalker.js';\n\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableColumn' );\n * ```\n */\nexport class SelectColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\t\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst firstCell = referenceCells[ 0 ];\n\t\tconst lastCell = referenceCells.pop()!;\n\t\tconst table = firstCell.findAncestor( 'table' )!;\n\n\t\tconst startLocation = tableUtils.getCellLocation( firstCell );\n\t\tconst endLocation = tableUtils.getCellLocation( lastCell );\n\n\t\tconst startColumn = Math.min( startLocation.column, endLocation.column );\n\t\tconst endColumn = Math.max( startLocation.column, endLocation.column );\n\n\t\tconst rangesToSelect: Array<ModelRange> = [];\n\n\t\tfor ( const cellInfo of new TableWalker( table, { startColumn, endColumn } ) ) {\n\t\t\trangesToSelect.push( model.createRangeOn( cellInfo.cell ) );\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( rangesToSelect );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-layout-post-fixer\n */\n\nimport type {\n\tModelElement,\n\tModel,\n\tModelWriter,\n\tDifferItem,\n\tDifferItemAttribute\n} from 'ckeditor5/src/engine.js';\n\nimport { TableWalker } from './../tablewalker.js';\nimport { createEmptyTableCell, updateNumericAttribute } from '../utils/common.js';\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of the table cells extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as a child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extend beyond their section.\n * 2. It will add empty table cells to the rows that are narrower than the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or a part of a table) to the editor from external sources.\n *\n * For example, see the following table which has a cell (FOO) with the rowspan attribute (2):\n *\n * ```xml\n * <table headingRows=\"1\">\n *   <tableRow>\n *     <tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *     <tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *   </tableRow>\n *   <tableRow>\n *     <tableCell><paragraph>BAZ</paragraph></tableCell>\n *     <tableCell><paragraph>XYZ</paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * It will be rendered in the view as:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * In the above example the table will be rendered as a table with two rows: one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would extend from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is the default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ in the content will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table row sizes (the number of columns).\n * The size of a table row is calculated by counting column spans of table cells, both horizontal (from the same row) and\n * vertical (from the rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header: it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and the second with colspan (2).\n * The table cell (FOO) does not extend beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * ## Collaboration and undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without a deeper analysis of the nature of the change. As such, it might lead\n * to a structure which was not intended by the user. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which the editor content might not return to the original state.\n *\n * This will usually happen when one or more users change the size of the table.\n *\n * As an example see the table below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * and the user actions:\n *\n * 1. Both users have a table with two rows and two columns.\n * 2. User A adds a column at the end of the table. This will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table. This will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * The last row is shorter then others so the table post-fixer will add an empty row to the last row:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by the post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * Unfortunately undo does not know the nature of the changes and depending on which user applies the post-fixer changes, undoing them\n * might lead to a broken table. If User B undoes inserting the column to the table, the undo engine will undo only the operations of\n * inserting empty cells to rows from the initial table state (row 1 and 2) but the cell in the post-fixed row will remain:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * After undo, the table post-fixer will detect that two rows are shorter than others and will fix the table to:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * @internal\n */\nexport function injectTableLayoutPostFixer( model: Model ): void {\n\tmodel.document.registerPostFixer( writer => tableLayoutPostFixer( writer, model ) );\n}\n\n/**\n * The table layout post-fixer.\n */\nfunction tableLayoutPostFixer( writer: ModelWriter, model: Model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\t// Do not analyze the same table more then once - may happen for multiple changes in the same table.\n\tconst analyzedTables = new Set();\n\n\tfor ( const entry of changes ) {\n\t\tlet table: ModelElement | null = null;\n\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\ttable = entry.position.nodeAfter as ModelElement;\n\t\t}\n\n\t\t// Fix table on adding/removing table cells and rows.\n\t\tif ( ( entry.type == 'insert' || entry.type == 'remove' ) && ( entry.name == 'tableRow' || entry.name == 'tableCell' ) ) {\n\t\t\ttable = entry.position.findAncestor( 'table' );\n\t\t}\n\n\t\t// Fix table on any table's attribute change - including attributes of table cells.\n\t\tif ( isTableAttributeEntry( entry ) ) {\n\t\t\ttable = entry.range.start.findAncestor( 'table' );\n\t\t}\n\n\t\tif ( table && !analyzedTables.has( table ) ) {\n\t\t\t// Step 1: correct rowspans of table cells if necessary.\n\t\t\t// The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n\t\t\twasFixed = fixTableCellsRowspan( table, writer ) || wasFixed;\n\t\t\t// Step 2: fix table rows sizes.\n\t\t\twasFixed = fixTableRowsSizes( table, writer ) || wasFixed;\n\n\t\t\tanalyzedTables.add( table );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes the invalid value of the `rowspan` attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableCellsRowspan( table: ModelElement, writer: ModelWriter ) {\n\tlet wasFixed = false;\n\n\tconst cellsToTrim = findCellsToTrim( table );\n\n\tif ( cellsToTrim.length ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( `Post-fixing table: trimming cells row-spans (${ cellsToTrim.length }).` );\n\n\t\twasFixed = true;\n\n\t\tfor ( const data of cellsToTrim ) {\n\t\t\tupdateNumericAttribute( 'rowspan', data.rowspan, data.cell, writer, 1 );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Makes all table rows in a table the same size.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableRowsSizes( table: ModelElement, writer: ModelWriter ) {\n\tlet wasFixed = false;\n\n\tconst childrenLengths = getChildrenLengths( table );\n\tconst rowsToRemove = [];\n\n\t// Find empty rows.\n\tfor ( const [ rowIndex, size ] of childrenLengths.entries() ) {\n\t\t// Ignore all non-row models.\n\t\tif ( !size && table.getChild( rowIndex )!.is( 'element', 'tableRow' ) ) {\n\t\t\trowsToRemove.push( rowIndex );\n\t\t}\n\t}\n\n\t// Remove empty rows.\n\tif ( rowsToRemove.length ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( `Post-fixing table: remove empty rows (${ rowsToRemove.length }).` );\n\n\t\twasFixed = true;\n\n\t\tfor ( const rowIndex of rowsToRemove.reverse() ) {\n\t\t\twriter.remove( table.getChild( rowIndex )! );\n\t\t\tchildrenLengths.splice( rowIndex, 1 );\n\t\t}\n\t}\n\n\t// Filter out everything that's not a table row.\n\tconst rowsLengths = childrenLengths.filter( ( row, rowIndex ) => table.getChild( rowIndex )!.is( 'element', 'tableRow' ) );\n\n\t// Verify if all the rows have the same number of columns.\n\tconst tableSize = rowsLengths[ 0 ];\n\tconst isValid = rowsLengths.every( length => length === tableSize );\n\n\tif ( !isValid ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: adding missing cells.' );\n\n\t\t// Find the maximum number of columns.\n\t\tconst maxColumns = rowsLengths.reduce( ( prev, current ) => current > prev ? current : prev, 0 );\n\n\t\tfor ( const [ rowIndex, size ] of rowsLengths.entries() ) {\n\t\t\tconst columnsToInsert = maxColumns - size;\n\n\t\t\tif ( columnsToInsert ) {\n\t\t\t\tfor ( let i = 0; i < columnsToInsert; i++ ) {\n\t\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( table.getChild( rowIndex )!, 'end' ) );\n\t\t\t\t}\n\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Searches for table cells that extend beyond the table section to which they belong to. It will return an array of objects\n * that stores table cells to be trimmed and the correct value of the `rowspan` attribute to set.\n */\nfunction findCellsToTrim( table: ModelElement ) {\n\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) as string || '0' );\n\tconst maxRows = Array.from( table.getChildren() )\n\t\t.reduce( ( count, row ) => row.is( 'element', 'tableRow' ) ? count + 1 : count, 0 );\n\n\tconst cellsToTrim = [];\n\n\tfor ( const { row, cell, cellHeight } of new TableWalker( table ) ) {\n\t\t// Skip cells that do not expand over its row.\n\t\tif ( cellHeight < 2 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst isInHeader = row < headingRows;\n\n\t\t// Row limit is either end of header section or whole table as table body is after the header.\n\t\tconst rowLimit = isInHeader ? headingRows : maxRows;\n\n\t\t// If table cell expands over its limit reduce it height to proper value.\n\t\tif ( row + cellHeight > rowLimit ) {\n\t\t\tconst newRowspan = rowLimit - row;\n\n\t\t\tcellsToTrim.push( { cell, rowspan: newRowspan } );\n\t\t}\n\t}\n\n\treturn cellsToTrim;\n}\n\n/**\n * Returns an array with lengths of rows assigned to the corresponding row index.\n */\nfunction getChildrenLengths( table: ModelElement ) {\n\t// TableWalker will not provide items for the empty rows, we need to pre-fill this array.\n\tconst lengths = new Array( table.childCount ).fill( 0 );\n\n\tfor ( const { rowIndex } of new TableWalker( table, { includeAllSlots: true } ) ) {\n\t\tlengths[ rowIndex ]++;\n\t}\n\n\treturn lengths;\n}\n\n/**\n * Checks if the differ entry for an attribute change is one of the table's attributes.\n */\nfunction isTableAttributeEntry( entry: DifferItem ): entry is DifferItemAttribute {\n\tif ( entry.type !== 'attribute' ) {\n\t\treturn false;\n\t}\n\n\tconst key = entry.attributeKey;\n\n\treturn key === 'headingRows' || key === 'colspan' || key === 'rowspan';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\nimport type { Model, ModelWriter, ModelElement, DifferItemInsert, DifferItemRemove } from 'ckeditor5/src/engine.js';\n\n/**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * Will be fixed to:\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell><paragraph></paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * @internal\n */\nexport function injectTableCellParagraphPostFixer( model: Model ): void {\n\tmodel.document.registerPostFixer( writer => tableCellContentsPostFixer( writer, model ) );\n}\n\n/**\n * The table cell contents post-fixer.\n */\nfunction tableCellContentsPostFixer( writer: ModelWriter, model: Model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\twasFixed = fixTable( entry.position.nodeAfter as ModelElement, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableRow' ) {\n\t\t\twasFixed = fixTableRow( entry.position.nodeAfter as ModelElement, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableCell' ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.nodeAfter as ModelElement, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( ( entry.type == 'remove' || entry.type == 'insert' ) && checkTableCellChange( entry ) ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.parent as ModelElement, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes all table cells in a table.\n */\nfunction fixTable( table: ModelElement, writer: ModelWriter ) {\n\tlet wasFixed = false;\n\n\tfor ( const row of table.getChildren() ) {\n\t\tif ( row.is( 'element', 'tableRow' ) ) {\n\t\t\twasFixed = fixTableRow( row, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes all table cells in a table row.\n */\nfunction fixTableRow( tableRow: ModelElement, writer: ModelWriter ) {\n\tlet wasFixed = false;\n\n\tfor ( const tableCell of tableRow.getChildren() as IterableIterator<ModelElement> ) {\n\t\twasFixed = fixTableCellContent( tableCell, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes all table cell content by:\n * - Adding a paragraph to a table cell without any child.\n * - Wrapping direct $text in a `<paragraph>`.\n */\nfunction fixTableCellContent( tableCell: ModelElement, writer: ModelWriter ) {\n\t// Insert paragraph to an empty table cell.\n\tif ( tableCell.childCount == 0 ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n\n\t\twriter.insertElement( 'paragraph', tableCell );\n\n\t\treturn true;\n\t}\n\n\t// Check table cell children for directly placed text nodes.\n\t// Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\tconst textNodes = Array.from( tableCell.getChildren() ).filter( child => child.is( '$text' ) );\n\n\t// @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n\n\tfor ( const child of textNodes ) {\n\t\twriter.wrap( writer.createRangeOn( child ), 'paragraph' );\n\t}\n\n\t// Return true when there were text nodes to fix.\n\treturn !!textNodes.length;\n}\n\n/**\n * Checks if a differ change should fix the table cell. This happens on:\n * - Removing content from the table cell (i.e. `tableCell` can be left empty).\n * - Adding a text node directly into a table cell.\n */\nfunction checkTableCellChange( entry: DifferItemInsert | DifferItemRemove ) {\n\tif ( !entry.position.parent.is( 'element', 'tableCell' ) ) {\n\t\treturn false;\n\t}\n\n\treturn entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-headings-refresh-handler\n */\n\nimport type {\n\tEditingController,\n\tModelElement,\n\tModel\n} from 'ckeditor5/src/engine.js';\n\nimport { TableWalker } from '../tablewalker.js';\n\n/**\n * A table headings refresh handler which marks the table cells or rows in the differ to have it re-rendered\n * if the headings attribute changed.\n *\n * Table heading rows and heading columns are represented in the model by a `headingRows` and `headingColumns` attributes.\n *\n * When table headings attribute changes, all the cells/rows are marked to re-render to change between `<td>` and `<th>`.\n *\n * @internal\n */\nexport function tableHeadingsRefreshHandler( model: Model, editing: EditingController ): void {\n\tconst differ = model.document.differ;\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tlet table;\n\t\tlet isRowChange = false;\n\n\t\tif ( change.type == 'attribute' ) {\n\t\t\tconst element = change.range.start.nodeAfter;\n\n\t\t\tif ( !element || !element.is( 'element', 'table' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( change.attributeKey != 'headingRows' && change.attributeKey != 'headingColumns' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttable = element;\n\t\t\tisRowChange = change.attributeKey == 'headingRows';\n\t\t} else if ( change.name == 'tableRow' || change.name == 'tableCell' ) {\n\t\t\ttable = change.position.findAncestor( 'table' );\n\t\t\tisRowChange = change.name == 'tableRow';\n\t\t}\n\n\t\tif ( !table ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\t\tconst tableWalker = new TableWalker( table );\n\n\t\tfor ( const tableSlot of tableWalker ) {\n\t\t\tconst isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n\t\t\tconst expectedElementName = isHeading ? 'th' : 'td';\n\n\t\t\tconst viewElement = editing.mapper.toViewElement( tableSlot.cell );\n\n\t\t\tif ( viewElement && viewElement.is( 'element' ) && viewElement.name != expectedElementName ) {\n\t\t\t\tediting.reconvertItem( ( isRowChange ? tableSlot.cell.parent : tableSlot.cell ) as ModelElement );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-cell-refresh-handler\n */\n\nimport type {\n\tEditingController,\n\tModelElement,\n\tMapper,\n\tModel\n} from 'ckeditor5/src/engine.js';\n\nimport { isSingleParagraphWithoutAttributes } from './downcast.js';\n\n/**\n * A table cell refresh handler which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it does not have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added, we need to ensure that the first `paragraph` is\n * re-rendered so it changes from `<span>` to `<p>`. The easiest way to do it is to re-render the entire table cell.\n *\n * @internal\n */\nexport function tableCellRefreshHandler( model: Model, editing: EditingController ): void {\n\tconst differ = model.document.differ;\n\n\t// Stores cells to be refreshed, so the table cell will be refreshed once for multiple changes.\n\tconst cellsToCheck = new Set();\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tconst parent = change.type == 'attribute' ? change.range.start.parent : change.position.parent;\n\n\t\tif ( parent.is( 'element', 'tableCell' ) ) {\n\t\t\tcellsToCheck.add( parent );\n\t\t}\n\t}\n\n\tfor ( const tableCell of cellsToCheck.values() as Iterable<ModelElement> ) {\n\t\tconst paragraphsToRefresh = Array.from( tableCell.getChildren() )\n\t\t\t.filter( child => shouldRefresh( child as ModelElement, editing.mapper ) );\n\n\t\tfor ( const paragraph of paragraphsToRefresh ) {\n\t\t\tediting.reconvertItem( paragraph );\n\t\t}\n\t}\n}\n\n/**\n * Check if given model element needs refreshing.\n */\nfunction shouldRefresh( child: ModelElement, mapper: Mapper ) {\n\tif ( !child.is( 'element', 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\tconst viewElement = mapper.toViewElement( child );\n\n\tif ( !viewElement ) {\n\t\treturn false;\n\t}\n\n\treturn isSingleParagraphWithoutAttributes( child ) !== viewElement.is( 'element', 'span' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelPositionOffset, ViewElement, DowncastSlotFilter } from 'ckeditor5/src/engine.js';\n\nimport { upcastTable, ensureParagraphInTableCell, skipEmptyTableRow, upcastTableFigure } from './converters/upcasttable.js';\nimport { convertParagraphInTableCell, downcastCell, downcastRow, downcastTable } from './converters/downcast.js';\n\nimport { InsertTableCommand } from './commands/inserttablecommand.js';\nimport { InsertRowCommand } from './commands/insertrowcommand.js';\nimport { InsertColumnCommand } from './commands/insertcolumncommand.js';\nimport { SplitCellCommand } from './commands/splitcellcommand.js';\nimport { MergeCellCommand } from './commands/mergecellcommand.js';\nimport { RemoveRowCommand } from './commands/removerowcommand.js';\nimport { RemoveColumnCommand } from './commands/removecolumncommand.js';\nimport { SetHeaderRowCommand } from './commands/setheaderrowcommand.js';\nimport { SetHeaderColumnCommand } from './commands/setheadercolumncommand.js';\nimport { MergeCellsCommand } from './commands/mergecellscommand.js';\nimport { SelectRowCommand } from './commands/selectrowcommand.js';\nimport { SelectColumnCommand } from './commands/selectcolumncommand.js';\nimport { TableUtils } from '../src/tableutils.js';\n\nimport { injectTableLayoutPostFixer } from './converters/table-layout-post-fixer.js';\nimport { injectTableCellParagraphPostFixer } from './converters/table-cell-paragraph-post-fixer.js';\n\nimport { tableHeadingsRefreshHandler } from './converters/table-headings-refresh-handler.js';\nimport { tableCellRefreshHandler } from './converters/table-cell-refresh-handler.js';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n */\nexport class TableEditing extends Plugin {\n\t/**\n\t * Handlers for creating additional slots in the table.\n\t */\n\tprivate _additionalSlots: Array<TableConversionAdditionalSlot>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._additionalSlots = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\n\t\tschema.register( 'table', {\n\t\t\tinheritAllFrom: '$blockObject',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ]\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowContentOf: '$container',\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true,\n\t\t\tisSelectable: true\n\t\t} );\n\n\t\t// Figure conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableFigure() );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).elementToStructure( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tattributes: [ 'headingRows' ]\n\t\t\t},\n\t\t\tview: downcastTable( tableUtils, {\n\t\t\t\tasWidget: true,\n\t\t\t\tadditionalSlots: this._additionalSlots\n\t\t\t} )\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToStructure( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tattributes: [ 'headingRows' ]\n\t\t\t},\n\t\t\tview: downcastTable( tableUtils, {\n\t\t\t\tadditionalSlots: this._additionalSlots\n\t\t\t} )\n\t\t} );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableRow', view: 'tr' } );\n\t\tconversion.for( 'upcast' ).add( skipEmptyTableRow() );\n\n\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\tmodel: 'tableRow',\n\t\t\tview: downcastRow()\n\t\t} );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableCell', view: 'td' } );\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableCell', view: 'th' } );\n\t\tconversion.for( 'upcast' ).add( ensureParagraphInTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( ensureParagraphInTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'tableCell',\n\t\t\tview: downcastCell( { asWidget: true } )\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'tableCell',\n\t\t\tview: downcastCell()\n\t\t} );\n\n\t\t// Duplicates code - needed to properly refresh paragraph inside a table cell.\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'paragraph',\n\t\t\tview: convertParagraphInTableCell( { asWidget: true } ),\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'paragraph',\n\t\t\tview: convertParagraphInTableCell(),\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\t// Table attributes conversion.\n\t\tconversion.for( 'downcast' ).attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: { key: 'colspan', value: upcastCellSpan( 'colspan' ) },\n\t\t\tview: 'colspan'\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: { key: 'rowspan', value: upcastCellSpan( 'rowspan' ) },\n\t\t\tview: 'rowspan'\n\t\t} );\n\n\t\t// Define the config.\n\t\teditor.config.define( 'table.defaultHeadings.rows', 0 );\n\t\teditor.config.define( 'table.defaultHeadings.columns', 0 );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCells', new MergeCellsCommand( editor ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\teditor.commands.add( 'selectTableRow', new SelectRowCommand( editor ) );\n\t\teditor.commands.add( 'selectTableColumn', new SelectColumnCommand( editor ) );\n\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellParagraphPostFixer( model );\n\n\t\tthis.listenTo( model.document, 'change:data', () => {\n\t\t\ttableHeadingsRefreshHandler( model, editor.editing );\n\t\t\ttableCellRefreshHandler( model, editor.editing );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers downcast handler for the additional table slot.\n\t */\n\tpublic registerAdditionalSlot( slotHandler: TableConversionAdditionalSlot ): void {\n\t\tthis._additionalSlots.push( slotHandler );\n\t}\n}\n\n/**\n * Returns fixed colspan and rowspan attrbutes values.\n *\n * @param type colspan or rowspan.\n * @returns conversion value function.\n */\nfunction upcastCellSpan( type: string ) {\n\treturn ( cell: ViewElement ) => {\n\t\tconst span = parseInt( cell.getAttribute( type )! );\n\n\t\tif ( Number.isNaN( span ) || span <= 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn span;\n\t};\n}\n\n/**\n * By default, only the `tableRow` elements from the `table` model are downcast inside the `<table>` and\n * all other elements are pushed outside the table. This handler allows creating additional slots inside\n * the table for other elements.\n *\n * Take this model as an example:\n *\n * ```xml\n * <table>\n *   <tableRow>...</tableRow>\n *   <tableRow>...</tableRow>\n *   <tableColumnGroup>...</tableColumnGroup>\n * </table>\n * ```\n *\n * By default, downcasting result will be:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>...</tr>\n *     <tr>...</tr>\n *   </tbody>\n * </table>\n * <colgroup>...</colgroup>\n * ```\n *\n * To allow the `tableColumnGroup` element at the end of the table, use the following configuration:\n *\n * ```ts\n * const additionalSlot = {\n *   filter: element => element.is( 'element', 'tableColumnGroup' ),\n *   positionOffset: 'end'\n * }\n * ```\n *\n * Now, the downcast result will be:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>...</tr>\n *     <tr>...</tr>\n *   </tbody>\n *   <colgroup>...</colgroup>\n * </table>\n * ```\n */\nexport interface TableConversionAdditionalSlot {\n\n\t/**\n\t * Filter for elements that should be placed inside given slot.\n\t */\n\tfilter: DowncastSlotFilter;\n\n\t/**\n\t * Position of the slot within the table.\n\t */\n\tpositionOffset: ModelPositionOffset;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/ui/inserttableview\n */\n\nimport { View, ButtonView, addKeyboardHandlingForGrid, type ViewCollection } from 'ckeditor5/src/ui.js';\n\nimport { KeystrokeHandler, FocusTracker, type Locale } from 'ckeditor5/src/utils.js';\n\nimport './../../theme/inserttable.css';\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n *\n * @internal\n */\nexport class InsertTableView extends View {\n\t/**\n\t * A collection of table size box items.\n\t */\n\tpublic readonly items: ViewCollection<ButtonView>;\n\n\t/**\n\t * Listen to `keydown` events fired in this view's main element.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * Tracks information about the DOM focus in the grid.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * The currently selected number of rows of the new table.\n\t *\n\t * @observable\n\t */\n\tdeclare public rows: number;\n\n\t/**\n\t * The currently selected number of columns of the new table.\n\t *\n\t * @observable\n\t */\n\tdeclare public columns: number;\n\n\t/**\n\t * The label text displayed under the boxes.\n\t *\n\t * @observable\n\t */\n\tdeclare public label: string;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale: Locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tthis.items = this._createGridCollection();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis.set( 'rows', 0 );\n\t\tthis.set( 'columns', 0 );\n\t\tthis.bind( 'label' ).to( this, 'columns', this, 'rows', ( columns, rows ) => `${ rows } × ${ columns }` );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck' ]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__grid' ]\n\t\t\t\t\t},\n\t\t\t\t\ton: {\n\t\t\t\t\t\t'mouseover@.ck-insert-table-dropdown-grid-box': bind.to( 'boxover' )\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.items\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-insert-table-dropdown__label'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'aria-hidden': true\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'label' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( () => {\n\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\n\t\t// #rows and #columns are set via changes to #focusTracker on mouse over.\n\t\tthis.on( 'boxover', ( evt, domEvt ) => {\n\t\t\tconst { row, column } = domEvt.target.dataset;\n\t\t\tthis.items.get( ( parseInt( row, 10 ) - 1 ) * 10 + ( parseInt( column, 10 ) - 1 ) )!.focus();\n\t\t} );\n\n\t\t// This allows the #rows and #columns to be updated when:\n\t\t// * the user navigates the grid using the keyboard,\n\t\t// * the user moves the mouse over grid items.\n\t\tthis.focusTracker.on( 'change:focusedElement', ( evt, name, focusedElement ) => {\n\t\t\tif ( !focusedElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { row, column } = focusedElement.dataset;\n\n\t\t\t// As row & column indexes are zero-based transform it to number of selected rows & columns.\n\t\t\tthis.set( {\n\t\t\t\trows: parseInt( row ),\n\t\t\t\tcolumns: parseInt( column )\n\t\t\t} );\n\t\t} );\n\n\t\tthis.on( 'change:columns', () => this._highlightGridBoxes() );\n\t\tthis.on( 'change:rows', () => this._highlightGridBoxes() );\n\t}\n\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\taddKeyboardHandlingForGrid( {\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tgridItems: this.items,\n\t\t\tnumberOfColumns: 10,\n\t\t\tuiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n\t\t} );\n\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element! );\n\t\t}\n\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * Resets the rows and columns selection.\n\t */\n\tpublic reset(): void {\n\t\tthis.set( {\n\t\t\trows: 1,\n\t\t\tcolumns: 1\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focus(): void {\n\t\tthis.items.get( 0 )!.focus();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focusLast(): void {\n\t\tthis.items.get( 0 )!.focus();\n\t}\n\n\t/**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t */\n\tprivate _highlightGridBoxes() {\n\t\tconst rows = this.rows;\n\t\tconst columns = this.columns;\n\n\t\tthis.items.map( ( boxView, index ) => {\n\t\t\t// Translate box index to the row & column index.\n\t\t\tconst itemRow = Math.floor( index / 10 );\n\t\t\tconst itemColumn = index % 10;\n\n\t\t\t// Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n\t\t\tconst isOn = itemRow < rows && itemColumn < columns;\n\n\t\t\tboxView.set( 'isOn', isOn );\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a new Button for the grid.\n\t *\n\t * @param locale The locale instance.\n\t * @param row Row number.\n\t * @param column Column number.\n\t * @param label The grid button label.\n\t */\n\tprivate _createGridButton( locale: Locale, row: number, column: number, label: string ): ButtonView {\n\t\tconst button = new ButtonView( locale );\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\tclass: 'ck-insert-table-dropdown-grid-box'\n\t\t} );\n\n\t\tbutton.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'data-row': row,\n\t\t\t\t'data-column': column\n\t\t\t}\n\t\t} );\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * @returns A view collection containing boxes to be placed in a table grid.\n\t */\n\tprivate _createGridCollection() {\n\t\tconst boxes = [];\n\n\t\t// Add grid boxes to table selection view.\n\t\tfor ( let index = 0; index < 100; index++ ) {\n\t\t\tconst row = Math.floor( index / 10 );\n\t\t\tconst column = index % 10;\n\t\t\tconst label = `${ row + 1 } × ${ column + 1 }`;\n\n\t\t\tboxes.push( this._createGridButton( this.locale!, row + 1, column + 1, label ) );\n\t\t}\n\n\t\treturn this.createCollection( boxes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableui\n */\n\nimport { Plugin, type Command, type Editor } from 'ckeditor5/src/core.js';\nimport { IconTable, IconTableColumn, IconTableRow, IconTableMergeCell } from 'ckeditor5/src/icons.js';\nimport {\n\taddListToDropdown,\n\tcreateDropdown,\n\tUIModel,\n\tSplitButtonView,\n\tSwitchButtonView,\n\ttype DropdownView,\n\ttype ListDropdownItemDefinition,\n\tMenuBarMenuView\n} from 'ckeditor5/src/ui.js';\nimport { Collection, type ObservableChangeEvent, type Locale } from 'ckeditor5/src/utils.js';\n\nimport { InsertTableView } from './ui/inserttableview.js';\n\nimport { type InsertTableCommand } from './commands/inserttablecommand.js';\nimport { type MergeCellsCommand } from './commands/mergecellscommand.js';\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'menuBar:insertTable'` menu bar menu,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n */\nexport class TableUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = this.editor.t;\n\t\tconst contentLanguageDirection = editor.locale.contentLanguageDirection;\n\t\tconst isContentLtr = contentLanguageDirection === 'ltr';\n\n\t\teditor.ui.componentFactory.add( 'insertTable', locale => {\n\t\t\tconst command: InsertTableCommand = editor.commands.get( 'insertTable' )!;\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Decorate dropdown's button.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\ticon: IconTable,\n\t\t\t\tlabel: t( 'Insert table' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tlet insertTableView: InsertTableView;\n\n\t\t\tdropdownView.on( 'change:isOpen', () => {\n\t\t\t\tif ( insertTableView ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prepare custom view for dropdown's panel.\n\t\t\t\tinsertTableView = new InsertTableView( locale );\n\t\t\t\tdropdownView.panelView.children.add( insertTableView );\n\n\t\t\t\tinsertTableView.delegate( 'execute' ).to( dropdownView );\n\n\t\t\t\tdropdownView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'insertTable', { rows: insertTableView.rows, columns: insertTableView.columns } );\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'menuBar:insertTable', locale => {\n\t\t\tconst command: InsertTableCommand = editor.commands.get( 'insertTable' )!;\n\t\t\tconst menuView = new MenuBarMenuView( locale );\n\t\t\tconst insertTableView = new InsertTableView( locale );\n\n\t\t\tinsertTableView.delegate( 'execute' ).to( menuView );\n\n\t\t\tmenuView.on<ObservableChangeEvent<boolean>>( 'change:isOpen', ( event, name, isOpen ) => {\n\t\t\t\tif ( !isOpen ) {\n\t\t\t\t\tinsertTableView.reset();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tinsertTableView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'insertTable', { rows: insertTableView.rows, columns: insertTableView.columns } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tmenuView.buttonView.set( {\n\t\t\t\tlabel: t( 'Table' ),\n\t\t\t\ticon: IconTable\n\t\t\t} );\n\n\t\t\tmenuView.panelView.children.add( insertTableView );\n\n\t\t\tmenuView.bind( 'isEnabled' ).to( command );\n\n\t\t\treturn menuView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableColumn', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableColumnHeader',\n\t\t\t\t\t\tlabel: t( 'Header column' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n\t\t\t\t\t\tlabel: t( 'Insert column left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n\t\t\t\t\t\tlabel: t( 'Insert column right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableColumn',\n\t\t\t\t\t\tlabel: t( 'Delete column' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'selectTableColumn',\n\t\t\t\t\t\tlabel: t( 'Select column' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] as Array<ListDropdownItemDefinition>;\n\n\t\t\treturn this._prepareDropdown( t( 'Column' ), IconTableColumn, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableRow', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableRowHeader',\n\t\t\t\t\t\tlabel: t( 'Header row' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowAbove',\n\t\t\t\t\t\tlabel: t( 'Insert row above' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowBelow',\n\t\t\t\t\t\tlabel: t( 'Insert row below' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableRow',\n\t\t\t\t\t\tlabel: t( 'Delete row' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'selectTableRow',\n\t\t\t\t\t\tlabel: t( 'Select row' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] as Array<ListDropdownItemDefinition>;\n\n\t\t\treturn this._prepareDropdown( t( 'Row' ), IconTableRow, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'mergeTableCells', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellUp',\n\t\t\t\t\t\tlabel: t( 'Merge cell up' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n\t\t\t\t\t\tlabel: t( 'Merge cell right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellDown',\n\t\t\t\t\t\tlabel: t( 'Merge cell down' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n\t\t\t\t\t\tlabel: t( 'Merge cell left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellVertically',\n\t\t\t\t\t\tlabel: t( 'Split cell vertically' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellHorizontally',\n\t\t\t\t\t\tlabel: t( 'Split cell horizontally' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] as Array<ListDropdownItemDefinition>;\n\n\t\t\treturn this._prepareMergeSplitButtonDropdown( t( 'Merge cells' ), IconTableMergeCell, options, locale );\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a dropdown view from a set of options.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */\n\tprivate _prepareDropdown( label: string, icon: string, options: Array<ListDropdownItemDefinition>, locale: Locale ) {\n\t\tconst editor = this.editor;\n\t\tconst dropdownView = createDropdown( locale );\n\t\tconst commands = this._fillDropdownWithListOptions( dropdownView, options );\n\n\t\t// Decorate dropdown's button.\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( ( evt.source as any ).commandName );\n\n\t\t\t// Toggling a switch button view should not move the focus to the editable.\n\t\t\tif ( !( evt.source instanceof SwitchButtonView ) ) {\n\t\t\t\teditor.editing.view.focus();\n\t\t\t}\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n\t * merge (and split)–related commands.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */\n\tprivate _prepareMergeSplitButtonDropdown( label: string, icon: string, options: Array<ListDropdownItemDefinition>, locale: Locale ) {\n\t\tconst editor = this.editor;\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst mergeCommandName = 'mergeTableCells';\n\n\t\t// Main command.\n\t\tconst mergeCommand: MergeCellsCommand = editor.commands.get( mergeCommandName )!;\n\n\t\t// Subcommands in the dropdown.\n\t\tconst commands = this._fillDropdownWithListOptions( dropdownView, options );\n\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tisEnabled: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled together with the main command.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( [ mergeCommand, ...commands ], 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\t// Merge selected table cells when the main part of the split button is clicked.\n\t\tthis.listenTo( dropdownView.buttonView, 'execute', () => {\n\t\t\teditor.execute( mergeCommandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\t// Execute commands for events coming from the list in the dropdown panel.\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( ( evt.source as any ).commandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n\t * which execute editor commands as configured in passed options.\n\t *\n\t * @param options The list of options for the dropdown.\n\t * @returns Commands the list options are interacting with.\n\t */\n\tprivate _fillDropdownWithListOptions( dropdownView: DropdownView, options: Array<ListDropdownItemDefinition> ) {\n\t\tconst editor = this.editor;\n\t\tconst commands: Array<Command> = [];\n\t\tconst itemDefinitions = new Collection<ListDropdownItemDefinition>();\n\n\t\tfor ( const option of options ) {\n\t\t\taddListOption( option, editor, commands, itemDefinitions );\n\t\t}\n\n\t\taddListToDropdown( dropdownView, itemDefinitions );\n\n\t\treturn commands;\n\t}\n}\n\n/**\n * Adds an option to a list view.\n *\n * @param option A configuration option.\n * @param commands The list of commands to update.\n * @param itemDefinitions A collection of dropdown items to update with the given option.\n */\nfunction addListOption(\n\toption: ListDropdownItemDefinition,\n\teditor: Editor,\n\tcommands: Array<Command>,\n\titemDefinitions: Collection<ListDropdownItemDefinition>\n) {\n\tif ( option.type === 'button' || option.type === 'switchbutton' ) {\n\t\tconst model = option.model = new UIModel( option.model );\n\t\tconst { commandName, bindIsOn } = option.model;\n\t\tconst command = editor.commands.get( commandName as string )!;\n\n\t\tcommands.push( command );\n\n\t\tmodel.set( { commandName } );\n\n\t\tmodel.bind( 'isEnabled' ).to( command );\n\n\t\tif ( bindIsOn ) {\n\t\t\tmodel.bind( 'isOn' ).to( command, 'value' );\n\t\t}\n\n\t\tmodel.set( {\n\t\t\twithText: true\n\t\t} );\n\t}\n\n\titemDefinitions.add( option );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableselection\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { type EventInfo, first } from 'ckeditor5/src/utils.js';\n\nimport type {\n\tModelElement,\n\tModelDocumentFragment,\n\tModelSelection,\n\tViewDowncastWriter,\n\tViewElement,\n\tModelDeleteContentEvent\n} from 'ckeditor5/src/engine.js';\n\nimport type {\n\tViewDocumentInsertTextEvent,\n\tInsertTextEventData\n} from 'ckeditor5/src/typing.js';\n\nimport { TableWalker } from './tablewalker.js';\nimport { TableUtils } from './tableutils.js';\n\nimport { cropTableToDimensions, adjustLastRowIndex, adjustLastColumnIndex } from './utils/structure.js';\n\nimport '../theme/tableselection.css';\n\n/**\n * This plugin enables the advanced table cells, rows and columns selection.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport class TableSelection extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableSelection' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableUtils, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\n\t\tthis.listenTo<ModelDeleteContentEvent>(\n\t\t\tmodel,\n\t\t\t'deleteContent',\n\t\t\t( evt, args ) => this._handleDeleteContent( evt, args ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis.listenTo<ViewDocumentInsertTextEvent>(\n\t\t\tview.document,\n\t\t\t'insertText',\n\t\t\t( evt, data ) => this._handleInsertTextEvent( evt, data ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis._defineSelectionConverter();\n\t\tthis._enablePluginDisabling(); // sic!\n\t}\n\n\t/**\n\t * Returns the currently selected table cells or `null` if it is not a table cells selection.\n\t */\n\tpublic getSelectedTableCells(): Array<ModelElement> | null {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst selectedCells = tableUtils.getSelectedTableCells( selection );\n\n\t\tif ( selectedCells.length == 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// This should never happen, but let's know if it ever happens.\n\t\t// @if CK_DEBUG //\tif ( selectedCells.length != selection.rangeCount ) {\n\t\t// @if CK_DEBUG //\t\tconsole.warn( 'Mixed selection warning. The selection contains table cells and some other ranges.' );\n\t\t// @if CK_DEBUG //\t}\n\n\t\treturn selectedCells;\n\t}\n\n\t/**\n\t * Returns the selected table fragment as a document fragment.\n\t */\n\tpublic getSelectionAsFragment(): ModelDocumentFragment | null {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\tif ( !selectedCells ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.editor.model.change( writer => {\n\t\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t\tconst { first: firstColumn, last: lastColumn } = tableUtils.getColumnIndexes( selectedCells );\n\t\t\tconst { first: firstRow, last: lastRow } = tableUtils.getRowIndexes( selectedCells );\n\n\t\t\tconst sourceTable = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\t\tlet adjustedLastRow = lastRow;\n\t\t\tlet adjustedLastColumn = lastColumn;\n\n\t\t\t// If the selection is rectangular there could be a case of all cells in the last row/column spanned over\n\t\t\t// next row/column so the real lastRow/lastColumn should be updated.\n\t\t\tif ( tableUtils.isSelectionRectangular( selectedCells ) ) {\n\t\t\t\tconst dimensions = {\n\t\t\t\t\tfirstColumn,\n\t\t\t\t\tlastColumn,\n\t\t\t\t\tfirstRow,\n\t\t\t\t\tlastRow\n\t\t\t\t};\n\n\t\t\t\tadjustedLastRow = adjustLastRowIndex( sourceTable, dimensions );\n\t\t\t\tadjustedLastColumn = adjustLastColumnIndex( sourceTable, dimensions );\n\t\t\t}\n\n\t\t\tconst cropDimensions = {\n\t\t\t\tstartRow: firstRow,\n\t\t\t\tstartColumn: firstColumn,\n\t\t\t\tendRow: adjustedLastRow,\n\t\t\t\tendColumn: adjustedLastColumn\n\t\t\t};\n\n\t\t\tconst table = cropTableToDimensions( sourceTable, cropDimensions, writer );\n\t\t\twriter.insert( table, documentFragment, 0 );\n\n\t\t\treturn documentFragment;\n\t\t} );\n\t}\n\n\t/**\n\t * Sets the model selection based on given anchor and target cells (can be the same cell).\n\t * Takes care of setting the backward flag.\n\t *\n\t * ```ts\n\t * const modelRoot = editor.model.document.getRoot();\n\t * const firstCell = modelRoot.getNodeByPath( [ 0, 0, 0 ] );\n\t * const lastCell = modelRoot.getNodeByPath( [ 0, 0, 1 ] );\n\t *\n\t * const tableSelection = editor.plugins.get( 'TableSelection' );\n\t * tableSelection.setCellSelection( firstCell, lastCell );\n\t * ```\n\t */\n\tpublic setCellSelection( anchorCell: ModelElement, targetCell: ModelElement ): void {\n\t\tconst cellsToSelect = this._getCellsToSelect( anchorCell, targetCell );\n\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection(\n\t\t\t\tcellsToSelect.cells.map( cell => writer.createRangeOn( cell ) ),\n\t\t\t\t{ backward: cellsToSelect.backward }\n\t\t\t);\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the focus cell from the current selection.\n\t */\n\tpublic getFocusCell(): ModelElement | null {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst focusCellRange = [ ...selection.getRanges() ].pop()!;\n\t\tconst element = focusCellRange.getContainedElement();\n\n\t\tif ( element && element.is( 'element', 'tableCell' ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the anchor cell from the current selection.\n\t */\n\tpublic getAnchorCell(): ModelElement | null {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst anchorCellRange = first( selection.getRanges() )!;\n\t\tconst element = anchorCellRange.getContainedElement();\n\n\t\tif ( element && element.is( 'element', 'tableCell' ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Defines a selection converter which marks the selected cells with a specific class.\n\t *\n\t * The real DOM selection is put in the last cell. Since the order of ranges is dependent on whether the\n\t * selection is backward or not, the last cell will usually be close to the \"focus\" end of the selection\n\t * (a selection has anchor and focus).\n\t *\n\t * The real DOM selection is then hidden with CSS.\n\t */\n\tprivate _defineSelectionConverter() {\n\t\tconst editor = this.editor;\n\t\tconst highlighted: Set<ViewElement> = new Set();\n\n\t\teditor.conversion.for( 'editingDowncast' ).add( dispatcher => dispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst viewWriter = conversionApi.writer;\n\n\t\t\tclearHighlightedTableCells( viewWriter );\n\n\t\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\t\tif ( !selectedCells ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor ( const tableCell of selectedCells ) {\n\t\t\t\tconst viewElement = conversionApi.mapper.toViewElement( tableCell )!;\n\n\t\t\t\tviewWriter.addClass( 'ck-editor__editable_selected', viewElement );\n\t\t\t\thighlighted.add( viewElement );\n\t\t\t}\n\n\t\t\tconst lastViewCell = conversionApi.mapper.toViewElement( selectedCells[ selectedCells.length - 1 ] );\n\t\t\tviewWriter.setSelection( lastViewCell, 0 );\n\t\t}, { priority: 'lowest' } ) );\n\n\t\tfunction clearHighlightedTableCells( viewWriter: ViewDowncastWriter ) {\n\t\t\tfor ( const previouslyHighlighted of highlighted ) {\n\t\t\t\tviewWriter.removeClass( 'ck-editor__editable_selected', previouslyHighlighted );\n\t\t\t}\n\n\t\t\thighlighted.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Creates a listener that reacts to changes in {@link #isEnabled} and, if the plugin was disabled,\n\t * it collapses the multi-cell selection to a regular selection placed inside a table cell.\n\t *\n\t * This listener helps features that disable the table selection plugin bring the selection\n\t * to a clear state they can work with (for instance, because they don't support multiple cell selection).\n\t */\n\tprivate _enablePluginDisabling() {\n\t\tconst editor = this.editor;\n\n\t\tthis.on( 'change:isEnabled', () => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\t\t\tif ( !selectedCells ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\tconst position = writer.createPositionAt( selectedCells[ 0 ], 0 );\n\t\t\t\t\tconst range = editor.model.schema.getNearestSelectionRange( position );\n\n\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Overrides the default `model.deleteContent()` behavior over a selected table fragment.\n\t *\n\t * @param args Delete content method arguments.\n\t */\n\tprivate _handleDeleteContent( event: EventInfo, args: Array<unknown> ) {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst selection = args[ 0 ] as ModelSelection;\n\t\tconst options = args[ 1 ] as { direction?: string };\n\t\tconst model = this.editor.model;\n\t\tconst isBackward = !options || options.direction == 'backward';\n\t\tconst selectedTableCells = tableUtils.getSelectedTableCells( selection );\n\n\t\tif ( !selectedTableCells.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tevent.stop();\n\n\t\tmodel.change( writer => {\n\t\t\tconst tableCellToSelect = selectedTableCells[ isBackward ? selectedTableCells.length - 1 : 0 ];\n\n\t\t\tmodel.change( writer => {\n\t\t\t\tfor ( const tableCell of selectedTableCells ) {\n\t\t\t\t\tmodel.deleteContent( writer.createSelection( tableCell, 'in' ) );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tconst rangeToSelect = model.schema.getNearestSelectionRange( writer.createPositionAt( tableCellToSelect, 0 ) );\n\n\t\t\t// Note: we ignore the case where rangeToSelect may be null because deleteContent() will always (unless someone broke it)\n\t\t\t// create an empty paragraph to accommodate the selection.\n\n\t\t\tif ( selection.is( 'documentSelection' ) ) {\n\t\t\t\twriter.setSelection( rangeToSelect );\n\t\t\t} else {\n\t\t\t\tselection.setTo( rangeToSelect );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * This handler makes it possible to remove the content of all selected cells by starting to type.\n\t * If you take a look at {@link #_defineSelectionConverter} you will find out that despite the multi-cell selection being set\n\t * in the model, the view selection is collapsed in the last cell (because most browsers are unable to render multi-cell selections;\n\t * yes, it's a hack).\n\t *\n\t * When multiple cells are selected in the model and the user starts to type, the\n\t * {@link module:engine/view/document~ViewDocument#event:insertText} event carries information provided by the\n\t * beforeinput DOM  event, that in turn only knows about this collapsed DOM selection in the last cell.\n\t *\n\t * As a result, the selected cells have no chance to be cleaned up. To fix this, this listener intercepts\n\t * the event and injects the custom view selection in the data that translates correctly to the actual state\n\t * of the multi-cell selection in the model.\n\t *\n\t * @param data Insert text event data.\n\t */\n\tprivate _handleInsertTextEvent( evt: EventInfo, data: InsertTextEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\tif ( !selectedCells ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst view = editor.editing.view;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst viewRanges = selectedCells.map( tableCell => view.createRangeOn( mapper.toViewElement( tableCell )! ) );\n\n\t\tdata.selection = view.createSelection( viewRanges );\n\n\t\t// Do not let the browser handle it itself. We must modify the model and then apply changes to the view and DOM.\n\t\tdata.preventDefault();\n\t}\n\n\t/**\n\t * Returns an array of table cells that should be selected based on the\n\t * given anchor cell and target (focus) cell.\n\t *\n\t * The cells are returned in a reverse direction if the selection is backward.\n\t */\n\tprivate _getCellsToSelect( anchorCell: ModelElement, targetCell: ModelElement ) {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst startLocation = tableUtils.getCellLocation( anchorCell );\n\t\tconst endLocation = tableUtils.getCellLocation( targetCell );\n\n\t\tconst startRow = Math.min( startLocation.row, endLocation.row );\n\t\tconst endRow = Math.max( startLocation.row, endLocation.row );\n\n\t\tconst startColumn = Math.min( startLocation.column, endLocation.column );\n\n\t\t// Adjust the selection to include the entire row if a cell with colspan is selected.\n\t\t// This ensures that the selection covers the full width of the colspan cell.\n\t\t//\n\t\t// Example:\n\t\t// +---+---+---+---+\n\t\t// | A | B | C | D |\n\t\t// +---+---+---+---+\n\t\t// | E             |\n\t\t// +---+---+---+---+\n\t\t//\n\t\t// If the selection starts at `B` and ends at `E`, the entire first row should be selected.\n\t\t//\n\t\t// In other words, the selection will represent the following cells:\n\t\t// \t* Without this adjustment, only `B`, `A` and `E` would be selected.\n\t\t// \t* With this adjustment, `A`, `B`, `C`, `D`, and `E` are selected.\n\t\t//\n\t\t// See: https://github.com/ckeditor/ckeditor5/issues/17538\n\t\tconst endColumnExtraColspan = ( parseInt( targetCell.getAttribute( 'colspan' ) as string || '1' ) - 1 );\n\t\tconst endColumn = Math.max( startLocation.column, endLocation.column + endColumnExtraColspan );\n\n\t\t// 2-dimensional array of the selected cells to ease flipping the order of cells for backward selections.\n\t\tconst selectionMap: Array<Array<ModelElement>> = new Array( endRow - startRow + 1 ).fill( null ).map( () => [] );\n\t\tconst walkerOptions = {\n\t\t\tstartRow,\n\t\t\tendRow,\n\t\t\tstartColumn,\n\t\t\tendColumn\n\t\t};\n\n\t\tfor ( const { row, cell } of new TableWalker( anchorCell.findAncestor( 'table' )!, walkerOptions ) ) {\n\t\t\tselectionMap[ row - startRow ].push( cell );\n\t\t}\n\n\t\tconst flipVertically = endLocation.row < startLocation.row;\n\t\tconst flipHorizontally = endLocation.column < startLocation.column;\n\n\t\tif ( flipVertically ) {\n\t\t\tselectionMap.reverse();\n\t\t}\n\n\t\tif ( flipHorizontally ) {\n\t\t\tselectionMap.forEach( row => row.reverse() );\n\t\t}\n\n\t\treturn {\n\t\t\tcells: selectionMap.flat(),\n\t\t\tbackward: flipVertically || flipHorizontally\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableclipboard\n */\n\nimport type { EventInfo } from 'ckeditor5/src/utils.js';\n\nimport {\n\tClipboardPipeline,\n\tClipboardMarkersUtils,\n\ttype ClipboardEventData,\n\ttype ViewDocumentCopyEvent,\n\ttype ViewDocumentCutEvent,\n\ttype ViewDocumentClipboardOutputEvent,\n\ttype ClipboardContentInsertionEvent\n} from 'ckeditor5/src/clipboard.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport type {\n\tModelDocumentFragment,\n\tModelDocumentSelection,\n\tViewDocumentDomEventData,\n\tModelElement,\n\tModelItem,\n\tModel,\n\tModelInsertContentEvent,\n\tModelPosition,\n\tModelSelection,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { TableSelection } from './tableselection.js';\nimport { TableWalker, type TableSlot } from './tablewalker.js';\nimport { TableUtils } from './tableutils.js';\nimport {\n\tcropTableToDimensions,\n\tgetHorizontallyOverlappingCells,\n\tgetVerticallyOverlappingCells,\n\tremoveEmptyRowsColumns,\n\tsplitHorizontally,\n\tsplitVertically,\n\ttrimTableCellIfNeeded,\n\tadjustLastRowIndex,\n\tadjustLastColumnIndex\n} from './utils/structure.js';\n\n/**\n * This plugin adds support for copying/cutting/pasting fragments of tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport class TableClipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableClipboard' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ClipboardMarkersUtils, ClipboardPipeline, TableSelection, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tthis.listenTo<ViewDocumentCopyEvent>( viewDocument, 'copy', ( evt, data ) => this._onCopyCut( evt, data ) );\n\t\tthis.listenTo<ViewDocumentCutEvent>( viewDocument, 'cut', ( evt, data ) => this._onCopyCut( evt, data ) );\n\t\tthis._listenToContentInsertion();\n\n\t\tthis.decorate( '_replaceTableSlotCell' );\n\t}\n\n\t/**\n\t * Sets up listening for events from the clipboard pipeline to properly handle\n\t * table content merging during paste/drop operations.\n\t *\n\t * When a user is dragging and dropping a table, we want to insert the entire table into\n\t * a table cell instead of merging table contents. For paste and other events,\n\t * the normal table merge behavior is applied.\n\t */\n\tprivate _listenToContentInsertion() {\n\t\tconst { editor } = this;\n\t\tconst clipboardPipeline = editor.plugins.get( ClipboardPipeline );\n\t\tconst tableSelection = editor.plugins.get( TableSelection );\n\n\t\tlet isPaste = false;\n\n\t\tclipboardPipeline.on<ClipboardContentInsertionEvent>( 'contentInsertion', ( evt, data ) => {\n\t\t\tisPaste = data.method === 'paste';\n\t\t} );\n\n\t\tthis.listenTo<ModelInsertContentEvent>(\n\t\t\teditor.model,\n\t\t\t'insertContent',\n\t\t\t( evt, [ content, selectable ] ) => {\n\t\t\t\t// Handles drag-and-drop of tables, where tables are inserted into selected cells rather than merged.\n\t\t\t\t// The `isPaste` flag handles scenarios where other features (e.g., Templates) insert tables into specific cells.\n\t\t\t\tif ( isPaste || tableSelection.getSelectedTableCells() !== null ) {\n\t\t\t\t\tthis._onInsertContent( evt, content, selectable );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tclipboardPipeline.on<ClipboardContentInsertionEvent>( 'contentInsertion', () => {\n\t\t\tisPaste = false;\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Copies table content to a clipboard on \"copy\" & \"cut\" events.\n\t *\n\t * @param evt An object containing information about the handled event.\n\t * @param data Clipboard event data.\n\t */\n\tprivate _onCopyCut( evt: EventInfo<'copy' | 'cut'>, data: ViewDocumentDomEventData<ClipboardEvent> & ClipboardEventData ) {\n\t\tconst view = this.editor.editing.view;\n\t\tconst tableSelection = this.editor.plugins.get( TableSelection );\n\t\tconst clipboardMarkersUtils = this.editor.plugins.get( ClipboardMarkersUtils );\n\n\t\tif ( !tableSelection.getSelectedTableCells() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( evt.name == 'cut' && !this.editor.model.canEditAt( this.editor.model.document.selection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdata.preventDefault();\n\t\tevt.stop();\n\n\t\tthis.editor.model.enqueueChange( { isUndoable: evt.name === 'cut' }, () => {\n\t\t\tconst documentFragment = clipboardMarkersUtils._copySelectedFragmentWithMarkers(\n\t\t\t\tevt.name,\n\t\t\t\tthis.editor.model.document.selection,\n\t\t\t\t() => tableSelection.getSelectionAsFragment()!\n\t\t\t);\n\n\t\t\tview.document.fire<ViewDocumentClipboardOutputEvent>( 'clipboardOutput', {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\tcontent: this.editor.data.toView( documentFragment ),\n\t\t\t\tmethod: evt.name\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Overrides default {@link module:engine/model/model~Model#insertContent `model.insertContent()`} method to handle pasting table inside\n\t * selected table fragment.\n\t *\n\t * Depending on selected table fragment:\n\t * - If a selected table fragment is smaller than paste table it will crop pasted table to match dimensions.\n\t * - If dimensions are equal it will replace selected table fragment with a pasted table contents.\n\t *\n\t * @param content The content to insert.\n\t * @param selectable The selection into which the content should be inserted.\n\t * If not provided the current model document selection will be used.\n\t */\n\tprivate _onInsertContent(\n\t\tevt: EventInfo,\n\t\tcontent: ModelDocumentFragment | ModelItem,\n\t\tselectable: ModelSelection | ModelDocumentSelection | undefined\n\t) {\n\t\tif ( selectable && !selectable.is( 'documentSelection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst clipboardMarkersUtils = this.editor.plugins.get( ClipboardMarkersUtils );\n\n\t\t// We might need to crop table before inserting so reference might change.\n\t\tconst pastedTable = this.getTableIfOnlyTableInContent( content, model )!;\n\n\t\tif ( !pastedTable ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectedTableCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\n\t\tif ( !selectedTableCells.length ) {\n\t\t\tremoveEmptyRowsColumns( pastedTable, tableUtils );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Override default model.insertContent() handling at this point.\n\t\tevt.stop();\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tclipboardMarkersUtils._pasteMarkersIntoTransformedElement(\n\t\t\t\tcontent.markers,\n\t\t\t\twriter => this._replaceSelectedCells( pastedTable, selectedTableCells, writer )\n\t\t\t);\n\t\t} else {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tthis._replaceSelectedCells( pastedTable, selectedTableCells, writer );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts provided `selectedTableCells` into `pastedTable`.\n\t */\n\tprivate _replaceSelectedCells( pastedTable: ModelElement, selectedTableCells: Array<ModelElement>, writer: ModelWriter ) {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tconst pastedDimensions = {\n\t\t\twidth: tableUtils.getColumns( pastedTable ),\n\t\t\theight: tableUtils.getRows( pastedTable )\n\t\t};\n\n\t\t// Prepare the table for pasting.\n\t\tconst selection = prepareTableForPasting( selectedTableCells, pastedDimensions, writer, tableUtils );\n\n\t\t// Beyond this point we operate on a fixed content table with rectangular selection and proper last row/column values.\n\n\t\tconst selectionHeight = selection.lastRow - selection.firstRow + 1;\n\t\tconst selectionWidth = selection.lastColumn - selection.firstColumn + 1;\n\n\t\t// Crop pasted table if:\n\t\t// - Pasted table dimensions exceeds selection area.\n\t\t// - Pasted table has broken layout (ie some cells sticks out by the table dimensions established by the first and last row).\n\t\t//\n\t\t// Note: The table dimensions are established by the width of the first row and the total number of rows.\n\t\t// It is possible to programmatically create a table that has rows which would have cells anchored beyond first row width but\n\t\t// such table will not be created by other editing solutions.\n\t\tconst cropDimensions = {\n\t\t\tstartRow: 0,\n\t\t\tstartColumn: 0,\n\t\t\tendRow: Math.min( selectionHeight, pastedDimensions.height ) - 1,\n\t\t\tendColumn: Math.min( selectionWidth, pastedDimensions.width ) - 1\n\t\t};\n\n\t\tpastedTable = cropTableToDimensions( pastedTable, cropDimensions, writer );\n\n\t\t// Content table to which we insert a pasted table.\n\t\tconst selectedTable = selectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst cellsToSelect = this._replaceSelectedCellsWithPasted( pastedTable, pastedDimensions, selectedTable, selection, writer );\n\n\t\tif ( this.editor.plugins.get( 'TableSelection' ).isEnabled ) {\n\t\t\t// Selection ranges must be sorted because the first and last selection ranges are considered\n\t\t\t// as anchor/focus cell ranges for multi-cell selection.\n\t\t\tconst selectionRanges = tableUtils.sortRanges( cellsToSelect.map( cell => writer.createRangeOn( cell ) ) );\n\n\t\t\twriter.setSelection( selectionRanges );\n\t\t} else {\n\t\t\t// Set selection inside first cell if multi-cell selection is disabled.\n\t\t\twriter.setSelection( cellsToSelect[ 0 ], 0 );\n\t\t}\n\n\t\treturn selectedTable;\n\t}\n\n\t/**\n\t * Replaces the part of selectedTable with pastedTable.\n\t */\n\tprivate _replaceSelectedCellsWithPasted(\n\t\tpastedTable: ModelElement,\n\t\tpastedDimensions: Record<string, number>,\n\t\tselectedTable: ModelElement,\n\t\tselection: Record<string, number>,\n\t\twriter: ModelWriter\n\t) {\n\t\tconst { width: pastedWidth, height: pastedHeight } = pastedDimensions;\n\n\t\t// Holds two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n\t\tconst pastedTableLocationMap = createLocationMap( pastedTable, pastedWidth, pastedHeight );\n\n\t\tconst selectedTableMap = [ ...new TableWalker( selectedTable, {\n\t\t\tstartRow: selection.firstRow,\n\t\t\tendRow: selection.lastRow,\n\t\t\tstartColumn: selection.firstColumn,\n\t\t\tendColumn: selection.lastColumn,\n\t\t\tincludeAllSlots: true\n\t\t} ) ];\n\n\t\t// Selection must be set to pasted cells (some might be removed or new created).\n\t\tconst cellsToSelect: Array<ModelElement> = [];\n\n\t\t// Store next cell insert position.\n\t\tlet insertPosition: ModelPosition;\n\n\t\t// Content table replace cells algorithm iterates over a selected table fragment and:\n\t\t//\n\t\t// - Removes existing table cells at current slot (location).\n\t\t// - Inserts cell from a pasted table for a matched slots.\n\t\t//\n\t\t// This ensures proper table geometry after the paste\n\t\tfor ( const tableSlot of selectedTableMap ) {\n\t\t\tconst { row, column } = tableSlot;\n\n\t\t\t// Save the insert position for current row start.\n\t\t\tif ( column === selection.firstColumn ) {\n\t\t\t\tinsertPosition = tableSlot.getPositionBefore();\n\t\t\t}\n\n\t\t\t// Map current table slot location to an pasted table slot location.\n\t\t\tconst pastedRow = row - selection.firstRow;\n\t\t\tconst pastedColumn = column - selection.firstColumn;\n\t\t\tconst pastedCell = pastedTableLocationMap[ pastedRow % pastedHeight ][ pastedColumn % pastedWidth ];\n\n\t\t\t// Clone cell to insert (to duplicate its attributes and children).\n\t\t\t// Cloning is required to support repeating pasted table content when inserting to a bigger selection.\n\t\t\tconst cellToInsert = pastedCell ? writer.cloneElement( pastedCell ) : null;\n\n\t\t\t// Replace the cell from the current slot with new table cell.\n\t\t\tconst newTableCell = this._replaceTableSlotCell( tableSlot, cellToInsert, insertPosition!, writer );\n\n\t\t\t// The cell was only removed.\n\t\t\tif ( !newTableCell ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Trim the cell if it's row/col-spans would exceed selection area.\n\t\t\ttrimTableCellIfNeeded( newTableCell, row, column, selection.lastRow, selection.lastColumn, writer );\n\n\t\t\tcellsToSelect.push( newTableCell );\n\n\t\t\tinsertPosition = writer.createPositionAfter( newTableCell );\n\t\t}\n\n\t\t// If there are any headings, all the cells that overlap from heading must be splitted.\n\t\tconst headingRows = parseInt( selectedTable.getAttribute( 'headingRows' ) as string || '0' );\n\t\tconst headingColumns = parseInt( selectedTable.getAttribute( 'headingColumns' ) as string || '0' );\n\n\t\tconst areHeadingRowsIntersectingSelection = selection.firstRow < headingRows && headingRows <= selection.lastRow;\n\t\tconst areHeadingColumnsIntersectingSelection = selection.firstColumn < headingColumns && headingColumns <= selection.lastColumn;\n\n\t\tif ( areHeadingRowsIntersectingSelection ) {\n\t\t\tconst columnsLimit = { first: selection.firstColumn, last: selection.lastColumn };\n\t\t\tconst newCells = doHorizontalSplit(\n\t\t\t\tselectedTable, headingRows, columnsLimit, writer, selection.firstRow\n\t\t\t) as Array<ModelElement>;\n\n\t\t\tcellsToSelect.push( ...newCells );\n\t\t}\n\n\t\tif ( areHeadingColumnsIntersectingSelection ) {\n\t\t\tconst rowsLimit = { first: selection.firstRow, last: selection.lastRow };\n\t\t\tconst newCells = doVerticalSplit( selectedTable, headingColumns, rowsLimit, writer ) as Array<ModelElement>;\n\n\t\t\tcellsToSelect.push( ...newCells );\n\t\t}\n\n\t\treturn cellsToSelect;\n\t}\n\n\t/**\n\t * Replaces a single table slot.\n\t *\n\t * @returns Inserted table cell or null if slot should remain empty.\n\t * @private\n\t */\n\tpublic _replaceTableSlotCell(\n\t\ttableSlot: TableSlot,\n\t\tcellToInsert: ModelElement | null,\n\t\tinsertPosition: ModelPosition,\n\t\twriter: ModelWriter\n\t): ModelElement | null {\n\t\tconst { cell, isAnchor } = tableSlot;\n\n\t\t// If the slot is occupied by a cell in a selected table - remove it.\n\t\t// The slot of this cell will be either:\n\t\t// - Replaced by a pasted table cell.\n\t\t// - Spanned by a previously pasted table cell.\n\t\tif ( isAnchor ) {\n\t\t\twriter.remove( cell );\n\t\t}\n\n\t\t// There is no cell to insert (might be spanned by other cell in a pasted table) - advance to the next content table slot.\n\t\tif ( !cellToInsert ) {\n\t\t\treturn null;\n\t\t}\n\n\t\twriter.insert( cellToInsert, insertPosition );\n\n\t\treturn cellToInsert;\n\t}\n\n\t/**\n\t * Extracts the table for pasting into a table.\n\t *\n\t * @param content The content to insert.\n\t * @param model The editor model.\n\t */\n\tpublic getTableIfOnlyTableInContent( content: ModelDocumentFragment | ModelItem, model: Model ): ModelElement | null {\n\t\tif ( !content.is( 'documentFragment' ) && !content.is( 'element' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Table passed directly.\n\t\tif ( content.is( 'element', 'table' ) ) {\n\t\t\treturn content;\n\t\t}\n\n\t\t// We do not support mixed content when pasting table into table.\n\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6817.\n\t\tif ( content.childCount == 1 && content.getChild( 0 )!.is( 'element', 'table' ) ) {\n\t\t\treturn content.getChild( 0 ) as ModelElement;\n\t\t}\n\n\t\t// If there are only whitespaces around a table then use that table for pasting.\n\n\t\tconst contentRange = model.createRangeIn( content );\n\n\t\tfor ( const element of contentRange.getItems() ) {\n\t\t\tif ( element.is( 'element', 'table' ) ) {\n\t\t\t\t// Stop checking if there is some content before table.\n\t\t\t\tconst rangeBefore = model.createRange( contentRange.start, model.createPositionBefore( element ) );\n\n\t\t\t\tif ( model.hasContent( rangeBefore, { ignoreWhitespaces: true } ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Stop checking if there is some content after table.\n\t\t\t\tconst rangeAfter = model.createRange( model.createPositionAfter( element ), contentRange.end );\n\n\t\t\t\tif ( model.hasContent( rangeAfter, { ignoreWhitespaces: true } ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// There wasn't any content neither before nor after.\n\t\t\t\treturn element;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * Prepares a table for pasting and returns adjusted selection dimensions.\n */\nfunction prepareTableForPasting(\n\tselectedTableCells: Array<ModelElement>,\n\tpastedDimensions: {\n\t\theight: number;\n\t\twidth: number;\n\t},\n\twriter: ModelWriter,\n\ttableUtils: TableUtils\n) {\n\tconst selectedTable = selectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\tconst columnIndexes = tableUtils.getColumnIndexes( selectedTableCells );\n\tconst rowIndexes = tableUtils.getRowIndexes( selectedTableCells );\n\n\tconst selection = {\n\t\tfirstColumn: columnIndexes.first,\n\t\tlastColumn: columnIndexes.last,\n\t\tfirstRow: rowIndexes.first,\n\t\tlastRow: rowIndexes.last\n\t};\n\n\t// Single cell selected - expand selection to pasted table dimensions.\n\tconst shouldExpandSelection = selectedTableCells.length === 1;\n\n\tif ( shouldExpandSelection ) {\n\t\tselection.lastRow += pastedDimensions.height - 1;\n\t\tselection.lastColumn += pastedDimensions.width - 1;\n\n\t\texpandTableSize( selectedTable, selection.lastRow + 1, selection.lastColumn + 1, tableUtils );\n\t}\n\n\t// In case of expanding selection we do not reset the selection so in this case we will always try to fix selection\n\t// like in the case of a non-rectangular area. This might be fixed by re-setting selected cells array but this shortcut is safe.\n\tif ( shouldExpandSelection || !tableUtils.isSelectionRectangular( selectedTableCells ) ) {\n\t\t// For a non-rectangular selection (ie in which some cells sticks out from a virtual selection rectangle) we need to create\n\t\t// a table layout that has a rectangular selection. This will split cells so the selection become rectangular.\n\t\t// Beyond this point we will operate on fixed content table.\n\t\tsplitCellsToRectangularSelection( selectedTable, selection, writer );\n\t}\n\t// However a selected table fragment might be invalid if examined alone. Ie such table fragment:\n\t//\n\t//    +---+---+---+---+\n\t//  0 | a | b | c | d |\n\t//    +   +   +---+---+\n\t//  1 |   | e | f | g |\n\t//    +   +---+   +---+\n\t//  2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n\t//    +   +   +   +   +    so we need to return 3, not 2\n\t//  3 |   |   |   |   |\n\t//    +---+---+---+---+\n\t//\n\t// is invalid as the cells \"h\" and \"i\" have rowspans.\n\t// This case needs only adjusting the selection dimension as the rest of the algorithm operates on empty slots also.\n\telse {\n\t\tselection.lastRow = adjustLastRowIndex( selectedTable, selection );\n\t\tselection.lastColumn = adjustLastColumnIndex( selectedTable, selection );\n\t}\n\n\treturn selection;\n}\n\n/**\n * Expand table (in place) to expected size.\n */\nfunction expandTableSize( table: ModelElement, expectedHeight: number, expectedWidth: number, tableUtils: TableUtils ) {\n\tconst tableWidth = tableUtils.getColumns( table );\n\tconst tableHeight = tableUtils.getRows( table );\n\n\tif ( expectedWidth > tableWidth ) {\n\t\ttableUtils.insertColumns( table, {\n\t\t\tat: tableWidth,\n\t\t\tcolumns: expectedWidth - tableWidth\n\t\t} );\n\t}\n\n\tif ( expectedHeight > tableHeight ) {\n\t\ttableUtils.insertRows( table, {\n\t\t\tat: tableHeight,\n\t\t\trows: expectedHeight - tableHeight\n\t\t} );\n\t}\n}\n\n/**\n * Returns two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n *\n * At given row & column location it might be one of:\n *\n * * cell - cell from pasted table anchored at this location.\n * * null - if no cell is anchored at this location.\n *\n * For instance, from a table below:\n *\n *   +----+----+----+----+\n *   | 00 | 01 | 02 | 03 |\n *   +    +----+----+----+\n *   |    | 11      | 13 |\n *   +----+         +----+\n *   | 20 |         | 23 |\n *   +----+----+----+----+\n *\n * The method will return an array (numbers represents cell element):\n *\n * ```ts\n * const map = [\n *   [ '00', '01', '02', '03' ],\n *   [ null, '11', null, '13' ],\n *   [ '20', null, null, '23' ]\n * ]\n * ```\n *\n * This allows for a quick access to table at give row & column. For instance to access table cell \"13\" from pasted table call:\n *\n * ```ts\n * const cell = map[ 1 ][ 3 ]\n * ```\n */\nfunction createLocationMap( table: ModelElement, width: number, height: number ) {\n\t// Create height x width (row x column) two-dimensional table to store cells.\n\tconst map = new Array( height ).fill( null )\n\t\t.map( () => new Array( width ).fill( null ) );\n\n\tfor ( const { column, row, cell } of new TableWalker( table ) ) {\n\t\tmap[ row ][ column ] = cell;\n\t}\n\n\treturn map;\n}\n\n/**\n * Make selected cells rectangular by splitting the cells that stand out from a rectangular selection.\n *\n * In the table below a selection is shown with \"::\" and slots with anchor cells are named.\n *\n * +----+----+----+----+----+                    +----+----+----+----+----+\n * | 00 | 01 | 02 | 03      |                    | 00 | 01 | 02 | 03      |\n * +    +----+    +----+----+                    |    ::::::::::::::::----+\n * |    | 11 |    | 13 | 14 |                    |    ::11 |    | 13:: 14 |    <- first row\n * +----+----+    +    +----+                    +----::---|    |   ::----+\n * | 20 | 21 |    |    | 24 |   select cells:    | 20 ::21 |    |   :: 24 |\n * +----+----+    +----+----+     11 -> 33       +----::---|    |---::----+\n * | 30      |    | 33 | 34 |                    | 30 ::   |    | 33:: 34 |    <- last row\n * +         +    +----+    +                    |    ::::::::::::::::    +\n * |         |    | 43 |    |                    |         |    | 43 |    |\n * +----+----+----+----+----+                    +----+----+----+----+----+\n *                                                      ^          ^\n *                                                     first & last columns\n *\n * Will update table to:\n *\n *                       +----+----+----+----+----+\n *                       | 00 | 01 | 02 | 03      |\n *                       +    +----+----+----+----+\n *                       |    | 11 |    | 13 | 14 |\n *                       +----+----+    +    +----+\n *                       | 20 | 21 |    |    | 24 |\n *                       +----+----+    +----+----+\n *                       | 30 |    |    | 33 | 34 |\n *                       +    +----+----+----+    +\n *                       |    |    |    | 43 |    |\n *                       +----+----+----+----+----+\n *\n * In th example above:\n * - Cell \"02\" which have `rowspan = 4` must be trimmed at first and at after last row.\n * - Cell \"03\" which have `rowspan = 2` and `colspan = 2` must be trimmed at first column and after last row.\n * - Cells \"00\", \"03\" & \"30\" which cannot be cut by this algorithm as they are outside the trimmed area.\n * - Cell \"13\" cannot be cut as it is inside the trimmed area.\n */\nfunction splitCellsToRectangularSelection( table: ModelElement, dimensions: Record<string, number>, writer: ModelWriter ) {\n\tconst { firstRow, lastRow, firstColumn, lastColumn } = dimensions;\n\n\tconst rowIndexes = { first: firstRow, last: lastRow };\n\tconst columnIndexes = { first: firstColumn, last: lastColumn };\n\n\t// 1. Split cells vertically in two steps as first step might create cells that needs to split again.\n\tdoVerticalSplit( table, firstColumn, rowIndexes, writer );\n\tdoVerticalSplit( table, lastColumn + 1, rowIndexes, writer );\n\n\t// 2. Split cells horizontally in two steps as first step might create cells that needs to split again.\n\tdoHorizontalSplit( table, firstRow, columnIndexes, writer );\n\tdoHorizontalSplit( table, lastRow + 1, columnIndexes, writer, firstRow );\n}\n\nfunction doHorizontalSplit(\n\ttable: ModelElement,\n\tsplitRow: number,\n\tlimitColumns: Record<string, number>,\n\twriter: ModelWriter,\n\tstartRow: number = 0\n) {\n\t// If selection starts at first row then no split is needed.\n\tif ( splitRow < 1 ) {\n\t\treturn;\n\t}\n\n\tconst overlappingCells = getVerticallyOverlappingCells( table, splitRow, startRow );\n\n\t// Filter out cells that are not touching insides of the rectangular selection.\n\tconst cellsToSplit = overlappingCells.filter( ( { column, cellWidth } ) => isAffectedBySelection( column, cellWidth, limitColumns ) );\n\n\treturn cellsToSplit.map( ( { cell } ) => splitHorizontally( cell, splitRow, writer ) );\n}\n\nfunction doVerticalSplit( table: ModelElement, splitColumn: number, limitRows: Record<string, number>, writer: ModelWriter ) {\n\t// If selection starts at first column then no split is needed.\n\tif ( splitColumn < 1 ) {\n\t\treturn;\n\t}\n\n\tconst overlappingCells = getHorizontallyOverlappingCells( table, splitColumn );\n\n\t// Filter out cells that are not touching insides of the rectangular selection.\n\tconst cellsToSplit = overlappingCells.filter( ( { row, cellHeight } ) => isAffectedBySelection( row, cellHeight, limitRows ) );\n\n\treturn cellsToSplit.map( ( { cell, column } ) => splitVertically( cell, column, splitColumn, writer ) );\n}\n\n/**\n * Checks if cell at given row (column) is affected by a rectangular selection defined by first/last column (row).\n *\n * The same check is used for row as for column.\n */\nfunction isAffectedBySelection( index: number, span: number, limit: Record<string, number> ) {\n\tconst endIndex = index + span - 1;\n\tconst { first, last } = limit;\n\n\tconst isInsideSelection = index >= first && index <= last;\n\tconst overlapsSelectionFromOutside = index < first && endIndex >= first;\n\n\treturn isInsideSelection || overlapsSelectionFromOutside;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablekeyboard\n */\n\nimport { TableSelection } from './tableselection.js';\nimport { TableWalker } from './tablewalker.js';\nimport { TableUtils } from './tableutils.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\tgetLocalizedArrowKeyCodeDirection,\n\ttype EventInfo,\n\ttype ArrowKeyCodeDirection,\n\ttype KeystrokeInfo\n} from 'ckeditor5/src/utils.js';\n\nimport type {\n\tBubblingEventInfo,\n\tModelDocumentSelection,\n\tViewDocumentDomEventData,\n\tModelElement,\n\tModelSelection,\n\tViewDocumentArrowKeyEvent,\n\tViewDocumentTabEvent\n} from 'ckeditor5/src/engine.js';\n\n/**\n * This plugin enables keyboard navigation for tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport class TableKeyboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableKeyboard' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableSelection, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst t = editor.t;\n\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tviewDocument,\n\t\t\t'arrowKey',\n\t\t\t( ...args ) => this._onArrowKey( ...args ),\n\t\t\t{ context: 'table' }\n\t\t);\n\n\t\tthis.listenTo<ViewDocumentTabEvent>(\n\t\t\tviewDocument,\n\t\t\t'tab',\n\t\t\t( ...args ) => this._handleTabOnSelectedTable( ...args ),\n\t\t\t{ context: 'figure' }\n\t\t);\n\n\t\tthis.listenTo<ViewDocumentTabEvent>(\n\t\t\tviewDocument,\n\t\t\t'tab',\n\t\t\t( ...args ) => this._handleTab( ...args ),\n\t\t\t{ context: [ 'th', 'td' ] }\n\t\t);\n\n\t\t// Add the information about the keystrokes to the accessibility database.\n\t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t\t\tid: 'table',\n\t\t\tlabel: t( 'Keystrokes that can be used in a table cell' ),\n\t\t\tkeystrokes: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the selection to the next cell' ),\n\t\t\t\t\tkeystroke: 'Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the selection to the previous cell' ),\n\t\t\t\t\tkeystroke: 'Shift+Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Insert a new table row (when in the last cell of a table)' ),\n\t\t\t\t\tkeystroke: 'Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Navigate through the table' ),\n\t\t\t\t\tkeystroke: [ [ 'arrowup' ], [ 'arrowright' ], [ 'arrowdown' ], [ 'arrowleft' ] ]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t */\n\tprivate _handleTabOnSelectedTable( bubblingEventInfo: BubblingEventInfo, domEventData: ViewDocumentDomEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\tif ( !selectedElement || !selectedElement.is( 'element', 'table' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\t\tdomEventData.stopPropagation();\n\t\tbubblingEventInfo.stop();\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( ( selectedElement.getChild( 0 ) as ModelElement ).getChild( 0 ) as ModelElement ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * inside table cells.\n\t */\n\tprivate _handleTab( bubblingEventInfo: BubblingEventInfo, domEventData: ViewDocumentDomEventData & KeystrokeInfo ) {\n\t\tconst editor = this.editor;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst tableSelection: TableSelection = this.editor.plugins.get( 'TableSelection' );\n\n\t\tconst selection = editor.model.document.selection;\n\t\tconst isForward = !domEventData.shiftKey;\n\n\t\tlet tableCell: ModelElement | null = tableUtils.getTableCellsContainingSelection( selection )[ 0 ];\n\n\t\tif ( !tableCell ) {\n\t\t\ttableCell = tableSelection.getFocusCell();\n\t\t}\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\t\tdomEventData.stopPropagation();\n\t\tbubblingEventInfo.stop();\n\n\t\tconst tableRow = tableCell.parent as ModelElement;\n\t\tconst table = tableRow.parent as ModelElement;\n\n\t\tconst currentRowIndex = table.getChildIndex( tableRow )!;\n\t\tconst currentCellIndex = tableRow.getChildIndex( tableCell )!;\n\n\t\tconst isFirstCellInRow = currentCellIndex === 0;\n\n\t\tif ( !isForward && isFirstCellInRow && currentRowIndex === 0 ) {\n\t\t\t// Set the selection over the whole table if the selection was in the first table cell.\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeOn( table ) );\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n\t\tconst isLastRow = currentRowIndex === tableUtils.getRows( table ) - 1;\n\n\t\tif ( isForward && isLastRow && isLastCellInRow ) {\n\t\t\teditor.execute( 'insertTableRowBelow' );\n\n\t\t\t// Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n\t\t\t// or it got overwritten) set the selection over the whole table to mirror the first cell case.\n\t\t\tif ( currentRowIndex === tableUtils.getRows( table ) - 1 ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.setSelection( writer.createRangeOn( table ) );\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet cellToFocus: ModelElement;\n\n\t\t// Move to the first cell in the next row.\n\t\tif ( isForward && isLastCellInRow ) {\n\t\t\tconst nextRow = table.getChild( currentRowIndex + 1 ) as ModelElement;\n\n\t\t\tcellToFocus = nextRow.getChild( 0 ) as ModelElement;\n\t\t}\n\t\t// Move to the last cell in the previous row.\n\t\telse if ( !isForward && isFirstCellInRow ) {\n\t\t\tconst previousRow = table.getChild( currentRowIndex - 1 ) as ModelElement;\n\n\t\t\tcellToFocus = previousRow.getChild( previousRow.childCount - 1 ) as ModelElement;\n\t\t}\n\t\t// Move to the next/previous cell.\n\t\telse {\n\t\t\tcellToFocus = tableRow.getChild( currentCellIndex + ( isForward ? 1 : -1 ) ) as ModelElement;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( cellToFocus ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:keydown keydown} events.\n\t */\n\tprivate _onArrowKey( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData & KeystrokeInfo ) {\n\t\tconst editor = this.editor;\n\t\tconst keyCode = domEventData.keyCode;\n\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( keyCode, editor.locale.contentLanguageDirection )!;\n\t\tconst wasHandled = this._handleArrowKeys( direction, domEventData.shiftKey );\n\n\t\tif ( wasHandled ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles arrow keys to move the selection around the table.\n\t *\n\t * @param direction The direction of the arrow key.\n\t * @param expandSelection If the current selection should be expanded.\n\t * @returns Returns `true` if key was handled.\n\t */\n\tprivate _handleArrowKeys( direction: ArrowKeyCodeDirection, expandSelection: boolean ) {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst tableSelection: TableSelection = this.editor.plugins.get( 'TableSelection' );\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst isForward = [ 'right', 'down' ].includes( direction );\n\n\t\t// In case one or more table cells are selected (from outside),\n\t\t// move the selection to a cell adjacent to the selected table fragment.\n\t\tconst selectedCells = tableUtils.getSelectedTableCells( selection );\n\n\t\tif ( selectedCells.length ) {\n\t\t\tlet focusCell;\n\n\t\t\tif ( expandSelection ) {\n\t\t\t\tfocusCell = tableSelection.getFocusCell();\n\t\t\t} else {\n\t\t\t\tfocusCell = isForward ? selectedCells[ selectedCells.length - 1 ] : selectedCells[ 0 ];\n\t\t\t}\n\n\t\t\tthis._navigateFromCellInDirection( focusCell!, direction, expandSelection );\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Abort if we're not in a table cell.\n\t\tconst tableCell = selection.focus!.findAncestor( 'tableCell' );\n\n\t\t/* istanbul ignore if: paranoid check -- @preserve */\n\t\tif ( !tableCell ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// When the selection is not collapsed.\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tif ( expandSelection ) {\n\t\t\t\t// Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n\t\t\t\t// Selection for sure will not approach cell edge.\n\t\t\t\t//\n\t\t\t\t// With a special case when all cell content is selected - then selection should expand to the other cell.\n\t\t\t\t// Note: When the entire cell gets selected using CTRL+A, the selection is always forward.\n\t\t\t\tif ( selection.isBackward == isForward && !selection.containsEntireContent( tableCell ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\t\t// It will collapse for non-object selected so it's not going to move to other cell.\n\t\t\t\tif ( !selectedElement || !model.schema.isObject( selectedElement ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Let's check if the selection is at the beginning/end of the cell.\n\t\tif ( this._isSelectionAtCellEdge( selection, tableCell, isForward ) ) {\n\t\t\tthis._navigateFromCellInDirection( tableCell, direction, expandSelection );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns `true` if the selection is at the boundary of a table cell according to the navigation direction.\n\t *\n\t * @param selection The current selection.\n\t * @param tableCell The current table cell element.\n\t * @param isForward The expected navigation direction.\n\t */\n\tprivate _isSelectionAtCellEdge( selection: ModelSelection | ModelDocumentSelection, tableCell: ModelElement, isForward: boolean ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst focus = isForward ? selection.getLastPosition()! : selection.getFirstPosition()!;\n\n\t\t// If the current limit element is not table cell we are for sure not at the cell edge.\n\t\t// Also `modifySelection` will not let us out of it.\n\t\tif ( !schema.getLimitElement( focus ).is( 'element', 'tableCell' ) ) {\n\t\t\tconst boundaryPosition = model.createPositionAt( tableCell, isForward ? 'end' : 0 );\n\n\t\t\treturn boundaryPosition.isTouching( focus );\n\t\t}\n\n\t\tconst probe = model.createSelection( focus );\n\n\t\tmodel.modifySelection( probe, { direction: isForward ? 'forward' : 'backward' } );\n\n\t\t// If there was no change in the focus position, then it's not possible to move the selection there.\n\t\treturn focus.isEqual( probe.focus! );\n\t}\n\n\t/**\n\t * Moves the selection from the given table cell in the specified direction.\n\t *\n\t * @param focusCell The table cell that is current multi-cell selection focus.\n\t * @param direction Direction in which selection should move.\n\t * @param expandSelection If the current selection should be expanded. Default value is false.\n\t */\n\tprotected _navigateFromCellInDirection( focusCell: ModelElement, direction: ArrowKeyCodeDirection, expandSelection = false ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst table = focusCell.findAncestor( 'table' )!;\n\t\tconst tableMap = [ ...new TableWalker( table, { includeAllSlots: true } ) ];\n\t\tconst { row: lastRow, column: lastColumn } = tableMap[ tableMap.length - 1 ];\n\n\t\tconst currentCellInfo = tableMap.find( ( { cell } ) => cell == focusCell )!;\n\t\tlet { row, column } = currentCellInfo;\n\n\t\tswitch ( direction ) {\n\t\t\tcase 'left':\n\t\t\t\tcolumn--;\n\t\t\t\tbreak;\n\n\t\t\tcase 'up':\n\t\t\t\trow--;\n\t\t\t\tbreak;\n\n\t\t\tcase 'right':\n\t\t\t\tcolumn += currentCellInfo.cellWidth;\n\t\t\t\tbreak;\n\n\t\t\tcase 'down':\n\t\t\t\trow += currentCellInfo.cellHeight;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst isOutsideVertically = row < 0 || row > lastRow;\n\t\tconst isBeforeFirstCell = column < 0 && row <= 0;\n\t\tconst isAfterLastCell = column > lastColumn && row >= lastRow;\n\n\t\t// Note that if the table cell at the end of a row is row-spanned then isAfterLastCell will never be true.\n\t\t// However, we don't know if user was navigating on the last row or not, so let's stay in the table.\n\n\t\tif ( isOutsideVertically || isBeforeFirstCell || isAfterLastCell ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeOn( table ) );\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( column < 0 ) {\n\t\t\tcolumn = expandSelection ? 0 : lastColumn;\n\t\t\trow--;\n\t\t} else if ( column > lastColumn ) {\n\t\t\tcolumn = expandSelection ? lastColumn : 0;\n\t\t\trow++;\n\t\t}\n\n\t\tconst cellToSelect = tableMap.find( cellInfo => cellInfo.row == row && cellInfo.column == column )!.cell;\n\t\tconst isForward = [ 'right', 'down' ].includes( direction );\n\t\tconst tableSelection: TableSelection = this.editor.plugins.get( 'TableSelection' );\n\n\t\tif ( expandSelection && tableSelection.isEnabled ) {\n\t\t\tconst anchorCell = tableSelection.getAnchorCell() || focusCell;\n\n\t\t\ttableSelection.setCellSelection( anchorCell, cellToSelect );\n\t\t} else {\n\t\t\tconst positionToSelect = model.createPositionAt( cellToSelect, isForward ? 0 : 'end' );\n\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( positionToSelect );\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablemouse/mouseeventsobserver\n */\n\nimport { DomEventObserver, type ViewDocumentDomEventData } from 'ckeditor5/src/engine.js';\n\n/**\n * The mouse selection event observer.\n *\n * It registers listeners for the following DOM events:\n *\n * - `'mousemove'`\n * - `'mouseleave'`\n *\n * Note that this observer is disabled by default. To enable this observer, it needs to be added to\n * {@link module:engine/view/view~EditingView} using the {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * The observer is registered by the {@link module:table/tableselection~TableSelection} plugin.\n *\n * @internal\n */\nexport class MouseEventsObserver extends DomEventObserver<'mousemove' | 'mouseleave'> {\n\tpublic readonly domEventType = [\n\t\t'mousemove', 'mouseleave'\n\t] as const;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic onDomEvent( domEvent: MouseEvent ): void {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when the mouse is moved over one of the editables.\n *\n * Introduced by {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver}.\n *\n * Note that this event is not available by default. To make it available,\n * {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver} needs to be added\n * to {@link module:engine/view/view~EditingView} using the {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * @see module:table/tablemouse/mouseeventsobserver~MouseEventsObserver\n * @eventName module:engine/view/document~ViewDocument#mousemove\n * @param data Event data.\n */\nexport type ViewDocumentTableMouseMoveEvent = {\n\tname: 'mousemove';\n\targs: [ data: ViewDocumentDomEventData<MouseEvent> ];\n};\n\n/**\n * Fired when the mouse is moved out of one of the editables.\n *\n * Introduced by {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver}.\n *\n * Note that this event is not available by default. To make it available,\n * {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver} needs to be added\n * to {@link module:engine/view/view~EditingView} using the {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * @see module:table/tablemouse/mouseeventsobserver~MouseEventsObserver\n * @eventName module:engine/view/document~ViewDocument#mouseleave\n * @param data Event data.\n */\nexport type ViewDocumentTableMouseLeaveEvent = {\n\tname: 'mouseleave';\n\targs: [ data: ViewDocumentDomEventData<MouseEvent> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablemouse\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { TableSelection } from './tableselection.js';\nimport { MouseEventsObserver } from './tablemouse/mouseeventsobserver.js';\nimport { TableUtils } from './tableutils.js';\nimport type { ViewDocumentDomEventData, ModelElement } from 'ckeditor5/src/engine.js';\n\n/**\n * This plugin enables a table cells' selection with the mouse.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport class TableMouse extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableMouse' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableSelection, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Currently the MouseObserver only handles `mousedown` and `mouseup` events.\n\t\t// TODO move to the engine?\n\t\teditor.editing.view.addObserver( MouseEventsObserver );\n\n\t\tthis._enableShiftClickSelection();\n\t\tthis._enableMouseDragSelection();\n\t}\n\n\t/**\n\t * Enables making cells selection by <kbd>Shift</kbd>+click. Creates a selection from the cell which previously held\n\t * the selection to the cell which was clicked. It can be the same cell, in which case it selects a single cell.\n\t */\n\tprivate _enableShiftClickSelection() {\n\t\tconst editor = this.editor;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\t\tlet blockSelectionChange = false;\n\n\t\tconst tableSelection = editor.plugins.get( TableSelection );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tif ( !this.isEnabled || !tableSelection.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !domEventData.domEvent.shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst anchorCell = tableSelection.getAnchorCell() || tableUtils.getTableCellsContainingSelection( selection )[ 0 ];\n\n\t\t\tif ( !anchorCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst targetCell = this._getModelTableCellFromDomEvent( domEventData );\n\n\t\t\tif ( targetCell && haveSameTableParent( anchorCell, targetCell ) ) {\n\t\t\t\tblockSelectionChange = true;\n\t\t\t\ttableSelection.setCellSelection( anchorCell, targetCell );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mouseup', () => {\n\t\t\tblockSelectionChange = false;\n\t\t} );\n\n\t\t// We need to ignore a `selectionChange` event that is fired after we render our new table cells selection.\n\t\t// When downcasting table cells selection to the view, we put the view selection in the last selected cell\n\t\t// in a place that may not be natively a \"correct\" location. This is – we put it directly in the `<td>` element.\n\t\t// All browsers fire the native `selectionchange` event.\n\t\t// However, all browsers except Safari return the selection in the exact place where we put it\n\t\t// (even though it's visually normalized). Safari returns `<td><p>^foo` that makes our selection observer\n\t\t// fire our `selectionChange` event (because the view selection that we set in the first step differs from the DOM selection).\n\t\t// Since `selectionChange` is fired, we automatically update the model selection that moves it that paragraph.\n\t\t// This breaks our dear cells selection.\n\t\t//\n\t\t// Theoretically this issue concerns only Safari that is the only browser that do normalize the selection.\n\t\t// However, to avoid code branching and to have a good coverage for this event blocker, I enabled it for all browsers.\n\t\t//\n\t\t// Note: I'm keeping the `blockSelectionChange` state separately for shift+click and mouse drag (exact same logic)\n\t\t// so I don't have to try to analyze whether they don't overlap in some weird cases. Probably they don't.\n\t\t// But I have other things to do, like writing this comment.\n\t\tthis.listenTo( editor.editing.view.document, 'selectionChange', evt => {\n\t\t\tif ( blockSelectionChange ) {\n\t\t\t\t// @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Enables making cells selection by dragging.\n\t *\n\t * The selection is made only on mousemove. Mouse tracking is started on mousedown.\n\t * However, the cells selection is enabled only after the mouse cursor left the anchor cell.\n\t * Thanks to that normal text selection within one cell works just fine. However, you can still select\n\t * just one cell by leaving the anchor cell and moving back to it.\n\t */\n\tprivate _enableMouseDragSelection() {\n\t\tconst editor = this.editor;\n\t\tlet anchorCell: ModelElement | null, targetCell: ModelElement | null;\n\t\tlet beganCellSelection = false;\n\t\tlet blockSelectionChange = false;\n\n\t\tconst tableSelection = editor.plugins.get( TableSelection );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tif ( !this.isEnabled || !tableSelection.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure to not conflict with the shift+click listener and any other possible handler.\n\t\t\tif ( domEventData.domEvent.shiftKey || domEventData.domEvent.ctrlKey || domEventData.domEvent.altKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tanchorCell = this._getModelTableCellFromDomEvent( domEventData );\n\t\t} );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mousemove', ( evt, domEventData ) => {\n\t\t\tif ( !domEventData.domEvent.buttons ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !anchorCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newTargetCell = this._getModelTableCellFromDomEvent( domEventData );\n\n\t\t\tif ( newTargetCell && haveSameTableParent( anchorCell, newTargetCell ) ) {\n\t\t\t\ttargetCell = newTargetCell;\n\n\t\t\t\t// Switch to the cell selection mode after the mouse cursor left the anchor cell.\n\t\t\t\t// Switch off only on mouseup (makes selecting a single cell possible).\n\t\t\t\tif ( !beganCellSelection && targetCell != anchorCell ) {\n\t\t\t\t\tbeganCellSelection = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Yep, not making a cell selection yet. See method docs.\n\t\t\tif ( !beganCellSelection ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tblockSelectionChange = true;\n\t\t\ttableSelection.setCellSelection( anchorCell, targetCell! );\n\n\t\t\tdomEventData.preventDefault();\n\t\t} );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mouseup', () => {\n\t\t\tbeganCellSelection = false;\n\t\t\tblockSelectionChange = false;\n\t\t\tanchorCell = null;\n\t\t\ttargetCell = null;\n\t\t} );\n\n\t\t// See the explanation in `_enableShiftClickSelection()`.\n\t\tthis.listenTo( editor.editing.view.document, 'selectionChange', evt => {\n\t\t\tif ( blockSelectionChange ) {\n\t\t\t\t// @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Returns the model table cell element based on the target element of the passed DOM event.\n\t *\n\t * @returns Returns the table cell or `undefined`.\n\t */\n\tprivate _getModelTableCellFromDomEvent( domEventData: ViewDocumentDomEventData ) {\n\t\t// Note: Work with positions (not element mapping) because the target element can be an attribute or other non-mapped element.\n\t\tconst viewTargetElement = domEventData.target;\n\t\tconst viewPosition = this.editor.editing.view.createPositionAt( viewTargetElement, 0 );\n\t\tconst modelPosition = this.editor.editing.mapper.toModelPosition( viewPosition );\n\t\tconst modelElement = modelPosition.parent as ModelElement;\n\n\t\treturn modelElement.findAncestor( 'tableCell', { includeSelf: true } );\n\t}\n}\n\nfunction haveSameTableParent( cellA: ModelElement, cellB: ModelElement ) {\n\treturn cellA.parent!.parent == cellB.parent!.parent;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/table\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { Widget } from 'ckeditor5/src/widget.js';\n\nimport { TableEditing } from './tableediting.js';\nimport { TableUI } from './tableui.js';\nimport { TableSelection } from './tableselection.js';\nimport { TableClipboard } from './tableclipboard.js';\nimport { TableKeyboard } from './tablekeyboard.js';\nimport { TableMouse } from './tablemouse.js';\n\nimport '../theme/table.css';\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/tables Table feature documentation}.\n *\n * This is a \"glue\" plugin that loads the following table features:\n *\n * * {@link module:table/tableediting~TableEditing editing feature},\n * * {@link module:table/tableselection~TableSelection selection feature},\n * * {@link module:table/tablekeyboard~TableKeyboard keyboard navigation feature},\n * * {@link module:table/tablemouse~TableMouse mouse selection feature},\n * * {@link module:table/tableclipboard~TableClipboard clipboard feature},\n * * {@link module:table/tableui~TableUI UI feature}.\n */\nexport class Table extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing, TableUI, TableSelection, TableMouse, TableKeyboard, TableClipboard, Widget ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'Table' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/plaintableoutput\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport type { ViewDowncastWriter, ModelElement, ModelNode, ViewContainerElement, UpcastElementEvent } from 'ckeditor5/src/engine.js';\n\nimport { Table } from './table.js';\n\n/**\n * The plain table output feature.\n *\n * This feature strips the `<figure>` tag from the table data. This is because this tag is not supported\n * by most popular email clients and removing it ensures compatibility.\n */\nexport class PlainTableOutput extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'PlainTableOutput' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Table ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Override default table data downcast converter.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToStructure( {\n\t\t\tmodel: 'table',\n\t\t\tview: downcastTableElement,\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\t// Make sure table <caption> is downcasted into <caption> in the data pipeline when necessary.\n\t\tif ( editor.plugins.has( 'TableCaption' ) ) {\n\t\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\t\tmodel: 'caption',\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\tif ( modelElement.parent!.name === 'table' ) {\n\t\t\t\t\t\treturn writer.createContainerElement( 'caption' );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} );\n\t\t}\n\n\t\t// Handle border-style, border-color, border-width and background-color table attributes.\n\t\tif ( editor.plugins.has( 'TableProperties' ) ) {\n\t\t\tdowncastTableBorderAndBackgroundAttributes( editor );\n\t\t}\n\n\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\t\t// It's not necessary to upcast the `table` class. This class was only added in data downcast\n\t\t\t\t// to center a plain table in the editor output.\n\t\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/17888.\n\t\t\t\tconversionApi.consumable.consume( data.viewItem, { classes: 'table' } );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n/**\n * The plain table downcast converter callback.\n *\n * @param table Table model element.\n * @param conversionApi The conversion API object.\n * @returns Created element.\n */\nfunction downcastTableElement( table: ModelElement, { writer }: { writer: ViewDowncastWriter } ) {\n\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t// Table head rows slot.\n\tconst headRowsSlot = writer.createSlot( ( element: ModelNode ) =>\n\t\telement.is( 'element', 'tableRow' ) && element.index! < headingRows\n\t);\n\n\t// Table body rows slot.\n\tconst bodyRowsSlot = writer.createSlot( ( element: ModelNode ) =>\n\t\telement.is( 'element', 'tableRow' ) && element.index! >= headingRows\n\t);\n\n\t// Table children slot.\n\tconst childrenSlot = writer.createSlot( ( element: ModelNode ) => !element.is( 'element', 'tableRow' ) );\n\n\t// Table <thead> element with all the heading rows.\n\tconst theadElement = writer.createContainerElement( 'thead', null, headRowsSlot );\n\n\t// Table <tbody> element with all the body rows.\n\tconst tbodyElement = writer.createContainerElement( 'tbody', null, bodyRowsSlot );\n\n\t// Table contents element containing <thead> and <tbody> when necessary.\n\tconst tableContentElements: Array<ViewContainerElement> = [];\n\n\tif ( headingRows ) {\n\t\ttableContentElements.push( theadElement );\n\t}\n\n\tif ( headingRows < table.childCount ) {\n\t\ttableContentElements.push( tbodyElement );\n\t}\n\n\t// Create table structure.\n\t//\n\t// <table>\n\t//    {children-slot-like-caption}\n\t//    <thead>\n\t//        {table-head-rows-slot}\n\t//    </thead>\n\t//    <tbody>\n\t//        {table-body-rows-slot}\n\t//    </tbody>\n\t// </table>\n\treturn writer.createContainerElement( 'table', { class: 'table' }, [ childrenSlot, ...tableContentElements ] );\n}\n\n/**\n * Register table border and background attributes converters.\n */\nfunction downcastTableBorderAndBackgroundAttributes( editor: Editor ) {\n\tconst modelAttributes = {\n\t\t'border-width': 'tableBorderWidth',\n\t\t'border-color': 'tableBorderColor',\n\t\t'border-style': 'tableBorderStyle',\n\t\t'background-color': 'tableBackgroundColor'\n\t};\n\n\tfor ( const [ styleName, modelAttribute ] of Object.entries( modelAttributes ) ) {\n\t\teditor.conversion.for( 'dataDowncast' ).add( dispatcher => {\n\t\t\treturn dispatcher.on( `attribute:${ modelAttribute }:table`, ( evt, data, conversionApi ) => {\n\t\t\t\tconst { item, attributeNewValue } = data;\n\t\t\t\tconst { mapper, writer } = conversionApi;\n\n\t\t\t\tif ( !conversionApi.consumable.consume( item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst table = mapper.toViewElement( item );\n\n\t\t\t\tif ( attributeNewValue ) {\n\t\t\t\t\twriter.setStyle( styleName, attributeNewValue, table );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeStyle( styleName, table );\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/ui/widget\n */\n\nimport type { ViewDocumentFragment, ViewDocumentSelection, ViewElement, ViewNode } from 'ckeditor5/src/engine.js';\n\nimport { isWidget } from 'ckeditor5/src/widget.js';\n\n/**\n * Depending on the position of the selection either return the selected table or the table higher in the hierarchy.\n *\n * @internal\n */\nexport function getSelectionAffectedTableWidget( selection: ViewDocumentSelection ): ViewElement | null {\n\tconst selectedTable = getSelectedTableWidget( selection );\n\n\tif ( selectedTable ) {\n\t\treturn selectedTable;\n\t}\n\n\treturn getTableWidgetAncestor( selection );\n}\n\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @internal\n */\nexport function getSelectedTableWidget( selection: ViewDocumentSelection ): ViewElement | null {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isTableWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a table widget editing view element if one is among the selection's ancestors.\n *\n * @internal\n */\nexport function getTableWidgetAncestor( selection: ViewDocumentSelection ): ViewElement | null {\n\tconst selectionPosition = selection.getFirstPosition();\n\n\tif ( !selectionPosition ) {\n\t\treturn null;\n\t}\n\n\tlet parent: ViewNode | ViewDocumentFragment | null = selectionPosition.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.is( 'element' ) && isTableWidget( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if a given view element is a table widget.\n */\nfunction isTableWidget( viewElement: ViewElement ): boolean {\n\treturn !!viewElement.getCustomProperty( 'table' ) && isWidget( viewElement );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tabletoolbar\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget.js';\nimport { getSelectedTableWidget, getTableWidgetAncestor } from './utils/ui/widget.js';\n\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for the table cell content).\n *\n * The table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/tableconfig~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/tableconfig~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n */\nexport class TableToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ WidgetToolbarRepository ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableToolbar' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n\n\t\tconst tableContentToolbarItems = editor.config.get( 'table.contentToolbar' );\n\n\t\tconst tableToolbarItems = editor.config.get( 'table.tableToolbar' );\n\n\t\tif ( tableContentToolbarItems ) {\n\t\t\twidgetToolbarRepository.register( 'tableContent', {\n\t\t\t\tariaLabel: t( 'Table toolbar' ),\n\t\t\t\titems: tableContentToolbarItems,\n\t\t\t\tgetRelatedElement: getTableWidgetAncestor\n\t\t\t} );\n\t\t}\n\n\t\tif ( tableToolbarItems ) {\n\t\t\twidgetToolbarRepository.register( 'table', {\n\t\t\t\tariaLabel: t( 'Table toolbar' ),\n\t\t\t\titems: tableToolbarItems,\n\t\t\t\tgetRelatedElement: getSelectedTableWidget\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/ui/colorinputview\n */\n\nimport {\n\tView,\n\tInputTextView,\n\tcreateDropdown,\n\tFocusCycler,\n\tViewCollection,\n\tColorSelectorView,\n\ttype ColorDefinition,\n\ttype DropdownView,\n\ttype ColorPickerConfig,\n\ttype ColorSelectorExecuteEvent,\n\ttype ColorSelectorColorPickerCancelEvent,\n\ttype FocusableView\n} from 'ckeditor5/src/ui.js';\n\nimport { FocusTracker, KeystrokeHandler, type Locale } from 'ckeditor5/src/utils.js';\n\nimport '../../theme/colorinput.css';\n\n/**\n * The options for the color input view.\n *\n * @internal\n */\nexport type ColorInputViewOptions = {\n\tcolorDefinitions: Array<ColorDefinition>;\n\tcolumns: number;\n\tdefaultColorValue?: string;\n\tcolorPickerConfig: false | ColorPickerConfig;\n};\n\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @internal\n */\nexport class ColorInputView extends View implements FocusableView {\n\t/**\n\t * The value of the input.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public value: string;\n\n\t/**\n\t * Controls whether the input view is in read-only mode.\n\t *\n\t * @observable\n\t * @default false\n\t */\n\tdeclare public isReadOnly: boolean;\n\n\t/**\n\t * An observable flag set to `true` when the input is focused by the user.\n\t * `false` otherwise.\n\t *\n\t * @observable\n\t * @default false\n\t */\n\tdeclare public readonly isFocused: boolean;\n\n\t/**\n\t * An observable flag set to `true` when the input contains no text.\n\t *\n\t * @observable\n\t * @default true\n\t */\n\tdeclare public readonly isEmpty: boolean;\n\n\t/**\n\t * @observable\n\t */\n\tdeclare public hasError: boolean;\n\n\t/**\n\t * A cached reference to the options passed to the constructor.\n\t */\n\tpublic options: ColorInputViewOptions;\n\n\t/**\n\t * Tracks information about the DOM focus in the view.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * Helps cycling over focusable children in the input view.\n\t */\n\tpublic readonly focusCycler: FocusCycler;\n\n\t/**\n\t * A collection of views that can be focused in the view.\n\t */\n\tprotected readonly _focusables: ViewCollection<FocusableView>;\n\n\t/**\n\t * An instance of the dropdown allowing to select a color from a grid.\n\t */\n\tpublic dropdownView: DropdownView;\n\n\t/**\n\t * An instance of the input allowing the user to type a color value.\n\t */\n\tpublic inputView: InputTextView;\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * The flag that indicates whether the user is still typing.\n\t * If set to true, it means that the text input field ({@link #inputView}) still has the focus.\n\t * So, we should interrupt the user by replacing the input's value.\n\t */\n\tprotected _stillTyping: boolean;\n\n\t/**\n\t * Creates an instance of the color input view.\n\t *\n\t * @param locale The locale instance.\n\t * @param options The input options.\n\t * @param options.colorDefinitions The colors to be displayed in the palette inside the input's dropdown.\n\t * @param options.columns The number of columns in which the colors will be displayed.\n\t * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n\t * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n\t */\n\tconstructor( locale: Locale, options: ColorInputViewOptions ) {\n\t\tsuper( locale );\n\n\t\tthis.set( 'value', '' );\n\t\tthis.set( 'isReadOnly', false );\n\t\tthis.set( 'isFocused', false );\n\t\tthis.set( 'isEmpty', true );\n\n\t\tthis.options = options;\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis._focusables = new ViewCollection();\n\t\tthis.dropdownView = this._createDropdownView();\n\t\tthis.inputView = this._createInputTextView();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis._stillTyping = false;\n\n\t\tthis.focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate items forwards using the <kbd>Tab</kbd> key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input-color'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.dropdownView,\n\t\t\t\tthis.inputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.on( 'change:value', ( evt, name, inputValue ) => this._setInputValue( inputValue ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\t[ this.inputView, this.dropdownView.buttonView ].forEach( view => {\n\t\t\tthis.focusTracker.add( view.element! );\n\t\t\tthis._focusables.add( view );\n\t\t} );\n\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * Focuses the view.\n\t */\n\tpublic focus( direction: 1 | -1 ): void {\n\t\tif ( direction === -1 ) {\n\t\t\tthis.focusCycler.focusLast();\n\t\t} else {\n\t\t\tthis.focusCycler.focusFirst();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Creates and configures the {@link #dropdownView}.\n\t */\n\tprivate _createDropdownView() {\n\t\tconst locale = this.locale!;\n\t\tconst t = locale.t;\n\t\tconst bind = this.bindTemplate;\n\t\tconst colorSelector = this._createColorSelector( locale );\n\t\tconst dropdown = createDropdown( locale );\n\t\tconst colorPreview = new View();\n\n\t\tcolorPreview.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input-color__button__preview'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tbackgroundColor: bind.to( 'value' )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttag: 'span',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t'ck-input-color__button__preview__no-color-indicator',\n\t\t\t\t\t\tbind.if( 'value', 'ck-hidden', value => value != '' )\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} ]\n\t\t} );\n\n\t\tdropdown.buttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-input-color__button'\n\t\t\t}\n\t\t} );\n\n\t\tdropdown.buttonView.children.add( colorPreview );\n\t\tdropdown.buttonView.label = t( 'Color picker' );\n\t\tdropdown.buttonView.tooltip = true;\n\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n\t\tdropdown.panelView.children.add( colorSelector );\n\t\tdropdown.bind( 'isEnabled' ).to( this, 'isReadOnly', value => !value );\n\n\t\tdropdown.on( 'change:isOpen', ( evt, name, isVisible ) => {\n\t\t\tif ( isVisible ) {\n\t\t\t\tcolorSelector.updateSelectedColors();\n\t\t\t\tcolorSelector.showColorGridsFragment();\n\t\t\t}\n\t\t} );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n\t *\n\t * @returns A configured instance to be set as {@link #inputView}.\n\t */\n\tprivate _createInputTextView(): InputTextView {\n\t\tconst locale = this.locale;\n\t\tconst inputView = new InputTextView( locale );\n\n\t\tinputView.extendTemplate( {\n\t\t\ton: {\n\t\t\t\tblur: inputView.bindTemplate.to( 'blur' )\n\t\t\t}\n\t\t} );\n\n\t\tinputView.value = this.value;\n\t\tinputView.bind( 'isReadOnly', 'hasError' ).to( this );\n\t\tthis.bind( 'isFocused', 'isEmpty' ).to( inputView );\n\n\t\tinputView.on( 'input', () => {\n\t\t\tconst inputValue = inputView.element!.value;\n\t\t\t// Check if the value matches one of our defined colors' label.\n\t\t\tconst mappedColor = this.options.colorDefinitions.find( def => inputValue === def.label );\n\n\t\t\tthis._stillTyping = true;\n\t\t\tthis.value = mappedColor && mappedColor.color || inputValue;\n\t\t} );\n\n\t\tinputView.on( 'blur', () => {\n\t\t\tthis._stillTyping = false;\n\t\t\tthis._setInputValue( inputView.element!.value );\n\t\t} );\n\n\t\tinputView.delegate( 'input' ).to( this );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates and configures the panel with \"color grid\" and \"color picker\" inside the {@link #dropdownView}.\n\t */\n\tprivate _createColorSelector( locale: Locale ) {\n\t\tconst t = locale.t;\n\t\tconst defaultColor = this.options.defaultColorValue || '';\n\t\tconst removeColorButtonLabel = defaultColor ? t( 'Restore default' ) : t( 'Remove color' );\n\n\t\tconst colorSelector = new ColorSelectorView( locale, {\n\t\t\tcolors: this.options.colorDefinitions,\n\t\t\tcolumns: this.options.columns,\n\t\t\tremoveButtonLabel: removeColorButtonLabel,\n\t\t\tcolorPickerLabel: t( 'Color picker' ),\n\t\t\tcolorPickerViewConfig: this.options.colorPickerConfig === false ? false : {\n\t\t\t\t...this.options.colorPickerConfig,\n\t\t\t\thideInput: true\n\t\t\t}\n\t\t} );\n\n\t\tcolorSelector.appendUI();\n\n\t\tcolorSelector.on<ColorSelectorExecuteEvent>( 'execute', ( evt, data ) => {\n\t\t\tif ( data.source === 'colorPickerSaveButton' ) {\n\t\t\t\tthis.dropdownView.isOpen = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.value = data.value || defaultColor;\n\n\t\t\t// Trigger the listener that actually applies the set value.\n\t\t\tthis.fire( 'input' );\n\n\t\t\tif ( data.source !== 'colorPicker' ) {\n\t\t\t\tthis.dropdownView.isOpen = false;\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Color is saved before changes in color picker. In case \"cancel button\" is pressed\n\t\t * this color will be applied.\n\t\t */\n\t\tlet backupColor = this.value;\n\n\t\tcolorSelector.on<ColorSelectorColorPickerCancelEvent>( 'colorPicker:cancel', () => {\n\t\t\t/**\n\t\t\t * Revert color to previous value before changes in color picker.\n\t\t\t */\n\t\t\tthis.value = backupColor;\n\n\t\t\tthis.fire( 'input' );\n\n\t\t\tthis.dropdownView.isOpen = false;\n\t\t} );\n\n\t\tcolorSelector.colorGridsFragmentView.colorPickerButtonView!.on( 'execute', () => {\n\t\t\t/**\n\t\t\t * Save color value before changes in color picker.\n\t\t\t */\n\t\t\tbackupColor = this.value;\n\t\t} );\n\n\t\tcolorSelector.bind( 'selectedColor' ).to( this, 'value' );\n\n\t\treturn colorSelector;\n\t}\n\n\t/**\n\t * Sets {@link #inputView}'s value property to the color value or color label,\n\t * if there is one and the user is not typing.\n\t *\n\t * Handles cases like:\n\t *\n\t * * Someone picks the color in the grid.\n\t * * The color is set from the plugin level.\n\t *\n\t * @param inputValue Color value to be set.\n\t */\n\tprivate _setInputValue( inputValue: string ) {\n\t\tif ( !this._stillTyping ) {\n\t\t\tconst normalizedInputValue = normalizeColor( inputValue );\n\t\t\t// Check if the value matches one of our defined colors.\n\t\t\tconst mappedColor = this.options.colorDefinitions.find( def => normalizedInputValue === normalizeColor( def.color ) );\n\n\t\t\tif ( mappedColor ) {\n\t\t\t\tthis.inputView.value = mappedColor.label;\n\t\t\t} else {\n\t\t\t\tthis.inputView.value = inputValue || '';\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Normalizes color value, by stripping extensive whitespace.\n * For example., transforms:\n * * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n * * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n *\n * @param colorString The value to be normalized.\n */\nfunction normalizeColor( colorString: string ): string {\n\treturn colorString\n\t\t// Remove any whitespace right after `(` or `,`.\n\t\t.replace( /([(,])\\s+/g, '$1' )\n\t\t// Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n\t\t.replace( /^\\s+|\\s+(?=[),\\s]|$)/g, '' )\n\t\t// Then, replace `,` or whitespace with a single space.\n\t\t.replace( /,|\\s/g, ' ' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/ui/table-properties\n */\n\nimport {\n\tButtonView,\n\tUIModel,\n\ttype ColorOption,\n\ttype LabeledFieldView,\n\ttype ListDropdownItemDefinition,\n\ttype NormalizedColorOption,\n\ttype ToolbarView,\n\ttype View,\n\ttype ColorPickerConfig\n} from 'ckeditor5/src/ui.js';\n\nimport { Collection, type LocaleTranslate } from 'ckeditor5/src/utils.js';\nimport { isColorStyleValue, isLengthStyleValue, isPercentageStyleValue } from 'ckeditor5/src/engine.js';\n\nimport { type TableCellPropertiesView } from '../../tablecellproperties/ui/tablecellpropertiesview.js';\nimport { type TablePropertiesView } from '../../tableproperties/ui/tablepropertiesview.js';\n\nimport { ColorInputView } from '../../ui/colorinputview.js';\n\nconst isEmpty = ( val: string ) => val === '';\n\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @internal\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getBorderStyleLabels( t: LocaleTranslate ): Record<string, string> {\n\treturn {\n\t\tnone: t( 'None' ),\n\t\tsolid: t( 'Solid' ),\n\t\tdotted: t( 'Dotted' ),\n\t\tdashed: t( 'Dashed' ),\n\t\tdouble: t( 'Double' ),\n\t\tgroove: t( 'Groove' ),\n\t\tridge: t( 'Ridge' ),\n\t\tinset: t( 'Inset' ),\n\t\toutset: t( 'Outset' )\n\t};\n}\n\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @internal\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getLocalizedColorErrorText( t: LocaleTranslate ): string {\n\treturn t( 'The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".' );\n}\n\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @internal\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getLocalizedLengthErrorText( t: LocaleTranslate ): string {\n\treturn t( 'The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".' );\n}\n\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColorStyleValue}.\n *\n * @internal\n */\nexport function colorFieldValidator( value: string ): boolean {\n\tvalue = value.trim().toLowerCase();\n\n\treturn isEmpty( value ) || isColorStyleValue( value );\n}\n\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLengthStyleValue}.\n * See {@link module:engine/view/styles/utils~isPercentageStyleValue}.\n *\n * @internal\n */\nexport function lengthFieldValidator( value: string ): boolean {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isNumberString( value ) || isLengthStyleValue( value ) || isPercentageStyleValue( value );\n}\n\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLengthStyleValue}.\n *\n * @internal\n */\nexport function lineWidthFieldValidator( value: string ): boolean {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isNumberString( value ) || isLengthStyleValue( value );\n}\n\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @internal\n * @param defaultStyle The default border.\n */\nexport function getBorderStyleDefinitions(\n\tview: TableCellPropertiesView | TablePropertiesView,\n\tdefaultStyle: string\n): Collection<ListDropdownItemDefinition> {\n\tconst itemDefinitions: Collection<ListDropdownItemDefinition> = new Collection();\n\tconst styleLabels = getBorderStyleLabels( view.t! );\n\n\tfor ( const style in styleLabels ) {\n\t\tconst definition: ListDropdownItemDefinition = {\n\t\t\ttype: 'button',\n\t\t\tmodel: new UIModel( {\n\t\t\t\t_borderStyleValue: style,\n\t\t\t\tlabel: styleLabels[ style ],\n\t\t\t\trole: 'menuitemradio',\n\t\t\t\twithText: true\n\t\t\t} )\n\t\t};\n\n\t\tif ( style === 'none' ) {\n\t\t\tdefinition.model.bind( 'isOn' ).to( view, 'borderStyle', value => {\n\t\t\t\tif ( defaultStyle === 'none' ) {\n\t\t\t\t\treturn !value;\n\t\t\t\t}\n\n\t\t\t\treturn value === style;\n\t\t\t} );\n\t\t} else {\n\t\t\tdefinition.model.bind( 'isOn' ).to( view, 'borderStyle', value => {\n\t\t\t\treturn value === style;\n\t\t\t} );\n\t\t}\n\n\t\titemDefinitions.add( definition );\n\t}\n\n\treturn itemDefinitions;\n}\n\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @internal\n * @param options Configuration options\n * @param options.view The view that has the observable property.\n * @param options.icons Object with button icons.\n * @param options.toolbar The toolbar to fill with buttons.\n * @param options.labels Object with button labels.\n * @param options.propertyName The name of the observable property in the view.\n * @param options.nameToValue A function that maps a button name to a value. By default names are the same as values.\n * @param options.defaultValue Default value for the property.\n */\nexport function fillToolbar<TView extends View, TPropertyName extends keyof TView>(\n\toptions: {\n\t\tview: TView;\n\t\ticons: Record<string, string>;\n\t\ttoolbar: ToolbarView;\n\t\tlabels: Record<number, string>;\n\t\tpropertyName: TPropertyName;\n\t\tnameToValue?: ( name: string ) => string;\n\t\tdefaultValue?: string;\n\t}\n): void {\n\tconst { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n\tfor ( const name in labels ) {\n\t\tconst button = new ButtonView( view.locale );\n\n\t\tbutton.set( {\n\t\t\trole: 'radio',\n\t\t\tisToggleable: true,\n\t\t\tlabel: labels[ name ],\n\t\t\ticon: icons[ name ],\n\t\t\ttooltip: labels[ name ]\n\t\t} );\n\n\t\t// If specified the `nameToValue()` callback, map the value based on the option's name.\n\t\tconst buttonValue = nameToValue ? nameToValue( name ) : name;\n\n\t\tbutton.bind( 'isOn' ).to( view, propertyName, value => {\n\t\t\t// `value` comes from `view[ propertyName ]`.\n\t\t\tlet valueToCompare: unknown = value;\n\n\t\t\t// If it's empty, and the `defaultValue` is specified, use it instead.\n\t\t\tif ( value === '' && defaultValue ) {\n\t\t\t\tvalueToCompare = defaultValue;\n\t\t\t}\n\n\t\t\treturn buttonValue === valueToCompare;\n\t\t} );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\t// Allow toggling alignment if there is no default value specified (especially for layout tables).\n\t\t\tif ( !defaultValue && buttonValue && view[ propertyName ] === buttonValue ) {\n\t\t\t\tview[ propertyName ] = undefined as any;\n\t\t\t} else {\n\t\t\t\tview[ propertyName ] = buttonValue as any;\n\t\t\t}\n\t\t} );\n\n\t\ttoolbar.items.add( button );\n\t}\n}\n\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/tableconfig~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n * ```ts\n * const defaultColors = [\n *   {\n *     color: 'hsl(0, 0%, 0%)',\n *     label: 'Black'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 30%)',\n *     label: 'Dim grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 60%)',\n *     label: 'Grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 90%)',\n *     label: 'Light grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 100%)',\n *     label: 'White',\n *     hasBorder: true\n *   },\n *   {\n *     color: 'hsl(0, 75%, 60%)',\n *     label: 'Red'\n *   },\n *   {\n *     color: 'hsl(30, 75%, 60%)',\n *     label: 'Orange'\n *   },\n *   {\n *     color: 'hsl(60, 75%, 60%)',\n *     label: 'Yellow'\n *   },\n *   {\n *     color: 'hsl(90, 75%, 60%)',\n *     label: 'Light green'\n *   },\n *   {\n *     color: 'hsl(120, 75%, 60%)',\n *     label: 'Green'\n *   },\n *   {\n *     color: 'hsl(150, 75%, 60%)',\n *     label: 'Aquamarine'\n *   },\n *   {\n *     color: 'hsl(180, 75%, 60%)',\n *     label: 'Turquoise'\n *   },\n *   {\n *     color: 'hsl(210, 75%, 60%)',\n *     label: 'Light blue'\n *   },\n *   {\n *     color: 'hsl(240, 75%, 60%)',\n *     label: 'Blue'\n *   },\n *   {\n *     color: 'hsl(270, 75%, 60%)',\n *     label: 'Purple'\n *   }\n * ];\n * ```\n *\n * @internal\n */\nexport const defaultColors: Array<ColorOption> = [\n\t{\n\t\tcolor: 'hsl(0, 0%, 0%)',\n\t\tlabel: 'Black'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 30%)',\n\t\tlabel: 'Dim grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 60%)',\n\t\tlabel: 'Grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 90%)',\n\t\tlabel: 'Light grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 100%)',\n\t\tlabel: 'White',\n\t\thasBorder: true\n\t},\n\t{\n\t\tcolor: 'hsl(0, 75%, 60%)',\n\t\tlabel: 'Red'\n\t},\n\t{\n\t\tcolor: 'hsl(30, 75%, 60%)',\n\t\tlabel: 'Orange'\n\t},\n\t{\n\t\tcolor: 'hsl(60, 75%, 60%)',\n\t\tlabel: 'Yellow'\n\t},\n\t{\n\t\tcolor: 'hsl(90, 75%, 60%)',\n\t\tlabel: 'Light green'\n\t},\n\t{\n\t\tcolor: 'hsl(120, 75%, 60%)',\n\t\tlabel: 'Green'\n\t},\n\t{\n\t\tcolor: 'hsl(150, 75%, 60%)',\n\t\tlabel: 'Aquamarine'\n\t},\n\t{\n\t\tcolor: 'hsl(180, 75%, 60%)',\n\t\tlabel: 'Turquoise'\n\t},\n\t{\n\t\tcolor: 'hsl(210, 75%, 60%)',\n\t\tlabel: 'Light blue'\n\t},\n\t{\n\t\tcolor: 'hsl(240, 75%, 60%)',\n\t\tlabel: 'Blue'\n\t},\n\t{\n\t\tcolor: 'hsl(270, 75%, 60%)',\n\t\tlabel: 'Purple'\n\t}\n];\n\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n * ```ts\n * const colorInputCreator = getLabeledColorInputCreator( {\n *   colorConfig: [ ... ],\n *   columns: 3,\n * } );\n *\n * const labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n * console.log( labeledInputView.view ); // A color input instance.\n * ```\n *\n * @internal\n * @param options Color input options.\n * @param options.colorConfig The configuration of the color palette displayed in the input's dropdown.\n * @param options.columns The configuration of the number of columns the color palette consists of in the input's dropdown.\n * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @param options.colorPickerConfig The configuration of the color picker. You could disable it or define your output format.\n */\nexport function getLabeledColorInputCreator(\n\toptions: {\n\t\tcolorConfig: Array<NormalizedColorOption>;\n\t\tcolumns: number;\n\t\tdefaultColorValue?: string;\n\t\tcolorPickerConfig: false | ColorPickerConfig;\n\t}\n) {\n\treturn ( labeledFieldView: LabeledFieldView, viewUid: string, statusUid: string ): ColorInputView => {\n\t\tconst colorInputView = new ColorInputView( labeledFieldView.locale!, {\n\t\t\tcolorDefinitions: colorConfigToColorGridDefinitions( options.colorConfig ),\n\t\t\tcolumns: options.columns,\n\t\t\tdefaultColorValue: options.defaultColorValue,\n\t\t\tcolorPickerConfig: options.colorPickerConfig\n\t\t} );\n\n\t\tcolorInputView.inputView.set( {\n\t\t\tid: viewUid,\n\t\t\tariaDescribedById: statusUid\n\t\t} );\n\n\t\tcolorInputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n\t\tcolorInputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n\n\t\tcolorInputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tlabeledFieldView.errorText = null;\n\t\t} );\n\n\t\tlabeledFieldView.bind( 'isEmpty', 'isFocused' ).to( colorInputView );\n\n\t\treturn colorInputView;\n\t};\n}\n\n/**\n * A simple helper method to detect number strings.\n * I allows full number notation, so omitting 0 is not allowed:\n */\nfunction isNumberString( value: string ) {\n\tconst parsedValue = parseFloat( value );\n\n\treturn !Number.isNaN( parsedValue ) && value === String( parsedValue );\n}\n\nfunction colorConfigToColorGridDefinitions( colorConfig: Array<NormalizedColorOption> ) {\n\treturn colorConfig.map( item => ( {\n\t\tcolor: item.model,\n\t\tlabel: item.label,\n\t\toptions: {\n\t\t\thasBorder: item.hasBorder\n\t\t}\n\t} ) );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/ui/tablecellpropertiesview\n */\n\nimport {\n\taddListToDropdown,\n\tButtonView,\n\tcreateLabeledDropdown,\n\tcreateLabeledInputText,\n\tFocusCycler,\n\tFormRowView,\n\tFormHeaderView,\n\tLabeledFieldView,\n\tLabelView,\n\tsubmitHandler,\n\tToolbarView,\n\tView,\n\tViewCollection,\n\ttype FocusableView,\n\ttype NormalizedColorOption,\n\ttype ColorPickerConfig\n} from 'ckeditor5/src/ui.js';\nimport {\n\tKeystrokeHandler,\n\tFocusTracker,\n\ttype Locale,\n\ttype ObservableChangeEvent\n} from 'ckeditor5/src/utils.js';\nimport {\n\tIconAlignBottom,\n\tIconAlignCenter,\n\tIconAlignJustify,\n\tIconAlignLeft,\n\tIconAlignMiddle,\n\tIconAlignRight,\n\tIconAlignTop,\n\tIconCancel,\n\tIconCheck\n} from 'ckeditor5/src/icons.js';\n\nimport {\n\tfillToolbar,\n\tgetBorderStyleDefinitions,\n\tgetBorderStyleLabels,\n\tgetLabeledColorInputCreator\n} from '../../utils/ui/table-properties.js';\nimport { type ColorInputView } from '../../ui/colorinputview.js';\nimport type { TableCellPropertiesOptions } from '../../tableconfig.js';\n\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/form/form.css';\nimport '../../../theme/formrow.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tablecellproperties.css';\n\nexport interface TableCellPropertiesViewOptions {\n\tborderColors: Array<NormalizedColorOption>;\n\tbackgroundColors: Array<NormalizedColorOption>;\n\tdefaultTableCellProperties: TableCellPropertiesOptions;\n\tcolorPickerConfig: false | ColorPickerConfig;\n}\n\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */\nexport class TableCellPropertiesView extends View {\n\t/**\n\t * The value of the cell border style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare borderStyle: string;\n\n\t/**\n\t * The value of the cell border width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare borderWidth: string;\n\n\t/**\n\t * The value of the cell border color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare borderColor: string;\n\n\t/**\n\t * The value of the cell padding style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare padding: string;\n\n\t/**\n\t * The value of the cell background color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare backgroundColor: string;\n\n\t/**\n\t * The value of the table cell width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare width: string;\n\n\t/**\n\t * The value of the table cell height style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare height: string;\n\n\t/**\n\t * The value of the horizontal text alignment style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare horizontalAlignment: string;\n\n\t/**\n\t * The value of the vertical text alignment style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare verticalAlignment: string;\n\n\t/**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */\n\tpublic readonly options: TableCellPropertiesViewOptions;\n\n\t/**\n\t * Tracks information about the DOM focus in the form.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * A collection of child views in the form.\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * A dropdown that allows selecting the style of the table cell border.\n\t */\n\tpublic readonly borderStyleDropdown: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * An input that allows specifying the width of the table cell border.\n\t */\n\tpublic readonly borderWidthInput: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * An input that allows specifying the color of the table cell border.\n\t */\n\tpublic readonly borderColorInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table cell background color.\n\t */\n\tpublic readonly backgroundInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table cell padding.\n\t */\n\tpublic readonly paddingInput: LabeledFieldView;\n\n\t/**\n\t * An input that allows specifying the table cell width.\n\t */\n\tpublic readonly widthInput: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * An input that allows specifying the table cell height.\n\t */\n\tpublic readonly heightInput: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * A toolbar with buttons that allow changing the horizontal text alignment in a table cell.\n\t */\n\tpublic readonly horizontalAlignmentToolbar: ToolbarView;\n\n\t/**\n\t * A toolbar with buttons that allow changing the vertical text alignment in a table cell.\n\t */\n\tpublic readonly verticalAlignmentToolbar: ToolbarView;\n\n\t/**\n\t * The \"Save\" button view.\n\t */\n\tpublic saveButtonView: ButtonView;\n\n\t/**\n\t * The \"Cancel\" button view.\n\t */\n\tpublic cancelButtonView: ButtonView;\n\n\t/**\n\t * A collection of views that can be focused in the form.\n\t */\n\tprotected readonly _focusables: ViewCollection<FocusableView>;\n\n\t/**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */\n\tprotected readonly _focusCycler: FocusCycler;\n\n\t/**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t * @param options.borderColors A configuration of the border color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n\t * @param options.backgroundColors A configuration of the background color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n\t * @param options.defaultTableCellProperties The default table cell properties.\n\t */\n\tconstructor( locale: Locale, options: TableCellPropertiesViewOptions ) {\n\t\tsuper( locale );\n\n\t\tthis.set( {\n\t\t\tborderStyle: '',\n\t\t\tborderWidth: '',\n\t\t\tborderColor: '',\n\t\t\tpadding: '',\n\t\t\tbackgroundColor: '',\n\t\t\twidth: '',\n\t\t\theight: '',\n\t\t\thorizontalAlignment: '',\n\t\t\tverticalAlignment: ''\n\t\t} );\n\n\t\tthis.options = options;\n\n\t\tconst { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n\t\tconst { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n\t\tconst { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n\t\tconst { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis.children = this.createCollection();\n\t\tthis.borderStyleDropdown = borderStyleDropdown;\n\t\tthis.borderWidthInput = borderWidthInput;\n\t\tthis.borderColorInput = borderColorInput;\n\t\tthis.backgroundInput = backgroundInput;\n\t\tthis.paddingInput = this._createPaddingField();\n\t\tthis.widthInput = widthInput;\n\t\tthis.heightInput = heightInput;\n\t\tthis.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n\t\tthis.verticalAlignmentToolbar = verticalAlignmentToolbar;\n\n\t\t// Defer creating to make sure other fields are present and the Save button can\n\t\t// bind its #isEnabled to their error messages so there's no way to save unless all\n\t\t// fields are valid.\n\t\tconst { saveButtonView, cancelButtonView } = this._createActionButtons();\n\n\t\tthis.saveButtonView = saveButtonView;\n\t\tthis.cancelButtonView = cancelButtonView;\n\t\tthis._focusables = new ViewCollection();\n\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// Form header.\n\t\tthis.children.add( new FormHeaderView( locale, {\n\t\t\tlabel: this.t!( 'Cell properties' )\n\t\t} ) );\n\n\t\t// Border row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: borderRowLabel,\n\t\t\tchildren: [\n\t\t\t\tborderRowLabel,\n\t\t\t\tborderStyleDropdown,\n\t\t\t\tborderColorInput,\n\t\t\t\tborderWidthInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__border-row'\n\t\t} ) );\n\n\t\t// Background.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: backgroundRowLabel,\n\t\t\tchildren: [\n\t\t\t\tbackgroundRowLabel,\n\t\t\t\tbackgroundInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__background-row'\n\t\t} ) );\n\n\t\t// Dimensions row and padding.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\t// Dimensions row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: dimensionsLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tdimensionsLabel,\n\t\t\t\t\t\twidthInput,\n\t\t\t\t\t\toperatorLabel,\n\t\t\t\t\t\theightInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-form__dimensions-row'\n\t\t\t\t} ),\n\t\t\t\t// Padding row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.paddingInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-cell-properties-form__padding-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} ) );\n\n\t\t// Text alignment row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: alignmentLabel,\n\t\t\tchildren: [\n\t\t\t\talignmentLabel,\n\t\t\t\thorizontalAlignmentToolbar,\n\t\t\t\tverticalAlignmentToolbar\n\t\t\t],\n\t\t\tclass: 'ck-table-cell-properties-form__alignment-row'\n\t\t} ) );\n\n\t\t// Action row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t],\n\t\t\tclass: 'ck-table-form__action-row'\n\t\t} ) );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form',\n\t\t\t\t\t'ck-table-form',\n\t\t\t\t\t'ck-table-cell-properties-form'\n\t\t\t\t],\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\t// Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n\t\t// which is of the \"submit\" DOM \"type\".\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\t// Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n\t\t[ this.borderColorInput, this.backgroundInput ].forEach( view => {\n\t\t\tthis._focusCycler.chain( view.fieldView.focusCycler );\n\t\t} );\n\n\t\t[\n\t\t\tthis.borderStyleDropdown,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput,\n\t\t\tthis.paddingInput,\n\t\t\tthis.horizontalAlignmentToolbar,\n\t\t\tthis.verticalAlignmentToolbar,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t].forEach( view => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( view );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view.element! );\n\t\t} );\n\n\t\t// Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist focusable field in the form.\n\t */\n\tpublic focus(): void {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */\n\tprivate _createBorderFields(): {\n\t\tborderRowLabel: LabelView;\n\t\tborderStyleDropdown: LabeledFieldView;\n\t\tborderColorInput: LabeledFieldView<ColorInputView>;\n\t\tborderWidthInput: LabeledFieldView;\n\t} {\n\t\tconst defaultTableCellProperties = this.options.defaultTableCellProperties;\n\t\tconst defaultBorder = {\n\t\t\tstyle: defaultTableCellProperties.borderStyle,\n\t\t\twidth: defaultTableCellProperties.borderWidth,\n\t\t\tcolor: defaultTableCellProperties.borderColor\n\t\t};\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.borderColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: defaultBorder.color,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\t\tconst accessibleLabel = t( 'Style' );\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst borderRowLabel = new LabelView( locale );\n\t\tborderRowLabel.text = t( 'Border' );\n\n\t\t// -- Style ---------------------------------------------------\n\n\t\tconst styleLabels = getBorderStyleLabels( t );\n\t\tconst borderStyleDropdown = new LabeledFieldView( locale, createLabeledDropdown );\n\t\tborderStyleDropdown.set( {\n\t\t\tlabel: accessibleLabel,\n\t\t\tclass: 'ck-table-form__border-style'\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.set( {\n\t\t\tariaLabel: accessibleLabel,\n\t\t\tariaLabelledBy: undefined,\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: accessibleLabel\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.bind( 'label' ).to( this, 'borderStyle', value => {\n\t\t\treturn styleLabels[ value ? value : 'none' ];\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.on( 'execute', evt => {\n\t\t\tthis.borderStyle = ( evt.source as Record<string, unknown> )._borderStyleValue as string;\n\t\t} );\n\n\t\tborderStyleDropdown.bind( 'isEmpty' ).to( this, 'borderStyle', value => !value );\n\n\t\taddListToDropdown( borderStyleDropdown.fieldView, getBorderStyleDefinitions( this, defaultBorder.style! ), {\n\t\t\trole: 'menu',\n\t\t\tariaLabel: accessibleLabel\n\t\t} );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst borderWidthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tborderWidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__border-width'\n\t\t} );\n\n\t\tborderWidthInput.fieldView.bind( 'value' ).to( this, 'borderWidth' );\n\t\tborderWidthInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\t\tborderWidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderWidth = borderWidthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Color ---------------------------------------------------\n\n\t\tconst borderColorInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tborderColorInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-form__border-color'\n\t\t} );\n\n\t\tborderColorInput.fieldView.bind( 'value' ).to( this, 'borderColor' );\n\t\tborderColorInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\n\t\tborderColorInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderColor = borderColorInput.fieldView.value;\n\t\t} );\n\n\t\t// Reset the border color and width fields depending on the `border-style` value.\n\t\tthis.on<ObservableChangeEvent<string>>( 'change:borderStyle', ( evt, name, newValue, oldValue ) => {\n\t\t\t// When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6227.\n\t\t\tif ( !isBorderStyleSet( newValue ) ) {\n\t\t\t\tthis.borderColor = '';\n\t\t\t\tthis.borderWidth = '';\n\t\t\t}\n\n\t\t\t// When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\t\t\tif ( !isBorderStyleSet( oldValue ) ) {\n\t\t\t\tthis.borderColor = defaultBorder.color!;\n\t\t\t\tthis.borderWidth = defaultBorder.width!;\n\t\t\t}\n\t\t} );\n\n\t\treturn {\n\t\t\tborderRowLabel,\n\t\t\tborderStyleDropdown,\n\t\t\tborderColorInput,\n\t\t\tborderWidthInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */\n\tprivate _createBackgroundFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst backgroundRowLabel = new LabelView( locale );\n\t\tbackgroundRowLabel.text = t( 'Background' );\n\n\t\t// -- Background color input -----------------------------------\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.backgroundColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: this.options.defaultTableCellProperties.backgroundColor,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\n\t\tconst backgroundInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tbackgroundInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-cell-properties-form__background'\n\t\t} );\n\n\t\tbackgroundInput.fieldView.bind( 'value' ).to( this, 'backgroundColor' );\n\t\tbackgroundInput.fieldView.on( 'input', () => {\n\t\t\tthis.backgroundColor = backgroundInput.fieldView.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tbackgroundRowLabel,\n\t\t\tbackgroundInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput}.\n\t * * {@link #heightInput}.\n\t */\n\tprivate _createDimensionFields(): {\n\t\tdimensionsLabel: LabelView;\n\t\twidthInput: LabeledFieldView;\n\t\toperatorLabel: View;\n\t\theightInput: LabeledFieldView;\n\t} {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst dimensionsLabel = new LabelView( locale );\n\t\tdimensionsLabel.text = t( 'Dimensions' );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst widthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\twidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__width'\n\t\t} );\n\n\t\twidthInput.fieldView.bind( 'value' ).to( this, 'width' );\n\t\twidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.width = widthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Operator ---------------------------------------------------\n\n\t\tconst operatorLabel = new View( locale );\n\t\toperatorLabel.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-table-form__dimension-operator'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{ text: '×' }\n\t\t\t]\n\t\t} );\n\n\t\t// -- Height ---------------------------------------------------\n\n\t\tconst heightInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\theightInput.set( {\n\t\t\tlabel: t( 'Height' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__height'\n\t\t} );\n\n\t\theightInput.fieldView.bind( 'value' ).to( this, 'height' );\n\t\theightInput.fieldView.on( 'input', () => {\n\t\t\tthis.height = heightInput.fieldView.element!.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tdimensionsLabel,\n\t\t\twidthInput,\n\t\t\toperatorLabel,\n\t\t\theightInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #paddingInput}.\n\t */\n\tprivate _createPaddingField(): LabeledFieldView {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\tconst paddingInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tpaddingInput.set( {\n\t\t\tlabel: t( 'Padding' ),\n\t\t\tclass: 'ck-table-cell-properties-form__padding'\n\t\t} );\n\n\t\tpaddingInput.fieldView.bind( 'value' ).to( this, 'padding' );\n\t\tpaddingInput.fieldView.on( 'input', () => {\n\t\t\tthis.padding = paddingInput.fieldView.element!.value;\n\t\t} );\n\n\t\treturn paddingInput;\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #horizontalAlignmentToolbar},\n\t * * {@link #verticalAlignmentToolbar}.\n\t */\n\tprivate _createAlignmentFields() {\n\t\tconst locale = this.locale!;\n\t\tconst t = this.t!;\n\n\t\tconst alignmentLabel = new LabelView( locale );\n\n\t\tconst ALIGNMENT_ICONS = {\n\t\t\tleft: IconAlignLeft,\n\t\t\tcenter: IconAlignCenter,\n\t\t\tright: IconAlignRight,\n\t\t\tjustify: IconAlignJustify,\n\t\t\ttop: IconAlignTop,\n\t\t\tmiddle: IconAlignMiddle,\n\t\t\tbottom: IconAlignBottom\n\t\t};\n\n\t\talignmentLabel.text = t( 'Table cell text alignment' );\n\n\t\t// -- Horizontal ---------------------------------------------------\n\n\t\tconst horizontalAlignmentToolbar = new ToolbarView( locale );\n\t\tconst isContentRTL = locale.contentLanguageDirection === 'rtl';\n\n\t\thorizontalAlignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\trole: 'radiogroup',\n\t\t\tariaLabel: t( 'Horizontal text alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: horizontalAlignmentToolbar,\n\t\t\tlabels: this._horizontalAlignmentLabels,\n\t\t\tpropertyName: 'horizontalAlignment',\n\t\t\tnameToValue: name => {\n\t\t\t\t// For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n\t\t\t\tif ( isContentRTL ) {\n\t\t\t\t\tif ( name === 'left' ) {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t} else if ( name === 'right' ) {\n\t\t\t\t\t\treturn 'left';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn name;\n\t\t\t},\n\t\t\tdefaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n\t\t} );\n\n\t\t// -- Vertical -----------------------------------------------------\n\n\t\tconst verticalAlignmentToolbar = new ToolbarView( locale );\n\n\t\tverticalAlignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\trole: 'radiogroup',\n\t\t\tariaLabel: t( 'Vertical text alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: verticalAlignmentToolbar,\n\t\t\tlabels: this._verticalAlignmentLabels,\n\t\t\tpropertyName: 'verticalAlignment',\n\t\t\tdefaultValue: this.options.defaultTableCellProperties.verticalAlignment\n\t\t} );\n\n\t\treturn {\n\t\t\thorizontalAlignmentToolbar,\n\t\t\tverticalAlignmentToolbar,\n\t\t\talignmentLabel\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */\n\tprivate _createActionButtons() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\t\tconst saveButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\t\tconst fieldsThatShouldValidateToSave = [\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.paddingInput\n\t\t];\n\n\t\tsaveButtonView.set( {\n\t\t\tlabel: t( 'Save' ),\n\t\t\ticon: IconCheck,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true\n\t\t} );\n\n\t\tsaveButtonView.bind( 'isEnabled' ).toMany( fieldsThatShouldValidateToSave, 'errorText', ( ...errorTexts ) => {\n\t\t\treturn errorTexts.every( errorText => !errorText );\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: IconCancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn {\n\t\t\tsaveButtonView, cancelButtonView\n\t\t};\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n\t */\n\tprivate get _horizontalAlignmentLabels(): Record<string, string> {\n\t\tconst locale = this.locale!;\n\t\tconst t = this.t!;\n\n\t\tconst left = t( 'Align cell text to the left' );\n\t\tconst center = t( 'Align cell text to the center' );\n\t\tconst right = t( 'Align cell text to the right' );\n\t\tconst justify = t( 'Justify cell text' );\n\n\t\t// Returns object with a proper order of labels.\n\t\tif ( locale.uiLanguageDirection === 'rtl' ) {\n\t\t\treturn { right, center, left, justify };\n\t\t} else {\n\t\t\treturn { left, center, right, justify };\n\t\t}\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n\t */\n\tprivate get _verticalAlignmentLabels(): Record<string, string> {\n\t\tconst t = this.t!;\n\n\t\treturn {\n\t\t\ttop: t( 'Align cell text to the top' ),\n\t\t\tmiddle: t( 'Align cell text to the middle' ),\n\t\t\tbottom: t( 'Align cell text to the bottom' )\n\t\t};\n\t}\n}\n\nfunction isBorderStyleSet( value: string ) {\n\treturn value !== 'none';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/ui/contextualballoon\n */\n\nimport { Rect, type DomOptimalPositionOptions } from 'ckeditor5/src/utils.js';\nimport { BalloonPanelView, type ContextualBalloon } from 'ckeditor5/src/ui.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement, ModelPosition, ModelRange } from 'ckeditor5/src/engine.js';\n\nimport { getSelectionAffectedTableWidget, getTableWidgetAncestor } from './widget.js';\nimport { getSelectionAffectedTable } from '../common.js';\n\nconst BALLOON_POSITIONS = /* #__PURE__ */ ( () => [\n\tBalloonPanelView.defaultPositions.northArrowSouth,\n\tBalloonPanelView.defaultPositions.northArrowSouthWest,\n\tBalloonPanelView.defaultPositions.northArrowSouthEast,\n\tBalloonPanelView.defaultPositions.southArrowNorth,\n\tBalloonPanelView.defaultPositions.southArrowNorthWest,\n\tBalloonPanelView.defaultPositions.southArrowNorthEast,\n\tBalloonPanelView.defaultPositions.viewportStickyNorth\n] )();\n\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the table in the editor content, if one is selected.\n *\n * @internal\n * @param editor The editor instance.\n * @param target Either \"cell\" or \"table\". Determines the target the balloon will be attached to.\n */\nexport function repositionContextualBalloon( editor: Editor, target: string ): void {\n\tconst balloon: ContextualBalloon = editor.plugins.get( 'ContextualBalloon' );\n\tconst selection = editor.editing.view.document.selection;\n\tlet position;\n\n\tif ( target === 'cell' ) {\n\t\tif ( getTableWidgetAncestor( selection ) ) {\n\t\t\tposition = getBalloonCellPositionData( editor );\n\t\t}\n\t}\n\telse if ( getSelectionAffectedTableWidget( selection ) ) {\n\t\tposition = getBalloonTablePositionData( editor );\n\t}\n\n\tif ( position ) {\n\t\tballoon.updatePosition( position );\n\t}\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table in the editor content.\n *\n * @param editor The editor instance.\n */\nexport function getBalloonTablePositionData( editor: Editor ): Partial<DomOptimalPositionOptions> {\n\tconst selection = editor.model.document.selection;\n\tconst modelTable = getSelectionAffectedTable( selection );\n\tconst viewTable = editor.editing.mapper.toViewElement( modelTable )!;\n\n\treturn {\n\t\ttarget: editor.editing.view.domConverter.mapViewToDom( viewTable )!,\n\t\tpositions: BALLOON_POSITIONS\n\t};\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table cell in the editor content.\n *\n * @param editor The editor instance.\n * @internal\n */\nexport function getBalloonCellPositionData( editor: Editor ): Partial<DomOptimalPositionOptions> {\n\tconst mapper = editor.editing.mapper;\n\tconst domConverter = editor.editing.view.domConverter;\n\tconst selection = editor.model.document.selection;\n\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn {\n\t\t\ttarget: () => createBoundingRect( selection.getRanges(), editor ),\n\t\t\tpositions: BALLOON_POSITIONS\n\t\t};\n\t}\n\n\tconst modelTableCell = getTableCellAtPosition( selection.getFirstPosition()! );\n\tconst viewTableCell = mapper.toViewElement( modelTableCell )!;\n\n\treturn {\n\t\ttarget: domConverter.mapViewToDom( viewTableCell ),\n\t\tpositions: BALLOON_POSITIONS\n\t};\n}\n\n/**\n * Returns the first selected table cell from a multi-cell or in-cell selection.\n *\n * @param position Document position.\n */\nfunction getTableCellAtPosition( position: ModelPosition ): ModelElement {\n\tconst isTableCellSelected = position.nodeAfter && position.nodeAfter.is( 'element', 'tableCell' );\n\n\treturn isTableCellSelected ? position.nodeAfter : position.findAncestor( 'tableCell' )!;\n}\n\n/**\n * Returns bounding rectangle for given model ranges.\n *\n * @param ranges Model ranges that the bounding rect should be returned for.\n * @param editor The editor instance.\n */\nfunction createBoundingRect( ranges: Iterable<ModelRange>, editor: Editor ): Rect {\n\tconst mapper = editor.editing.mapper;\n\tconst domConverter = editor.editing.view.domConverter;\n\tconst rects = Array.from( ranges ).map( range => {\n\t\tconst modelTableCell = getTableCellAtPosition( range.start );\n\t\tconst viewTableCell = mapper.toViewElement( modelTableCell )!;\n\t\treturn new Rect( domConverter.mapViewToDom( viewTableCell )! );\n\t} );\n\n\treturn Rect.getBoundingRect( rects )!;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/table-properties\n */\n\nimport type { BoxStyleSides } from 'ckeditor5/src/engine.js';\nimport { isObject } from 'es-toolkit/compat';\n\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n * ```ts\n * // Returns 'foo':\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n * getSingleValue( 'foo' );\n *\n * // Returns undefined:\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n * getSingleValue( { top: 'foo', right: 'foo' } );\n * ```\n *\n * @internal\n */\nexport function getSingleValue( objectOrString: BoxStyleSides | string | undefined ): string | undefined {\n\tif ( !objectOrString || !isObject( objectOrString ) ) {\n\t\treturn objectOrString;\n\t}\n\n\tconst { top, right, bottom, left } = objectOrString;\n\n\tif ( top == right && right == bottom && bottom == left ) {\n\t\treturn top!;\n\t}\n}\n\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n * ```ts\n * getSingleValue( 25, 'px' ); // '25px'\n * getSingleValue( 25, 'em' ); // '25em'\n * getSingleValue( '25em', 'px' ); // '25em'\n * getSingleValue( 'foo', 'px' ); // 'foo'\n * ```\n *\n * @internal\n * @param defaultUnit A default unit added to a numeric value.\n */\nexport function addDefaultUnitToNumericValue( value: string | number | undefined, defaultUnit: string ): string | number | undefined {\n\tconst numericValue = parseFloat( value as any );\n\n\tif ( Number.isNaN( numericValue ) ) {\n\t\treturn value;\n\t}\n\n\tif ( String( numericValue ) !== String( value ) ) {\n\t\treturn value;\n\t}\n\n\treturn `${ numericValue }${ defaultUnit }`;\n}\n\n/**\n * Interface representing the normalized default properties for table and cell elements.\n *\n * @internal\n */\nexport interface NormalizedDefaultProperties {\n\tborderStyle: string;\n\tborderWidth: string;\n\tborderColor: string;\n\tbackgroundColor: string;\n\twidth: string;\n\theight: string;\n\talignment?: string;\n\tpadding?: string;\n\tverticalAlignment?: string;\n\thorizontalAlignment?: string;\n}\n\n/**\n * Options used to determine which properties should be added to the normalized configuration.\n *\n * @internal\n */\nexport type NormalizeTableDefaultPropertiesOptions = {\n\n\t/**\n\t * Whether the \"alignment\" property should be added.\n\t */\n\tincludeAlignmentProperty?: boolean;\n\n\t/**\n\t * Whether the \"padding\" property should be added.\n\t */\n\tincludePaddingProperty?: boolean;\n\n\t/**\n\t * Whether the \"verticalAlignment\" property should be added.\n\t */\n\tincludeVerticalAlignmentProperty?: boolean;\n\n\t/**\n\t * Whether the \"horizontalAlignment\" property should be added.\n\t */\n\tincludeHorizontalAlignmentProperty?: boolean;\n\n\t/**\n\t * Whether the content is right-to-left.\n\t */\n\tisRightToLeftContent?: boolean;\n};\n\n/**\n * Returns the normalized configuration.\n *\n * @internal\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */\nexport function getNormalizedDefaultProperties(\n\tconfig?: Partial<NormalizedDefaultProperties>,\n\toptions: NormalizeTableDefaultPropertiesOptions = {}\n): NormalizedDefaultProperties {\n\tconst normalizedConfig: NormalizedDefaultProperties = {\n\t\tborderStyle: 'none',\n\t\tborderWidth: '',\n\t\tborderColor: '',\n\t\tbackgroundColor: '',\n\t\twidth: '',\n\t\theight: '',\n\t\t...config\n\t};\n\n\tif ( options.includeAlignmentProperty && !normalizedConfig.alignment ) {\n\t\tnormalizedConfig.alignment = 'center';\n\t}\n\n\tif ( options.includePaddingProperty && !normalizedConfig.padding ) {\n\t\tnormalizedConfig.padding = '';\n\t}\n\n\tif ( options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment ) {\n\t\tnormalizedConfig.verticalAlignment = 'middle';\n\t}\n\n\tif ( options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment ) {\n\t\tnormalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n\t}\n\n\treturn normalizedConfig;\n}\n\n/**\n * Returns the normalized default table properties.\n *\n * @internal\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */\nexport function getNormalizedDefaultTableProperties(\n\tconfig?: Partial<NormalizedDefaultProperties>,\n\toptions?: NormalizeTableDefaultPropertiesOptions\n): NormalizedDefaultProperties {\n\treturn getNormalizedDefaultProperties( {\n\t\t// It adds support for border none in the table element, keep it in sync with the content styles\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n\t\tborderStyle: 'double',\n\t\tborderColor: 'hsl(0, 0%, 70%)',\n\t\tborderWidth: '1px',\n\t\t...config\n\t}, options );\n}\n\n/**\n * Returns the normalized default cell properties.\n *\n * @internal\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */\nexport function getNormalizedDefaultCellProperties(\n\tconfig?: Partial<NormalizedDefaultProperties>,\n\toptions?: NormalizeTableDefaultPropertiesOptions\n): NormalizedDefaultProperties {\n\treturn getNormalizedDefaultProperties( {\n\t\t// It adds support for border none in the table element, keep it in sync with the content styles\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n\t\tborderStyle: 'solid',\n\t\tborderColor: 'hsl(0, 0%, 75%)',\n\t\tborderWidth: '1px',\n\t\t...config\n\t}, options );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/tablecellpropertiesui\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { IconTableCellProperties } from 'ckeditor5/src/icons.js';\nimport {\n\tButtonView,\n\tclickOutsideHandler,\n\tContextualBalloon,\n\tgetLocalizedColorOptions,\n\tnormalizeColorOptions,\n\ttype View\n} from 'ckeditor5/src/ui.js';\nimport type { Batch } from 'ckeditor5/src/engine.js';\n\nimport { TableCellPropertiesView } from './ui/tablecellpropertiesview.js';\nimport {\n\tcolorFieldValidator,\n\tgetLocalizedColorErrorText,\n\tgetLocalizedLengthErrorText,\n\tdefaultColors,\n\tlengthFieldValidator,\n\tlineWidthFieldValidator\n} from '../utils/ui/table-properties.js';\nimport { debounce } from 'es-toolkit/compat';\nimport { getSelectionAffectedTableWidget, getTableWidgetAncestor } from '../utils/ui/widget.js';\nimport { getBalloonCellPositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon.js';\nimport {\n\tgetNormalizedDefaultCellProperties,\n\tgetNormalizedDefaultProperties,\n\ttype NormalizedDefaultProperties\n} from '../utils/table-properties.js';\nimport type { GetCallback, ObservableChangeEvent } from 'ckeditor5/src/utils.js';\n\nimport { type TableCellBorderStyleCommand } from './commands/tablecellborderstylecommand.js';\n\nconst ERROR_TEXT_TIMEOUT = 500;\n\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n\tborderStyle: 'tableCellBorderStyle',\n\tborderColor: 'tableCellBorderColor',\n\tborderWidth: 'tableCellBorderWidth',\n\theight: 'tableCellHeight',\n\twidth: 'tableCellWidth',\n\tpadding: 'tableCellPadding',\n\tbackgroundColor: 'tableCellBackgroundColor',\n\thorizontalAlignment: 'tableCellHorizontalAlignment',\n\tverticalAlignment: 'tableCellVerticalAlignment'\n} as const;\n\n/**\n * The table cell properties UI plugin. It introduces the `'tableCellProperties'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport class TableCellPropertiesUI extends Plugin {\n\t/**\n\t * The default table cell properties.\n\t */\n\tprivate _defaultContentTableCellProperties!: NormalizedDefaultProperties;\n\n\t/**\n\t * The default layout table cell properties.\n\t */\n\tprivate _defaultLayoutTableCellProperties!: NormalizedDefaultProperties;\n\n\t/**\n\t * The contextual balloon plugin instance.\n\t */\n\tprivate _balloon?: ContextualBalloon;\n\n\t/**\n\t * The cell properties form view displayed inside the balloon.\n\t */\n\tpublic view?: TableCellPropertiesView | null;\n\n\t/**\n\t * The cell properties form view displayed inside the balloon (content table).\n\t */\n\tprivate _viewWithContentTableDefaults?: TableCellPropertiesView | null;\n\n\t/**\n\t * The cell properties form view displayed inside the balloon (layout table).\n\t */\n\tprivate _viewWithLayoutTableDefaults?: TableCellPropertiesView | null;\n\n\t/**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */\n\tprivate _undoStepBatch?: Batch;\n\n\t/**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */\n\tprivate _isReady?: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ContextualBalloon ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellPropertiesUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'table.tableCellProperties', {\n\t\t\tborderColors: defaultColors,\n\t\t\tbackgroundColors: defaultColors\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tthis._defaultContentTableCellProperties = getNormalizedDefaultCellProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeVerticalAlignmentProperty: true,\n\t\t\t\tincludeHorizontalAlignmentProperty: true,\n\t\t\t\tincludePaddingProperty: true,\n\t\t\t\tisRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n\t\t\t}\n\t\t);\n\t\tthis._defaultLayoutTableCellProperties = getNormalizedDefaultProperties( undefined, {\n\t\t\tincludeVerticalAlignmentProperty: true,\n\t\t\tincludeHorizontalAlignmentProperty: true,\n\t\t\tisRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n\t\t} );\n\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\t\tthis.view = null;\n\t\tthis._isReady = false;\n\n\t\teditor.ui.componentFactory.add( 'tableCellProperties', locale => {\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Cell properties' ),\n\t\t\t\ticon: IconTableCellProperties,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tthis.listenTo( view, 'execute', () => this._showView() );\n\n\t\t\tconst commands = Object.values( propertyToCommandMap )\n\t\t\t\t.map( commandName => editor.commands.get( commandName )! );\n\n\t\t\tview.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => (\n\t\t\t\tareEnabled.some( isCommandEnabled => isCommandEnabled )\n\t\t\t) );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1341.\n\t\tif ( this.view ) {\n\t\t\tthis.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView} instance.\n\t *\n\t * @returns The cell properties form view instance.\n\t */\n\tprivate _createPropertiesView( defaultTableCellProperties: NormalizedDefaultProperties ) {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config.get( 'table.tableCellProperties' )!;\n\t\tconst borderColorsConfig = normalizeColorOptions( config.borderColors! );\n\t\tconst localizedBorderColors = getLocalizedColorOptions( editor.locale, borderColorsConfig );\n\t\tconst backgroundColorsConfig = normalizeColorOptions( config.backgroundColors! );\n\t\tconst localizedBackgroundColors = getLocalizedColorOptions( editor.locale, backgroundColorsConfig );\n\t\tconst hasColorPicker = config.colorPicker !== false;\n\n\t\tconst view = new TableCellPropertiesView( editor.locale, {\n\t\t\tborderColors: localizedBorderColors,\n\t\t\tbackgroundColors: localizedBackgroundColors,\n\t\t\tdefaultTableCellProperties,\n\t\t\tcolorPickerConfig: hasColorPicker ? ( config.colorPicker || {} ) : false\n\t\t} );\n\t\tconst t = editor.t;\n\n\t\t// Render the view so its #element is available for the clickOutsideHandler.\n\t\tview.render();\n\n\t\tthis.listenTo( view, 'submit', () => {\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\tthis.listenTo( view, 'cancel', () => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/6180\n\t\t\tif ( this._undoStepBatch!.operations.length ) {\n\t\t\t\teditor.execute( 'undo', this._undoStepBatch );\n\t\t\t}\n\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\t// Close the balloon on Esc key press.\n\t\tview.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideView();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: view,\n\t\t\tactivator: () => this._isViewInBalloon,\n\t\t\tcontextElements: [ this._balloon!.view.element! ],\n\t\t\tcallback: () => this._hideView()\n\t\t} );\n\n\t\tconst colorErrorText = getLocalizedColorErrorText( t );\n\t\tconst lengthErrorText = getLocalizedLengthErrorText( t );\n\n\t\t// Create the \"UI -> editor data\" binding.\n\t\t// These listeners update the editor data (via table commands) when any observable\n\t\t// property of the view has changed. They also validate the value and display errors in the UI\n\t\t// when necessary. This makes the view live, which means the changes are\n\t\t// visible in the editing as soon as the user types or changes fields' values.\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:borderStyle',\n\t\t\tthis._getPropertyChangeCallback( 'tableCellBorderStyle' )\n\t\t);\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderColorInput,\n\t\t\tcommandName: 'tableCellBorderColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderWidth', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderWidthInput,\n\t\t\tcommandName: 'tableCellBorderWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lineWidthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:padding', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.paddingInput,\n\t\t\tcommandName: 'tableCellPadding',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:width', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.widthInput,\n\t\t\tcommandName: 'tableCellWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:height', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.heightInput,\n\t\t\tcommandName: 'tableCellHeight',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:backgroundColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.backgroundInput,\n\t\t\tcommandName: 'tableCellBackgroundColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:horizontalAlignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableCellHorizontalAlignment' )\n\t\t);\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:verticalAlignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableCellVerticalAlignment' )\n\t\t);\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected cell property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */\n\tprivate _fillViewFormFromCommandValues() {\n\t\tconst commands = this.editor.commands;\n\t\tconst borderStyleCommand: TableCellBorderStyleCommand = commands.get( 'tableCellBorderStyle' )!;\n\n\t\tObject.entries( propertyToCommandMap )\n\t\t\t.map( ( [ property, commandName ] ) => {\n\t\t\t\tconst propertyKey = property as keyof typeof propertyToCommandMap;\n\t\t\t\tconst defaultValue = this.view === this._viewWithContentTableDefaults ?\n\t\t\t\t\tthis._defaultContentTableCellProperties[ propertyKey ] || '' :\n\t\t\t\t\tthis._defaultLayoutTableCellProperties[ propertyKey ] || '';\n\n\t\t\t\treturn [\n\t\t\t\t\tproperty as keyof typeof propertyToCommandMap,\n\t\t\t\t\tcommands.get( commandName )!.value as string || defaultValue\n\t\t\t\t] as const;\n\t\t\t} )\n\t\t\t.forEach( ( [ property, value ] ) => {\n\t\t\t\t// Do not set the `border-color` and `border-width` fields if `border-style:none`.\n\t\t\t\tif ( ( property === 'borderColor' || property === 'borderWidth' ) && borderStyleCommand.value === 'none' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.view!.set( property, value );\n\t\t\t} );\n\n\t\tthis._isReady = true;\n\t}\n\n\t/**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */\n\tprotected _showView(): void {\n\t\tconst editor = this.editor;\n\n\t\tconst viewTable = getSelectionAffectedTableWidget( editor.editing.view.document.selection );\n\t\tconst modelTable = viewTable && editor.editing.mapper.toModelElement( viewTable );\n\t\tconst useDefaults = !modelTable || modelTable.getAttribute( 'tableType' ) !== 'layout';\n\n\t\tif ( useDefaults && !this._viewWithContentTableDefaults ) {\n\t\t\tthis._viewWithContentTableDefaults = this._createPropertiesView( this._defaultContentTableCellProperties );\n\t\t} else if ( !useDefaults && !this._viewWithLayoutTableDefaults ) {\n\t\t\tthis._viewWithLayoutTableDefaults = this._createPropertiesView( this._defaultLayoutTableCellProperties );\n\t\t}\n\n\t\tthis.view = useDefaults ? this._viewWithContentTableDefaults! : this._viewWithLayoutTableDefaults!;\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateView();\n\t\t} );\n\n\t\t// Update the view with the model values.\n\t\tthis._fillViewFormFromCommandValues();\n\n\t\tthis._balloon!.add( {\n\t\t\tview: this.view,\n\t\t\tposition: getBalloonCellPositionData( editor )\n\t\t} );\n\n\t\t// Create a new batch. Clicking \"Cancel\" will undo this batch.\n\t\tthis._undoStepBatch = editor.model.createBatch();\n\n\t\t// Basic a11y.\n\t\tthis.view.focus();\n\t}\n\n\t/**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */\n\tprotected _hideView(): void {\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\n\t\tthis._isReady = false;\n\n\t\t// Blur any input element before removing it from DOM to prevent issues in some browsers.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\tthis.view!.saveButtonView.focus();\n\n\t\tthis._balloon!.remove( this.view! );\n\n\t\t// Make sure the focus is not lost in the process by putting it directly\n\t\t// into the editing view.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t/**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n\t */\n\tprotected _updateView(): void {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tif ( !getTableWidgetAncestor( viewDocument.selection ) ) {\n\t\t\tthis._hideView();\n\t\t} else if ( this._isViewVisible ) {\n\t\t\trepositionContextualBalloon( editor, 'cell' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n\t */\n\tprivate get _isViewVisible() {\n\t\treturn !!this.view && this._balloon!.visibleView === this.view;\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */\n\tprivate get _isViewInBalloon() {\n\t\treturn !!this.view && this._balloon!.hasView( this.view );\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon the {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * @param commandName The default value of the command.\n\t */\n\tprivate _getPropertyChangeCallback(\n\t\tcommandName: 'tableCellBorderStyle' | 'tableCellHorizontalAlignment' | 'tableCellVerticalAlignment'\n\t): GetCallback<ObservableChangeEvent<string>> {\n\t\treturn ( evt, propertyName, newValue ) => {\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( commandName, {\n\t\t\t\tvalue: newValue,\n\t\t\t\tbatch: this._undoStepBatch\n\t\t\t} );\n\t\t};\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon the {@link #view view's} property change:\n\t * * Executes a related editor command with the new property value if the value is valid,\n\t * * Or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */\n\tprivate _getValidatedPropertyChangeCallback(\n\t\toptions: {\n\t\t\tcommandName: `tableCell${ 'BorderColor' | 'BorderWidth' | 'Padding' | 'Width' | 'Height' | 'BackgroundColor' }`;\n\t\t\tviewField: View & { errorText?: string | null };\n\t\t\tvalidator: ( arg0: string ) => boolean;\n\t\t\terrorText: string;\n\t\t}\n\t): GetCallback<ObservableChangeEvent<string>> {\n\t\tconst { commandName, viewField, validator, errorText } = options;\n\t\tconst setErrorTextDebounced = debounce( () => {\n\t\t\tviewField.errorText = errorText;\n\t\t}, ERROR_TEXT_TIMEOUT );\n\n\t\treturn ( evt, propertyName, newValue ) => {\n\t\t\tsetErrorTextDebounced.cancel();\n\t\t\t// Do not execute the command on initial call (opening the table properties view).\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( validator( newValue ) ) {\n\t\t\t\tthis.editor.execute( commandName, {\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t\tbatch: this._undoStepBatch\n\t\t\t\t} );\n\n\t\t\t\tviewField.errorText = null;\n\t\t\t} else {\n\t\t\t\tsetErrorTextDebounced();\n\t\t\t}\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellpropertycommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement, Batch } from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../../tableutils.js';\nimport { getSelectionAffectedTable } from '../../utils/common.js';\n\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n */\nexport class TableCellPropertyCommand extends Command {\n\t/**\n\t * The attribute that will be set by the command.\n\t */\n\tpublic readonly attributeName: string;\n\n\t/**\n\t * The default value for the attribute.\n\t *\n\t * @readonly\n\t */\n\tprotected _defaultValue: string | undefined;\n\n\t/**\n\t * The default value for the attribute for the content table.\n\t */\n\tprivate readonly _defaultContentTableValue: string | undefined;\n\n\t/**\n\t * The default value for the attribute for the layout table.\n\t */\n\tprivate readonly _defaultLayoutTableValue: string | undefined;\n\n\t/**\n\t * Creates a new `TableCellPropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, attributeName: string, defaultValue: string ) {\n\t\tsuper( editor );\n\n\t\tthis.attributeName = attributeName;\n\t\tthis._defaultContentTableValue = defaultValue;\n\n\t\t// Hardcoded defaults for layout table.\n\t\tswitch ( attributeName ) {\n\t\t\tcase 'tableCellBorderStyle':\n\t\t\t\tthis._defaultLayoutTableValue = 'none';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tableCellHorizontalAlignment':\n\t\t\t\tthis._defaultLayoutTableValue = 'left';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tableCellVerticalAlignment':\n\t\t\t\tthis._defaultLayoutTableValue = 'middle';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis._defaultLayoutTableValue = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst selectedTableCells = tableUtils.getSelectionAffectedTableCells( selection );\n\t\tconst table = getSelectionAffectedTable( selection );\n\n\t\tthis._defaultValue = !table || table.getAttribute( 'tableType' ) !== 'layout' ?\n\t\t\tthis._defaultContentTableValue :\n\t\t\tthis._defaultLayoutTableValue;\n\n\t\tthis.isEnabled = !!selectedTableCells.length;\n\t\tthis.value = this._getSingleValue( selectedTableCells );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on selected table cells.\n\t * If it is not set, the command will remove the attribute from the selected table cells.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example to allow a single undo step for multiple executions.\n\t */\n\tpublic override execute( options: { value?: string | number; batch?: Batch } = {} ): void {\n\t\tconst { value, batch } = options;\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst valueToSet = this._getValueToSet( value );\n\n\t\tmodel.enqueueChange( batch, writer => {\n\t\t\tif ( valueToSet ) {\n\t\t\t\ttableCells.forEach( tableCell => writer.setAttribute( this.attributeName, valueToSet, tableCell ) );\n\t\t\t} else {\n\t\t\t\ttableCells.forEach( tableCell => writer.removeAttribute( this.attributeName, tableCell ) );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value for a table cell.\n\t */\n\tprotected _getAttribute( tableCell: ModelElement | undefined ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = tableCell.getAttribute( this.attributeName );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */\n\tprotected _getValueToSet( value: string | number | undefined ): unknown {\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns a single value for all selected table cells. If the value is the same for all cells,\n\t * it will be returned (`undefined` otherwise).\n\t */\n\tprivate _getSingleValue( tableCells: Array<ModelElement> ) {\n\t\tconst firstCellValue = this._getAttribute( tableCells[ 0 ] );\n\n\t\tconst everyCellHasAttribute = tableCells.every( tableCells => this._getAttribute( tableCells ) === firstCellValue );\n\n\t\treturn everyCellHasAttribute ? firstCellValue : undefined;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellwidth/commands/tablecellwidthcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertyCommand } from '../../tablecellproperties/commands/tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell width command.\n *\n * The command is registered by the {@link module:table/tablecellwidth/tablecellwidthediting~TableCellWidthEditing} as\n * the `'tableCellWidth'` editor command.\n *\n * To change the width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds a default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nexport class TableCellWidthCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tvalue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellwidth/tablecellwidthediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { TableEditing } from './../tableediting.js';\nimport { TableCellWidthCommand } from './commands/tablecellwidthcommand.js';\nimport { getNormalizedDefaultCellProperties } from '../utils/table-properties.js';\nimport { enableProperty } from '../utils/common.js';\n\n/**\n * The table cell width editing feature.\n *\n * Introduces `tableCellWidth` table cell model attribute alongside with its converters\n * and a command.\n */\nexport class TableCellWidthEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellWidthEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tconst defaultTableCellProperties = getNormalizedDefaultCellProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' )!\n\t\t);\n\n\t\tenableProperty( editor.model.schema, editor.conversion, {\n\t\t\tmodelAttribute: 'tableCellWidth',\n\t\t\tstyleName: 'width',\n\t\t\tattributeName: 'width',\n\t\t\tattributeType: 'length',\n\t\t\tdefaultValue: defaultTableCellProperties.width\n\t\t} );\n\n\t\teditor.commands.add( 'tableCellWidth', new TableCellWidthCommand( editor, defaultTableCellProperties.width ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellpaddingcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell padding command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellPadding'` editor command.\n *\n * To change the padding of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `padding` attribute to `'5px'` in the model.\n */\nexport class TableCellPaddingCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellPaddingCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellPadding', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: ModelElement ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellheightcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell height command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHeight'` editor command.\n *\n * To change the height of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nexport class TableCellHeightCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellHeight', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellbackgroundcolorcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\n\n/**\n * The table cell background color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBackgroundColor'` editor command.\n *\n * To change the background color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport class TableCellBackgroundColorCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBackgroundColor', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellverticalalignmentcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\n\n/**\n * The table cell vertical alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellVerticalAlignment'` editor command.\n *\n * To change the vertical text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellVerticalAlignment', {\n *   value: 'top'\n * } );\n * ```\n *\n * The following values, corresponding to the\n * [`vertical-align` CSS attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), are allowed:\n *\n * * `'top'`\n * * `'bottom'`\n *\n * The `'middle'` value is the default one so there is no need to set it.\n */\nexport class TableCellVerticalAlignmentCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellVerticalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellVerticalAlignment', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellhorizontalalignmentcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\n\n/**\n * The table cell horizontal alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHorizontalAlignment'` editor command.\n *\n * To change the horizontal text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHorizontalAlignment', {\n *  value: 'right'\n * } );\n * ```\n */\nexport class TableCellHorizontalAlignmentCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellHorizontalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellHorizontalAlignment', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellborderstylecommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderStyle'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nexport class TableCellBorderStyleCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBorderStyle', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: ModelElement ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string | undefined );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellbordercolorcommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell border color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderColor'` editor command.\n *\n * To change the border color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport class TableCellBorderColorCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBorderColor', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: ModelElement ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string | undefined );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellborderwidthcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\n\nimport { TableCellPropertyCommand } from './tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell border width command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderWidth'` editor command.\n *\n * To change the border width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nexport class TableCellBorderWidthCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBorderWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: ModelElement ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/tablecellpropertiesediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\taddBorderStylesRules,\n\taddPaddingStylesRules,\n\taddBackgroundStylesRules,\n\ttype ModelSchema,\n\ttype Conversion,\n\ttype ViewElement,\n\ttype UpcastConversionApi,\n\ttype UpcastConversionData\n} from 'ckeditor5/src/engine.js';\n\nimport { downcastAttributeToStyle, getDefaultValueAdjusted, upcastBorderStyles } from '../converters/tableproperties.js';\nimport { TableEditing } from './../tableediting.js';\nimport { TableCellWidthEditing } from '../tablecellwidth/tablecellwidthediting.js';\nimport { TableCellPaddingCommand } from './commands/tablecellpaddingcommand.js';\nimport { TableCellHeightCommand } from './commands/tablecellheightcommand.js';\nimport { TableCellBackgroundColorCommand } from './commands/tablecellbackgroundcolorcommand.js';\nimport { TableCellVerticalAlignmentCommand } from './commands/tablecellverticalalignmentcommand.js';\nimport { TableCellHorizontalAlignmentCommand } from './commands/tablecellhorizontalalignmentcommand.js';\nimport { TableCellBorderStyleCommand } from './commands/tablecellborderstylecommand.js';\nimport { TableCellBorderColorCommand } from './commands/tablecellbordercolorcommand.js';\nimport { TableCellBorderWidthCommand } from './commands/tablecellborderwidthcommand.js';\nimport { getNormalizedDefaultCellProperties } from '../utils/table-properties.js';\nimport { enableProperty } from '../utils/common.js';\n\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right|justify)$/;\n\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n */\nexport class TableCellPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellPropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing, TableCellWidthEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\teditor.config.define( 'table.tableCellProperties.defaultProperties', { } );\n\n\t\tconst defaultTableCellProperties = getNormalizedDefaultCellProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeVerticalAlignmentProperty: true,\n\t\t\t\tincludeHorizontalAlignmentProperty: true,\n\t\t\t\tincludePaddingProperty: true,\n\t\t\t\tisRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n\t\t\t}\n\t\t);\n\n\t\teditor.data.addStyleProcessorRules( addBorderStylesRules );\n\t\tenableBorderProperties( schema, conversion, {\n\t\t\tcolor: defaultTableCellProperties.borderColor,\n\t\t\tstyle: defaultTableCellProperties.borderStyle,\n\t\t\twidth: defaultTableCellProperties.borderWidth\n\t\t} );\n\t\teditor.commands.add( 'tableCellBorderStyle', new TableCellBorderStyleCommand( editor, defaultTableCellProperties.borderStyle ) );\n\t\teditor.commands.add( 'tableCellBorderColor', new TableCellBorderColorCommand( editor, defaultTableCellProperties.borderColor ) );\n\t\teditor.commands.add( 'tableCellBorderWidth', new TableCellBorderWidthCommand( editor, defaultTableCellProperties.borderWidth ) );\n\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellHeight',\n\t\t\tstyleName: 'height',\n\t\t\tattributeName: 'height',\n\t\t\tattributeType: 'length',\n\t\t\tdefaultValue: defaultTableCellProperties.height\n\t\t} );\n\t\teditor.commands.add( 'tableCellHeight', new TableCellHeightCommand( editor, defaultTableCellProperties.height ) );\n\n\t\teditor.data.addStyleProcessorRules( addPaddingStylesRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellPadding',\n\t\t\tstyleName: 'padding',\n\t\t\treduceBoxSides: true,\n\t\t\tdefaultValue: defaultTableCellProperties.padding!\n\t\t} );\n\t\teditor.commands.add( 'tableCellPadding', new TableCellPaddingCommand( editor, defaultTableCellProperties.padding! ) );\n\n\t\teditor.data.addStyleProcessorRules( addBackgroundStylesRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellBackgroundColor',\n\t\t\tstyleName: 'background-color',\n\t\t\tattributeName: 'bgcolor',\n\t\t\tattributeType: 'color',\n\t\t\tdefaultValue: defaultTableCellProperties.backgroundColor\n\t\t} );\n\t\teditor.commands.add(\n\t\t\t'tableCellBackgroundColor',\n\t\t\tnew TableCellBackgroundColorCommand( editor, defaultTableCellProperties.backgroundColor )\n\t\t);\n\n\t\tenableHorizontalAlignmentProperty( schema, conversion, defaultTableCellProperties.horizontalAlignment! );\n\t\teditor.commands.add(\n\t\t\t'tableCellHorizontalAlignment',\n\t\t\tnew TableCellHorizontalAlignmentCommand( editor, defaultTableCellProperties.horizontalAlignment! )\n\t\t);\n\n\t\tenableVerticalAlignmentProperty( schema, conversion, defaultTableCellProperties.verticalAlignment! );\n\t\teditor.commands.add(\n\t\t\t'tableCellVerticalAlignment',\n\t\t\tnew TableCellVerticalAlignmentCommand( editor, defaultTableCellProperties.verticalAlignment! )\n\t\t);\n\t}\n}\n\n/**\n * Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableCellBorderColor` value.\n * @param defaultBorder.style The default `tableCellBorderStyle` value.\n * @param defaultBorder.width The default `tableCellBorderWidth` value.\n */\nfunction enableBorderProperties(\n\tschema: ModelSchema,\n\tconversion: Conversion,\n\tdefaultBorder: { color: string; style: string; width: string }\n) {\n\tconst modelAttributes = {\n\t\twidth: 'tableCellBorderWidth',\n\t\tcolor: 'tableCellBorderColor',\n\t\tstyle: 'tableCellBorderStyle'\n\t};\n\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: Object.values( modelAttributes )\n\t} );\n\n\tfor ( const modelAttribute of Object.values( modelAttributes ) ) {\n\t\tschema.setAttributeProperties( modelAttribute, { isFormatting: true } );\n\t}\n\n\tupcastBorderStyles( conversion, 'td', modelAttributes, defaultBorder );\n\tupcastBorderStyles( conversion, 'th', modelAttributes, defaultBorder );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.style, styleName: 'border-style' } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.color, styleName: 'border-color' } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.width, styleName: 'border-width' } );\n}\n\n/**\n * Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default horizontal alignment value.\n */\nfunction enableHorizontalAlignmentProperty( schema: ModelSchema, conversion: Conversion, defaultValue: string ) {\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ 'tableCellHorizontalAlignment' ]\n\t} );\n\n\tschema.setAttributeProperties( 'tableCellHorizontalAlignment', { isFormatting: true } );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableCell',\n\t\t\t\tkey: 'tableCellHorizontalAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'text-align': alignment\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `text-align:*;` CSS definition for the table cell alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'text-align': ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellHorizontalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, 'left', data );\n\t\t\t\t\tconst align = viewElement.getStyle( 'text-align' );\n\n\t\t\t\t\tif ( align !== localDefaultValue ) {\n\t\t\t\t\t\treturn align;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the style even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { styles: 'text-align' } );\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tattributes: {\n\t\t\t\t\talign: ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellHorizontalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, 'left', data );\n\t\t\t\t\tconst align = viewElement.getAttribute( 'align' );\n\n\t\t\t\t\tif ( align !== localDefaultValue ) {\n\t\t\t\t\t\treturn align;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the style even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { attributes: 'align' } );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n/**\n * Enables the `'verticalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default vertical alignment value.\n */\nfunction enableVerticalAlignmentProperty( schema: ModelSchema, conversion: Conversion, defaultValue: string ) {\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ 'tableCellVerticalAlignment' ]\n\t} );\n\n\tschema.setAttributeProperties( 'tableCellVerticalAlignment', { isFormatting: true } );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableCell',\n\t\t\t\tkey: 'tableCellVerticalAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'vertical-align': alignment\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'vertical-align': VALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellVerticalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, 'middle', data );\n\t\t\t\t\tconst align = viewElement.getStyle( 'vertical-align' );\n\n\t\t\t\t\tif ( align !== localDefaultValue ) {\n\t\t\t\t\t\treturn align;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the style even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { styles: 'vertical-align' } );\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tattributes: {\n\t\t\t\t\tvalign: VALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellVerticalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, 'middle', data );\n\t\t\t\t\tconst valign = viewElement.getAttribute( 'valign' );\n\n\t\t\t\t\tif ( valign !== localDefaultValue ) {\n\t\t\t\t\t\treturn valign;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the attribute even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { attributes: 'valign' } );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { TableCellPropertiesUI } from './tablecellproperties/tablecellpropertiesui.js';\nimport { TableCellPropertiesEditing } from './tablecellproperties/tablecellpropertiesediting.js';\n\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */\nexport class TableCellProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableCellPropertiesEditing, TableCellPropertiesUI ] as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablelayout/tablelayoutui\n */\n\nimport { type Editor, Plugin } from 'ckeditor5/src/core.js';\nimport { IconTableLayout, IconTableProperties } from 'ckeditor5/src/icons.js';\nimport {\n\tcreateDropdown,\n\taddListToDropdown,\n\tMenuBarMenuView,\n\tSplitButtonView,\n\tDropdownButtonView,\n\tUIModel,\n\ttype ListDropdownButtonDefinition,\n\ttype ButtonExecuteEvent\n} from 'ckeditor5/src/ui.js';\nimport {\n\tCollection,\n\ttype ObservableChangeEvent\n} from 'ckeditor5/src/utils.js';\n\nimport { InsertTableView } from '../ui/inserttableview.js';\n\nimport { type InsertTableLayoutCommand } from '../commands/inserttablelayoutcommand.js';\nimport type { TableTypeCommand } from './commands/tabletypecommand.js';\nimport type { TableType } from '../tableconfig.js';\n\n/**\n * The table layout UI plugin. It introduces:\n *\n * * The `'insertTableLayout'` dropdown,\n * * The `'menuBar:insertTableLayout'` menu bar menu.\n */\nexport class TableLayoutUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableLayoutUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = this.editor.t;\n\n\t\teditor.ui.componentFactory.add( 'insertTableLayout', locale => {\n\t\t\tconst command: InsertTableLayoutCommand = editor.commands.get( 'insertTableLayout' )!;\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Decorate dropdown's button.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\ticon: IconTableLayout,\n\t\t\t\tlabel: t( 'Insert table layout' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tlet insertTableLayoutView: InsertTableView;\n\n\t\t\tdropdownView.on( 'change:isOpen', () => {\n\t\t\t\tif ( insertTableLayoutView ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prepare custom view for dropdown's panel.\n\t\t\t\tinsertTableLayoutView = new InsertTableView( locale );\n\t\t\t\tdropdownView.panelView.children.add( insertTableLayoutView );\n\n\t\t\t\tinsertTableLayoutView.delegate( 'execute' ).to( dropdownView );\n\n\t\t\t\tdropdownView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'insertTableLayout', {\n\t\t\t\t\t\trows: insertTableLayoutView.rows,\n\t\t\t\t\t\tcolumns: insertTableLayoutView.columns\n\t\t\t\t\t} );\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'menuBar:insertTableLayout', locale => {\n\t\t\tconst command: InsertTableLayoutCommand = editor.commands.get( 'insertTableLayout' )!;\n\t\t\tconst menuView = new MenuBarMenuView( locale );\n\t\t\tconst insertTableLayoutView = new InsertTableView( locale );\n\n\t\t\tinsertTableLayoutView.delegate( 'execute' ).to( menuView );\n\n\t\t\tmenuView.on<ObservableChangeEvent<boolean>>( 'change:isOpen', ( event, name, isOpen ) => {\n\t\t\t\tif ( !isOpen ) {\n\t\t\t\t\tinsertTableLayoutView.reset();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tinsertTableLayoutView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'insertTableLayout', {\n\t\t\t\t\trows: insertTableLayoutView.rows,\n\t\t\t\t\tcolumns: insertTableLayoutView.columns\n\t\t\t\t} );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tmenuView.buttonView.set( {\n\t\t\t\tlabel: t( 'Table layout' ),\n\t\t\t\ticon: IconTableLayout\n\t\t\t} );\n\n\t\t\tmenuView.panelView.children.add( insertTableLayoutView );\n\n\t\t\tmenuView.bind( 'isEnabled' ).to( command );\n\n\t\t\treturn menuView;\n\t\t} );\n\n\t\t// Create table type dropdown button.\n\t\teditor.ui.componentFactory.add( 'tableType', () => {\n\t\t\tconst editor = this.editor;\n\t\t\tconst t = editor.t;\n\n\t\t\tconst button = new DropdownButtonView( editor.locale );\n\n\t\t\tbutton.set( {\n\t\t\t\tlabel: t( 'Table type' ),\n\t\t\t\ticon: IconTableProperties,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\treturn createTableTypeDropdown( editor, button );\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.plugins.has( 'TablePropertiesUI' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tablePropertiesUI = editor.plugins.get( 'TablePropertiesUI' );\n\n\t\t// Override the default table properties button to include the table type dropdown.\n\t\t// It needs to be done in `afterInit()` to make sure that `tableProperties` button is\n\t\t// registered after the initialization of the `TablePropertiesUI`. Otherwise, the\n\t\t// button will be overridden by the default one if the `TablePropertiesUI` is\n\t\t// initialized after the `TableLayoutUI`.\n\t\teditor.ui.componentFactory.add( 'tableProperties', locale => {\n\t\t\tconst baseButton = tablePropertiesUI._createTablePropertiesButton();\n\t\t\tconst splitButtonView = new SplitButtonView( locale, baseButton );\n\n\t\t\treturn createTableTypeDropdown( editor, splitButtonView );\n\t\t} );\n\t}\n}\n\n/**\n * Creates a dropdown for the table type selection.\n *\n * @param editor The editor instance.\n * @param dropdownButton The button view that will be used as the dropdown trigger.\n * @returns A dropdown view containing table type options.\n */\nfunction createTableTypeDropdown( editor: Editor, dropdownButton: DropdownButtonView | SplitButtonView ) {\n\tconst t = editor.t;\n\tconst locale = editor.locale;\n\tconst tableTypeCommand = editor.commands.get( 'tableType' )!;\n\n\t// Wrap the original button in a SplitButtonView.\n\tconst dropdownView = createDropdown( locale, dropdownButton );\n\tconst itemsDefinitions = createTableLayoutTypeDropdownItems( editor );\n\n\t// Add table types to the dropdown.\n\taddListToDropdown( dropdownView, itemsDefinitions, {\n\t\tariaLabel: t( 'Table type options' ),\n\t\trole: 'menu'\n\t} );\n\n\tdropdownButton.tooltip = t( 'Choose table type' );\n\tdropdownView.on<ButtonExecuteEvent>( 'execute', evt => {\n\t\tconst tableType = ( evt.source as any ).tableType as TableType | undefined;\n\n\t\tif ( tableType ) {\n\t\t\ttableTypeCommand.execute( tableType );\n\t\t}\n\t} );\n\n\treturn dropdownView;\n}\n\n/**\n * Creates dropdown items for table type selection.\n *\n * @param editor The editor instance.\n * @returns A collection of dropdown items for the table type dropdown.\n */\nfunction createTableLayoutTypeDropdownItems( editor: Editor ) {\n\tconst t = editor.t;\n\tconst tableTypeCommand = editor.commands.get( 'tableType' )!;\n\tconst itemDefinitions = new Collection<ListDropdownButtonDefinition>();\n\n\titemDefinitions.add( createTableTypeDropdownItem( tableTypeCommand, 'layout', t( 'Layout table' ) ) );\n\titemDefinitions.add( createTableTypeDropdownItem( tableTypeCommand, 'content', t( 'Content table' ) ) );\n\n\treturn itemDefinitions;\n}\n\n/**\n * Creates a dropdown item for a specific table type.\n *\n * @param tableTypeCommand The table type command.\n * @param type The table type value ('layout' or 'content').\n * @param label The localized label for the dropdown item.\n * @returns The dropdown item definition.\n */\nfunction createTableTypeDropdownItem(\n\ttableTypeCommand: TableTypeCommand,\n\ttype: TableType,\n\tlabel: string\n): ListDropdownButtonDefinition {\n\tconst model = new UIModel( {\n\t\tlabel,\n\t\trole: 'menuitemradio',\n\t\twithText: true,\n\t\ttableType: type\n\t} );\n\n\tmodel.bind( 'isEnabled' ).to( tableTypeCommand, 'isEnabled' );\n\tmodel.bind( 'isOn' ).to( tableTypeCommand, 'value', value => value === type );\n\n\treturn {\n\t\ttype: 'button',\n\t\tmodel\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/inserttablelayoutcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\n\nimport type {\n\tModelDocumentSelection,\n\tModelSchema,\n\tModelSelection,\n\tModelElement\n} from 'ckeditor5/src/engine.js';\n\nimport { type TableUtils } from '../tableutils.js';\nimport { type TableWidthsCommand } from '../../src/tablecolumnresize/tablewidthscommand.js';\n\n/**\n * The insert table layout command.\n *\n * The command is registered by {@link module:table/tablelayout/tablelayoutediting~TableLayoutEditing}\n * as the `'insertTableLayout'` editor command.\n *\n * To insert a layout table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTableLayout', { rows: 20, columns: 5 } );\n * ```\n */\nexport class InsertTableLayoutCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tthis.isEnabled = isAllowedInParent( selection, schema );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a layout table with the given number of rows and columns into the editor.\n\t *\n\t * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n\t * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n\t * @fires execute\n\t */\n\tpublic override execute(\n\t\toptions: {\n\t\t\trows?: number;\n\t\t\tcolumns?: number;\n\t\t} = {}\n\t): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tmodel.change( writer => {\n\t\t\tconst normalizedOptions = { rows: options.rows || 2, columns: options.columns || 2 };\n\t\t\tconst table = tableUtils.createTable( writer, normalizedOptions );\n\n\t\t\twriter.setAttribute( 'tableType', 'layout', table );\n\n\t\t\tmodel.insertObject( table, null, null, { findOptimalPosition: 'auto' } );\n\n\t\t\tconst singleColumnWidth = `${ 100 / normalizedOptions.columns! }%`;\n\t\t\tconst columnWidths = Array( normalizedOptions.columns ).fill( singleColumnWidth );\n\t\t\tconst tableWidthsCommand: TableWidthsCommand = editor.commands.get( 'resizeColumnWidths' )!;\n\n\t\t\t// Make the table full-width with equal columns width.\n\t\t\ttableWidthsCommand.execute( { tableWidth: '100%', columnWidths, table } );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Checks if the table is allowed in the parent.\n */\nfunction isAllowedInParent( selection: ModelSelection | ModelDocumentSelection, schema: ModelSchema ) {\n\tconst positionParent = selection.getFirstPosition()!.parent;\n\tconst validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n\n\treturn schema.checkChild( validParent as ModelElement, 'table' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/tablewidthscommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport { Command } from 'ckeditor5/src/core.js';\nimport { normalizeColumnWidths } from './utils.js';\n\n/**\n * Command used by the {@link module:table/tablecolumnresize~TableColumnResize Table column resize feature} that\n * updates the width of the whole table as well as its individual columns.\n */\nexport class TableWidthsCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\t// The command is always enabled as it doesn't care about the actual selection - table can be resized\n\t\t// even if the selection is elsewhere.\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Updated the `tableWidth` attribute of the table and the `columnWidth` attribute of the columns of that table.\n\t */\n\tpublic override execute( options: TableWidthsCommandOptions = {} ): void {\n\t\tconst { model, plugins } = this.editor;\n\t\tlet {\n\t\t\ttable = model.document.selection.getSelectedElement()!,\n\t\t\tcolumnWidths,\n\t\t\ttableWidth\n\t\t} = options;\n\n\t\tif ( columnWidths ) {\n\t\t\t// For backwards compatibility, columnWidths might be an array or a string of comma-separated values.\n\t\t\tcolumnWidths = Array.isArray( columnWidths ) ?\n\t\t\t\tcolumnWidths :\n\t\t\t\tcolumnWidths.split( ',' );\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tif ( tableWidth ) {\n\t\t\t\twriter.setAttribute( 'tableWidth', tableWidth, table );\n\t\t\t} else {\n\t\t\t\twriter.removeAttribute( 'tableWidth', table );\n\t\t\t}\n\n\t\t\tconst tableColumnGroup = plugins\n\t\t\t\t.get( 'TableColumnResizeEditing' )\n\t\t\t\t.getColumnGroupElement( table )!;\n\n\t\t\tif ( !columnWidths && !tableColumnGroup ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !columnWidths ) {\n\t\t\t\treturn writer.remove( tableColumnGroup );\n\t\t\t}\n\n\t\t\tconst widths = normalizeColumnWidths( columnWidths as Array<string> );\n\n\t\t\tif ( !tableColumnGroup ) {\n\t\t\t\tconst colGroupElement = writer.createElement( 'tableColumnGroup' );\n\n\t\t\t\twidths.forEach( columnWidth => writer.appendElement( 'tableColumn', { columnWidth }, colGroupElement ) );\n\t\t\t\twriter.append( colGroupElement, table );\n\t\t\t} else {\n\t\t\t\tArray\n\t\t\t\t\t.from( tableColumnGroup.getChildren() )\n\t\t\t\t\t.forEach( ( column, index ) => writer.setAttribute( 'columnWidth', widths[ index ], column ) );\n\t\t\t}\n\t\t} );\n\t}\n}\n\nexport interface TableWidthsCommandOptions {\n\n\t/**\n\t * New value of the `columnWidths` attribute. Must be array of strings or string with comma-separated values.\n\t * If skipped, the column widths information will be deleted.\n\t */\n\tcolumnWidths?: Array<string> | string;\n\n\t/**\n\t * The new table width. If skipped, the model attribute will be removed.\n\t */\n\ttableWidth?: string;\n\n\t/**\n\t * The table that is having the columns resized.\n\t */\n\ttable?: ModelElement;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/converters\n */\n\nimport type {\n\tDowncastDispatcher,\n\tDowncastInsertEvent,\n\tModelElement,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\nimport { type TableUtils } from '../tableutils.js';\nimport {\n\tnormalizeColumnWidths,\n\tupdateColumnElements,\n\tgetColumnGroupElement,\n\tgetTableColumnElements,\n\ttranslateColSpanAttribute\n} from './utils.js';\n\n/**\n * Returns a upcast helper that ensures the number of `<tableColumn>` elements corresponds to the actual number of columns in the table,\n * because the input data might have too few or too many <col> elements.\n *\n * @internal\n */\nexport function upcastColgroupElement( tableUtilsPlugin: TableUtils ): ( dispatcher: UpcastDispatcher ) => void {\n\treturn dispatcher => dispatcher.on<UpcastElementEvent>( 'element:colgroup', ( evt, data, conversionApi ) => {\n\t\tconst modelTable = data.modelCursor.findAncestor( 'table' )!;\n\t\tconst tableColumnGroup = getColumnGroupElement( modelTable );\n\n\t\tif ( !tableColumnGroup ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst columnElements = getTableColumnElements( tableColumnGroup );\n\t\tconst columnsCount = tableUtilsPlugin.getColumns( modelTable );\n\t\tlet columnWidths = translateColSpanAttribute( tableColumnGroup, conversionApi.writer );\n\n\t\t// Fill the array with 'auto' values if the number of columns is higher than number of declared values.\n\t\tcolumnWidths = Array.from( { length: columnsCount }, ( _, index ) => columnWidths[ index ] || 'auto' );\n\n\t\tif ( columnWidths.length != columnElements.length || columnWidths.includes( 'auto' ) ) {\n\t\t\tupdateColumnElements( columnElements, tableColumnGroup, normalizeColumnWidths( columnWidths ), conversionApi.writer );\n\t\t}\n\t}, { priority: 'low' } );\n}\n\n/**\n * Returns downcast helper for adding `ck-table-resized` class if there is a `<tableColumnGroup>` element inside the table.\n *\n * @internal\n */\nexport function downcastTableResizedClass(): ( dispatcher: DowncastDispatcher ) => void {\n\treturn dispatcher => dispatcher.on<DowncastInsertEvent>( 'insert:table', ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelTable = data.item as ModelElement;\n\t\tconst viewElement: ViewElement = conversionApi.mapper.toViewElement( modelTable )!;\n\n\t\tconst viewTable = viewElement.is( 'element', 'table' ) ?\n\t\t\tviewElement :\n\t\t\tArray.from( viewElement.getChildren() ).find( viewChild => viewChild.is( 'element', 'table' ) )!;\n\n\t\tconst tableColumnGroup = getColumnGroupElement( modelTable );\n\n\t\tif ( tableColumnGroup ) {\n\t\t\tviewWriter.addClass( 'ck-table-resized', viewTable as ViewElement );\n\t\t} else {\n\t\t\tviewWriter.removeClass( 'ck-table-resized', viewTable as ViewElement );\n\t\t}\n\t}, { priority: 'low' } );\n}\n\n/**\n * Returns a upcast helper that removes the `ck-table-resized` class from the table element.\n *\n * @internal\n */\nexport function upcastTableResizedClass(): ( dispatcher: UpcastDispatcher ) => void {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconversionApi.consumable.consume( data.viewItem, { classes: 'ck-table-resized' } );\n\t\t} );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/tablecolumnresizeediting\n */\n\nimport { throttle, isEqual } from 'es-toolkit/compat';\n\nimport {\n\tglobal,\n\tDomEmitterMixin,\n\tRect,\n\ttoUnit,\n\ttype EventInfo,\n\ttype DomEmitter,\n\ttype ObservableChangeEvent\n} from 'ckeditor5/src/utils.js';\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport type {\n\tDiffer,\n\tViewDocumentDomEventData,\n\tDowncastInsertEvent,\n\tViewDowncastWriter,\n\tModelElement,\n\tViewElement,\n\tViewNode\n} from 'ckeditor5/src/engine.js';\n\nimport { MouseEventsObserver } from '../../src/tablemouse/mouseeventsobserver.js';\nimport { TableEditing } from '../tableediting.js';\nimport { TableUtils } from '../tableutils.js';\nimport { TableWalker } from '../tablewalker.js';\n\nimport { TableWidthsCommand } from './tablewidthscommand.js';\n\nimport { downcastTableResizedClass, upcastColgroupElement, upcastTableResizedClass } from './converters.js';\n\nimport {\n\tclamp,\n\tcreateFilledArray,\n\tsumArray,\n\tgetColumnEdgesIndexes,\n\tgetChangedResizedTables,\n\tgetColumnMinWidthAsPercentage,\n\tgetElementWidthInPixels,\n\tgetTableWidthInPixels,\n\tnormalizeColumnWidths,\n\ttoPrecision,\n\tgetDomCellOuterWidth,\n\tupdateColumnElements,\n\tgetColumnGroupElement,\n\tgetTableColumnElements,\n\tgetTableColumnsWidths\n} from './utils.js';\n\nimport { COLUMN_MIN_WIDTH_IN_PIXELS, COLUMN_RESIZE_DISTANCE_THRESHOLD } from './constants.js';\nimport { type TableColumnResize } from '../tablecolumnresize.js';\n\nconst toPx = /* #__PURE__ */ toUnit( 'px' );\n\ntype ResizingData = {\n\tcolumnPosition: number;\n\tflags: {\n\t\tisRightEdge: boolean;\n\t\tisTableCentered: boolean;\n\t\tisLtrContent: boolean;\n\t};\n\telements: {\n\t\tviewResizer: ViewElement;\n\t\tmodelTable: ModelElement;\n\t\tviewFigure: ViewElement;\n\t\tviewColgroup: ViewElement;\n\t\tviewLeftColumn: ViewElement;\n\t\tviewRightColumn?: ViewElement;\n\t};\n\twidths: {\n\t\tviewFigureParentWidth: number;\n\t\tviewFigureWidth: number;\n\t\ttableWidth: number;\n\t\tleftColumnWidth: number;\n\t\trightColumnWidth?: number;\n\t};\n};\n\n/**\n * The table column resize editing plugin.\n */\nexport class TableColumnResizeEditing extends Plugin {\n\t/**\n\t * A flag indicating if the column resizing is in progress.\n\t */\n\tprivate _isResizingActive: boolean;\n\n\t/**\n\t * A flag indicating if the column resizing is allowed. It is not allowed if the editor is in read-only\n\t * or comments-only mode or the `TableColumnResize` plugin is disabled.\n\t *\n\t * @observable\n\t * @internal\n\t */\n\tpublic declare _isResizingAllowed: boolean;\n\n\t/**\n\t * A temporary storage for the required data needed to correctly calculate the widths of the resized columns. This storage is\n\t * initialized when column resizing begins, and is purged upon completion.\n\t */\n\tprivate _resizingData: ResizingData | null;\n\n\t/**\n\t * DOM emitter.\n\t */\n\tprivate _domEmitter: DomEmitter;\n\n\t/**\n\t * A local reference to the {@link module:table/tableutils~TableUtils} plugin.\n\t */\n\tprivate _tableUtilsPlugin: TableUtils;\n\n\t/**\n\t * Starting mouse position data used to add a threshold to the resizing process.\n\t */\n\tprivate _initialMouseEventData: ViewDocumentDomEventData | null = null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableColumnResizeEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._isResizingActive = false;\n\t\tthis.set( '_isResizingAllowed', true );\n\t\tthis._resizingData = null;\n\t\tthis._domEmitter = new ( DomEmitterMixin() )();\n\t\tthis._tableUtilsPlugin = editor.plugins.get( 'TableUtils' );\n\n\t\tthis.on<ObservableChangeEvent<boolean>>( 'change:_isResizingAllowed', ( evt, name, value ) => {\n\t\t\t// Toggling the `ck-column-resize_disabled` class shows and hides the resizers through CSS.\n\t\t\tconst classAction = value ? 'removeClass' : 'addClass';\n\n\t\t\teditor.editing.view.change( writer => {\n\t\t\t\tfor ( const root of editor.editing.view.document.roots ) {\n\t\t\t\t\twriter[ classAction ]( 'ck-column-resize_disabled', editor.editing.view.document.getRoot( root.rootName )! );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tthis._extendSchema();\n\t\tthis._registerPostFixer();\n\t\tthis._registerConverters();\n\t\tthis._registerResizingListeners();\n\t\tthis._registerResizerInserter();\n\n\t\tconst editor = this.editor;\n\t\tconst columnResizePlugin: TableColumnResize = editor.plugins.get( 'TableColumnResize' );\n\t\tconst tableEditing: TableEditing = editor.plugins.get( 'TableEditing' );\n\n\t\ttableEditing.registerAdditionalSlot( {\n\t\t\tfilter: element => element.is( 'element', 'tableColumnGroup' ),\n\t\t\tpositionOffset: 0\n\t\t} );\n\n\t\tconst tableWidthsCommand = new TableWidthsCommand( editor );\n\n\t\t// For backwards compatibility we have two commands that perform exactly the same operation.\n\t\teditor.commands.add( 'resizeTableWidth', tableWidthsCommand );\n\t\teditor.commands.add( 'resizeColumnWidths', tableWidthsCommand );\n\n\t\t// Currently the states of column resize and table resize (which is actually the last column resize) features\n\t\t// are bound together. They can be separated in the future by adding distinct listeners and applying\n\t\t// different CSS classes (e.g. `ck-column-resize_disabled` and `ck-table-resize_disabled`) to the editor root.\n\t\t// See #12148 for the details.\n\t\tthis.bind( '_isResizingAllowed' ).to(\n\t\t\teditor, 'isReadOnly',\n\t\t\tcolumnResizePlugin, 'isEnabled',\n\t\t\ttableWidthsCommand, 'isEnabled',\n\t\t\t( isEditorReadOnly, isPluginEnabled, isTableWidthsCommandCommandEnabled ) =>\n\t\t\t\t!isEditorReadOnly && isPluginEnabled && isTableWidthsCommandCommandEnabled\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tthis._domEmitter.stopListening();\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Returns a 'tableColumnGroup' element from the 'table'.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns A 'tableColumnGroup' element.\n\t */\n\tpublic getColumnGroupElement( element: ModelElement ): ModelElement | undefined {\n\t\treturn getColumnGroupElement( element );\n\t}\n\n\t/**\n\t * Returns an array of 'tableColumn' elements.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of 'tableColumn' elements.\n\t */\n\tpublic getTableColumnElements( element: ModelElement ): Array<ModelElement> {\n\t\treturn getTableColumnElements( element );\n\t}\n\n\t/**\n\t * Returns an array of table column widths.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of table column widths.\n\t */\n\tpublic getTableColumnsWidths( element: ModelElement ): Array<string> {\n\t\treturn getTableColumnsWidths( element );\n\t}\n\n\t/**\n\t * Registers new attributes for a table model element.\n\t */\n\tprivate _extendSchema() {\n\t\tconst schema = this.editor.model.schema;\n\n\t\tschema.extend( 'table', {\n\t\t\tallowAttributes: [ 'tableWidth' ]\n\t\t} );\n\n\t\tschema.register( 'tableColumnGroup', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableColumn', {\n\t\t\tallowIn: 'tableColumnGroup',\n\t\t\tallowAttributes: [ 'columnWidth', 'colSpan' ],\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.setAttributeProperties( 'columnWidth', { isFormatting: true } );\n\t}\n\n\t/**\n\t * Registers table column resize post-fixer.\n\t *\n\t * It checks if the change from the differ concerns a table-related element or attribute. For detected changes it:\n\t *  * Adjusts the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n\t *  * Checks if the `columnWidths` attribute gets updated accordingly after columns have been added or removed.\n\t */\n\tprivate _registerPostFixer() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tlet changed = false;\n\n\t\t\tfor ( const table of getChangedResizedTables( model ) ) {\n\t\t\t\tconst tableColumnGroup = this.getColumnGroupElement( table )!;\n\t\t\t\tconst columns = this.getTableColumnElements( tableColumnGroup );\n\t\t\t\tconst columnWidths = this.getTableColumnsWidths( tableColumnGroup );\n\n\t\t\t\t// Adjust the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n\t\t\t\tlet normalizedWidths = normalizeColumnWidths( columnWidths );\n\n\t\t\t\t// If the number of columns has changed, then we need to adjust the widths of the affected columns.\n\t\t\t\tnormalizedWidths = adjustColumnWidths( normalizedWidths, table, this );\n\n\t\t\t\tif ( isEqual( columnWidths, normalizedWidths ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateColumnElements( columns, tableColumnGroup, normalizedWidths, writer );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\n\t\t/**\n\t\t * Adjusts if necessary the `columnWidths` in case if the number of column has changed.\n\t\t *\n\t\t * @param columnWidths Note: this array **may be modified** by the function.\n\t\t * @param table Table to be checked.\n\t\t */\n\t\tfunction adjustColumnWidths( columnWidths: Array<string>, table: ModelElement, plugin: TableColumnResizeEditing ): Array<string> {\n\t\t\tconst newTableColumnsCount = plugin._tableUtilsPlugin.getColumns( table );\n\t\t\tconst columnsCountDelta = newTableColumnsCount - columnWidths.length;\n\n\t\t\tif ( columnsCountDelta === 0 ) {\n\t\t\t\treturn columnWidths;\n\t\t\t}\n\n\t\t\tconst widths: Array<number> = columnWidths.map( width => Number( width.replace( '%', '' ) ) );\n\n\t\t\t// Collect all cells that are affected by the change.\n\t\t\tconst cellSet = getAffectedCells( plugin.editor.model.document.differ, table ) as Set<ModelElement>;\n\n\t\t\tfor ( const cell of cellSet ) {\n\t\t\t\tconst currentColumnsDelta = newTableColumnsCount - widths.length;\n\n\t\t\t\tif ( currentColumnsDelta === 0 ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If the column count in the table changed, adjust the widths of the affected columns.\n\t\t\t\tconst hasMoreColumns = currentColumnsDelta > 0;\n\t\t\t\tconst currentColumnIndex = plugin._tableUtilsPlugin.getCellLocation( cell ).column;\n\n\t\t\t\tif ( hasMoreColumns ) {\n\t\t\t\t\tconst columnMinWidthAsPercentage = getColumnMinWidthAsPercentage( table, plugin.editor );\n\t\t\t\t\tconst columnWidthsToInsert = createFilledArray( currentColumnsDelta, columnMinWidthAsPercentage );\n\n\t\t\t\t\twidths.splice( currentColumnIndex, 0, ...columnWidthsToInsert );\n\t\t\t\t} else {\n\t\t\t\t\t// Moves the widths of the removed columns to the preceding one.\n\t\t\t\t\t// Other editors either reduce the width of the whole table or adjust the widths\n\t\t\t\t\t// proportionally, so change of this behavior can be considered in the future.\n\t\t\t\t\tconst removedColumnWidths = widths.splice( currentColumnIndex, Math.abs( currentColumnsDelta ) );\n\n\t\t\t\t\twidths[ currentColumnIndex ] += sumArray( removedColumnWidths );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn widths.map( width => width + '%' );\n\t\t}\n\n\t\t/**\n\t\t * Returns a set of cells that have been changed in a given table.\n\t\t */\n\t\tfunction getAffectedCells( differ: Differ, table: ModelElement ): Set<ModelElement> {\n\t\t\tconst cellSet = new Set<ModelElement>();\n\n\t\t\tfor ( const change of differ.getChanges() ) {\n\t\t\t\tif (\n\t\t\t\t\tchange.type == 'insert' &&\n\t\t\t\t\tchange.position.nodeAfter &&\n\t\t\t\t\t( change.position.nodeAfter as ModelElement ).name == 'tableCell' &&\n\t\t\t\t\tchange.position.nodeAfter.getAncestors().includes( table )\n\t\t\t\t) {\n\t\t\t\t\tcellSet.add( change.position.nodeAfter as ModelElement );\n\t\t\t\t} else if ( change.type == 'remove' ) {\n\t\t\t\t\t// If the first cell was removed, use the node after the change position instead.\n\t\t\t\t\tconst referenceNode = ( change.position.nodeBefore || change.position.nodeAfter ) as ModelElement;\n\n\t\t\t\t\tif ( referenceNode.name == 'tableCell' && referenceNode.getAncestors().includes( table ) ) {\n\t\t\t\t\t\tcellSet.add( referenceNode );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn cellSet;\n\t\t}\n\t}\n\n\t/**\n\t * Registers table column resize converters.\n\t */\n\tprivate _registerConverters() {\n\t\tconst editor = this.editor;\n\t\tconst conversion = editor.conversion;\n\n\t\t// Table width style\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(figure|table)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\twidth: /[\\s\\S]+/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableWidth',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst parent = viewElement.parent!;\n\n\t\t\t\t\tif ( parent.is( 'element', 'figure' ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewElement.getStyle( 'width' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableWidth'\n\t\t\t},\n\t\t\tview: ( width: string ) => ( {\n\t\t\t\tname: 'figure',\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\twidth\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\t\tconversion.elementToElement( { model: 'tableColumnGroup', view: 'colgroup' } );\n\t\tconversion.elementToElement( { model: 'tableColumn', view: 'col' } );\n\n\t\tconversion.for( 'downcast' ).add( downcastTableResizedClass() );\n\n\t\tconversion.for( 'upcast' ).add( upcastTableResizedClass() );\n\t\tconversion.for( 'upcast' ).add( upcastColgroupElement( this._tableUtilsPlugin ) );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'col',\n\t\t\t\tstyles: {\n\t\t\t\t\twidth: /.*/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'columnWidth',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst viewColWidth = viewElement.getStyle( 'width' );\n\n\t\t\t\t\t// 'pt' is the default unit for table column width pasted from MS Office.\n\t\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n\t\t\t\t\tif ( !viewColWidth || ( !viewColWidth.endsWith( '%' ) && !viewColWidth.endsWith( 'pt' ) ) ) {\n\t\t\t\t\t\treturn 'auto';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewColWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// The `col[span]` attribute is present in tables pasted from MS Excel. We use it to set the temporary `colSpan` model attribute,\n\t\t// which is consumed during the `colgroup` element upcast.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'col',\n\t\t\t\tkey: 'span'\n\t\t\t},\n\t\t\tmodel: 'colSpan'\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableColumn',\n\t\t\t\tkey: 'columnWidth'\n\t\t\t},\n\t\t\tview: width => ( { key: 'style', value: { width } } )\n\t\t} );\n\t}\n\n\t/**\n\t * Registers listeners to handle resizing process.\n\t */\n\tprivate _registerResizingListeners() {\n\t\tconst editingView = this.editor.editing.view;\n\n\t\teditingView.addObserver( MouseEventsObserver );\n\t\teditingView.document.on( 'mouseover', this._onMouseOverHandler.bind( this ), { priority: 'high' } );\n\t\teditingView.document.on( 'mousedown', this._onMouseDownHandler.bind( this ), { priority: 'high' } );\n\t\teditingView.document.on( 'mouseout', this._onMouseOutHandler.bind( this ), { priority: 'high' } );\n\n\t\tthis._domEmitter.listenTo( global.window.document, 'mousemove', throttle( this._onMouseMoveHandler.bind( this ), 50 ) );\n\t\tthis._domEmitter.listenTo( global.window.document, 'mouseup', this._onMouseUpHandler.bind( this ) );\n\t}\n\n\t/**\n\t * Calculate and set `top` and `bottom` styles to the column resizer element to fit the height of the table.\n\t *\n\t * @param viewResizer The column resizer element.\n\t */\n\tprivate _recalculateResizerElement( viewResizer: ViewElement ): void {\n\t\tconst editor = this.editor;\n\t\tconst domConverter = editor.editing.view.domConverter;\n\n\t\t// Get DOM target figure ancestor element.\n\t\tconst domTable = domConverter.mapViewToDom( viewResizer.findAncestor( 'table' )! )!;\n\n\t\t// Get DOM table cell element.\n\t\tconst domCell = domConverter.mapViewToDom(\n\t\t\tviewResizer.findAncestor( item => [ 'td', 'th' ].includes( item.name ) )!\n\t\t)!;\n\n\t\tconst rectTable = new Rect( domTable );\n\t\tconst rectCell = new Rect( domCell );\n\n\t\t// Calculate the top, and bottom positions of the column resizer element.\n\t\tconst targetTopPosition = toPx( Number( ( rectTable.top - rectCell.top ).toFixed( 4 ) ) );\n\t\tconst targetBottomPosition = toPx( Number( ( rectCell.bottom - rectTable.bottom ).toFixed( 4 ) ) );\n\n\t\t// Set `top` and `bottom` styles to the column resizer element.\n\t\teditor.editing.view.change( viewWriter => {\n\t\t\tviewWriter.setStyle( 'top', targetTopPosition, viewResizer );\n\t\t\tviewWriter.setStyle( 'bottom', targetBottomPosition, viewResizer );\n\t\t} );\n\t}\n\n\t/**\n\t * Remove `top` and `bottom` styles of the column resizer element.\n\t *\n\t * @param viewResizer The column resizer element.\n\t */\n\tprivate _resetResizerStyles( viewResizer: ViewElement ): void {\n\t\tthis.editor.editing.view.change( viewWriter => {\n\t\t\tviewWriter.removeStyle( 'top', viewResizer );\n\t\t\tviewWriter.removeStyle( 'bottom', viewResizer );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the `mouseover` event on column resizer element.\n\t * Recalculates the `top` and `bottom` styles of the column resizer element to fit the height of the table.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */\n\tprivate _onMouseOverHandler( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData ) {\n\t\tconst target = domEventData.target;\n\n\t\tif ( !target.hasClass( 'ck-table-column-resizer' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._isResizingAllowed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._recalculateResizerElement( target );\n\t}\n\n\t/**\n\t * Handles the `mouseout` event on column resizer element.\n\t * When resizing is not active, it resets the `top` and `bottom` styles of the column resizer element.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */\n\tprivate _onMouseOutHandler( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData ) {\n\t\tconst target = domEventData.target;\n\n\t\tif ( !target.hasClass( 'ck-table-column-resizer' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._isResizingAllowed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._isResizingActive ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._resetResizerStyles( target );\n\t}\n\n\t/**\n\t * Handles the `mousedown` event on column resizer element:\n\t *  * calculates the initial column pixel widths,\n\t *  * inserts the `<colgroup>` element if it is not present in the `<table>`,\n\t *  * puts the necessary data in the temporary storage,\n\t *  * applies the attributes to the `<table>` view element.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */\n\tprivate _onMouseDownHandler( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData ) {\n\t\tconst target = domEventData.target;\n\n\t\tif ( !target.hasClass( 'ck-table-column-resizer' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._isResizingAllowed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst modelTable = editor.editing.mapper.toModelElement( target.findAncestor( 'figure' )! )!;\n\n\t\t// Do not resize if table model is in non-editable place.\n\t\tif ( !editor.model.canEditAt( modelTable ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\t\teventInfo.stop();\n\n\t\tthis._initialMouseEventData = domEventData;\n\t}\n\n\t/**\n\t * Starts the resizing process after the threshold is reached.\n\t */\n\tprivate _startResizingAfterThreshold() {\n\t\tconst domEventData = this._initialMouseEventData!;\n\t\tconst { target } = domEventData;\n\n\t\tconst modelTable = this.editor.editing.mapper.toModelElement( target.findAncestor( 'figure' )! )!;\n\t\tconst viewTable = target.findAncestor( 'table' )!;\n\n\t\t// Calculate the initial column widths in pixels.\n\t\tconst columnWidthsInPx = _calculateDomColumnWidths( modelTable, this._tableUtilsPlugin, this.editor );\n\n\t\t// Insert colgroup for the table that is resized for the first time.\n\t\tif ( !Array.from( viewTable.getChildren() ).find( viewCol => viewCol.is( 'element', 'colgroup' ) ) ) {\n\t\t\tthis.editor.editing.view.change( viewWriter => {\n\t\t\t\t_insertColgroupElement( viewWriter, columnWidthsInPx, viewTable );\n\t\t\t} );\n\t\t}\n\n\t\tthis._isResizingActive = true;\n\t\tthis._resizingData = this._getResizingData( domEventData, columnWidthsInPx );\n\n\t\t// At this point we change only the editor view - we don't want other users to see our changes yet,\n\t\t// so we can't apply them in the model.\n\t\tthis.editor.editing.view.change( writer => _applyResizingAttributesToTable( writer, viewTable, this._resizingData! ) );\n\n\t\t/**\n\t\t * Calculates the DOM columns' widths. It is done by taking the width of the widest cell\n\t\t * from each table column (we rely on the  {@link module:table/tablewalker~TableWalker}\n\t\t * to determine which column the cell belongs to).\n\t\t *\n\t\t * @param modelTable A table which columns should be measured.\n\t\t * @param tableUtils The Table Utils plugin instance.\n\t\t * @param editor The editor instance.\n\t\t * @returns Columns' widths expressed in pixels (without unit).\n\t\t */\n\t\tfunction _calculateDomColumnWidths( modelTable: ModelElement, tableUtilsPlugin: TableUtils, editor: Editor ) {\n\t\t\tconst columnWidthsInPx = Array( tableUtilsPlugin.getColumns( modelTable ) );\n\t\t\tconst tableWalker = new TableWalker( modelTable );\n\n\t\t\tfor ( const cellSlot of tableWalker ) {\n\t\t\t\tconst viewCell = editor.editing.mapper.toViewElement( cellSlot.cell )!;\n\t\t\t\tconst domCell = editor.editing.view.domConverter.mapViewToDom( viewCell )!;\n\t\t\t\tconst domCellWidth = getDomCellOuterWidth( domCell );\n\n\t\t\t\tif ( !columnWidthsInPx[ cellSlot.column ] || domCellWidth < columnWidthsInPx[ cellSlot.column ] ) {\n\t\t\t\t\tcolumnWidthsInPx[ cellSlot.column ] = toPrecision( domCellWidth );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn columnWidthsInPx;\n\t\t}\n\n\t\t/**\n\t\t * Creates a `<colgroup>` element with `<col>`s and inserts it into a given view table.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param columnWidthsInPx Column widths.\n\t\t * @param viewTable A table view element.\n\t\t */\n\t\tfunction _insertColgroupElement( viewWriter: ViewDowncastWriter, columnWidthsInPx: Array<number>, viewTable: ViewElement ) {\n\t\t\tconst colgroup = viewWriter.createContainerElement( 'colgroup' );\n\n\t\t\tfor ( let i = 0; i < columnWidthsInPx.length; i++ ) {\n\t\t\t\tconst viewColElement = viewWriter.createEmptyElement( 'col' );\n\t\t\t\tconst columnWidthInPc = `${ toPrecision( columnWidthsInPx[ i ] / sumArray( columnWidthsInPx ) * 100 ) }%`;\n\n\t\t\t\tviewWriter.setStyle( 'width', columnWidthInPc, viewColElement );\n\t\t\t\tviewWriter.insert( viewWriter.createPositionAt( colgroup, 'end' ), viewColElement );\n\t\t\t}\n\n\t\t\tviewWriter.insert( viewWriter.createPositionAt( viewTable, 0 ), colgroup );\n\t\t}\n\n\t\t/**\n\t\t * Applies the style and classes to the view table as the resizing begun.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param viewTable A table containing the clicked resizer.\n\t\t * @param resizingData Data related to the resizing.\n\t\t */\n\t\tfunction _applyResizingAttributesToTable( viewWriter: ViewDowncastWriter, viewTable: ViewElement, resizingData: ResizingData ) {\n\t\t\tconst figureInitialPcWidth = resizingData.widths.viewFigureWidth / resizingData.widths.viewFigureParentWidth;\n\n\t\t\tviewWriter.addClass( 'ck-table-resized', viewTable );\n\t\t\tviewWriter.addClass( 'ck-table-column-resizer__active', resizingData.elements.viewResizer );\n\t\t\tviewWriter.setStyle( 'width', `${ toPrecision( figureInitialPcWidth * 100 ) }%`, viewTable.findAncestor( 'figure' )! );\n\t\t}\n\t}\n\n\t/**\n\t * Handles the `mousemove` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it stops the resizing process instantly calling the `mousedown` event handler.\n\t *  * Otherwise it dynamically updates the widths of the resized columns.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param mouseEventData The native DOM event.\n\t */\n\tprivate _onMouseMoveHandler( eventInfo: EventInfo, mouseEventData: MouseEvent ) {\n\t\tif ( this._initialMouseEventData ) {\n\t\t\tconst mouseEvent = this._initialMouseEventData.domEvent as MouseEvent;\n\t\t\tconst distanceX = Math.abs( mouseEventData.clientX - mouseEvent.clientX );\n\n\t\t\tif ( distanceX >= COLUMN_RESIZE_DISTANCE_THRESHOLD ) {\n\t\t\t\tthis._startResizingAfterThreshold();\n\t\t\t\tthis._initialMouseEventData = null;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( !this._isResizingActive ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._isResizingAllowed ) {\n\t\t\tthis._onMouseUpHandler();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tcolumnPosition,\n\t\t\tflags: {\n\t\t\t\tisRightEdge,\n\t\t\t\tisTableCentered,\n\t\t\t\tisLtrContent\n\t\t\t},\n\t\t\telements: {\n\t\t\t\tviewFigure,\n\t\t\t\tviewLeftColumn,\n\t\t\t\tviewRightColumn,\n\t\t\t\tviewResizer\n\t\t\t},\n\t\t\twidths: {\n\t\t\t\tviewFigureParentWidth,\n\t\t\t\ttableWidth,\n\t\t\t\tleftColumnWidth,\n\t\t\t\trightColumnWidth\n\t\t\t}\n\t\t} = this._resizingData!;\n\n\t\tconst dxLowerBound = -leftColumnWidth + COLUMN_MIN_WIDTH_IN_PIXELS;\n\n\t\tconst dxUpperBound = isRightEdge ?\n\t\t\tviewFigureParentWidth - tableWidth :\n\t\t\trightColumnWidth! - COLUMN_MIN_WIDTH_IN_PIXELS;\n\n\t\t// The multiplier is needed for calculating the proper movement offset:\n\t\t// - it should negate the sign if content language direction is right-to-left,\n\t\t// - it should double the offset if the table edge is resized and table is centered.\n\t\tconst multiplier = ( isLtrContent ? 1 : -1 ) * ( isRightEdge && isTableCentered ? 2 : 1 );\n\n\t\tconst dx = clamp(\n\t\t\t( mouseEventData.clientX - columnPosition ) * multiplier,\n\t\t\tMath.min( dxLowerBound, 0 ),\n\t\t\tMath.max( dxUpperBound, 0 )\n\t\t);\n\n\t\tif ( dx === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editor.editing.view.change( writer => {\n\t\t\tconst leftColumnWidthAsPercentage = toPrecision( ( leftColumnWidth + dx ) * 100 / tableWidth );\n\n\t\t\twriter.setStyle( 'width', `${ leftColumnWidthAsPercentage }%`, viewLeftColumn );\n\n\t\t\tif ( isRightEdge ) {\n\t\t\t\tconst tableWidthAsPercentage = toPrecision( ( tableWidth + dx ) * 100 / viewFigureParentWidth );\n\n\t\t\t\twriter.setStyle( 'width', `${ tableWidthAsPercentage }%`, viewFigure );\n\t\t\t} else {\n\t\t\t\tconst rightColumnWidthAsPercentage = toPrecision( ( rightColumnWidth! - dx ) * 100 / tableWidth );\n\n\t\t\t\twriter.setStyle( 'width', `${ rightColumnWidthAsPercentage }%`, viewRightColumn! );\n\t\t\t}\n\t\t} );\n\n\t\tthis._recalculateResizerElement( viewResizer );\n\t}\n\n\t/**\n\t * Handles the `mouseup` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it cancels the resizing process restoring the original widths.\n\t *  * Otherwise it propagates the changes from view to the model by executing the adequate commands.\n\t */\n\tprivate _onMouseUpHandler() {\n\t\tthis._initialMouseEventData = null;\n\n\t\tif ( !this._isResizingActive ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tviewResizer,\n\t\t\tmodelTable,\n\t\t\tviewFigure,\n\t\t\tviewColgroup\n\t\t} = this._resizingData!.elements;\n\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst tableColumnGroup = this.getColumnGroupElement( modelTable );\n\t\tconst viewColumns: Array<ViewElement> = Array\n\t\t\t.from( viewColgroup.getChildren() )\n\t\t\t.filter( ( column: ViewNode ): column is ViewElement => column.is( 'view:element' ) );\n\n\t\tconst columnWidthsAttributeOld = tableColumnGroup ?\n\t\t\tthis.getTableColumnsWidths( tableColumnGroup )! :\n\t\t\tnull;\n\n\t\tconst columnWidthsAttributeNew = viewColumns.map( column => column.getStyle( 'width' ) );\n\n\t\tconst isColumnWidthsAttributeChanged = !isEqual( columnWidthsAttributeOld, columnWidthsAttributeNew );\n\n\t\tconst tableWidthAttributeOld = modelTable.getAttribute( 'tableWidth' ) as string;\n\t\tconst tableWidthAttributeNew = viewFigure.getStyle( 'width' )!;\n\n\t\tconst isTableWidthAttributeChanged = tableWidthAttributeOld !== tableWidthAttributeNew;\n\n\t\tif ( isColumnWidthsAttributeChanged || isTableWidthAttributeChanged ) {\n\t\t\tif ( this._isResizingAllowed ) {\n\t\t\t\teditor.execute( 'resizeTableWidth', {\n\t\t\t\t\ttable: modelTable,\n\t\t\t\t\ttableWidth: `${ toPrecision( tableWidthAttributeNew ) }%`,\n\t\t\t\t\tcolumnWidths: columnWidthsAttributeNew\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t// In read-only mode revert all changes in the editing view. The model is not touched so it does not need to be restored.\n\t\t\t\t// This case can occur if the read-only mode kicks in during the resizing process.\n\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t// If table had resized columns before, restore the previous column widths.\n\t\t\t\t\t// Otherwise clean up the view from the temporary column resizing markup.\n\t\t\t\t\tif ( columnWidthsAttributeOld ) {\n\t\t\t\t\t\tfor ( const viewCol of viewColumns ) {\n\t\t\t\t\t\t\twriter.setStyle( 'width', columnWidthsAttributeOld.shift()!, viewCol );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.remove( viewColgroup );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isTableWidthAttributeChanged ) {\n\t\t\t\t\t\t// If the whole table was already resized before, restore the previous table width.\n\t\t\t\t\t\t// Otherwise clean up the view from the temporary table resizing markup.\n\t\t\t\t\t\tif ( tableWidthAttributeOld ) {\n\t\t\t\t\t\t\twriter.setStyle( 'width', tableWidthAttributeOld, viewFigure );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriter.removeStyle( 'width', viewFigure );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If a table and its columns weren't resized before,\n\t\t\t\t\t// prune the remaining common resizing markup.\n\t\t\t\t\tif ( !columnWidthsAttributeOld && !tableWidthAttributeOld ) {\n\t\t\t\t\t\twriter.removeClass(\n\t\t\t\t\t\t\t'ck-table-resized',\n\t\t\t\t\t\t\t[ ... viewFigure.getChildren() as IterableIterator<ViewElement> ].find( element => element.name === 'table' )!\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\teditingView.change( writer => {\n\t\t\twriter.removeClass( 'ck-table-column-resizer__active', viewResizer );\n\t\t} );\n\n\t\tconst element = editingView.domConverter.mapViewToDom( viewResizer )!;\n\n\t\tif ( !element.matches( ':hover' ) ) {\n\t\t\tthis._resetResizerStyles( viewResizer );\n\t\t}\n\n\t\tthis._isResizingActive = false;\n\t\tthis._resizingData = null;\n\t}\n\n\t/**\n\t * Retrieves and returns required data needed for the resizing process.\n\t *\n\t * @param domEventData The data of the `mousedown` event.\n\t * @param columnWidths The current widths of the columns.\n\t * @returns The data needed for the resizing process.\n\t */\n\tprivate _getResizingData( domEventData: ViewDocumentDomEventData, columnWidths: Array<number> ): ResizingData {\n\t\tconst editor = this.editor;\n\n\t\tconst columnPosition = ( domEventData.domEvent as Event & { clientX: number } ).clientX;\n\n\t\tconst viewResizer = domEventData.target;\n\t\tconst viewLeftCell = viewResizer.findAncestor( 'td' )! || viewResizer.findAncestor( 'th' )!;\n\t\tconst modelLeftCell = editor.editing.mapper.toModelElement( viewLeftCell )!;\n\t\tconst modelTable = modelLeftCell.findAncestor( 'table' )!;\n\n\t\tconst leftColumnIndex = getColumnEdgesIndexes( modelLeftCell, this._tableUtilsPlugin ).rightEdge;\n\t\tconst lastColumnIndex = this._tableUtilsPlugin.getColumns( modelTable ) - 1;\n\n\t\tconst isRightEdge = leftColumnIndex === lastColumnIndex;\n\t\tconst isTableCentered = !modelTable.hasAttribute( 'tableAlignment' );\n\t\tconst isLtrContent = editor.locale.contentLanguageDirection !== 'rtl';\n\n\t\tconst viewTable = viewLeftCell.findAncestor( 'table' )!;\n\t\tconst viewFigure = viewTable.findAncestor( 'figure' ) as ViewElement;\n\t\tconst viewColgroup = [ ...viewTable.getChildren() as IterableIterator<ViewElement> ]\n\t\t\t.find( viewCol => viewCol.is( 'element', 'colgroup' ) )!;\n\t\tconst viewLeftColumn = viewColgroup.getChild( leftColumnIndex ) as ViewElement;\n\t\tconst viewRightColumn = isRightEdge ? undefined : viewColgroup.getChild( leftColumnIndex + 1 ) as ViewElement;\n\n\t\tconst viewFigureParentWidth = getElementWidthInPixels(\n\t\t\teditor.editing.view.domConverter.mapViewToDom( viewFigure.parent! ) as HTMLElement\n\t\t);\n\t\tconst viewFigureWidth = getElementWidthInPixels( editor.editing.view.domConverter.mapViewToDom( viewFigure )! );\n\t\tconst tableWidth = getTableWidthInPixels( modelTable, editor );\n\t\tconst leftColumnWidth = columnWidths[ leftColumnIndex ];\n\t\tconst rightColumnWidth = isRightEdge ? undefined : columnWidths[ leftColumnIndex + 1 ];\n\n\t\treturn {\n\t\t\tcolumnPosition,\n\t\t\tflags: {\n\t\t\t\tisRightEdge,\n\t\t\t\tisTableCentered,\n\t\t\t\tisLtrContent\n\t\t\t},\n\t\t\telements: {\n\t\t\t\tviewResizer,\n\t\t\t\tmodelTable,\n\t\t\t\tviewFigure,\n\t\t\t\tviewColgroup,\n\t\t\t\tviewLeftColumn,\n\t\t\t\tviewRightColumn\n\t\t\t},\n\t\t\twidths: {\n\t\t\t\tviewFigureParentWidth,\n\t\t\t\tviewFigureWidth,\n\t\t\t\ttableWidth,\n\t\t\t\tleftColumnWidth,\n\t\t\t\trightColumnWidth\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Registers a listener ensuring that each resizable cell have a resizer handle.\n\t */\n\tprivate _registerResizerInserter() {\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( dispatcher => {\n\t\t\tdispatcher.on<DowncastInsertEvent<ModelElement>>( 'insert:tableCell', ( evt, data, conversionApi ) => {\n\t\t\t\tconst modelElement = data.item;\n\t\t\t\tconst viewElement = conversionApi.mapper.toViewElement( modelElement );\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\n\t\t\t\tviewWriter.insert(\n\t\t\t\t\tviewWriter.createPositionAt( viewElement!, 'end' ),\n\t\t\t\t\tviewWriter.createUIElement( 'div', { class: 'ck-table-column-resizer' } )\n\t\t\t\t);\n\t\t\t}, { priority: 'lowest' } );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { TableColumnResizeEditing } from './tablecolumnresize/tablecolumnresizeediting.js';\nimport { TableCellWidthEditing } from './tablecellwidth/tablecellwidthediting.js';\n\nimport '../theme/tablecolumnresize.css';\n\n/**\n * The table column resize feature.\n *\n * It provides the possibility to set the width of each column in a table using a resize handler.\n */\nexport class TableColumnResize extends Plugin {\n\t/**\n\t * @inheritDoc\n \t */\n\tpublic static get requires() {\n\t\treturn [ TableColumnResizeEditing, TableCellWidthEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n \t */\n\tpublic static get pluginName() {\n\t\treturn 'TableColumnResize' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablelayout/commands/tabletypecommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\n\nimport { getSelectionAffectedTable } from '../../utils/common.js';\nimport type { TableType } from '../../tableconfig.js';\n\n/**\n * The set table type command.\n *\n * The command is registered by {@link module:table/tablelayout/tablelayoutediting~TableLayoutEditing}\n * as the `'tableType'` editor command.\n *\n * To set the table type at the current selection, execute the command and specify the table type:\n *\n * ```ts\n * editor.execute( 'tableType', 'layout' );\n * ```\n */\nexport class TableTypeCommand extends Command {\n\t/**\n\t * The table type of selected table.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: TableType | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedTable = getSelectionAffectedTable( selection );\n\n\t\tif ( selectedTable ) {\n\t\t\tthis.isEnabled = true;\n\t\t\tthis.value = selectedTable.getAttribute( 'tableType' ) as TableType;\n\t\t} else {\n\t\t\tthis.isEnabled = false;\n\t\t\tthis.value = null;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Set table type by the given table type parameter.\n\t *\n\t * @param tableType The type of table it should become.\n\t * @fires execute\n\t */\n\tpublic override execute( tableType: TableType ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst table = getSelectionAffectedTable( selection );\n\t\tconst currentTableType = table.getAttribute( 'tableType' );\n\n\t\tif ( currentTableType === tableType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'tableType', tableType, table );\n\n\t\t\tmodel.schema.removeDisallowedAttributes( [ table ], writer );\n\n\t\t\tconst tableChildren = table.getChildren();\n\n\t\t\t// Check if all children are allowed for the new table type.\n\t\t\tfor ( const child of tableChildren ) {\n\t\t\t\tif ( !model.schema.checkChild( table, child ) ) {\n\t\t\t\t\twriter.remove( child );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablelayout/tablelayoutediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type { ClipboardContentInsertionEvent, ClipboardPipeline } from 'ckeditor5/src/clipboard.js';\nimport type {\n\tDowncastDispatcher,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement,\n\tModelSchemaContext,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { InsertTableLayoutCommand } from './../commands/inserttablelayoutcommand.js';\nimport { TableColumnResize } from '../tablecolumnresize.js';\nimport { TableTypeCommand } from './commands/tabletypecommand.js';\nimport { createEmptyTableCell } from '../utils/common.js';\nimport type { TableType } from '../tableconfig.js';\n\nimport '../../theme/tablelayout.css';\n\nconst TABLE_TYPES: Array<TableType> = [ 'content', 'layout' ];\n\n/**\n * The table layout editing plugin.\n */\nexport class TableLayoutEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableLayoutEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableColumnResize ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\t\tthis._defineClipboardPasteHandlers();\n\t\tthis._registerTableTypeAttributePostfixer();\n\t\tthis.editor.commands.add( 'insertTableLayout', new InsertTableLayoutCommand( this.editor ) );\n\t\tthis.editor.commands.add( 'tableType', new TableTypeCommand( this.editor ) );\n\t}\n\n\t/**\n\t * Defines the schema for the table layout feature.\n\t */\n\tprivate _defineSchema() {\n\t\tconst { schema } = this.editor.model;\n\n\t\tschema.extend( 'table', {\n\t\t\tallowAttributes: 'tableType'\n\t\t} );\n\n\t\t// Disallow adding `caption` to layout table.\n\t\tschema.addChildCheck( layoutTableCheck, 'caption' );\n\n\t\t// Disallow adding `headingRows` attribute to layout table.\n\t\tschema.addAttributeCheck( layoutTableCheck, 'headingRows' );\n\n\t\t// Disallow adding `headingColumns` attribute to layout table.\n\t\tschema.addAttributeCheck( layoutTableCheck, 'headingColumns' );\n\t}\n\n\t/**\n\t * Defines the converters for the table layout feature.\n\t */\n\tprivate _defineConverters() {\n\t\tconst { editor } = this;\n\t\tconst { conversion } = editor;\n\n\t\tconst preferredExternalTableType = editor.config.get( 'table.tableLayout.preferredExternalTableType' );\n\n\t\tconversion.for( 'upcast' ).add( upcastLayoutTable( preferredExternalTableType ) );\n\t\tconversion.for( 'dataDowncast' ).add( dataDowncastLayoutTable() );\n\t\tconversion.for( 'editingDowncast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableType',\n\t\t\t\tvalues: [ 'layout', 'content' ]\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tlayout: {\n\t\t\t\t\tkey: 'class',\n\t\t\t\t\tvalue: [ 'layout-table' ]\n\t\t\t\t},\n\t\t\t\tcontent: {\n\t\t\t\t\tkey: 'class',\n\t\t\t\t\tvalue: [ 'content-table' ]\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the clipboard content insertion events.\n\t *\n\t * - If the content is from another editor, do not override the table type.\n\t * - If the content is from another source, set the table type to 'content'.\n\t *\n\t * It handles the scenario when user copies `<table></table>` from Word. We do not want to\n\t * change the table type to `layout` because it is really `content` table.\n\t */\n\tprivate _defineClipboardPasteHandlers(): void {\n\t\tconst { plugins } = this.editor;\n\n\t\tif ( !plugins.has( 'ClipboardPipeline' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst clipboardPipeline: ClipboardPipeline = plugins.get( 'ClipboardPipeline' );\n\n\t\tthis.listenTo<ClipboardContentInsertionEvent>( clipboardPipeline, 'contentInsertion', ( evt, data ) => {\n\t\t\t// If content is pasted from the other editor, skip overriding table type.\n\t\t\tif ( data.sourceEditorId ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For content from other sources, always set table type to 'content'.\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tfor ( const { item } of writer.createRangeIn( data.content ) ) {\n\t\t\t\t\tif ( item.is( 'element', 'table' ) ) {\n\t\t\t\t\t\twriter.setAttribute( 'tableType', 'content', item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a post-fixer that sets the `tableType` attribute to `content` for inserted \"default\" tables.\n\t * Also fixes potential issues with the table structure when the `tableType` attribute has been changed.\n\t */\n\tprivate _registerTableTypeAttributePostfixer() {\n\t\tconst editor = this.editor;\n\n\t\teditor.model.document.registerPostFixer( ( writer: ModelWriter ) => {\n\t\t\tconst changes = editor.model.document.differ.getChanges();\n\t\t\tlet hasChanged = false;\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\t\t\tconst element = entry.position.nodeAfter!;\n\t\t\t\t\tconst range = writer.createRangeOn( element );\n\n\t\t\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\t\t\tif ( item.is( 'element', 'table' ) && !item.hasAttribute( 'tableType' ) ) {\n\t\t\t\t\t\t\twriter.setAttribute( 'tableType', 'content', item );\n\t\t\t\t\t\t\thasChanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove disallowed attributes and children for layout tables\n\t\t\t\t// when `tableType` attribute has been changed by `TableTypeCommand`.\n\t\t\t\tif ( entry.type == 'attribute' && entry.attributeKey == 'tableType' ) {\n\t\t\t\t\tfor ( const item of entry.range.getItems() ) {\n\t\t\t\t\t\tif ( item.is( 'element', 'table' ) ) {\n\t\t\t\t\t\t\teditor.model.schema.removeDisallowedAttributes( [ item ], writer );\n\n\t\t\t\t\t\t\tconst tableChildren = item.getChildren();\n\n\t\t\t\t\t\t\t// Check if all children are allowed for the new table type.\n\t\t\t\t\t\t\tfor ( const child of tableChildren ) {\n\t\t\t\t\t\t\t\tif ( !editor.model.schema.checkChild( item, child ) ) {\n\t\t\t\t\t\t\t\t\twriter.remove( child );\n\t\t\t\t\t\t\t\t\thasChanged = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn hasChanged;\n\t\t} );\n\t}\n}\n\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper overrides the default table converter to meet table layout conditions.\n *\n * @returns Conversion helper.\n */\nfunction upcastLayoutTable( preferredExternalTableType: TableType | undefined ) {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst viewTable = data.viewItem;\n\n\t\t\tif ( !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst resolvedTableType = resolveTableType( viewTable, preferredExternalTableType );\n\n\t\t\t// When an element is a content table, then skip it.\n\t\t\tif ( resolvedTableType == 'content' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst table = conversionApi.writer.createElement( 'table', { tableType: 'layout' } );\n\n\t\t\tif ( !conversionApi.safeInsert( table, data.modelCursor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.consumable.consume( viewTable, { name: true } );\n\t\t\tconversionApi.consumable.consume( viewTable, { attributes: [ 'role' ] } );\n\t\t\tconversionApi.consumable.consume( viewTable, { classes: [ 'layout-table' ] } );\n\n\t\t\t// Get all rows from the table and convert them.\n\t\t\t// While looping over the children of `<table>` we can be sure that first will be `<tbody>`\n\t\t\t// and optionally `<thead>` and `<tfoot>`, and in these elements are the table rows found.\n\t\t\t// We can be sure of that because of `DomParser` handle it.\n\t\t\tfor ( const tableChild of viewTable.getChildren() ) {\n\t\t\t\tif ( tableChild.is( 'element' ) ) {\n\t\t\t\t\tfor ( const row of tableChild.getChildren() ) {\n\t\t\t\t\t\tif ( row.is( 'element', 'tr' ) ) {\n\t\t\t\t\t\t\tconversionApi.convertItem( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert everything else.\n\t\t\tconversionApi.convertChildren( viewTable, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t// Create one row and one table cell for empty table.\n\t\t\tif ( table.isEmpty ) {\n\t\t\t\tconst row = conversionApi.writer.createElement( 'tableRow' );\n\n\t\t\t\tconversionApi.writer.insert( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\t\t\t\tcreateEmptyTableCell( conversionApi.writer, conversionApi.writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\n\t\t\tconversionApi.updateConversionResult( table, data );\n\t\t}, { priority: 'high' } );\n\n\t\t// Sets only the table type attribute.\n\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst { viewItem, modelRange } = data;\n\n\t\t\tif ( modelRange ) {\n\t\t\t\tconversionApi.writer.setAttribute(\n\t\t\t\t\t'tableType',\n\t\t\t\t\tresolveTableType( viewItem, preferredExternalTableType ),\n\t\t\t\t\tmodelRange\n\t\t\t\t);\n\t\t\t\tconversionApi.consumable.consume( viewItem, { classes: [ 'layout-table' ] } );\n\t\t\t\tconversionApi.consumable.consume( viewItem, { classes: [ 'content-table' ] } );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Model table container element to view table element conversion helper.\n *\n * @returns Conversion helper.\n */\nfunction dataDowncastLayoutTable() {\n\treturn ( dispatcher: DowncastDispatcher ): void => {\n\t\treturn dispatcher.on( 'attribute:tableType:table', ( evt, data, conversionApi ) => {\n\t\t\tconst { item, attributeNewValue } = data;\n\t\t\tconst { mapper, writer } = conversionApi;\n\n\t\t\tif ( !conversionApi.consumable.test( item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst table = mapper.toViewElement( item );\n\n\t\t\twriter.addClass( `${ attributeNewValue }-table`, table );\n\n\t\t\tif ( attributeNewValue == 'layout' ) {\n\t\t\t\twriter.setAttribute( 'role', 'presentation', table );\n\t\t\t}\n\n\t\t\tconversionApi.consumable.consume( item, evt.name );\n\t\t} );\n\t};\n}\n\n/**\n * Resolves the table type based on the view table element and the preferred external table type.\n */\nfunction resolveTableType( viewTable: ViewElement, preferredExternalTableType: TableType | undefined ): TableType {\n\tif ( viewTable.hasClass( 'content-table' ) ) {\n\t\treturn 'content';\n\t}\n\n\tif ( viewTable.hasClass( 'layout-table' ) ) {\n\t\treturn 'layout';\n\t}\n\n\tif ( preferredExternalTableType && TABLE_TYPES.includes( preferredExternalTableType ) ) {\n\t\treturn preferredExternalTableType;\n\t}\n\n\tconst parent = viewTable.parent!;\n\n\t/**\n\t * Checks if the table is a content table if any of the following conditions are met:\n\t * - the `<table>` is wrapped with `<figure>`,\n\t * - the `<table>` has a `<caption>` element.\n\t */\n\tif (\n\t\tparent.is( 'element', 'figure' ) ||\n\t\tArray.from( viewTable.getChildren() ).some( child => child.is( 'element', 'caption' ) ) )\n\t{\n\t\treturn 'content';\n\t}\n\n\treturn 'layout';\n}\n\n/**\n * Checks if the element is a layout table.\n * It is used to disallow attributes or children that is managed by `Schema`.\n */\nfunction layoutTableCheck( context: ModelSchemaContext ) {\n\tif ( context.endsWith( 'table' ) && context.last.getAttribute( 'tableType' ) == 'layout' ) {\n\t\treturn false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablelayout\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { TableLayoutUI } from './tablelayout/tablelayoutui.js';\n\nimport { TableLayoutEditing } from './tablelayout/tablelayoutediting.js';\nimport { PlainTableOutput } from './plaintableoutput.js';\nimport { TableColumnResize } from './tablecolumnresize.js';\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/layout-tables Layout table feature documentation}.\n */\nexport class TableLayout extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableLayout' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ PlainTableOutput, TableColumnResize, TableLayoutEditing, TableLayoutUI ] as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablepropertycommand\n */\n\nimport type { Batch, ModelElement } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { getSelectionAffectedTable } from '../../utils/common.js';\n\nexport interface TablePropertyCommandExecuteOptions {\n\tbatch?: Batch;\n\tcolumnWidths?: string;\n\ttable?: ModelElement;\n\ttableWidth?: string;\n\tvalue?: string;\n}\n\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n */\nexport class TablePropertyCommand extends Command {\n\t/**\n\t * The attribute that will be set by the command.\n\t */\n\tpublic readonly attributeName: string;\n\n\t/**\n\t * The default value for the attribute.\n\t *\n\t * @readonly\n\t */\n\tprotected _defaultValue: string | undefined;\n\n\t/**\n\t * The default value for the attribute for the content table.\n\t */\n\tprivate readonly _defaultContentTableValue: string | undefined;\n\n\t/**\n\t * The default value for the attribute for the layout table.\n\t */\n\tprivate readonly _defaultLayoutTableValue: string | undefined;\n\n\t/**\n\t * Creates a new `TablePropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, attributeName: string, defaultValue?: string ) {\n\t\tsuper( editor );\n\n\t\tthis.attributeName = attributeName;\n\t\tthis._defaultContentTableValue = defaultValue;\n\t\tthis._defaultLayoutTableValue = attributeName === 'tableBorderStyle' ? 'none' : undefined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tconst table = getSelectionAffectedTable( selection );\n\n\t\tthis._defaultValue = !table || table.getAttribute( 'tableType' ) !== 'layout' ?\n\t\t\tthis._defaultContentTableValue :\n\t\t\tthis._defaultLayoutTableValue;\n\n\t\tthis.isEnabled = !!table;\n\t\tthis.value = this._getValue( table );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on the selected table.\n\t * If not set, the command will remove the attribute from the selected table.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example, to allow a single undo step for multiple executions.\n\t */\n\tpublic override execute( options: TablePropertyCommandExecuteOptions = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst { value, batch } = options;\n\n\t\tconst table = getSelectionAffectedTable( selection );\n\t\tconst valueToSet = this._getValueToSet( value );\n\n\t\tmodel.enqueueChange( batch, writer => {\n\t\t\tif ( valueToSet ) {\n\t\t\t\twriter.setAttribute( this.attributeName, valueToSet, table );\n\t\t\t} else {\n\t\t\t\twriter.removeAttribute( this.attributeName, table );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value for a table.\n\t */\n\tprotected _getValue( table: ModelElement ): unknown {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = table.getAttribute( this.attributeName );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */\n\tprotected _getValueToSet( value: string | number | undefined ): unknown {\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablebackgroundcolorcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport { TablePropertyCommand } from './tablepropertycommand.js';\n\n/**\n * The table background color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBackgroundColor'` editor command.\n *\n * To change the background color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport class TableBackgroundColorCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBackgroundColor', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablebordercolorcommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TablePropertyCommand } from './tablepropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table border color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderColor'` editor command.\n *\n * To change the border color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport class TableBorderColorCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBorderColor', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValue( table: ModelElement ): unknown {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( table.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tableborderstylecommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\n\nimport { TablePropertyCommand } from './tablepropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\n/**\n * The table style border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderStyle'` editor command.\n *\n * To change the border style of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nexport class TableBorderStyleCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBorderStyle', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValue( table: ModelElement ): unknown {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( table.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tableborderwidthcommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport { TablePropertyCommand } from './tablepropertycommand.js';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table width border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderWidth'` editor command.\n *\n * To change the border width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nexport class TableBorderWidthCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBorderWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValue( table: ModelElement ): string | undefined {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( table.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablewidthcommand\n */\n\nimport { TablePropertyCommand } from './tablepropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\n/**\n * The table width command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableWidth'` editor command.\n *\n * To change the width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '400px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nexport class TableWidthCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tvalue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tableheightcommand\n */\n\nimport { TablePropertyCommand } from './tablepropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\n/**\n * The table height command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableHeight'` editor command.\n *\n * To change the height of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '500px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nexport class TableHeightCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableHeight', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tvalue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablealignmentcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport { TablePropertyCommand } from './tablepropertycommand.js';\n\n/**\n * The table alignment command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableAlignment'` editor command.\n *\n * To change the alignment of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableAlignment', {\n *   value: 'right'\n * } );\n * ```\n */\nexport class TableAlignmentCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableAlignment', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/tablepropertiesediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\taddBackgroundStylesRules,\n\taddBorderStylesRules,\n\ttype ViewElement,\n\ttype Conversion,\n\ttype ModelSchema,\n\ttype UpcastConversionApi,\n\ttype UpcastConversionData\n} from 'ckeditor5/src/engine.js';\n\nimport { TableEditing } from '../tableediting.js';\nimport {\n\tdowncastAttributeToStyle,\n\tdowncastTableAttribute,\n\tgetDefaultValueAdjusted,\n\tupcastBorderStyles,\n\tupcastStyleToAttribute\n} from '../converters/tableproperties.js';\nimport { TableBackgroundColorCommand } from './commands/tablebackgroundcolorcommand.js';\nimport { TableBorderColorCommand } from './commands/tablebordercolorcommand.js';\nimport { TableBorderStyleCommand } from './commands/tableborderstylecommand.js';\nimport { TableBorderWidthCommand } from './commands/tableborderwidthcommand.js';\nimport { TableWidthCommand } from './commands/tablewidthcommand.js';\nimport { TableHeightCommand } from './commands/tableheightcommand.js';\nimport { TableAlignmentCommand } from './commands/tablealignmentcommand.js';\nimport { getNormalizedDefaultTableProperties } from '../utils/table-properties.js';\n\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n */\nexport class TablePropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TablePropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\teditor.config.define( 'table.tableProperties.defaultProperties', {} );\n\n\t\tconst defaultTableProperties = getNormalizedDefaultTableProperties(\n\t\t\teditor.config.get( 'table.tableProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeAlignmentProperty: true\n\t\t\t}\n\t\t);\n\n\t\teditor.data.addStyleProcessorRules( addBorderStylesRules );\n\t\tenableBorderProperties( schema, conversion, {\n\t\t\tcolor: defaultTableProperties.borderColor,\n\t\t\tstyle: defaultTableProperties.borderStyle,\n\t\t\twidth: defaultTableProperties.borderWidth\n\t\t} );\n\n\t\teditor.commands.add( 'tableBorderColor', new TableBorderColorCommand( editor, defaultTableProperties.borderColor ) );\n\t\teditor.commands.add( 'tableBorderStyle', new TableBorderStyleCommand( editor, defaultTableProperties.borderStyle ) );\n\t\teditor.commands.add( 'tableBorderWidth', new TableBorderWidthCommand( editor, defaultTableProperties.borderWidth ) );\n\n\t\tenableAlignmentProperty( schema, conversion, defaultTableProperties.alignment! );\n\t\teditor.commands.add( 'tableAlignment', new TableAlignmentCommand( editor, defaultTableProperties.alignment! ) );\n\n\t\tenableTableToFigureProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableWidth',\n\t\t\tstyleName: 'width',\n\t\t\tattributeName: 'width',\n\t\t\tattributeType: 'length',\n\t\t\tdefaultValue: defaultTableProperties.width\n\t\t} );\n\t\teditor.commands.add( 'tableWidth', new TableWidthCommand( editor, defaultTableProperties.width ) );\n\n\t\tenableTableToFigureProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableHeight',\n\t\t\tstyleName: 'height',\n\t\t\tattributeName: 'height',\n\t\t\tattributeType: 'length',\n\t\t\tdefaultValue: defaultTableProperties.height\n\t\t} );\n\t\teditor.commands.add( 'tableHeight', new TableHeightCommand( editor, defaultTableProperties.height ) );\n\n\t\teditor.data.addStyleProcessorRules( addBackgroundStylesRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableBackgroundColor',\n\t\t\tstyleName: 'background-color',\n\t\t\tattributeName: 'bgcolor',\n\t\t\tattributeType: 'color',\n\t\t\tdefaultValue: defaultTableProperties.backgroundColor\n\t\t} );\n\t\teditor.commands.add(\n\t\t\t'tableBackgroundColor',\n\t\t\tnew TableBackgroundColorCommand( editor, defaultTableProperties.backgroundColor )\n\t\t);\n\t}\n}\n\n/**\n * Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableBorderColor` value.\n * @param defaultBorder.style The default `tableBorderStyle` value.\n * @param defaultBorder.width The default `tableBorderWidth` value.\n */\nfunction enableBorderProperties(\n\tschema: ModelSchema,\n\tconversion: Conversion,\n\tdefaultBorder: { color: string; style: string; width: string }\n) {\n\tconst modelAttributes = {\n\t\twidth: 'tableBorderWidth',\n\t\tcolor: 'tableBorderColor',\n\t\tstyle: 'tableBorderStyle'\n\t};\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: Object.values( modelAttributes )\n\t} );\n\n\tfor ( const modelAttribute of Object.values( modelAttributes ) ) {\n\t\tschema.setAttributeProperties( modelAttribute, { isFormatting: true } );\n\t}\n\n\tupcastBorderStyles( conversion, 'table', modelAttributes, defaultBorder );\n\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.color, styleName: 'border-color' } );\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.style, styleName: 'border-style' } );\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.width, styleName: 'border-width' } );\n}\n\n/**\n * Enables the `'alignment'` attribute for table.\n *\n * @param defaultValue The default alignment value.\n */\nfunction enableAlignmentProperty( schema: ModelSchema, conversion: Conversion, defaultValue: string ) {\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ 'tableAlignment' ]\n\t} );\n\n\tschema.setAttributeProperties( 'tableAlignment', { isFormatting: true } );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalues: [ 'left', 'center', 'right' ]\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tleft: {\n\t\t\t\t\tkey: 'style',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tfloat: 'left'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tright: {\n\t\t\t\t\tkey: 'style',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tfloat: 'right'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcenter: ( alignment, conversionApi, data ) => {\n\t\t\t\t\tconst value: Record<string, string> = data.item.getAttribute( 'tableType' ) !== 'layout' ? {\n\t\t\t\t\t\t// Model: `alignment:center` => CSS: `float:none`.\n\t\t\t\t\t\tfloat: 'none'\n\t\t\t\t\t} : {\n\t\t\t\t\t\t'margin-left': 'auto',\n\t\t\t\t\t\t'margin-right': 'auto'\n\t\t\t\t\t};\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: 'style',\n\t\t\t\t\t\tvalue\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `float:*;` CSS definition for the table alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(table|figure)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\tfloat: FLOAT_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\t// Ignore other figure elements.\n\t\t\t\t\tif ( viewElement.name == 'figure' && !viewElement.hasClass( 'table' ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, '', data );\n\t\t\t\t\tlet align = viewElement.getStyle( 'float' );\n\n\t\t\t\t\t// CSS: `float:none` => Model: `alignment:center`.\n\t\t\t\t\tif ( align === 'none' ) {\n\t\t\t\t\t\talign = 'center';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( align !== localDefaultValue ) {\n\t\t\t\t\t\treturn align;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the style even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { styles: 'float' } );\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `margin-left:auto; margin-right:auto;` CSS definition for the table alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(table|figure)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'margin-left': 'auto',\n\t\t\t\t\t'margin-right': 'auto'\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\t// Ignore other figure elements.\n\t\t\t\t\tif ( viewElement.name == 'figure' && !viewElement.hasClass( 'table' ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, '', data );\n\t\t\t\t\tconst align = 'center';\n\n\t\t\t\t\tif ( align !== localDefaultValue ) {\n\t\t\t\t\t\treturn align;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the styles even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { styles: [ 'margin-left', 'margin-right' ] } );\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'table',\n\t\t\t\tattributes: {\n\t\t\t\t\talign: ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement, conversionApi: UpcastConversionApi, data: UpcastConversionData<ViewElement> ) => {\n\t\t\t\t\tconst localDefaultValue = getDefaultValueAdjusted( defaultValue, '', data );\n\t\t\t\t\tconst align = viewElement.getAttribute( 'align' );\n\n\t\t\t\t\tif ( align !== localDefaultValue ) {\n\t\t\t\t\t\treturn align;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consume the attribute even if not applied to the element so it won't be processed by other converters.\n\t\t\t\t\tconversionApi.consumable.consume( viewElement, { attributes: 'align' } );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nfunction enableProperty(\n\tschema: ModelSchema,\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tattributeName?: string;\n\t\tattributeType?: 'length' | 'color';\n\t\tdefaultValue: string;\n\t}\n) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\n\tschema.setAttributeProperties( modelAttribute, { isFormatting: true } );\n\n\tupcastStyleToAttribute( conversion, { viewElement: 'table', ...options } );\n\tdowncastTableAttribute( conversion, options );\n}\n\n/**\n * Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n */\nfunction enableTableToFigureProperty(\n\tschema: ModelSchema,\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tattributeName?: string;\n\t\tattributeType?: 'length' | 'color';\n\t\tdefaultValue: string;\n\t}\n) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\n\tschema.setAttributeProperties( modelAttribute, { isFormatting: true } );\n\n\tupcastStyleToAttribute( conversion, {\n\t\tviewElement: /^(table|figure)$/,\n\t\tshouldUpcast: ( viewElement: ViewElement ) => !(\n\t\t\tviewElement.name == 'table' && viewElement.parent!.name == 'figure' ||\n\t\t\tviewElement.name == 'figure' && !viewElement.hasClass( 'table' )\n\t\t),\n\t\t...options\n\t} );\n\n\tdowncastAttributeToStyle( conversion, { modelElement: 'table', ...options } );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/ui/tablepropertiesview\n */\n\nimport {\n\taddListToDropdown,\n\tButtonView,\n\tcreateLabeledDropdown,\n\tcreateLabeledInputText,\n\tFocusCycler,\n\tFormRowView,\n\tFormHeaderView,\n\tLabeledFieldView,\n\tLabelView,\n\tsubmitHandler,\n\tToolbarView,\n\tView,\n\tViewCollection,\n\ttype DropdownView,\n\ttype InputTextView,\n\ttype NormalizedColorOption,\n\ttype ColorPickerConfig,\n\ttype FocusableView\n} from 'ckeditor5/src/ui.js';\nimport { FocusTracker, KeystrokeHandler, type ObservableChangeEvent, type Locale } from 'ckeditor5/src/utils.js';\nimport {\n\tIconCancel,\n\tIconCheck,\n\tIconObjectCenter,\n\tIconObjectInlineLeft,\n\tIconObjectInlineRight\n} from 'ckeditor5/src/icons.js';\n\nimport {\n\tfillToolbar,\n\tgetBorderStyleDefinitions,\n\tgetBorderStyleLabels,\n\tgetLabeledColorInputCreator\n} from '../../utils/ui/table-properties.js';\n\nimport { type ColorInputView } from '../../ui/colorinputview.js';\nimport type { TablePropertiesOptions } from '../../tableconfig.js';\n\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/form/form.css';\nimport '../../../theme/formrow.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tableproperties.css';\n\n/**\n * Additional configuration of the view.\n */\nexport interface TablePropertiesViewOptions {\n\n\t/**\n\t * A configuration of the border color palette used by the\n\t * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#borderColorInput}.\n\t */\n\tborderColors: Array<NormalizedColorOption>;\n\n\t/**\n\t * A configuration of the background color palette used by the\n\t * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#backgroundInput}.\n\t */\n\tbackgroundColors: Array<NormalizedColorOption>;\n\n\t/**\n\t * The default table properties.\n\t */\n\tdefaultTableProperties: TablePropertiesOptions;\n\n\t/**\n\t * The default color picker config.\n\t */\n\tcolorPickerConfig: false | ColorPickerConfig;\n}\n\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n */\nexport class TablePropertiesView extends View {\n\t/**\n\t * The value of the border style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public borderStyle: string;\n\n\t/**\n\t * The value of the border width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public borderWidth: string;\n\n\t/**\n\t * The value of the border color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public borderColor: string;\n\n\t/**\n\t * The value of the background color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public backgroundColor: string;\n\n\t/**\n\t * The value of the table width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public width: string;\n\n\t/**\n\t * The value of the table height style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public height: string;\n\n\t/**\n\t * The value of the table alignment style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public alignment: string;\n\n\t/**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */\n\tpublic readonly options: TablePropertiesViewOptions;\n\n\t/**\n\t * Tracks information about the DOM focus in the form.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * A collection of child views in the form.\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * A dropdown that allows selecting the style of the table border.\n\t */\n\tpublic readonly borderStyleDropdown: LabeledFieldView<DropdownView>;\n\n\t/**\n\t * An input that allows specifying the width of the table border.\n\t */\n\tpublic readonly borderWidthInput: LabeledFieldView<InputTextView>;\n\n\t/**\n\t * An input that allows specifying the color of the table border.\n\t */\n\tpublic readonly borderColorInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table background color.\n\t */\n\tpublic readonly backgroundInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table width.\n\t */\n\tpublic readonly widthInput: LabeledFieldView<InputTextView>;\n\n\t/**\n\t * An input that allows specifying the table height.\n\t */\n\tpublic readonly heightInput: LabeledFieldView<InputTextView>;\n\n\t/**\n\t * A toolbar with buttons that allow changing the alignment of an entire table.\n\t */\n\tpublic readonly alignmentToolbar: ToolbarView;\n\n\t/**\n\t * The \"Save\" button view.\n\t */\n\tpublic saveButtonView: ButtonView;\n\n\t/**\n\t * The \"Cancel\" button view.\n\t */\n\tpublic cancelButtonView: ButtonView;\n\n\t/**\n\t * A collection of views that can be focused in the form.\n\t */\n\tprotected readonly _focusables: ViewCollection<FocusableView>;\n\n\t/**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */\n\tprotected readonly _focusCycler: FocusCycler;\n\n\t/**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t */\n\tconstructor( locale: Locale, options: TablePropertiesViewOptions ) {\n\t\tsuper( locale );\n\n\t\tthis.set( {\n\t\t\tborderStyle: '',\n\t\t\tborderWidth: '',\n\t\t\tborderColor: '',\n\t\t\tbackgroundColor: '',\n\t\t\twidth: '',\n\t\t\theight: '',\n\t\t\talignment: ''\n\t\t} );\n\n\t\tthis.options = options;\n\n\t\tconst { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n\t\tconst { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n\t\tconst { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n\t\tconst { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis.children = this.createCollection();\n\n\t\tthis.borderStyleDropdown = borderStyleDropdown;\n\t\tthis.borderWidthInput = borderWidthInput;\n\t\tthis.borderColorInput = borderColorInput;\n\t\tthis.backgroundInput = backgroundInput;\n\t\tthis.widthInput = widthInput;\n\t\tthis.heightInput = heightInput;\n\t\tthis.alignmentToolbar = alignmentToolbar;\n\n\t\t// Defer creating to make sure other fields are present and the Save button can\n\t\t// bind its #isEnabled to their error messages so there's no way to save unless all\n\t\t// fields are valid.\n\t\tconst { saveButtonView, cancelButtonView } = this._createActionButtons();\n\n\t\tthis.saveButtonView = saveButtonView;\n\t\tthis.cancelButtonView = cancelButtonView;\n\t\tthis._focusables = new ViewCollection();\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// Form header.\n\t\tthis.children.add( new FormHeaderView( locale, {\n\t\t\tlabel: this.t!( 'Table properties' )\n\t\t} ) );\n\n\t\t// Border row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: borderRowLabel,\n\t\t\tchildren: [\n\t\t\t\tborderRowLabel,\n\t\t\t\tborderStyleDropdown,\n\t\t\t\tborderColorInput,\n\t\t\t\tborderWidthInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__border-row'\n\t\t} ) );\n\n\t\t// Background row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: backgroundRowLabel,\n\t\t\tchildren: [\n\t\t\t\tbackgroundRowLabel,\n\t\t\t\tbackgroundInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__background-row'\n\t\t} ) );\n\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\t// Dimensions row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: dimensionsLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tdimensionsLabel,\n\t\t\t\t\t\twidthInput,\n\t\t\t\t\t\toperatorLabel,\n\t\t\t\t\t\theightInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-form__dimensions-row'\n\t\t\t\t} ),\n\t\t\t\t// Alignment row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: alignmentLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\talignmentLabel,\n\t\t\t\t\t\talignmentToolbar\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-properties-form__alignment-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} ) );\n\n\t\t// Action row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t],\n\t\t\tclass: 'ck-table-form__action-row'\n\t\t} ) );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form',\n\t\t\t\t\t'ck-table-form',\n\t\t\t\t\t'ck-table-properties-form'\n\t\t\t\t],\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\t// Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n\t\t// which is of the \"submit\" DOM \"type\".\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\t// Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n\t\t[ this.borderColorInput, this.backgroundInput ].forEach( view => {\n\t\t\tthis._focusCycler.chain( view.fieldView.focusCycler );\n\t\t} );\n\n\t\t[\n\t\t\tthis.borderStyleDropdown,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput,\n\t\t\tthis.alignmentToolbar,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t].forEach( view => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( view! );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view!.element! );\n\t\t} );\n\n\t\t// Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist focusable field in the form.\n\t */\n\tpublic focus(): void {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */\n\tprivate _createBorderFields() {\n\t\tconst defaultTableProperties = this.options.defaultTableProperties;\n\t\tconst defaultBorder = {\n\t\t\tstyle: defaultTableProperties.borderStyle,\n\t\t\twidth: defaultTableProperties.borderWidth,\n\t\t\tcolor: defaultTableProperties.borderColor\n\t\t};\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.borderColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: defaultBorder.color,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\t\tconst accessibleLabel = t( 'Style' );\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst borderRowLabel = new LabelView( locale );\n\t\tborderRowLabel.text = t( 'Border' );\n\n\t\t// -- Style ---------------------------------------------------\n\n\t\tconst styleLabels = getBorderStyleLabels( t );\n\t\tconst borderStyleDropdown = new LabeledFieldView( locale, createLabeledDropdown );\n\t\tborderStyleDropdown.set( {\n\t\t\tlabel: accessibleLabel,\n\t\t\tclass: 'ck-table-form__border-style'\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.set( {\n\t\t\tariaLabel: accessibleLabel,\n\t\t\tariaLabelledBy: undefined,\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: accessibleLabel\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.bind( 'label' ).to( this, 'borderStyle', value => {\n\t\t\treturn styleLabels[ value ? value : 'none' ];\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.on( 'execute', evt => {\n\t\t\tthis.borderStyle = ( evt.source as any )._borderStyleValue;\n\t\t} );\n\n\t\tborderStyleDropdown.bind( 'isEmpty' ).to( this, 'borderStyle', value => !value );\n\n\t\taddListToDropdown( borderStyleDropdown.fieldView, getBorderStyleDefinitions( this, defaultBorder.style! ), {\n\t\t\trole: 'menu',\n\t\t\tariaLabel: accessibleLabel\n\t\t} );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst borderWidthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tborderWidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__border-width'\n\t\t} );\n\n\t\tborderWidthInput.fieldView.bind( 'value' ).to( this, 'borderWidth' );\n\t\tborderWidthInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\t\tborderWidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderWidth = borderWidthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Color ---------------------------------------------------\n\n\t\tconst borderColorInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tborderColorInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-form__border-color'\n\t\t} );\n\n\t\tborderColorInput.fieldView.bind( 'value' ).to( this, 'borderColor' );\n\t\tborderColorInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\n\t\tborderColorInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderColor = borderColorInput.fieldView.value;\n\t\t} );\n\n\t\t// Reset the border color and width fields depending on the `border-style` value.\n\t\tthis.on<ObservableChangeEvent<string>>( 'change:borderStyle', ( evt, name, newValue, oldValue ) => {\n\t\t\t// When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6227.\n\t\t\tif ( !isBorderStyleSet( newValue ) ) {\n\t\t\t\tthis.borderColor = '';\n\t\t\t\tthis.borderWidth = '';\n\t\t\t}\n\n\t\t\t// When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\t\t\tif ( !isBorderStyleSet( oldValue ) ) {\n\t\t\t\tthis.borderColor = defaultBorder.color!;\n\t\t\t\tthis.borderWidth = defaultBorder.width!;\n\t\t\t}\n\t\t} );\n\n\t\treturn {\n\t\t\tborderRowLabel,\n\t\t\tborderStyleDropdown,\n\t\t\tborderColorInput,\n\t\t\tborderWidthInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */\n\tprivate _createBackgroundFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst backgroundRowLabel = new LabelView( locale );\n\t\tbackgroundRowLabel.text = t( 'Background' );\n\n\t\t// -- Background color input -----------------------------------\n\n\t\tconst backgroundInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.backgroundColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: this.options.defaultTableProperties.backgroundColor,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\n\t\tconst backgroundInput = new LabeledFieldView( locale, backgroundInputCreator );\n\n\t\tbackgroundInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-properties-form__background'\n\t\t} );\n\n\t\tbackgroundInput.fieldView.bind( 'value' ).to( this, 'backgroundColor' );\n\t\tbackgroundInput.fieldView.on( 'input', () => {\n\t\t\tthis.backgroundColor = backgroundInput.fieldView.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tbackgroundRowLabel,\n\t\t\tbackgroundInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput},\n\t * * {@link #heightInput}.\n\t */\n\tprivate _createDimensionFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst dimensionsLabel = new LabelView( locale );\n\t\tdimensionsLabel.text = t( 'Dimensions' );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst widthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\twidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__width'\n\t\t} );\n\n\t\twidthInput.fieldView.bind( 'value' ).to( this, 'width' );\n\t\twidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.width = widthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Operator ---------------------------------------------------\n\n\t\tconst operatorLabel = new View( locale );\n\t\toperatorLabel.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-table-form__dimension-operator'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{ text: '×' }\n\t\t\t]\n\t\t} );\n\n\t\t// -- Height ---------------------------------------------------\n\n\t\tconst heightInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\theightInput.set( {\n\t\t\tlabel: t( 'Height' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__height'\n\t\t} );\n\n\t\theightInput.fieldView.bind( 'value' ).to( this, 'height' );\n\t\theightInput.fieldView.on( 'input', () => {\n\t\t\tthis.height = heightInput.fieldView.element!.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tdimensionsLabel,\n\t\t\twidthInput,\n\t\t\toperatorLabel,\n\t\t\theightInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #alignmentToolbar}.\n\t */\n\tprivate _createAlignmentFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst alignmentLabel = new LabelView( locale );\n\t\talignmentLabel.text = t( 'Alignment' );\n\n\t\t// -- Toolbar ---------------------------------------------------\n\n\t\tconst alignmentToolbar = new ToolbarView( locale! );\n\t\talignmentToolbar.set( {\n\t\t\trole: 'radiogroup',\n\t\t\tisCompact: true,\n\t\t\tariaLabel: t( 'Table alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: {\n\t\t\t\tleft: IconObjectInlineLeft,\n\t\t\t\tcenter: IconObjectCenter,\n\t\t\t\tright: IconObjectInlineRight\n\t\t\t},\n\t\t\ttoolbar: alignmentToolbar,\n\t\t\tlabels: this._alignmentLabels,\n\t\t\tpropertyName: 'alignment',\n\t\t\tdefaultValue: this.options.defaultTableProperties.alignment!\n\t\t} );\n\n\t\treturn {\n\t\t\talignmentLabel,\n\t\t\talignmentToolbar\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */\n\tprivate _createActionButtons(): {\n\t\tsaveButtonView: ButtonView;\n\t\tcancelButtonView: ButtonView;\n\t} {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\tconst saveButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\t\tconst fieldsThatShouldValidateToSave = [\n\t\t\tthis.borderWidthInput!,\n\t\t\tthis.borderColorInput!,\n\t\t\tthis.backgroundInput!,\n\t\t\tthis.widthInput!,\n\t\t\tthis.heightInput!\n\t\t];\n\n\t\tsaveButtonView.set( {\n\t\t\tlabel: t( 'Save' ),\n\t\t\ticon: IconCheck,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true\n\t\t} );\n\n\t\tsaveButtonView.bind( 'isEnabled' ).toMany( fieldsThatShouldValidateToSave, 'errorText', ( ...errorTexts ) => {\n\t\t\treturn errorTexts.every( errorText => !errorText );\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: IconCancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn {\n\t\t\tsaveButtonView, cancelButtonView\n\t\t};\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #alignmentToolbar} buttons.\n\t */\n\tprivate get _alignmentLabels() {\n\t\tconst locale = this.locale!;\n\t\tconst t = this.t!;\n\n\t\tconst left = t( 'Align table to the left' );\n\t\tconst center = t( 'Center table' );\n\t\tconst right = t( 'Align table to the right' );\n\n\t\t// Returns object with a proper order of labels.\n\t\tif ( locale.uiLanguageDirection === 'rtl' ) {\n\t\t\treturn { right, center, left };\n\t\t} else {\n\t\t\treturn { left, center, right };\n\t\t}\n\t}\n}\n\nfunction isBorderStyleSet( value: string ) {\n\treturn value !== 'none';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/tablepropertiesui\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { IconTableProperties } from 'ckeditor5/src/icons.js';\nimport {\n\tButtonView,\n\tContextualBalloon,\n\tclickOutsideHandler,\n\tgetLocalizedColorOptions,\n\tnormalizeColorOptions,\n\ttype LabeledFieldView\n} from 'ckeditor5/src/ui.js';\n\nimport { debounce } from 'es-toolkit/compat';\n\nimport { TablePropertiesView } from './ui/tablepropertiesview.js';\nimport {\n\tcolorFieldValidator,\n\tgetLocalizedColorErrorText,\n\tgetLocalizedLengthErrorText,\n\tlengthFieldValidator,\n\tlineWidthFieldValidator,\n\tdefaultColors\n} from '../utils/ui/table-properties.js';\nimport { getSelectionAffectedTableWidget } from '../utils/ui/widget.js';\nimport { getBalloonTablePositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon.js';\nimport {\n\tgetNormalizedDefaultProperties,\n\tgetNormalizedDefaultTableProperties,\n\ttype NormalizedDefaultProperties\n} from '../utils/table-properties.js';\nimport type { Batch } from 'ckeditor5/src/engine.js';\nimport type { EventInfo, ObservableChangeEvent } from 'ckeditor5/src/utils.js';\n\nimport { type TableBorderStyleCommand } from './commands/tableborderstylecommand.js';\n\nconst ERROR_TEXT_TIMEOUT = 500;\n\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n\tborderStyle: 'tableBorderStyle',\n\tborderColor: 'tableBorderColor',\n\tborderWidth: 'tableBorderWidth',\n\tbackgroundColor: 'tableBackgroundColor',\n\twidth: 'tableWidth',\n\theight: 'tableHeight',\n\talignment: 'tableAlignment'\n};\n\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport class TablePropertiesUI extends Plugin {\n\t/**\n\t * The default table properties.\n\t */\n\tprivate _defaultContentTableProperties!: NormalizedDefaultProperties;\n\n\t/**\n\t * The default layout table properties.\n\t */\n\tprivate _defaultLayoutTableProperties!: NormalizedDefaultProperties;\n\n\t/**\n\t * The contextual balloon plugin instance.\n\t */\n\tprivate _balloon!: ContextualBalloon;\n\n\t/**\n\t * The properties form view displayed inside the balloon.\n\t */\n\tpublic view: TablePropertiesView | null = null;\n\n\t/**\n\t * The properties form view displayed inside the balloon (content table).\n\t */\n\tprivate _viewWithContentTableDefaults: TablePropertiesView | null = null;\n\n\t/**\n\t * The properties form view displayed inside the balloon (layout table).\n\t */\n\tprivate _viewWithLayoutTableDefaults: TablePropertiesView | null = null;\n\n\t/**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */\n\tprivate _undoStepBatch?: Batch;\n\n\t/**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */\n\tprivate _isReady?: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ContextualBalloon ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TablePropertiesUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'table.tableProperties', {\n\t\t\tborderColors: defaultColors,\n\t\t\tbackgroundColors: defaultColors\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tthis._defaultContentTableProperties = getNormalizedDefaultTableProperties(\n\t\t\teditor.config.get( 'table.tableProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeAlignmentProperty: true\n\t\t\t}\n\t\t);\n\t\tthis._defaultLayoutTableProperties = getNormalizedDefaultProperties();\n\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\teditor.ui.componentFactory.add( 'tableProperties', () => this._createTablePropertiesButton() );\n\t}\n\n\t/**\n\t * Creates the table properties button.\n\t *\n\t * @internal\n\t */\n\tpublic _createTablePropertiesButton(): ButtonView {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tconst view = new ButtonView( editor.locale );\n\n\t\tview.set( {\n\t\t\tlabel: t( 'Table properties' ),\n\t\t\ticon: IconTableProperties,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tthis.listenTo( view, 'execute', () => this._showView() );\n\n\t\tconst commands = Object.values( propertyToCommandMap )\n\t\t\t.map( commandName => editor.commands.get( commandName )! );\n\n\t\tview.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => (\n\t\t\tareEnabled.some( isCommandEnabled => isCommandEnabled )\n\t\t) );\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1341.\n\t\tif ( this.view ) {\n\t\t\tthis.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n\t *\n\t * @returns The table properties form view instance.\n\t */\n\tprivate _createPropertiesView( defaultTableProperties: NormalizedDefaultProperties ) {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config.get( 'table.tableProperties' )!;\n\t\tconst borderColorsConfig = normalizeColorOptions( config.borderColors! );\n\t\tconst localizedBorderColors = getLocalizedColorOptions( editor.locale, borderColorsConfig );\n\t\tconst backgroundColorsConfig = normalizeColorOptions( config.backgroundColors! );\n\t\tconst localizedBackgroundColors = getLocalizedColorOptions( editor.locale, backgroundColorsConfig );\n\t\tconst hasColorPicker = config.colorPicker !== false;\n\n\t\tconst view = new TablePropertiesView( editor.locale, {\n\t\t\tborderColors: localizedBorderColors,\n\t\t\tbackgroundColors: localizedBackgroundColors,\n\t\t\tdefaultTableProperties,\n\t\t\tcolorPickerConfig: hasColorPicker ? ( config.colorPicker || {} ) : false\n\t\t} );\n\t\tconst t = editor.t;\n\n\t\t// Render the view so its #element is available for the clickOutsideHandler.\n\t\tview.render();\n\n\t\tthis.listenTo( view, 'submit', () => {\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\tthis.listenTo( view, 'cancel', () => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/6180\n\t\t\tif ( this._undoStepBatch!.operations.length ) {\n\t\t\t\teditor.execute( 'undo', this._undoStepBatch );\n\t\t\t}\n\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\t// Close the balloon on Esc key press.\n\t\tview.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideView();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: view,\n\t\t\tactivator: () => this._isViewInBalloon,\n\t\t\tcontextElements: [ this._balloon.view.element! ],\n\t\t\tcallback: () => this._hideView()\n\t\t} );\n\n\t\tconst colorErrorText = getLocalizedColorErrorText( t );\n\t\tconst lengthErrorText = getLocalizedLengthErrorText( t );\n\n\t\t// Create the \"UI -> editor data\" binding.\n\t\t// These listeners update the editor data (via table commands) when any observable\n\t\t// property of the view has changed. They also validate the value and display errors in the UI\n\t\t// when necessary. This makes the view live, which means the changes are\n\t\t// visible in the editing as soon as the user types or changes fields' values.\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:borderStyle',\n\t\t\tthis._getPropertyChangeCallback( 'tableBorderStyle' )\n\t\t);\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderColorInput,\n\t\t\tcommandName: 'tableBorderColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderWidth', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderWidthInput,\n\t\t\tcommandName: 'tableBorderWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lineWidthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:backgroundColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.backgroundInput,\n\t\t\tcommandName: 'tableBackgroundColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:width', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.widthInput,\n\t\t\tcommandName: 'tableWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:height', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.heightInput,\n\t\t\tcommandName: 'tableHeight',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:alignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableAlignment' )\n\t\t);\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected table property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */\n\tprivate _fillViewFormFromCommandValues() {\n\t\tconst commands = this.editor.commands;\n\t\tconst borderStyleCommand: TableBorderStyleCommand = commands.get( 'tableBorderStyle' )!;\n\n\t\tObject.entries( propertyToCommandMap )\n\t\t\t.map( ( [ property, commandName ] ) => {\n\t\t\t\tconst propertyKey = property as keyof typeof propertyToCommandMap;\n\t\t\t\tconst defaultValue = this.view === this._viewWithContentTableDefaults ?\n\t\t\t\t\tthis._defaultContentTableProperties[ propertyKey ] || '' :\n\t\t\t\t\tthis._defaultLayoutTableProperties[ propertyKey ] || '';\n\n\t\t\t\treturn [ propertyKey, ( commands.get( commandName )!.value || defaultValue ) as string ] as const;\n\t\t\t} )\n\t\t\t.forEach( ( [ property, value ] ) => {\n\t\t\t\t// Do not set the `border-color` and `border-width` fields if `border-style:none`.\n\t\t\t\tif ( ( property === 'borderColor' || property === 'borderWidth' ) && borderStyleCommand.value === 'none' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.view!.set( property, value );\n\t\t\t} );\n\n\t\tthis._isReady = true;\n\t}\n\n\t/**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */\n\tprotected _showView(): void {\n\t\tconst editor = this.editor;\n\n\t\tconst viewTable = getSelectionAffectedTableWidget( editor.editing.view.document.selection );\n\t\tconst modelTable = viewTable && editor.editing.mapper.toModelElement( viewTable );\n\t\tconst useDefaults = !modelTable || modelTable.getAttribute( 'tableType' ) !== 'layout';\n\n\t\tif ( useDefaults && !this._viewWithContentTableDefaults ) {\n\t\t\tthis._viewWithContentTableDefaults = this._createPropertiesView( this._defaultContentTableProperties );\n\t\t} else if ( !useDefaults && !this._viewWithLayoutTableDefaults ) {\n\t\t\tthis._viewWithLayoutTableDefaults = this._createPropertiesView( this._defaultLayoutTableProperties );\n\t\t}\n\n\t\tthis.view = useDefaults ? this._viewWithContentTableDefaults! : this._viewWithLayoutTableDefaults!;\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateView();\n\t\t} );\n\n\t\t// Update the view with the model values.\n\t\tthis._fillViewFormFromCommandValues();\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.view,\n\t\t\tposition: getBalloonTablePositionData( editor )\n\t\t} );\n\n\t\t// Create a new batch. Clicking \"Cancel\" will undo this batch.\n\t\tthis._undoStepBatch = editor.model.createBatch();\n\n\t\t// Basic a11y.\n\t\tthis.view.focus();\n\t}\n\n\t/**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */\n\tprotected _hideView(): void {\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\n\t\tthis._isReady = false;\n\n\t\t// Blur any input element before removing it from DOM to prevent issues in some browsers.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\tthis.view!.saveButtonView.focus();\n\n\t\tthis._balloon.remove( this.view! );\n\n\t\t// Make sure the focus is not lost in the process by putting it directly\n\t\t// into the editing view.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t/**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n\t */\n\tprotected _updateView(): void {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tif ( !getSelectionAffectedTableWidget( viewDocument.selection ) ) {\n\t\t\tthis._hideView();\n\t\t} else if ( this._isViewVisible ) {\n\t\t\trepositionContextualBalloon( editor, 'table' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n\t */\n\tprivate get _isViewVisible(): boolean {\n\t\treturn !!this.view && this._balloon.visibleView === this.view;\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */\n\tprivate get _isViewInBalloon(): boolean {\n\t\treturn !!this.view && this._balloon.hasView( this.view );\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * If new value will be set to the default value, the command will not be executed.\n\t *\n\t * @param commandName The command that will be executed.\n\t */\n\tprivate _getPropertyChangeCallback( commandName: 'tableBorderStyle' | 'tableAlignment' ) {\n\t\treturn ( evt: EventInfo, propertyName: string, newValue: string ) => {\n\t\t\t// Do not execute the command on initial call (opening the table properties view).\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( commandName, {\n\t\t\t\tvalue: newValue,\n\t\t\t\tbatch: this._undoStepBatch\n\t\t\t} );\n\t\t};\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon {@link #view view's} property change:\n\t * * executes a related editor command with the new property value if the value is valid,\n\t * * or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */\n\tprivate _getValidatedPropertyChangeCallback(\n\t\toptions: {\n\t\t\tcommandName: 'tableBorderColor' | 'tableBorderWidth' | 'tableBackgroundColor' | 'tableWidth' | 'tableHeight';\n\t\t\tviewField: LabeledFieldView;\n\t\t\tvalidator: ( value: string ) => boolean;\n\t\t\terrorText: string;\n\t\t}\n\t) {\n\t\tconst { commandName, viewField, validator, errorText } = options;\n\t\tconst setErrorTextDebounced = debounce( () => {\n\t\t\tviewField.errorText = errorText;\n\t\t}, ERROR_TEXT_TIMEOUT );\n\n\t\treturn ( evt: EventInfo, propertyName: string, newValue: string ) => {\n\t\t\tsetErrorTextDebounced.cancel();\n\n\t\t\t// Do not execute the command on initial call (opening the table properties view).\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( validator( newValue ) ) {\n\t\t\t\tthis.editor.execute( commandName, {\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t\tbatch: this._undoStepBatch\n\t\t\t\t} );\n\n\t\t\t\tviewField.errorText = null;\n\t\t\t} else {\n\t\t\t\tsetErrorTextDebounced();\n\t\t\t}\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { TablePropertiesEditing } from './tableproperties/tablepropertiesediting.js';\nimport { TablePropertiesUI } from './tableproperties/tablepropertiesui.js';\n\n/**\n * The table properties feature. Enables support for setting properties of tables (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tablecellproperties~TableCellProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing table properties editing feature} and\n * the {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI table properties UI feature}.\n */\nexport class TableProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TablePropertiesEditing, TablePropertiesUI ] as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-caption-post-fixer\n */\n\nimport type { Model, ModelWriter, ModelElement, ModelNode } from 'ckeditor5/src/engine.js';\n\n/**\n * Injects a table caption post-fixer into the model.\n *\n * The role of the table caption post-fixer is to ensure that the table with caption have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * If there are many caption model element, they are merged into one model.\n * * A final, merged caption model is placed at the end of the table.\n *\n * @internal\n */\nexport function injectTableCaptionPostFixer( model: Model ): void {\n\tmodel.document.registerPostFixer( writer => tableCaptionPostFixer( writer, model ) );\n}\n\n/**\n * The table caption post-fixer.\n */\nfunction tableCaptionPostFixer( writer: ModelWriter, model: Model ) {\n\tconst changes = model.document.differ.getChanges();\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst positionParent = entry.position.parent;\n\n\t\tif ( positionParent.is( 'element', 'table' ) || entry.name == 'table' ) {\n\t\t\tconst table = ( entry.name == 'table' ? entry.position.nodeAfter : positionParent ) as ModelElement;\n\t\t\tconst captionsToMerge = Array.from( table.getChildren() )\n\t\t\t\t.filter( ( child: ModelNode ): child is ModelElement => child.is( 'element', 'caption' ) );\n\t\t\tconst firstCaption = captionsToMerge.shift();\n\n\t\t\tif ( !firstCaption ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move all the contents of the captions to the first one.\n\t\t\tfor ( const caption of captionsToMerge ) {\n\t\t\t\twriter.move( writer.createRangeIn( caption ), firstCaption, 'end' );\n\t\t\t\twriter.remove( caption );\n\t\t\t}\n\n\t\t\t// Make sure the final caption is at the end of the table.\n\t\t\tif ( firstCaption.nextSibling ) {\n\t\t\t\twriter.move( writer.createRangeOn( firstCaption ), table, 'end' );\n\t\t\t\twasFixed = true;\n\t\t\t}\n\n\t\t\t// Do we merged captions and/or moved the single caption to the end of the table?\n\t\t\twasFixed = !!captionsToMerge.length || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecaption/utils\n */\n\nimport type {\n\tModelDocumentFragment,\n\tModelDocumentSelection,\n\tModelElement,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { getSelectionAffectedTable } from '../utils/common.js';\n\n/**\n * Checks if the provided model element is a `table`.\n *\n * @param modelElement Element to check if it is a table.\n * @internal\n */\nexport function isTable( modelElement: ModelElement | ModelDocumentFragment | null ): boolean {\n\treturn !!modelElement && modelElement.is( 'element', 'table' );\n}\n\n/**\n * Returns the caption model element from a given table element. Returns `null` if no caption is found.\n *\n * @param tableModelElement Table element in which we will try to find a caption element.\n * @internal\n */\nexport function getCaptionFromTableModelElement( tableModelElement: ModelElement ): ModelElement | null {\n\tfor ( const node of tableModelElement.getChildren() ) {\n\t\tif ( node.is( 'element', 'caption' ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param selection The selection checked for caption presence.\n * @internal\n */\nexport function getCaptionFromModelSelection( selection: ModelDocumentSelection ): ModelElement | null {\n\tconst tableElement = getSelectionAffectedTable( selection );\n\n\tif ( !tableElement ) {\n\t\treturn null;\n\t}\n\n\treturn getCaptionFromTableModelElement( tableElement );\n}\n\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a caption.\n *\n * There are two possible forms of the valid caption:\n *  - A `<figcaption>` element inside a `<figure class=\"table\">` element.\n *  - A `<caption>` inside a <table>.\n *\n * @returns Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element cannot be matched.\n * @internal\n */\nexport function matchTableCaptionViewElement( element: ViewElement ): { name: true } | null {\n\tconst parent = element.parent;\n\n\tif ( element.name == 'figcaption' && parent && parent.is( 'element', 'figure' ) && parent.hasClass( 'table' ) ) {\n\t\treturn { name: true };\n\t}\n\n\tif ( element.name == 'caption' && parent && parent.is( 'element', 'table' ) ) {\n\t\treturn { name: true };\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n* @module table/tablecaption/toggletablecaptioncommand\n*/\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type { ModelWriter } from 'ckeditor5/src/engine.js';\nimport { type TableCaptionEditing } from './tablecaptionediting.js';\n\nimport { getCaptionFromTableModelElement } from './utils.js';\nimport { getSelectionAffectedTable } from '../utils/common.js';\n\n/**\n * The toggle table caption command.\n *\n * This command is registered by {@link module:table/tablecaption/tablecaptionediting~TableCaptionEditing} as the\n * `'toggleTableCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the table caption of a selected table (depending on whether the caption is present or not),\n * * removes the table caption if the selection is anchored in one.\n *\n * ```ts\n * // Toggle the presence of the caption.\n * editor.execute( 'toggleTableCaption' );\n * ```\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n * ```ts\n * editor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n * ```\n */\nexport class ToggleTableCaptionCommand extends Command {\n\tdeclare public value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst tableElement = getSelectionAffectedTable( editor.model.document.selection );\n\n\t\tthis.isEnabled = !!tableElement && editor.model.schema.checkChild( tableElement, 'caption' );\n\n\t\tif ( !this.isEnabled ) {\n\t\t\tthis.value = false;\n\t\t} else {\n\t\t\tthis.value = !!getCaptionFromTableModelElement( tableElement );\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * ```ts\n\t * editor.execute( 'toggleTableCaption' );\n\t * ```\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.focusCaptionOnShow When true and the caption shows up, the selection will be moved into it straight away.\n\t * @fires execute\n\t */\n\tpublic override execute( { focusCaptionOnShow = false }: { focusCaptionOnShow?: boolean } = {} ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\tif ( this.value ) {\n\t\t\t\tthis._hideTableCaption( writer );\n\t\t\t} else {\n\t\t\t\tthis._showTableCaption( writer, focusCaptionOnShow );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the table caption. Also:\n\t *\n\t * * it attempts to restore the caption content from the `TableCaptionEditing` caption registry,\n\t * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n\t *\n\t * @param focusCaptionOnShow Default focus behavior when showing the caption.\n\t */\n\tprivate _showTableCaption( writer: ModelWriter, focusCaptionOnShow: boolean ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableElement = getSelectionAffectedTable( model.document.selection );\n\t\tconst tableCaptionEditing: TableCaptionEditing = this.editor.plugins.get( 'TableCaptionEditing' );\n\t\tconst savedCaptionElement = tableCaptionEditing._getSavedCaption( tableElement );\n\n\t\t// Try restoring the caption from the TableCaptionEditing plugin storage.\n\t\tconst newCaptionElement = savedCaptionElement || writer.createElement( 'caption' );\n\n\t\tmodel.insertContent( newCaptionElement, tableElement, 'end' );\n\n\t\tif ( focusCaptionOnShow ) {\n\t\t\twriter.setSelection( newCaptionElement, 'in' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the caption of a selected table (or an table caption the selection is anchored to).\n\t *\n\t * The content of the caption is stored in the `TableCaptionEditing` caption registry to make this\n\t * a reversible action.\n\t */\n\tprivate _hideTableCaption( writer: ModelWriter ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableElement = getSelectionAffectedTable( model.document.selection );\n\t\tconst tableCaptionEditing: TableCaptionEditing = this.editor.plugins.get( 'TableCaptionEditing' );\n\t\tconst captionElement = getCaptionFromTableModelElement( tableElement )!;\n\n\t\t// Store the caption content so it can be restored quickly if the user changes their mind.\n\t\ttableCaptionEditing._saveCaption( tableElement, captionElement );\n\n\t\tmodel.deleteContent( writer.createSelection( captionElement, 'on' ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecaption/tablecaptionediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { ModelElement, enableViewPlaceholder } from 'ckeditor5/src/engine.js';\nimport { toWidgetEditable } from 'ckeditor5/src/widget.js';\n\nimport { injectTableCaptionPostFixer } from '../converters/table-caption-post-fixer.js';\nimport { ToggleTableCaptionCommand } from './toggletablecaptioncommand.js';\nimport { isTable, matchTableCaptionViewElement } from './utils.js';\n\n/**\n * The table caption editing plugin.\n */\nexport class TableCaptionEditing extends Plugin {\n\t/**\n\t * A map that keeps saved JSONified table captions and table model elements they are\n\t * associated with.\n\t *\n\t * To learn more about this system, see {@link #_saveCaption}.\n\t */\n\tprivate _savedCaptionsMap: WeakMap<ModelElement, unknown>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCaptionEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._savedCaptionsMap = new WeakMap();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst view = editor.editing.view;\n\t\tconst t = editor.t;\n\n\t\tif ( !schema.isRegistered( 'caption' ) ) {\n\t\t\tschema.register( 'caption', {\n\t\t\t\tallowIn: 'table',\n\t\t\t\tallowContentOf: '$block',\n\t\t\t\tisLimit: true\n\t\t\t} );\n\t\t} else {\n\t\t\tschema.extend( 'caption', {\n\t\t\t\tallowIn: 'table'\n\t\t\t} );\n\t\t}\n\n\t\teditor.commands.add( 'toggleTableCaption', new ToggleTableCaptionCommand( this.editor ) );\n\n\t\t// View -> model converter for the data pipeline.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: matchTableCaptionViewElement,\n\t\t\tmodel: 'caption'\n\t\t} );\n\n\t\t// Model -> view converter for the data pipeline.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'caption',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tif ( !isTable( modelElement.parent ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn writer.createContainerElement( 'figcaption' );\n\t\t\t}\n\t\t} );\n\n\t\t// Model -> view converter for the editing pipeline.\n\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'caption',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tif ( !isTable( modelElement.parent ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst figcaptionElement = writer.createEditableElement( 'figcaption' );\n\t\t\t\twriter.setCustomProperty( 'tableCaption', true, figcaptionElement );\n\n\t\t\t\tfigcaptionElement.placeholder = t( 'Enter table caption' );\n\n\t\t\t\tenableViewPlaceholder( {\n\t\t\t\t\tview,\n\t\t\t\t\telement: figcaptionElement,\n\t\t\t\t\tkeepOnFocus: true\n\t\t\t\t} );\n\n\t\t\t\treturn toWidgetEditable( figcaptionElement, writer );\n\t\t\t}\n\t\t} );\n\n\t\tinjectTableCaptionPostFixer( editor.model );\n\t}\n\n\t/**\n\t * Returns the saved {@link module:engine/model/element~ModelElement#toJSON JSONified} caption\n\t * of a table model element.\n\t *\n\t * See {@link #_saveCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption should be returned for.\n\t * @returns The model caption element or `null` if there is none.\n\t */\n\tpublic _getSavedCaption( tableModelElement: ModelElement ): ModelElement | null {\n\t\tconst jsonObject = this._savedCaptionsMap.get( tableModelElement );\n\n\t\treturn jsonObject ? ModelElement.fromJSON( jsonObject ) : null;\n\t}\n\n\t/**\n\t * Saves a {@link module:engine/model/element~ModelElement#toJSON JSONified} caption for\n\t * a table element to allow restoring it in the future.\n\t *\n\t * A caption is saved every time it gets hidden. The\n\t * user should be able to restore it on demand.\n\t *\n\t * **Note**: The caption cannot be stored in the table model element attribute because,\n\t * for instance, when the model state propagates to collaborators, the attribute would get\n\t * lost (mainly because it does not convert to anything when the caption is hidden) and\n\t * the states of collaborators' models would de-synchronize causing numerous issues.\n\t *\n\t * See {@link #_getSavedCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption is saved for.\n\t * @param caption The caption model element to be saved.\n\t */\n\tpublic _saveCaption( tableModelElement: ModelElement, caption: ModelElement ): void {\n\t\tthis._savedCaptionsMap.set( tableModelElement, caption.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n* @module table/tablecaption/tablecaptionui\n*/\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport { IconCaption } from 'ckeditor5/src/icons.js';\nimport { type ToggleTableCaptionCommand } from './toggletablecaptioncommand.js';\n\nimport { getCaptionFromModelSelection } from './utils.js';\n\n/**\n  * The table caption UI plugin. It introduces the `'toggleTableCaption'` UI button.\n  */\nexport class TableCaptionUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCaptionUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst t = editor.t;\n\n\t\teditor.ui.componentFactory.add( 'toggleTableCaption', locale => {\n\t\t\tconst command: ToggleTableCaptionCommand = editor.commands.get( 'toggleTableCaption' )!;\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\ticon: IconCaption,\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\tview.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\t\t\tview.bind( 'label' ).to( command, 'value', value => value ? t( 'Toggle caption off' ) : t( 'Toggle caption on' ) );\n\n\t\t\tthis.listenTo( view, 'execute', () => {\n\t\t\t\teditor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n\n\t\t\t\t// Scroll to the selection and highlight the caption if the caption showed up.\n\t\t\t\tif ( command.value ) {\n\t\t\t\t\tconst modelCaptionElement = getCaptionFromModelSelection( editor.model.document.selection )!;\n\t\t\t\t\tconst figcaptionElement = editor.editing.mapper.toViewElement( modelCaptionElement );\n\n\t\t\t\t\tif ( !figcaptionElement ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\teditingView.scrollToTheSelection();\n\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\twriter.addClass( 'table__caption_highlighted', figcaptionElement );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecaption\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { TableCaptionEditing } from './tablecaption/tablecaptionediting.js';\nimport { TableCaptionUI } from './tablecaption/tablecaptionui.js';\n\nimport '../theme/tablecaption.css';\n\n/**\n * The table caption plugin.\n */\nexport class TableCaption extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCaption' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableCaptionEditing, TableCaptionUI ] as const;\n\t}\n}\n"],"names":["upcastStyleToAttribute","conversion","options","modelAttribute","styleName","attributeName","attributeType","viewElement","defaultValue","shouldUpcast","reduceBoxSides","for","attributeToAttribute","view","name","styles","model","key","value","conversionApi","data","localDefaultValue","getDefaultValueAdjusted","normalized","getNormalizedStyle","reduceBoxSidesValue","consumable","consume","attributes","hasStyle","parent","getAttribute","endsWith","upcastBorderStyles","viewElementName","modelAttributes","defaultBorder","add","dispatcher","on","evt","modelRange","stylesToConsume","filter","viewItem","length","matcherPattern","test","modelElement","getItems","shallow","pop","tableElement","findAncestor","includeSelf","localDefaultBorder","style","color","width","normalizedBorder","reducedBorder","writer","setAttribute","downcastAttributeToStyle","modelAttributeValue","downcastTableAttribute","item","attributeNewValue","mapper","table","toViewElement","getChildren","find","child","is","setStyle","removeStyle","layoutTableDefault","first","sides","allSidesDefined","every","side","topSideStyle","top","allSidesEqual","updateNumericAttribute","undefined","removeAttribute","createEmptyTableCell","insertPosition","tableCell","createElement","insertElement","insert","isHeadingColumnCell","tableUtils","headingColumns","parseInt","column","getCellLocation","enableProperty","schema","extend","allowAttributes","setAttributeProperties","isFormatting","getSelectionAffectedTable","selection","selectedElement","getSelectedElement","getFirstPosition","upcastTableFigure","classes","viewTable","getViewTableFromFigure","conversionResult","convertItem","modelCursor","modelTable","revert","convertChildren","createPositionAt","updateConversionResult","upcastTable","rows","headingRows","scanTable","safeInsert","forEach","row","isEmpty","skipEmptyTableRow","index","stop","priority","ensureParagraphInTableCell","elementName","start","nodeAfter","childNodes","Array","from","node","paragraph","move","createRangeOn","figureView","figureChild","headRows","bodyRows","firstTheadElement","tableChild","trs","el","maxPrevColumns","tr","trColumns","e","push","headingCols","scanRowForHeadingColumns","Math","max","children","th","colspan","TableWalker","_table","_startRow","_endRow","_startColumn","_endColumn","_includeAllSlots","_skipRows","_row","_rowIndex","_column","_cellIndex","_spannedCells","_nextCellAtColumn","_jumpedToStartRow","startRow","endRow","startColumn","endColumn","includeAllSlots","Set","Map","Symbol","iterator","next","_canJumpToStartRow","_jumpToNonSpannedRowClosestToStartRow","getChild","_isOverEndRow","done","_isOverEndColumn","_advanceToNextRow","outValue","spanData","_getSpanned","_shouldSkipSlot","_formatOutValue","cell","rowspan","_recordSpans","skipRow","anchorRow","anchorColumn","TableSlot","rowIsMarkedAsSkipped","has","rowIsBeforeStartRow","columnIsBeforeStartColumn","columnIsAfterEndColumn","rowMap","get","rowToUpdate","columnToUpdate","_markSpannedCell","set","rowSpans","firstRowLength","_getRowLength","i","rowIndex","reduce","cols","cellAnchorRow","cellAnchorColumn","tableWalker","isAnchor","cellWidth","cellHeight","getPositionBefore","root","document","downcastTable","createContainerElement","figureElement","class","createSlot","element","getRows","positionOffset","additionalSlots","some","asWidget","toTableWidget","downcastRow","tableRow","createEmptyElement","downcastCell","getChildIndex","result","tableSlot","isHeading","cellElementName","toWidgetEditable","createEditableElement","withAriaRole","convertParagraphInTableCell","isSingleParagraphWithoutAttributes","setCustomProperty","isSingleParagraph","childCount","hasAnyAttribute","toWidget","hasSelectionHandle","attributeKey","getAttributeKeys","startsWith","InsertTableCommand","Command","refresh","editor","isEnabled","isAllowedInParent","execute","plugins","defaultRows","config","defaultColumns","change","createTable","insertObject","findOptimalPosition","setSelection","getNodeByPath","positionParent","validParent","checkChild","InsertRowCommand","order","isAnyCellSelected","getSelectionAffectedTableCells","insertAbove","affectedTableCells","rowIndexes","getRowIndexes","last","insertRows","at","copyStructureFromAbove","InsertColumnCommand","insertBefore","columnIndexes","getColumnIndexes","insertColumns","columns","SplitCellCommand","direction","selectedCells","isHorizontal","splitCellHorizontally","splitCellVertically","cropTableToDimensions","sourceTable","cropDimensions","croppedTable","sourceTableType","cropHeight","tableMap","sourceRow","sourceColumn","rowInCroppedTable","tableCellCopy","cloneElement","append","trimTableCellIfNeeded","addHeadingsToCroppedTable","getVerticallyOverlappingCells","overlapRow","cells","slotInfo","cellEndRow","splitHorizontally","splitRow","newRowspan","newCellAttributes","newCellRowSpan","newCell","columnIndex","getHorizontallyOverlappingCells","overlapColumn","cellsToSplit","cellEndColumn","splitVertically","splitColumn","newColspan","newCellColSpan","createPositionAfter","cellRow","cellColumn","limitRow","limitColumn","trimmedSpan","headingRowsInCrop","headingColumnsInCrop","removeEmptyColumns","getColumns","columnsMap","fill","emptyColumns","cellsCount","emptyColumn","removeColumns","removeEmptyRows","emptyRows","tableRowCount","emptyRow","removeRows","removeEmptyRowsColumns","removedColumns","adjustLastRowIndex","dimensions","lastRowMap","firstColumn","lastColumn","lastRow","everyCellHasSingleRowspan","rowspanAdjustment","adjustLastColumnIndex","lastColumnMap","firstRow","everyCellHasSingleColspan","colspanAdjustment","MergeCellCommand","cellToMerge","_getMergeableCell","doc","getTableCellsContainingSelection","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","mergeTableCells","spanAttribute","cellSpan","cellToMergeSpan","createRangeIn","getHorizontalCell","getVerticalCell","span","horizontalCell","nextSibling","previousSibling","hasHeadingColumns","cellOnLeft","cellOnRight","leftCellColumn","rightCellColumn","leftCellSpan","isCellOnLeftInHeadingColumn","isCellOnRightInHeadingColumn","cellsAreTouching","isMergeWithBodyCell","isMergeWithHeadCell","currentCellRowSpan","rowOfCellToMerge","currentCellData","mergeColumn","cellToMergeData","remove","firstTableChild","RemoveRowCommand","firstCell","lastRowIndex","selectedRowIndexes","areAllRowsSelected","referenceCells","removedRowIndexes","columnIndexToFocus","rowsToRemove","cellToFocus","getCellToFocus","removedRowIndex","columnToFocus","min","RemoveColumnCommand","tableColumnCount","lastCell","getBoundaryCells","removedColumnIndexes","columnsToRemove","reverse","returnValue","isBefore","SetHeaderRowCommand","checkAttribute","_isInHeading","forceValue","headingRowsToSet","currentHeadingRows","overlappingCells","SetHeaderColumnCommand","headingColumnsToSet","COLUMN_MIN_WIDTH_AS_PERCENTAGE","COLUMN_MIN_WIDTH_IN_PIXELS","COLUMN_WIDTH_PRECISION","COLUMN_RESIZE_DISTANCE_THRESHOLD","getChangedResizedTables","affectedTables","differ","getChanges","referencePosition","type","includes","position","range","tableNode","getColumnGroupElement","getColumnMinWidthAsPercentage","getTableWidthInPixels","referenceElement","getChildrenViewElement","domReferenceElement","editing","domConverter","mapViewToDom","getElementWidthInPixels","viewFigure","domElement","global","window","getComputedStyle","boxSizing","parseFloat","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","getColumnEdgesIndexes","cellColumnIndex","leftEdge","rightEdge","toPrecision","multiplier","pow","number","round","clamp","createFilledArray","sumArray","array","map","Number","isNaN","normalizeColumnWidths","columnWidths","widths","replace","normalizedWidths","calculateMissingColumnWidths","totalWidth","columnWidth","isLastColumn","numberOfUninitializedColumns","totalWidthOfInitializedColumns","widthForUninitializedColumn","getDomCellOuterWidth","domCell","borderWidth","updateColumnElements","tableColumnGroup","appendElement","getTableColumnElements","columnGroupElement","getTableColumnsWidths","translateColSpanAttribute","tableColumnElements","acc","colSpan","TableUtils","Plugin","pluginName","isOfficialPlugin","init","decorate","createEmptyRows","insertAt","rowsToInsert","isCopyStructure","copyStructureFrom","CKEditorError","walkerEndRow","tableIterator","rowColSpansMap","lastCellRow","isOverlappingInsertedRow","isReferenceRow","cellIndex","abs","columnsToInsert","tableColumns","createCells","rowCount","indexesObject","cellsToMove","cellsToTrim","getCellsToMoveAndTrimOnRemoveRow","size","rowAfterRemovedSection","moveCellsToRow","updateHeadingRows","adjustHeadingColumns","removedColumnIndex","adjacentColumn","removedColumnWidth","adjacentColumnWidth","numberOfCells","newCellsSpan","updatedSpan","breakSpanEvenly","newCellsAttributes","cellsToInsert","splitCellColumn","cellsToUpdate","isOnSameColumn","spansOverColumn","splitCellRow","distanceFromLastCellSpan","isAfterSplitCell","rowspanToSet","createTableWalker","getSelectedTableCells","sortRanges","getRanges","getContainedElement","cellWithSelection","tableCells","indexes","_getFirstLastIndexesObject","entry","isSelectionRectangular","selectedTableCells","_areCellInTheSameTableSection","areaOfSelectedCells","areaOfValidSelection","getBiggestRectangleArea","ranges","sort","compareRangeOrder","allIndexesSorted","indexA","indexB","_areIndexesInSameSection","headingSectionSize","firstCellIsInHeading","lastCellIsInHeading","tableCellToInsert","floor","headingsRemoved","newRows","lastRowOfCell","isCellStickingOutFromRemovedRows","rowspanInRemovedSection","rowSpanToSet","isCellOverlappingRemovedRows","targetRowIndex","tableRowMap","previousCell","cellToMove","targetPosition","rangeA","rangeB","posA","posB","rowsIndexes","values","MergeCellsCommand","firstTableCell","shift","mergeWidth","mergeHeight","getMergeDimensions","cellBeingMerged","targetCell","maxWidthOffset","maxHeightOffset","getMaxOffset","firstCellRow","firstCellColumn","currentMaxOffset","which","dimensionValue","SelectRowCommand","affectsData","rangesToSelect","SelectColumnCommand","startLocation","endLocation","cellInfo","injectTableLayoutPostFixer","registerPostFixer","tableLayoutPostFixer","changes","wasFixed","analyzedTables","isTableAttributeEntry","fixTableCellsRowspan","fixTableRowsSizes","findCellsToTrim","childrenLengths","getChildrenLengths","entries","splice","rowsLengths","tableSize","isValid","maxColumns","prev","current","maxRows","count","isInHeader","rowLimit","lengths","injectTableCellParagraphPostFixer","tableCellContentsPostFixer","fixTable","fixTableRow","fixTableCellContent","checkTableCellChange","textNodes","wrap","tableHeadingsRefreshHandler","isRowChange","expectedElementName","reconvertItem","tableCellRefreshHandler","cellsToCheck","paragraphsToRefresh","shouldRefresh","TableEditing","_additionalSlots","requires","register","inheritAllFrom","allowIn","isLimit","allowContentOf","isSelectable","elementToStructure","elementToElement","converterPriority","upcastCellSpan","define","commands","listenTo","registerAdditionalSlot","slotHandler","InsertTableView","View","items","keystrokes","focusTracker","locale","bind","bindTemplate","_createGridCollection","KeystrokeHandler","FocusTracker","to","setTemplate","tag","text","mousedown","preventDefault","click","fire","domEvt","target","dataset","focus","focusedElement","_highlightGridBoxes","render","addKeyboardHandlingForGrid","keystrokeHandler","gridItems","numberOfColumns","uiLanguageDirection","reset","focusLast","boxView","itemRow","itemColumn","isOn","_createGridButton","label","button","ButtonView","extendTemplate","boxes","createCollection","TableUI","t","contentLanguageDirection","isContentLtr","ui","componentFactory","command","dropdownView","createDropdown","buttonView","icon","IconTable","tooltip","insertTableView","panelView","delegate","menuView","MenuBarMenuView","event","isOpen","commandName","bindIsOn","_prepareDropdown","IconTableColumn","IconTableRow","_prepareMergeSplitButtonDropdown","IconTableMergeCell","_fillDropdownWithListOptions","toMany","areEnabled","source","SwitchButtonView","SplitButtonView","mergeCommandName","mergeCommand","itemDefinitions","Collection","option","addListOption","addListToDropdown","UIModel","withText","TableSelection","args","_handleDeleteContent","_handleInsertTextEvent","_defineSelectionConverter","_enablePluginDisabling","getSelectionAsFragment","documentFragment","createDocumentFragment","adjustedLastRow","adjustedLastColumn","setCellSelection","anchorCell","cellsToSelect","_getCellsToSelect","backward","getFocusCell","focusCellRange","getAnchorCell","anchorCellRange","highlighted","viewWriter","clearHighlightedTableCells","addClass","lastViewCell","previouslyHighlighted","removeClass","clear","getNearestSelectionRange","isBackward","tableCellToSelect","deleteContent","createSelection","rangeToSelect","setTo","viewRanges","endColumnExtraColspan","selectionMap","walkerOptions","flipVertically","flipHorizontally","flat","TableClipboard","ClipboardMarkersUtils","ClipboardPipeline","viewDocument","_onCopyCut","_listenToContentInsertion","clipboardPipeline","tableSelection","isPaste","method","content","selectable","_onInsertContent","clipboardMarkersUtils","canEditAt","enqueueChange","isUndoable","_copySelectedFragmentWithMarkers","dataTransfer","toView","pastedTable","getTableIfOnlyTableInContent","_pasteMarkersIntoTransformedElement","markers","_replaceSelectedCells","pastedDimensions","height","prepareTableForPasting","selectionHeight","selectionWidth","selectedTable","_replaceSelectedCellsWithPasted","selectionRanges","pastedWidth","pastedHeight","pastedTableLocationMap","createLocationMap","selectedTableMap","pastedRow","pastedColumn","pastedCell","cellToInsert","newTableCell","_replaceTableSlotCell","areHeadingRowsIntersectingSelection","areHeadingColumnsIntersectingSelection","columnsLimit","newCells","doHorizontalSplit","rowsLimit","doVerticalSplit","contentRange","rangeBefore","createRange","createPositionBefore","hasContent","ignoreWhitespaces","rangeAfter","end","shouldExpandSelection","expandTableSize","splitCellsToRectangularSelection","expectedHeight","expectedWidth","tableWidth","tableHeight","limitColumns","isAffectedBySelection","limitRows","limit","endIndex","isInsideSelection","overlapsSelectionFromOutside","TableKeyboard","_onArrowKey","context","_handleTabOnSelectedTable","_handleTab","accessibility","addKeystrokeInfoGroup","id","keystroke","bubblingEventInfo","domEventData","stopPropagation","isForward","shiftKey","currentRowIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","isLastRow","nextRow","previousRow","eventInfo","keyCode","getLocalizedArrowKeyCodeDirection","wasHandled","_handleArrowKeys","expandSelection","focusCell","_navigateFromCellInDirection","isCollapsed","containsEntireContent","isObject","_isSelectionAtCellEdge","getLastPosition","getLimitElement","boundaryPosition","isTouching","probe","modifySelection","isEqual","currentCellInfo","isOutsideVertically","isBeforeFirstCell","isAfterLastCell","cellToSelect","positionToSelect","MouseEventsObserver","DomEventObserver","domEventType","onDomEvent","domEvent","TableMouse","addObserver","_enableShiftClickSelection","_enableMouseDragSelection","blockSelectionChange","_getModelTableCellFromDomEvent","haveSameTableParent","beganCellSelection","ctrlKey","altKey","buttons","newTargetCell","viewTargetElement","viewPosition","modelPosition","toModelPosition","cellA","cellB","Table","Widget","PlainTableOutput","downcastTableElement","downcastTableBorderAndBackgroundAttributes","headRowsSlot","bodyRowsSlot","childrenSlot","theadElement","tbodyElement","tableContentElements","Object","getSelectionAffectedTableWidget","getSelectedTableWidget","getTableWidgetAncestor","isTableWidget","selectionPosition","getCustomProperty","isWidget","TableToolbar","WidgetToolbarRepository","afterInit","widgetToolbarRepository","tableContentToolbarItems","tableToolbarItems","ariaLabel","getRelatedElement","ColorInputView","focusCycler","_focusables","inputView","_stillTyping","ViewCollection","_createDropdownView","_createInputTextView","FocusCycler","focusables","actions","focusPrevious","focusNext","inputValue","_setInputValue","focusFirst","destroy","colorSelector","_createColorSelector","dropdown","colorPreview","backgroundColor","if","panelPosition","isVisible","updateSelectedColors","showColorGridsFragment","InputTextView","blur","mappedColor","colorDefinitions","def","defaultColor","defaultColorValue","removeColorButtonLabel","ColorSelectorView","colors","removeButtonLabel","colorPickerLabel","colorPickerViewConfig","colorPickerConfig","hideInput","appendUI","backupColor","colorGridsFragmentView","colorPickerButtonView","normalizedInputValue","normalizeColor","colorString","val","getBorderStyleLabels","none","solid","dotted","dashed","double","groove","ridge","inset","outset","getLocalizedColorErrorText","getLocalizedLengthErrorText","colorFieldValidator","trim","toLowerCase","isColorStyleValue","lengthFieldValidator","isNumberString","isLengthStyleValue","isPercentageStyleValue","lineWidthFieldValidator","getBorderStyleDefinitions","defaultStyle","styleLabels","definition","_borderStyleValue","role","fillToolbar","icons","toolbar","labels","propertyName","nameToValue","isToggleable","buttonValue","valueToCompare","defaultColors","hasBorder","getLabeledColorInputCreator","labeledFieldView","viewUid","statusUid","colorInputView","colorConfigToColorGridDefinitions","colorConfig","ariaDescribedById","errorText","parsedValue","String","TableCellPropertiesView","borderStyleDropdown","borderWidthInput","borderColorInput","backgroundInput","paddingInput","widthInput","heightInput","horizontalAlignmentToolbar","verticalAlignmentToolbar","saveButtonView","cancelButtonView","_focusCycler","borderStyle","borderColor","padding","horizontalAlignment","verticalAlignment","borderRowLabel","_createBorderFields","backgroundRowLabel","_createBackgroundFields","operatorLabel","dimensionsLabel","_createDimensionFields","alignmentLabel","_createAlignmentFields","_createPaddingField","_createActionButtons","FormHeaderView","FormRowView","labelView","tabindex","submitHandler","chain","fieldView","defaultTableCellProperties","colorInputCreator","borderColors","accessibleLabel","LabelView","LabeledFieldView","createLabeledDropdown","ariaLabelledBy","createLabeledInputText","isBorderStyleSet","newValue","oldValue","backgroundColors","ALIGNMENT_ICONS","left","IconAlignLeft","center","IconAlignCenter","right","IconAlignRight","justify","IconAlignJustify","IconAlignTop","middle","IconAlignMiddle","bottom","IconAlignBottom","ToolbarView","isContentRTL","isCompact","_horizontalAlignmentLabels","_verticalAlignmentLabels","fieldsThatShouldValidateToSave","IconCheck","errorTexts","IconCancel","BALLOON_POSITIONS","BalloonPanelView","defaultPositions","northArrowSouth","northArrowSouthWest","northArrowSouthEast","southArrowNorth","southArrowNorthWest","southArrowNorthEast","viewportStickyNorth","repositionContextualBalloon","balloon","getBalloonCellPositionData","getBalloonTablePositionData","updatePosition","positions","rangeCount","createBoundingRect","modelTableCell","getTableCellAtPosition","viewTableCell","isTableCellSelected","rects","Rect","getBoundingRect","getSingleValue","objectOrString","addDefaultUnitToNumericValue","defaultUnit","numericValue","getNormalizedDefaultProperties","normalizedConfig","includeAlignmentProperty","alignment","includePaddingProperty","includeVerticalAlignmentProperty","includeHorizontalAlignmentProperty","isRightToLeftContent","getNormalizedDefaultTableProperties","getNormalizedDefaultCellProperties","ERROR_TEXT_TIMEOUT","propertyToCommandMap","TableCellPropertiesUI","_defaultContentTableCellProperties","_defaultLayoutTableCellProperties","_balloon","_viewWithContentTableDefaults","_viewWithLayoutTableDefaults","_undoStepBatch","_isReady","ContextualBalloon","IconTableCellProperties","_showView","isCommandEnabled","_createPropertiesView","borderColorsConfig","normalizeColorOptions","localizedBorderColors","getLocalizedColorOptions","backgroundColorsConfig","localizedBackgroundColors","hasColorPicker","colorPicker","_hideView","operations","cancel","clickOutsideHandler","emitter","activator","_isViewInBalloon","contextElements","callback","colorErrorText","lengthErrorText","_getPropertyChangeCallback","_getValidatedPropertyChangeCallback","viewField","validator","_fillViewFormFromCommandValues","borderStyleCommand","property","propertyKey","toModelElement","useDefaults","_updateView","createBatch","stopListening","_isViewVisible","visibleView","hasView","batch","setErrorTextDebounced","debounce","TableCellPropertyCommand","_defaultValue","_defaultContentTableValue","_defaultLayoutTableValue","_getSingleValue","valueToSet","_getValueToSet","_getAttribute","firstCellValue","everyCellHasAttribute","TableCellWidthCommand","TableCellWidthEditing","TableCellPaddingCommand","TableCellHeightCommand","TableCellBackgroundColorCommand","TableCellVerticalAlignmentCommand","TableCellHorizontalAlignmentCommand","TableCellBorderStyleCommand","TableCellBorderColorCommand","TableCellBorderWidthCommand","VALIGN_VALUES_REG_EXP","ALIGN_VALUES_REG_EXP","TableCellPropertiesEditing","addStyleProcessorRules","addBorderStylesRules","enableBorderProperties","addPaddingStylesRules","addBackgroundStylesRules","enableHorizontalAlignmentProperty","enableVerticalAlignmentProperty","align","getStyle","valign","TableCellProperties","TableLayoutUI","IconTableLayout","insertTableLayoutView","DropdownButtonView","IconTableProperties","createTableTypeDropdown","tablePropertiesUI","baseButton","_createTablePropertiesButton","splitButtonView","dropdownButton","tableTypeCommand","itemsDefinitions","createTableLayoutTypeDropdownItems","tableType","createTableTypeDropdownItem","InsertTableLayoutCommand","normalizedOptions","singleColumnWidth","tableWidthsCommand","TableWidthsCommand","isArray","split","colGroupElement","upcastColgroupElement","tableUtilsPlugin","columnElements","columnsCount","_","downcastTableResizedClass","viewChild","upcastTableResizedClass","toPx","toUnit","TableColumnResizeEditing","_isResizingActive","_resizingData","_domEmitter","_tableUtilsPlugin","_initialMouseEventData","DomEmitterMixin","classAction","roots","getRoot","rootName","_extendSchema","_registerPostFixer","_registerConverters","_registerResizingListeners","_registerResizerInserter","columnResizePlugin","tableEditing","isEditorReadOnly","isPluginEnabled","isTableWidthsCommandCommandEnabled","changed","adjustColumnWidths","plugin","newTableColumnsCount","columnsCountDelta","cellSet","getAffectedCells","currentColumnsDelta","hasMoreColumns","currentColumnIndex","columnMinWidthAsPercentage","columnWidthsToInsert","removedColumnWidths","getAncestors","referenceNode","nodeBefore","viewColWidth","editingView","_onMouseOverHandler","_onMouseDownHandler","_onMouseOutHandler","throttle","_onMouseMoveHandler","_onMouseUpHandler","_recalculateResizerElement","viewResizer","domTable","rectTable","rectCell","targetTopPosition","toFixed","targetBottomPosition","_resetResizerStyles","hasClass","_isResizingAllowed","_startResizingAfterThreshold","columnWidthsInPx","_calculateDomColumnWidths","viewCol","_insertColgroupElement","_getResizingData","_applyResizingAttributesToTable","cellSlot","viewCell","domCellWidth","colgroup","viewColElement","columnWidthInPc","resizingData","figureInitialPcWidth","viewFigureWidth","viewFigureParentWidth","elements","mouseEventData","mouseEvent","distanceX","clientX","columnPosition","flags","isRightEdge","isTableCentered","isLtrContent","viewLeftColumn","viewRightColumn","leftColumnWidth","rightColumnWidth","dxLowerBound","dxUpperBound","dx","leftColumnWidthAsPercentage","tableWidthAsPercentage","rightColumnWidthAsPercentage","viewColgroup","viewColumns","columnWidthsAttributeOld","columnWidthsAttributeNew","isColumnWidthsAttributeChanged","tableWidthAttributeOld","tableWidthAttributeNew","isTableWidthAttributeChanged","matches","viewLeftCell","modelLeftCell","leftColumnIndex","lastColumnIndex","hasAttribute","createUIElement","TableColumnResize","TableTypeCommand","currentTableType","removeDisallowedAttributes","tableChildren","TABLE_TYPES","TableLayoutEditing","_defineSchema","_defineConverters","_defineClipboardPasteHandlers","_registerTableTypeAttributePostfixer","addChildCheck","layoutTableCheck","addAttributeCheck","preferredExternalTableType","upcastLayoutTable","dataDowncastLayoutTable","layout","sourceEditorId","hasChanged","resolvedTableType","resolveTableType","TableLayout","TablePropertyCommand","_getValue","TableBackgroundColorCommand","TableBorderColorCommand","TableBorderStyleCommand","TableBorderWidthCommand","TableWidthCommand","TableHeightCommand","TableAlignmentCommand","FLOAT_VALUES_REG_EXP","TablePropertiesEditing","defaultTableProperties","enableAlignmentProperty","enableTableToFigureProperty","float","TablePropertiesView","alignmentToolbar","backgroundInputCreator","IconObjectInlineLeft","IconObjectCenter","IconObjectInlineRight","_alignmentLabels","TablePropertiesUI","_defaultContentTableProperties","_defaultLayoutTableProperties","TableProperties","injectTableCaptionPostFixer","tableCaptionPostFixer","captionsToMerge","firstCaption","caption","isTable","getCaptionFromTableModelElement","tableModelElement","getCaptionFromModelSelection","matchTableCaptionViewElement","ToggleTableCaptionCommand","focusCaptionOnShow","_hideTableCaption","_showTableCaption","tableCaptionEditing","savedCaptionElement","_getSavedCaption","newCaptionElement","insertContent","captionElement","_saveCaption","TableCaptionEditing","_savedCaptionsMap","WeakMap","isRegistered","figcaptionElement","placeholder","enableViewPlaceholder","keepOnFocus","jsonObject","ModelElement","fromJSON","toJSON","TableCaptionUI","IconCaption","modelCaptionElement","scrollToTheSelection","TableCaption"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"debugId":null}}]
}