name: CI/CD - Build and Deploy to EC2

on:
  push:
    branches:
      - main  # Triggers on every push to the main branch

env:
  AWS_REGION: "ap-south-1"
  ECR_FRONTEND_REPO: "novelpedia-frontend" # Must match your ECR repo name
  ECR_BACKEND_REPO: "novelpedia-backend"   # Must match your ECR repo name

permissions:
  contents: read
  id-token: write # Required for assuming an IAM role

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # 1. CONFIGURE AWS AND LOGIN TO ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # Use a GitHub secret for the role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 2. BUILD AND PUSH DOCKER IMAGES
      - name: Build, Tag, and Push Frontend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }} \
            --build-arg NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=${{ secrets.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET }} \
            --build-arg CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} \
            --build-arg CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} \
            -t $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG \
            -f Dockerfile.frontend .
          
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG

      - name: Build, Tag, and Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Make sure this path matches your backend folder (e.g., 'backend/' or 'server/')
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG -f server/Dockerfile ./server
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG

      # 3. DEPLOY TO EC2 INSTANCE VIA SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3 # Using a specific version is more stable
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Set environment variables for docker-compose
            export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            export AWS_REGION=${{ env.AWS_REGION }}
            export FRONTEND_IMAGE
