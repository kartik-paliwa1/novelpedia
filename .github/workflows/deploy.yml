# .github/workflows/deploy.yml

name: CI/CD - Build and Deploy to EC2

on:
  push:
    branches:
      - main  # Triggers on every push to the main branch

env:
  AWS_REGION: "ap-south-1"
  ECR_FRONTEND_REPO: "novelpedia-frontend"
  ECR_BACKEND_REPO: "novelpedia-backend"

permissions:
  contents: read
  id-token: write # Required for assuming an IAM role

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ----------------------------------------------------------------
      # 1. CONFIGURE AWS AND LOGIN TO ECR
      # ----------------------------------------------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # Use a GitHub secret for the role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ----------------------------------------------------------------
      # 2. BUILD AND PUSH DOCKER IMAGES
      # ----------------------------------------------------------------
      - name: Build, Tag, and Push Frontend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG -f frontend/Dockerfile.frontend ./frontend
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG

      - name: Build, Tag, and Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG -f backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG

      # ----------------------------------------------------------------
      # 3. DEPLOY TO EC2 INSTANCE VIA SSH
      # ----------------------------------------------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to the app directory (create it if it doesn't exist)
            cd /home/${{ secrets.EC2_USERNAME }}/app || exit
            
            # Set image variables from the CI/CD environment
            export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            export AWS_REGION=${{ env.AWS_REGION }}
            export FRONTEND_IMAGE_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_FRONTEND_REPO }}:${{ github.sha }}
            export BACKEND_IMAGE_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_BACKEND_REPO }}:${{ github.sha }}

            # Log in to AWS ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            # Pull the latest images
            docker pull $FRONTEND_IMAGE_URL
            docker pull $BACKEND_IMAGE_URL
            
            # Stop and remove old containers, then start new ones with docker-compose
            docker-compose down
            docker-compose up -d

            # Clean up old, unused Docker images to save space
            docker image prune -af
