{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as jose from 'jose';\n\nexport async function middleware(req: NextRequest) {\n  const authHeader = req.headers.get('Authorization');\n  const token = authHeader?.split(' ')[1];\n\n  if (!token) {\n    return new NextResponse(\n      JSON.stringify({ success: false, message: 'Authentication failed: No token provided' }),\n      { status: 401, headers: { 'content-type': 'application/json' } }\n    );\n  }\n\n  try {\n    const secret = new TextEncoder().encode(process.env.JWT_SECRET || 'your-default-secret');\n    await jose.jwtVerify(token, secret);\n    return NextResponse.next();\n  } catch (error) {\n    return new NextResponse(\n      JSON.stringify({ success: false, message: 'Authentication failed: Invalid token' }),\n      { status: 401, headers: { 'content-type': 'application/json' } }\n    );\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all API routes except for the ones that start with:\n     * - api/auth\n     */\n    '/api/((?!auth).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe,WAAW,GAAgB;IAC/C,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;IACnC,MAAM,QAAQ,YAAY,MAAM,IAAI,CAAC,EAAE;IAEvC,IAAI,CAAC,OAAO;QACV,OAAO,IAAI,6LAAA,CAAA,eAAY,CACrB,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,SAAS;QAA2C,IACrF;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;IAEA,IAAI;QACF,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI;QAClE,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAc,AAAD,EAAE,OAAO;QAC5B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,6LAAA,CAAA,eAAY,CACrB,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,SAAS;QAAuC,IACjF;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;KAGC,GACD;KACD;AACH"}}]
}