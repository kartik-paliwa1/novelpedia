{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/matei/NovelPedia/App/src/app/signup/confirm/page.tsx"],"sourcesContent":["'use client';\n\nimport { confirmSignUp } from 'aws-amplify/auth';\nimport { useState } from 'react';\n\nexport default function ConfirmPage() {\n  const [email, setEmail] = useState('');\n  const [code, setCode] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleConfirm = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await confirmSignUp({ username: email, confirmationCode: code });\n      alert('Account confirmed! Please log in.');\n      window.location.href = '/signin';\n    } catch (error: any) {\n      console.error('Confirm error:', error);\n      alert('Failed to confirm: ' + error.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <form onSubmit={handleConfirm} className=\"p-6 max-w-md mx-auto\">\n      <h2 className=\"text-lg font-bold mb-4\">Confirm your account</h2>\n      <input\n        className=\"w-full p-2 mb-2 border\"\n        type=\"email\"\n        placeholder=\"Email address\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        required\n      />\n      <input\n        className=\"w-full p-2 mb-4 border\"\n        type=\"text\"\n        placeholder=\"Confirmation code\"\n        value={code}\n        onChange={(e) => setCode(e.target.value)}\n        required\n      />\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full p-2 bg-purple-600 text-white rounded\"\n      >\n        {loading ? 'Confirming...' : 'Confirm Account'}\n      </button>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,gBAAgB,OAAO;QAC3B,EAAE,cAAc;QAChB,WAAW;QACX,IAAI;YACF,MAAM,CAAA,GAAA,yMAAA,CAAA,gBAAa,AAAD,EAAE;gBAAE,UAAU;gBAAO,kBAAkB;YAAK;YAC9D,MAAM;YACN,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,kBAAkB;YAChC,MAAM,wBAAwB,MAAM,OAAO;QAC7C;QACA,WAAW;IACb;IAEA,qBACE,8OAAC;QAAK,UAAU;QAAe,WAAU;;0BACvC,8OAAC;gBAAG,WAAU;0BAAyB;;;;;;0BACvC,8OAAC;gBACC,WAAU;gBACV,MAAK;gBACL,aAAY;gBACZ,OAAO;gBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;gBACxC,QAAQ;;;;;;0BAEV,8OAAC;gBACC,WAAU;gBACV,MAAK;gBACL,aAAY;gBACZ,OAAO;gBACP,UAAU,CAAC,IAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;gBACvC,QAAQ;;;;;;0BAEV,8OAAC;gBACC,MAAK;gBACL,UAAU;gBACV,WAAU;0BAET,UAAU,kBAAkB;;;;;;;;;;;;AAIrC","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/matei/NovelPedia/App/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"file":"validation.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/errors/types/validation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var AuthValidationErrorCode;\n(function (AuthValidationErrorCode) {\n    AuthValidationErrorCode[\"EmptySignInUsername\"] = \"EmptySignInUsername\";\n    AuthValidationErrorCode[\"EmptySignInPassword\"] = \"EmptySignInPassword\";\n    AuthValidationErrorCode[\"CustomAuthSignInPassword\"] = \"CustomAuthSignInPassword\";\n    AuthValidationErrorCode[\"EmptySignUpUsername\"] = \"EmptySignUpUsername\";\n    AuthValidationErrorCode[\"EmptySignUpPassword\"] = \"EmptySignUpPassword\";\n    AuthValidationErrorCode[\"EmptyConfirmSignUpUsername\"] = \"EmptyConfirmSignUpUsername\";\n    AuthValidationErrorCode[\"EmptyConfirmSignUpCode\"] = \"EmptyConfirmSignUpCode\";\n    AuthValidationErrorCode[\"EmptyResendSignUpCodeUsername\"] = \"EmptyresendSignUpCodeUsername\";\n    AuthValidationErrorCode[\"EmptyChallengeResponse\"] = \"EmptyChallengeResponse\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordUsername\"] = \"EmptyConfirmResetPasswordUsername\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordNewPassword\"] = \"EmptyConfirmResetPasswordNewPassword\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordConfirmationCode\"] = \"EmptyConfirmResetPasswordConfirmationCode\";\n    AuthValidationErrorCode[\"EmptyResetPasswordUsername\"] = \"EmptyResetPasswordUsername\";\n    AuthValidationErrorCode[\"EmptyVerifyTOTPSetupCode\"] = \"EmptyVerifyTOTPSetupCode\";\n    AuthValidationErrorCode[\"EmptyConfirmUserAttributeCode\"] = \"EmptyConfirmUserAttributeCode\";\n    AuthValidationErrorCode[\"IncorrectMFAMethod\"] = \"IncorrectMFAMethod\";\n    AuthValidationErrorCode[\"EmptyUpdatePassword\"] = \"EmptyUpdatePassword\";\n})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;AACU,IAAC;AACX,CAAC,SAAU,uBAAuB,EAAE;IAChC,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;IACtE,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;IACtE,uBAAuB,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;IAChF,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;IACtE,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;IACtE,uBAAuB,CAAC,4BAA4B,CAAC,GAAG,4BAA4B;IACpF,uBAAuB,CAAC,wBAAwB,CAAC,GAAG,wBAAwB;IAC5E,uBAAuB,CAAC,+BAA+B,CAAC,GAAG,+BAA+B;IAC1F,uBAAuB,CAAC,wBAAwB,CAAC,GAAG,wBAAwB;IAC5E,uBAAuB,CAAC,mCAAmC,CAAC,GAAG,mCAAmC;IAClG,uBAAuB,CAAC,sCAAsC,CAAC,GAAG,sCAAsC;IACxG,uBAAuB,CAAC,2CAA2C,CAAC,GAAG,2CAA2C;IAClH,uBAAuB,CAAC,4BAA4B,CAAC,GAAG,4BAA4B;IACpF,uBAAuB,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;IAChF,uBAAuB,CAAC,+BAA+B,CAAC,GAAG,+BAA+B;IAC1F,uBAAuB,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;IACpE,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;AAC1E,CAAC,EAAE,uBAAuB,IAAA,CAAK,uBAAuB,GAAG,CAAA,CAAE,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"file":"AuthErrorStrings.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/common/AuthErrorStrings.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthValidationErrorCode } from '../errors/types/validation';\nexport const validationErrorMap = {\n    [AuthValidationErrorCode.EmptyChallengeResponse]: {\n        message: 'challengeResponse is required to confirmSignIn',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordUsername]: {\n        message: 'username is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmSignUpCode]: {\n        message: 'code is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyConfirmSignUpUsername]: {\n        message: 'username is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode]: {\n        message: 'confirmationCode is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword]: {\n        message: 'newPassword is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyResendSignUpCodeUsername]: {\n        message: 'username is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyResetPasswordUsername]: {\n        message: 'username is required to resetPassword',\n    },\n    [AuthValidationErrorCode.EmptySignInPassword]: {\n        message: 'password is required to signIn',\n    },\n    [AuthValidationErrorCode.EmptySignInUsername]: {\n        message: 'username is required to signIn',\n    },\n    [AuthValidationErrorCode.EmptySignUpPassword]: {\n        message: 'password is required to signUp',\n    },\n    [AuthValidationErrorCode.EmptySignUpUsername]: {\n        message: 'username is required to signUp',\n    },\n    [AuthValidationErrorCode.CustomAuthSignInPassword]: {\n        message: 'A password is not needed when signing in with CUSTOM_WITHOUT_SRP',\n        recoverySuggestion: 'Do not include a password in your signIn call.',\n    },\n    [AuthValidationErrorCode.IncorrectMFAMethod]: {\n        message: 'Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL',\n        recoverySuggestion: 'Try to pass SMS, TOTP, or EMAIL as the challengeResponse',\n    },\n    [AuthValidationErrorCode.EmptyVerifyTOTPSetupCode]: {\n        message: 'code is required to verifyTotpSetup',\n    },\n    [AuthValidationErrorCode.EmptyUpdatePassword]: {\n        message: 'oldPassword and newPassword are required to changePassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmUserAttributeCode]: {\n        message: 'confirmation code is required to confirmUserAttribute',\n    },\n};\n// TODO: delete this code when the Auth class is removed.\nexport var AuthErrorStrings;\n(function (AuthErrorStrings) {\n    AuthErrorStrings[\"DEFAULT_MSG\"] = \"Authentication Error\";\n    AuthErrorStrings[\"EMPTY_EMAIL\"] = \"Email cannot be empty\";\n    AuthErrorStrings[\"EMPTY_PHONE\"] = \"Phone number cannot be empty\";\n    AuthErrorStrings[\"EMPTY_USERNAME\"] = \"Username cannot be empty\";\n    AuthErrorStrings[\"INVALID_USERNAME\"] = \"The username should either be a string or one of the sign in types\";\n    AuthErrorStrings[\"EMPTY_PASSWORD\"] = \"Password cannot be empty\";\n    AuthErrorStrings[\"EMPTY_CODE\"] = \"Confirmation code cannot be empty\";\n    AuthErrorStrings[\"SIGN_UP_ERROR\"] = \"Error creating account\";\n    AuthErrorStrings[\"NO_MFA\"] = \"No valid MFA method provided\";\n    AuthErrorStrings[\"INVALID_MFA\"] = \"Invalid MFA type\";\n    AuthErrorStrings[\"EMPTY_CHALLENGE\"] = \"Challenge response cannot be empty\";\n    AuthErrorStrings[\"NO_USER_SESSION\"] = \"Failed to get the session because the user is empty\";\n    AuthErrorStrings[\"NETWORK_ERROR\"] = \"Network Error\";\n    AuthErrorStrings[\"DEVICE_CONFIG\"] = \"Device tracking has not been configured in this User Pool\";\n    AuthErrorStrings[\"AUTOSIGNIN_ERROR\"] = \"Please use your credentials to sign in\";\n    AuthErrorStrings[\"OAUTH_ERROR\"] = \"Couldn't finish OAuth flow, check your User Pool HostedUI settings\";\n})(AuthErrorStrings || (AuthErrorStrings = {}));\nexport var AuthErrorCodes;\n(function (AuthErrorCodes) {\n    AuthErrorCodes[\"SignInException\"] = \"SignInException\";\n    AuthErrorCodes[\"OAuthSignInError\"] = \"OAuthSignInException\";\n})(AuthErrorCodes || (AuthErrorCodes = {}));\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"file":"assertValidationError.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/errors/utils/assertValidationError.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { validationErrorMap } from '../../common/AuthErrorStrings';\nimport { AuthError } from '../AuthError';\nexport function assertValidationError(assertion, name) {\n    const { message, recoverySuggestion } = validationErrorMap[name];\n    if (!assertion) {\n        throw new AuthError({ name, message, recoverySuggestion });\n    }\n}\n"],"names":[],"mappings":";;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGO,SAAS,qBAAqB,CAAC,SAAS,EAAE,IAAI,EAAE;IACnD,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE,0LAAG,qBAAkB,CAAC,IAAI,CAAC;IAChE,IAAI,CAAC,SAAS,EAAE;QACZ,MAAM,oLAAI,YAAS,CAAC;YAAE,IAAI;YAAE,OAAO;YAAE,kBAAkB;QAAA,CAAE,CAAC;IAC9D;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"file":"getAuthUserAgentValue.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/utils/getAuthUserAgentValue.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Category, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nexport const getAuthUserAgentValue = (action, customUserAgentDetails) => getAmplifyUserAgent({\n    category: Category.Auth,\n    action,\n    ...customUserAgentDetails,\n});\n"],"names":[],"mappings":";;;;;;AAAA,qEAAA;AACA,sCAAA;AAEY,MAAC,qBAAqB,GAAG,CAAC,MAAM,EAAE,sBAAsB,qLAAK,sBAAA,AAAmB,EAAC;QACzF,QAAQ,gLAAE,WAAQ,CAAC,IAAI;QACvB,MAAM;QACN,GAAG,sBAAsB;IAC7B,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"file":"userContextData.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/providers/cognito/utils/userContextData.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function getUserContextData({ username, userPoolId, userPoolClientId, }) {\n    if (typeof window === 'undefined') {\n        return undefined;\n    }\n    const amazonCognitoAdvancedSecurityData = window\n        .AmazonCognitoAdvancedSecurityData;\n    if (typeof amazonCognitoAdvancedSecurityData === 'undefined') {\n        return undefined;\n    }\n    const advancedSecurityData = amazonCognitoAdvancedSecurityData.getData(username, userPoolId, userPoolClientId);\n    if (advancedSecurityData) {\n        const userContextData = {\n            EncodedData: advancedSecurityData,\n        };\n        return userContextData;\n    }\n    return {};\n}\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;AACO,SAAS,kBAAkB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,gBAAgB,EAAG,EAAE;IAC5E,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QAC/B,OAAO,SAAS;IACpB;IACA,MAAM,iCAAiC,GAAG,OACrC,iCAAiC;IACtC,IAAI,OAAO,iCAAiC,KAAK,WAAW,EAAE;QAC1D,OAAO,SAAS;IACpB;IACA,MAAM,oBAAoB,GAAG,iCAAiC,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,EAAE,gBAAgB,CAAC;IAC9G,IAAI,oBAAoB,EAAE;QACtB,MAAM,eAAe,GAAG;YACpB,WAAW,EAAE,oBAAoB;QAC7C,CAAS;QACD,OAAO,eAAe;IAC1B;IACA,OAAO,CAAA,CAAE;AACb","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"file":"createConfirmSignUpClient.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nexport const createConfirmSignUpClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmSignUp'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAKY,MAAC,yBAAyB,GAAG,CAAC,MAAM,4MAAK,oBAAA,AAAiB,0RAAC,iCAA8B,sRAAE,2BAAA,AAAwB,EAAC,eAAe,CAAC,wRAAE,6BAAA,AAA0B,EAAE,GAAE;QAC5K,iPAAG,oCAAiC;QACpC,GAAG,MAAM;IACb,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"file":"autoSignInStore.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/client/utils/store/autoSignInStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction defaultState() {\n    return {\n        active: false,\n    };\n}\nconst autoSignInReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_USERNAME':\n            return {\n                ...state,\n                username: action.value,\n            };\n        case 'SET_SESSION':\n            return {\n                ...state,\n                session: action.value,\n            };\n        case 'START':\n            return {\n                ...state,\n                active: true,\n            };\n        case 'RESET':\n            return defaultState();\n        default:\n            return state;\n    }\n};\nconst createAutoSignInStore = (reducer) => {\n    let currentState = reducer(defaultState(), { type: 'RESET' });\n    return {\n        getState: () => currentState,\n        dispatch: action => {\n            currentState = reducer(currentState, action);\n        },\n    };\n};\nexport const autoSignInStore = createAutoSignInStore(autoSignInReducer);\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;AACA,SAAS,YAAY,GAAG;IACpB,OAAO;QACH,MAAM,EAAE,KAAK;IACrB,CAAK;AACL;AACA,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,MAAM,KAAK;IACzC,OAAQ,MAAM,CAAC,IAAI;QACf,KAAK,cAAc;YACf,OAAO;gBACH,GAAG,KAAK;gBACR,QAAQ,EAAE,MAAM,CAAC,KAAK;YACtC,CAAa;QACL,KAAK,aAAa;YACd,OAAO;gBACH,GAAG,KAAK;gBACR,OAAO,EAAE,MAAM,CAAC,KAAK;YACrC,CAAa;QACL,KAAK,OAAO;YACR,OAAO;gBACH,GAAG,KAAK;gBACR,MAAM,EAAE,IAAI;YAC5B,CAAa;QACL,KAAK,OAAO;YACR,OAAO,YAAY,EAAE;QACzB;YACI,OAAO,KAAK;IACxB;AACA,CAAC;AACD,MAAM,qBAAqB,GAAG,CAAC,OAAO,KAAK;IACvC,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,EAAE,EAAE;QAAE,IAAI,EAAE,OAAO;IAAA,CAAE,CAAC;IAC7D,OAAO;QACH,QAAQ,EAAE,IAAM,YAAY;QAC5B,QAAQ,GAAE,MAAM,IAAI;YAChB,YAAY,GAAG,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;QAChD,CAAC;IACT,CAAK;AACL,CAAC;AACW,MAAC,eAAe,GAAG,qBAAqB,CAAC,iBAAiB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"file":"autoSignIn.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/providers/cognito/apis/autoSignIn.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { AuthError } from '../../../errors/AuthError';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants';\nconst initialAutoSignIn = async () => {\n    throw new AuthError({\n        name: AUTO_SIGN_IN_EXCEPTION,\n        message: 'The autoSignIn flow has not started, or has been cancelled/completed.',\n        recoverySuggestion: 'Please try to use the signIn API or log out before starting a new autoSignIn flow.',\n    });\n};\n/**\n * Signs a user in automatically after finishing the sign-up process.\n *\n * This API will automatically sign a user in if the autoSignIn flow has been completed in the following cases:\n * - User confirmed their account with a verification code sent to their phone or email (default option).\n * - User confirmed their account with a verification link sent to their phone or email. In order to\n * enable this option you need to go to the Amazon Cognito [console](https://aws.amazon.com/pm/cognito),\n * look for your userpool, then go to the `Messaging` tab and enable `link` mode inside the `Verification message` option.\n * Finally you need to define the `signUpVerificationMethod` in your `Auth` config.\n *\n * @example\n * ```typescript\n *  Amplify.configure({\n *    Auth: {\n *     Cognito: {\n *    ...cognitoConfig,\n *    signUpVerificationMethod: \"link\" // the default value is \"code\"\n *   }\n *\t}});\n * ```\n *\n * @throws AutoSignInException - Thrown when the autoSignIn flow has not started, or has been cancelled/completed.\n * @returns The signInOutput.\n *\n * @example\n * ```typescript\n *  // handleSignUp.ts\n * async function handleSignUp(\n *   username:string,\n *   password:string\n * ){\n *   try {\n *     const { nextStep } = await signUp({\n *       username,\n *       password,\n *       options: {\n *         userAttributes:{ email:'email@email.com'},\n *         autoSignIn: true // This enables the auto sign-in flow.\n *       },\n *     });\n *\n *     handleSignUpStep(nextStep);\n *\n *   } catch (error) {\n *     console.log(error);\n *   }\n * }\n *\n * // handleConfirmSignUp.ts\n * async function handleConfirmSignUp(username:string, confirmationCode:string) {\n *   try {\n *     const { nextStep } = await confirmSignUp({\n *       username,\n *       confirmationCode,\n *     });\n *\n *     handleSignUpStep(nextStep);\n *   } catch (error) {\n *     console.log(error);\n *   }\n * }\n *\n * // signUpUtils.ts\n * async function handleSignUpStep( step: SignUpOutput[\"nextStep\"]) {\n * switch (step.signUpStep) {\n *   case \"CONFIRM_SIGN_UP\":\n *\n *    // Redirect end-user to confirm-sign up screen.\n *\n *   case \"COMPLETE_AUTO_SIGN_IN\":\n *\t   const codeDeliveryDetails = step.codeDeliveryDetails;\n *     if (codeDeliveryDetails) {\n *      // Redirect user to confirm-sign-up with link screen.\n *     }\n *     const signInOutput = await autoSignIn();\n *   // handle sign-in steps\n * }\n *\n * ```\n */\n// TODO(Eslint): can this be refactored not using `let` on exported member?\n// eslint-disable-next-line import/no-mutable-exports\nexport let autoSignIn = initialAutoSignIn;\n/**\n * Sets the context of autoSignIn at run time.\n * @internal\n */\nexport function setAutoSignIn(callback) {\n    autoSignIn = callback;\n}\n/**\n * Resets the context\n *\n * @internal\n */\nexport function resetAutoSignIn(resetCallback = true) {\n    if (resetCallback) {\n        autoSignIn = initialAutoSignIn;\n    }\n    autoSignInStore.dispatch({ type: 'RESET' });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAIA,MAAM,iBAAiB,GAAG,YAAY;IAClC,MAAM,oLAAI,YAAS,CAAC;QAChB,IAAI,kLAAE,yBAAsB;QAC5B,OAAO,EAAE,uEAAuE;QAChF,kBAAkB,EAAE,oFAAoF;IAChH,CAAK,CAAC;AACN,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+EA,GACA,2EAAA;AACA,qDAAA;AACU,IAAC,UAAU,GAAG;AACxB;;;CAGA,GACO,SAAS,aAAa,CAAC,QAAQ,EAAE;IACpC,UAAU,GAAG,QAAQ;AACzB;AACA;;;;CAIA,GACO,SAAS,eAAe,CAAC,aAAa,GAAG,IAAI,EAAE;IAClD,IAAI,aAAa,EAAE;QACf,UAAU,GAAG,iBAAiB;IAClC;4MACA,kBAAe,CAAC,QAAQ,CAAC;QAAE,IAAI,EAAE,OAAO;IAAA,CAAE,CAAC;AAC/C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"file":"confirmSignUp.mjs","sources":["file:///home/matei/NovelPedia/App/node_modules/%40aws-amplify/auth/src/providers/cognito/apis/confirmSignUp.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, HubInternal, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmSignUp(input) {\n    const { username, confirmationCode, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmSignUpClient = createConfirmSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp),\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    return new Promise((resolve, reject) => {\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE',\n                },\n            };\n            const autoSignInStoreState = autoSignInStore.getState();\n            if (!autoSignInStoreState.active ||\n                autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                resetAutoSignIn();\n                return;\n            }\n            autoSignInStore.dispatch({ type: 'SET_SESSION', value: session });\n            const stopListener = HubInternal.listen('auth-internal', ({ payload }) => {\n                switch (payload.event) {\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                            },\n                        });\n                        stopListener();\n                }\n            });\n            HubInternal.dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut,\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAYA;;;;;;;;;;CAUA,GACO,eAAe,aAAa,CAAC,KAAK,EAAE;IACvC,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,GAAG,KAAK;IACrD,MAAM,UAAU,oLAAG,UAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO;wMACpD,4BAAA,AAAyB,EAAC,UAAU,CAAC;IACrC,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,UAAU;IACrE,MAAM,cAAc,GAAG,OAAO,EAAE,cAAc;IAC9C,iOAAA,AAAqB,EAAC,CAAC,CAAC,QAAQ,4LAAE,0BAAuB,CAAC,0BAA0B,CAAC;6MACrF,wBAAA,AAAqB,EAAC,CAAC,CAAC,gBAAgB,EAAE,oNAAuB,CAAC,sBAAsB,CAAC;IACzF,MAAM,eAAe,oNAAG,qBAAA,AAAkB,EAAC;QACvC,QAAQ;QACR,UAAU;QACV,gBAAgB;IACxB,CAAK,CAAC;IACF,MAAM,mBAAmB,GAAG,8RAAA,AAAyB,EAAC;QAClD,gBAAgB,6OAAE,wCAAA,AAAqC,EAAC;YACpD,gBAAgB,EAAE,gBAAgB;QAC9C,CAAS,CAAC;IACV,CAAK,CAAC;IACF,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,mBAAmB,CAAC;QACnD,MAAM,yMAAE,0BAAA,AAAuB,EAAC,UAAU,CAAC,UAAU,CAAC;QACtD,cAAc,iMAAE,wBAAA,AAAqB,EAAC,2LAAU,CAAC,aAAa,CAAC;IACvE,CAAK,EAAE;QACC,QAAQ,EAAE,QAAQ;QAClB,gBAAgB,EAAE,gBAAgB;QAClC,cAAc,EAAE,cAAc;QAC9B,kBAAkB,EAAE,OAAO,EAAE,kBAAkB;QAC/C,QAAQ,EAAE,UAAU,CAAC,gBAAgB;QACrC,eAAe;IACvB,CAAK,CAAC;IACF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;QACpC,IAAI;YACA,MAAM,SAAS,GAAG;gBACd,gBAAgB,EAAE,IAAI;gBACtB,QAAQ,EAAE;oBACN,UAAU,EAAE,MAAM;gBACtC,CAAiB;YACjB,CAAa;YACD,MAAM,oBAAoB,GAAG,0NAAe,CAAC,QAAQ,EAAE;YACvD,IAAI,CAAC,oBAAoB,CAAC,MAAM,IAC5B,oBAAoB,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBAC5C,OAAO,CAAC,SAAS,CAAC;2NAClB,kBAAA,AAAe,EAAE;gBACjB;YACJ;oNACA,kBAAe,CAAC,QAAQ,CAAC;gBAAE,IAAI,EAAE,aAAa;gBAAE,KAAK,EAAE,OAAO;YAAA,CAAE,CAAC;YACjE,MAAM,YAAY,4KAAG,cAAW,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK;gBACtE,OAAQ,OAAO,CAAC,KAAK;oBACjB,KAAK,YAAY;wBACb,OAAO,CAAC;4BACJ,gBAAgB,EAAE,IAAI;4BACtB,QAAQ,EAAE;gCACN,UAAU,EAAE,uBAAuB;4BACnE,CAA6B;wBAC7B,CAAyB,CAAC;wBACF,YAAY,EAAE;gBACtC;YACY,CAAC,CAAC;qLACF,cAAW,CAAC,QAAQ,CAAC,eAAe,EAAE;gBAClC,KAAK,EAAE,eAAe;gBACtB,IAAI,EAAE,SAAS;YAC/B,CAAa,CAAC;QACN,EACA,OAAO,KAAK,EAAE;YACV,MAAM,CAAC,KAAK,CAAC;QACjB;IACJ,CAAC,CAAC;AACN","ignoreList":[0],"debugId":null}}]
}