generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  username          String             @unique
  passwordHashed    String
  role              Role               @default(READER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookmarks         Bookmark[]
  collections       Collection[]
  comments          Comment[]
  receivedFollows   Follow[]           @relation("FollowedByUser")
  sentFollows       Follow[]           @relation("UserFollows")
  moderationActions ModerationAction[]
  notifications     Notification[]
  novels            Novel[]
  profile           Profile?
  ratings           Rating[]
  readingHistory    ReadingHistory[]
  reviews           Review[]
}

model Profile {
  id                 String  @id @default(cuid())
  userId             String  @unique
  bio                String?
  avatarUrl          String?
  readingPreferences Json?
  user               User    @relation(fields: [userId], references: [id])
}

model Novel {
  id            String       @id @default(cuid())
  title         String
  authorId      String
  genre         String
  tags          String
  coverImageUrl String?
  synopsis      String
  status        NovelStatus  @default(DRAFT)
  trendingScore Float        @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  chapters      Chapter[]
  comments      Comment[]
  author        User         @relation(fields: [authorId], references: [id])
  ratings       Rating[]
  reviews       Review[]
  collections   Collection[] @relation("CollectionToNovel")
}

model Chapter {
  id             String           @id @default(cuid())
  novelId        String
  title          String
  content        String
  wordCount      Int
  order          Int              @default(0)
  status         ChapterStatus    @default(DRAFT)
  publishedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  bookmarks      Bookmark[]
  novel          Novel            @relation(fields: [novelId], references: [id])
  readingHistory ReadingHistory[]
}

model Comment {
  id        String    @id @default(cuid())
  userId    String
  novelId   String
  chapterId String?
  parentId  String?
  content   String
  isFlagged Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id])
  replies   Comment[] @relation("Replies")
  novel     Novel     @relation(fields: [novelId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  novelId   String
  title     String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  novel     Novel    @relation(fields: [novelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  novelId   String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  novel     Novel    @relation(fields: [novelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, novelId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  novels      Novel[]  @relation("CollectionToNovel")
}

model ReadingHistory {
  id         String   @id @default(cuid())
  userId     String
  chapterId  String
  progress   Float
  lastReadAt DateTime @default(now())
  chapter    Chapter  @relation(fields: [chapterId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, chapterId])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("FollowedByUser", fields: [followingId], references: [id])
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])

  @@id([followerId, followingId])
}

model Notification {
  id              String           @id @default(cuid())
  userId          String
  type            NotificationType
  relatedEntityId String
  isRead          Boolean          @default(false)
  createdAt       DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id])
}

model ModerationAction {
  id          String               @id @default(cuid())
  moderatorId String
  targetId    String
  action      ModerationActionType
  reason      String
  createdAt   DateTime             @default(now())
  moderator   User                 @relation(fields: [moderatorId], references: [id])
}

enum Role {
  GUEST
  READER
  WRITER
  MODERATOR
  ADMIN
}

enum NovelStatus {
  DRAFT
  PUBLISHED
  HIATUS
  COMPLETED
}

enum ChapterStatus {
  DRAFT
  PUBLISHED
}

enum NotificationType {
  NEW_CHAPTER
  NEW_COMMENT
  NEW_REVIEW
  NEW_FOLLOWER
  COMMENT_FLAGGED
}

enum ModerationActionType {
  WARN
  SUSPEND
  BAN
  DELETE_COMMENT
  DELETE_REVIEW
}
