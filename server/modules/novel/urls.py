# Welcome to the URL configuration for our 'novel' module!
# This is the roadmap for all the novel-related endpoints in our app.
# Let's see where each path takes us! üó∫Ô∏è

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (
    NovelViewSet,
    AuthorNovelViewSet,
    NovelImageUploadView,
    FeaturedNovelViewSet,
    AuthorNovelsListView,
    MyNovelsListView,
    BookmarkViewSet,
    TrendingNovelsView,
    LatestNovelsView,
    AuthorDashboardStatsView,
)
from modules.chapters.views import NovelChapterViewSet

# We're using a router to automatically generate the URLs for our viewsets.
# It's like a magical GPS for our API! üöó
router = DefaultRouter()
router.register(r'novels', NovelViewSet, basename='novel')
router.register(r'author/novels', AuthorNovelViewSet, basename='author-novel')
router.register(r'featured', FeaturedNovelViewSet, basename='featurednovel')
router.register(r'bookmarks', BookmarkViewSet, basename='bookmark')

# Here's our list of URL patterns for the 'novel' module.
urlpatterns = [
    # These endpoints handle trending and latest novels (must come before router URLs)
    path('trending/', TrendingNovelsView.as_view(), name='trending-novels'),
    path('novels/latest/', LatestNovelsView.as_view(), name='latest-novels'),
    path('dashboard/stats/', AuthorDashboardStatsView.as_view(), name='author-dashboard-stats'),
    
    # We're including all the URLs generated by our router.
    path('', include(router.urls)),

    # This is the endpoint for getting all the chapters of a novel.
    path('novels/<slug:novel_slug>/chapters/', NovelChapterViewSet.as_view({'get': 'list', 'post': 'create'}), name='novel-chapters'),

    # This is the endpoint for uploading a cover image for a novel.
    path('upload-image/', NovelImageUploadView.as_view(), name='novel-image-upload'),

    # Compatibility aliases to match frontend expectations
    path('novel/my-novels/', MyNovelsListView.as_view(), name='my-novels'),
    path('novel/novel-image-upload/', NovelImageUploadView.as_view(), name='novel-image-upload-compat'),

    # This is the endpoint for getting all the novels by a specific author.
    path('author/<int:author_id>/novels/', AuthorNovelsListView.as_view(), name='author-novels'),
]

# --- Frontend Pseudocode for Bookmarks ---
# This is just a little something to help our frontend friends out.
# It's a simple example of how to handle bookmarks in the browser's local storage.

# // Saving bookmarks
# function addBookmark(novelId) {
#   let bookmarks = JSON.parse(localStorage.getItem('bookmarks')) || [];
#   if (!bookmarks.includes(novelId)) {
#     bookmarks.push(novelId);
#     localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
#   }
# }

# // Getting bookmarks
# function getBookmarks() {
#   return JSON.parse(localStorage.getItem('bookmarks')) || [];
# }

# // Removing bookmarks
# function removeBookmark(novelId) {
#   let bookmarks = getBookmarks().filter(id => id !== novelId);
#   localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
# }

# And that's a wrap on our 'novel' URLs! They're all set to guide our users
# through the wonderful world of novels. Now, let's move on to the next module! üöÄ
