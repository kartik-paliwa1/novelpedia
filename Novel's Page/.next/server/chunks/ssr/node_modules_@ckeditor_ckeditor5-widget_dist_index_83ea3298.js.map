{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/dist/index.js","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/highlightstack.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/utils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgettypearound/utils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/verticalnavigation.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widget.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgettoolbarrepository.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize/sizeview.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize/resizer.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize.ts"],"sourcesContent":["import { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { MouseObserver, ModelTreeWalker } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { EmitterMixin, Rect, CKEditorError, toArray, isForwardArrowKeyCode, env, keyCodes, getLocalizedArrowKeyCodeDirection, getRangeFromMouseEvent, logWarning, ObservableMixin, compareArrays, global, DomEmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { IconDragHandle, IconReturnArrow } from '@ckeditor/ckeditor5-icons/dist/index.js';\nimport { IconView, Template, ContextualBalloon, ToolbarView, BalloonPanelView, View } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { throttle } from 'es-toolkit/compat';\n\n/**\n * Class used to handle the correct order of highlights on elements.\n *\n * When different highlights are applied to same element the correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~DowncastHighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */ class WidgetHighlightStack extends /* #__PURE__ */ EmitterMixin() {\n    _stack = [];\n    /**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t */ add(descriptor, writer) {\n        const stack = this._stack;\n        // Save top descriptor and insert new one. If top is changed - fire event.\n        const oldTop = stack[0];\n        this._insertDescriptor(descriptor);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param id Id of the descriptor to remove.\n\t */ remove(id, writer) {\n        const stack = this._stack;\n        const oldTop = stack[0];\n        this._removeDescriptor(id);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n\t * Inserts a given descriptor in correct place in the stack. It also takes care about updating information\n\t * when descriptor with same id is already present.\n\t */ _insertDescriptor(descriptor) {\n        const stack = this._stack;\n        const index = stack.findIndex((item)=>item.id === descriptor.id);\n        // Inserting exact same descriptor - do nothing.\n        if (compareDescriptors(descriptor, stack[index])) {\n            return;\n        }\n        // If descriptor with same id but with different information is on the stack - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n        // Find correct place to insert descriptor in the stack.\n        // It has different information (for example priority) so it must be re-inserted in correct place.\n        let i = 0;\n        while(stack[i] && shouldABeBeforeB(stack[i], descriptor)){\n            i++;\n        }\n        stack.splice(i, 0, descriptor);\n    }\n    /**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @param id Descriptor's id.\n\t */ _removeDescriptor(id) {\n        const stack = this._stack;\n        const index = stack.findIndex((item)=>item.id === id);\n        // If descriptor with same id is on the list - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n    }\n}\n/**\n * Compares two descriptors by checking their priority and class list.\n *\n * @returns Returns true if both descriptors are defined and have same priority and classes.\n */ function compareDescriptors(a, b) {\n    return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n}\n/**\n * Checks whenever first descriptor should be placed in the stack before second one.\n */ function shouldABeBeforeB(a, b) {\n    if (a.priority > b.priority) {\n        return true;\n    } else if (a.priority < b.priority) {\n        return false;\n    }\n    // When priorities are equal and names are different - use classes to compare.\n    return classesToString(a.classes) > classesToString(b.classes);\n}\n/**\n * Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~DowncastHighlightDescriptor} to\n * sorted string.\n */ function classesToString(classes) {\n    return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n\n/**\n * CSS class added to each widget element.\n */ const WIDGET_CLASS_NAME = 'ck-widget';\n/**\n * CSS class added to currently selected widget element.\n */ const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n/**\n * Returns `true` if given {@link module:engine/view/node~ViewNode} is an {@link module:engine/view/element~ViewElement} and a widget.\n */ function isWidget(node) {\n    if (!node.is('element')) {\n        return false;\n    }\n    return !!node.getCustomProperty('widget');\n}\n/**\n * Converts the given {@link module:engine/view/element~ViewElement} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"false\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~ViewElement#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n * \t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param options.hasSelectionHandle If `true`, the widget will have a selection handle added.\n * @returns Returns the same element.\n */ function toWidget(element, writer, options = {}) {\n    if (!element.is('containerElement')) {\n        /**\n\t\t * The element passed to `toWidget()` must be a {@link module:engine/view/containerelement~ViewContainerElement}\n\t\t * instance.\n\t\t *\n\t\t * @error widget-to-widget-wrong-element-type\n\t\t * @param {any} element The view element passed to `toWidget()`.\n\t\t */ throw new CKEditorError('widget-to-widget-wrong-element-type', null, {\n            element\n        });\n    }\n    writer.setAttribute('contenteditable', 'false', element);\n    writer.addClass(WIDGET_CLASS_NAME, element);\n    writer.setCustomProperty('widget', true, element);\n    element.getFillerOffset = getFillerOffset;\n    writer.setCustomProperty('widgetLabel', [], element);\n    if (options.label) {\n        setLabel(element, options.label);\n    }\n    if (options.hasSelectionHandle) {\n        addSelectionHandle(element, writer);\n    }\n    setHighlightHandling(element, writer);\n    return element;\n}\n/**\n * Default handler for adding a highlight on a widget.\n * It adds CSS class and attributes basing on the given highlight descriptor.\n */ function addHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.addClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for(const key in descriptor.attributes){\n            writer.setAttribute(key, descriptor.attributes[key], element);\n        }\n    }\n}\n/**\n * Default handler for removing a highlight from a widget.\n * It removes CSS class and attributes basing on the given highlight descriptor.\n */ function removeHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.removeClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for(const key in descriptor.attributes){\n            writer.removeAttribute(key, element);\n        }\n    }\n}\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~WidgetHighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n */ function setHighlightHandling(element, writer, add = addHighlight, remove = removeHighlight) {\n    const stack = new WidgetHighlightStack();\n    stack.on('change:top', (evt, data)=>{\n        if (data.oldDescriptor) {\n            remove(element, data.oldDescriptor, data.writer);\n        }\n        if (data.newDescriptor) {\n            add(element, data.newDescriptor, data.writer);\n        }\n    });\n    const addHighlightCallback = (element, descriptor, writer)=>stack.add(descriptor, writer);\n    const removeHighlightCallback = (element, id, writer)=>stack.remove(id, writer);\n    writer.setCustomProperty('addHighlight', addHighlightCallback, element);\n    writer.setCustomProperty('removeHighlight', removeHighlightCallback, element);\n}\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n */ function setLabel(element, labelOrCreator) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    widgetLabel.push(labelOrCreator);\n}\n/**\n * Returns the label of the provided element.\n */ function getLabel(element) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    return widgetLabel.reduce((prev, current)=>{\n        if (typeof current === 'function') {\n            return prev ? prev + '. ' + current() : current();\n        } else {\n            return prev ? prev + '. ' + current : current;\n        }\n    }, '');\n}\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~ViewEditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when\n * {@link module:engine/view/editableelement~ViewEditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n * * implements the {@link ~setHighlightHandling view highlight on widget's editable}.\n * * sets the `role` attribute to `textbox` for accessibility purposes.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `editingDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n * \t\t\treturn toWidgetEditable( nested, writer, { label: 'label for editable' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Editable's label used by assistive technologies (e.g. screen readers).\n * @param options.withAriaRole Whether to add the role=\"textbox\" attribute on the editable. Defaults to `true`.\n * @returns Returns the same element that was provided in the `editable` parameter\n */ function toWidgetEditable(editable, writer, options = {}) {\n    writer.addClass([\n        'ck-editor__editable',\n        'ck-editor__nested-editable'\n    ], editable);\n    // Set role=\"textbox\" only if explicitly requested (defaults to true for backward compatibility).\n    if (options.withAriaRole !== false) {\n        writer.setAttribute('role', 'textbox', editable);\n    }\n    writer.setAttribute('tabindex', '-1', editable);\n    if (options.label) {\n        writer.setAttribute('aria-label', options.label, editable);\n    }\n    // Set initial contenteditable value.\n    writer.setAttribute('contenteditable', editable.isReadOnly ? 'false' : 'true', editable);\n    // Bind the contenteditable property to element#isReadOnly.\n    editable.on('change:isReadOnly', (evt, property, is)=>{\n        writer.setAttribute('contenteditable', is ? 'false' : 'true', editable);\n    });\n    editable.on('change:isFocused', (evt, property, is)=>{\n        if (is) {\n            writer.addClass('ck-editor__nested-editable_focused', editable);\n        } else {\n            writer.removeClass('ck-editor__nested-editable_focused', editable);\n        }\n    });\n    setHighlightHandling(editable, writer);\n    return editable;\n}\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @returns The optimal range.\n */ function findOptimalInsertionRange(selection, model) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement) {\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(selection);\n        // If the WidgetTypeAround \"fake caret\" is displayed, use its position for the insertion\n        // to provide the most predictable UX (https://github.com/ckeditor/ckeditor5/issues/7438).\n        if (typeAroundFakeCaretPosition) {\n            return model.createRange(model.createPositionAt(selectedElement, typeAroundFakeCaretPosition));\n        }\n    }\n    return model.schema.findOptimalInsertionRange(selection);\n}\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n * ```\n * // Model:\n * <placeholder type=\"name\"></placeholder>\n *\n * // View:\n * <span class=\"placeholder\">name</span>\n * ```\n *\n * In such case, view positions inside `<span>` cannot be correctly mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n * ```ts\n * editor.editing.mapper.on(\n * \t'viewToModelPosition',\n * \tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n * );\n * ```\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n * // Model:\n * <paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n * ```\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n * // Model:\n * <paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n * ```\n *\n * @param model Model instance on which the callback operates.\n * @param viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n */ function viewToModelPositionOutsideModelElement(model, viewElementMatcher) {\n    return (evt, data)=>{\n        const { mapper, viewPosition } = data;\n        const viewParent = mapper.findMappedViewAncestor(viewPosition);\n        if (!viewElementMatcher(viewParent)) {\n            return;\n        }\n        const modelParent = mapper.toModelElement(viewParent);\n        data.modelPosition = model.createPositionAt(modelParent, viewPosition.isAtStart ? 'before' : 'after');\n    };\n}\n/**\n * Default filler offset function applied to all widget elements.\n */ function getFillerOffset() {\n    return null;\n}\n/**\n * Adds a drag handle to the widget.\n */ function addSelectionHandle(widgetElement, writer) {\n    const selectionHandle = writer.createUIElement('div', {\n        class: 'ck ck-widget__selection-handle'\n    }, function(domDocument) {\n        const domElement = this.toDomElement(domDocument);\n        // Use the IconView from the ui library.\n        const icon = new IconView();\n        icon.set('content', IconDragHandle);\n        // Render the icon view right away to append its #element to the selectionHandle DOM element.\n        icon.render();\n        domElement.appendChild(icon.element);\n        return domElement;\n    });\n    // Append the selection handle into the widget wrapper.\n    writer.insert(writer.createPositionAt(widgetElement, 0), selectionHandle);\n    writer.addClass([\n        'ck-widget_with-selection-handle'\n    ], widgetElement);\n}\n/**\n * Starting from a DOM resize host element (an element that receives dimensions as a result of resizing),\n * this helper returns the width of the found ancestor element.\n *\n *\t* It searches up to 5 levels of ancestors only.\n *\n * @param domResizeHost Resize host DOM element that receives dimensions as a result of resizing.\n * @returns Width of ancestor element in pixels or 0 if no ancestor with a computed width has been found.\n */ function calculateResizeHostAncestorWidth(domResizeHost) {\n    const getElementComputedWidth = (element)=>{\n        const { width, paddingLeft, paddingRight } = element.ownerDocument.defaultView.getComputedStyle(element);\n        return parseFloat(width) - (parseFloat(paddingLeft) || 0) - (parseFloat(paddingRight) || 0);\n    };\n    const domResizeHostParent = domResizeHost.parentElement;\n    if (!domResizeHostParent) {\n        return 0;\n    }\n    // Need to use computed style as it properly excludes parent's paddings from the returned value.\n    let parentWidth = getElementComputedWidth(domResizeHostParent);\n    // Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n    // and try to get width from next ancestor.\n    // https://github.com/ckeditor/ckeditor5/issues/10776\n    const ancestorLevelLimit = 5;\n    let currentLevel = 0;\n    let checkedElement = domResizeHostParent;\n    while(isNaN(parentWidth)){\n        checkedElement = checkedElement.parentElement;\n        if (++currentLevel > ancestorLevelLimit) {\n            return 0;\n        }\n        parentWidth = getElementComputedWidth(checkedElement);\n    }\n    return parentWidth;\n}\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n *\n * @param domResizeHost Resize host DOM element.\n * @returns Percentage value between 0 and 100.\n */ function calculateResizeHostPercentageWidth(domResizeHost, resizeHostRect = new Rect(domResizeHost)) {\n    const parentWidth = calculateResizeHostAncestorWidth(domResizeHost);\n    if (!parentWidth) {\n        return 0;\n    }\n    return resizeHostRect.width / parentWidth * 100;\n}\n\n/**\n * The name of the type around model selection attribute responsible for\n * displaying a fake caret next to a selected widget.\n *\n * @internal\n */ const TYPE_AROUND_SELECTION_ATTRIBUTE = 'widget-type-around';\n/**\n * Checks if an element is a widget that qualifies to get the widget type around UI.\n */ function isTypeAroundWidget(viewElement, modelElement, schema) {\n    return !!viewElement && isWidget(viewElement) && !schema.isInline(modelElement);\n}\n/**\n * For the passed HTML element, this helper finds the closest widget type around button ancestor.\n *\n * @internal\n */ function getClosestTypeAroundDomButton(domElement) {\n    return domElement.closest('.ck-widget__type-around__button');\n}\n/**\n * For the passed widget type around button element, this helper determines at which position\n * the paragraph would be inserted into the content if, for instance, the button was\n * clicked by the user.\n *\n * @internal\n * @returns The position of the button.\n */ function getTypeAroundButtonPosition(domElement) {\n    return domElement.classList.contains('ck-widget__type-around__button_before') ? 'before' : 'after';\n}\n/**\n * For the passed HTML element, this helper returns the closest view widget ancestor.\n *\n * @internal\n */ function getClosestWidgetViewElement(domElement, domConverter) {\n    const widgetDomElement = domElement.closest('.ck-widget');\n    return domConverter.mapDomToView(widgetDomElement);\n}\n/**\n * For the passed selection instance, it returns the position of the fake caret displayed next to a widget.\n *\n * **Note**: If the fake caret is not currently displayed, `null` is returned.\n *\n * @internal\n * @returns The position of the fake caret or `null` when none is present.\n */ function getTypeAroundFakeCaretPosition(selection) {\n    return selection.getAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n}\n\nconst POSSIBLE_INSERTION_POSITIONS = [\n    'before',\n    'after'\n];\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString(IconReturnArrow, 'image/svg+xml').firstChild;\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n */ class WidgetTypeAround extends Plugin {\n    /**\n\t * A reference to the model widget element that has the fake caret active\n\t * on either side of it. It is later used to remove CSS classes associated with the fake caret\n\t * when the widget no longer needs it.\n\t */ _currentFakeCaretModelElement = null;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetTypeAround';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        // Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n        // and lines visually disappear. All the interactions are disabled in individual plugin methods.\n        this.on('change:isEnabled', (evt, data, isEnabled)=>{\n            editingView.change((writer)=>{\n                for (const root of editingView.document.roots){\n                    if (isEnabled) {\n                        writer.removeClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    } else {\n                        writer.addClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    }\n                }\n            });\n            if (!isEnabled) {\n                editor.model.change((writer)=>{\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        this._enableTypeAroundUIInjection();\n        this._enableInsertingParagraphsOnButtonClick();\n        this._enableInsertingParagraphsOnEnterKeypress();\n        this._enableInsertingParagraphsOnTypingKeystroke();\n        this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n        this._enableDeleteIntegration();\n        this._enableInsertContentIntegration();\n        this._enableInsertObjectIntegration();\n        this._enableDeleteContentIntegration();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._currentFakeCaretModelElement = null;\n    }\n    /**\n\t * Inserts a new paragraph next to a widget element with the selection anchored in it.\n\t *\n\t * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n\t * the viewport to the selection in the inserted paragraph.\n\t *\n\t * @param widgetModelElement The model widget element next to which a paragraph is inserted.\n\t * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n\t */ _insertParagraph(widgetModelElement, position) {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const attributesToCopy = editor.model.schema.getAttributesWithProperty(widgetModelElement, 'copyOnReplace', true);\n        editor.execute('insertParagraph', {\n            position: editor.model.createPositionAt(widgetModelElement, position),\n            attributes: attributesToCopy\n        });\n        editingView.focus();\n        editingView.scrollToTheSelection();\n    }\n    /**\n\t * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only\n\t * when the plugin {@link #isEnabled is enabled}.\n\t *\n\t * @param emitter The object that fires the event.\n\t * @param event The name of the event.\n\t * @param callback The function to be called on event.\n\t * @param options Additional options.\n\t */ _listenToIfEnabled(emitter, event, callback, options) {\n        this.listenTo(emitter, event, (...args)=>{\n            // Do not respond if the plugin is disabled.\n            if (this.isEnabled) {\n                callback(...args);\n            }\n        }, options);\n    }\n    /**\n\t * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n\t * does not expect a position. Instead, it performs the insertion next to a selected widget\n\t * according to the `widget-type-around` model selection attribute value (fake caret position).\n\t *\n\t * Because this method requires the `widget-type-around` attribute to be set,\n\t * the insertion can only happen when the widget's fake caret is active (e.g. activated\n\t * using the keyboard).\n\t *\n\t * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n\t */ _insertParagraphAccordingToFakeCaretPosition() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        if (!typeAroundFakeCaretPosition) {\n            return false;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( ..._buildLogMessage( this, 'WidgetTypeAround',\n        // @if CK_DEBUG_TYPING // \t\t'Fake caret -> insert paragraph',\n        // @if CK_DEBUG_TYPING // \t) );\n        // @if CK_DEBUG_TYPING // }\n        const selectedModelElement = modelSelection.getSelectedElement();\n        this._insertParagraph(selectedModelElement, typeAroundFakeCaretPosition);\n        return true;\n    }\n    /**\n\t * Creates a listener in the editing conversion pipeline that injects the widget type around\n\t * UI into every single widget instance created in the editor.\n\t *\n\t * The UI is delivered as a {@link module:engine/view/uielement~ViewUIElement}\n\t * wrapper which renders DOM buttons that users can use to insert paragraphs.\n\t */ _enableTypeAroundUIInjection() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.locale.t;\n        const buttonTitles = {\n            before: t('Insert paragraph before block'),\n            after: t('Insert paragraph after block')\n        };\n        editor.editing.downcastDispatcher.on('insert', (evt, data, conversionApi)=>{\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            if (!viewElement) {\n                return;\n            }\n            // Filter out non-widgets and inline widgets.\n            if (isTypeAroundWidget(viewElement, data.item, schema)) {\n                injectUIIntoWidget(conversionApi.writer, buttonTitles, viewElement);\n                const widgetLabel = viewElement.getCustomProperty('widgetLabel');\n                widgetLabel.push(()=>{\n                    return this.isEnabled ? t('Press Enter to type after or press Shift + Enter to type before the widget') : '';\n                });\n            }\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * Brings support for the fake caret that appears when either:\n\t *\n\t * * the selection moves to a widget from a position next to it using arrow keys,\n\t * * the arrow key is pressed when the widget is already selected.\n\t *\n\t * The fake caret lets the user know that they can start typing or just press\n\t * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n\t *\n\t * The fake caret disappears when the user changes the selection or the editor\n\t * gets blurred.\n\t *\n\t * The whole idea is as follows:\n\t *\n\t * 1. A user does one of the 2 scenarios described at the beginning.\n\t * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n\t * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n\t *    on which side of the widget it should appear.\n\t * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n\t *    fake caret on the view widget.\n\t * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n\t *    does the CSS class clean-up in the view.\n\t * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n\t *    attribute (the former also removes widget CSS classes).\n\t */ _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        // This is the main listener responsible for the fake caret.\n        // Note: The priority must precede the default Widget class keydown handler (\"high\").\n        this._listenToIfEnabled(editingView.document, 'arrowKey', (evt, domEventData)=>{\n            this._handleArrowKeyPress(evt, domEventData);\n        }, {\n            context: [\n                isWidget,\n                '$text'\n            ],\n            priority: 'high'\n        });\n        // This listener makes sure the widget type around selection attribute will be gone from the model\n        // selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n        // (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n        // let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n        this._listenToIfEnabled(modelSelection, 'change:range', (evt, data)=>{\n            // Do not reset the selection attribute when the change was indirect.\n            if (!data.directChange) {\n                return;\n            }\n            // Get rid of the widget type around attribute of the selection on every change:range.\n            // If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n            editor.model.change((writer)=>{\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // Get rid of the widget type around attribute of the selection on every document change\n        // that makes widget not selected any more (i.e. widget was removed).\n        this._listenToIfEnabled(model.document, 'change:data', ()=>{\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (selectedModelElement) {\n                const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n                if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                    return;\n                }\n            }\n            editor.model.change((writer)=>{\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // React to changes of the model selection attribute made by the arrow keys listener.\n        // If the block widget is selected and the attribute changes, downcast the attribute to special\n        // CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n        this._listenToIfEnabled(editor.editing.downcastDispatcher, 'selection', (evt, data, conversionApi)=>{\n            const writer = conversionApi.writer;\n            if (this._currentFakeCaretModelElement) {\n                const selectedViewElement = conversionApi.mapper.toViewElement(this._currentFakeCaretModelElement);\n                if (selectedViewElement) {\n                    // Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n                    writer.removeClass(POSSIBLE_INSERTION_POSITIONS.map(positionToWidgetCssClass), selectedViewElement);\n                    this._currentFakeCaretModelElement = null;\n                }\n            }\n            const selectedModelElement = data.selection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = conversionApi.mapper.toViewElement(selectedModelElement);\n            if (!isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(data.selection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            writer.addClass(positionToWidgetCssClass(typeAroundFakeCaretPosition), selectedViewElement);\n            // Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n            // selection changes\n            this._currentFakeCaretModelElement = selectedModelElement;\n        });\n        this._listenToIfEnabled(editor.ui.focusTracker, 'change:isFocused', (evt, name, isFocused)=>{\n            if (!isFocused) {\n                editor.model.change((writer)=>{\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        function positionToWidgetCssClass(position) {\n            return `ck-widget_type-around_show-fake-caret_${position}`;\n        }\n    }\n    /**\n\t * A listener executed on each \"keydown\" in the view document, a part of\n\t * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n\t *\n\t * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n\t * be deactivated).\n\t *\n\t * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n\t * in this listener, and stopping and preventing the event that would normally be handled by the widget\n\t * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n\t * includes inline widgets, which are ignored by the widget type around plugin).\n\t */ _handleArrowKeyPress(evt, domEventData) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        const keyCode = domEventData.keyCode;\n        const isForward = isForwardArrowKeyCode(keyCode, editor.locale.contentLanguageDirection);\n        const selectedViewElement = editingView.document.selection.getSelectedElement();\n        const selectedModelElement = editor.editing.mapper.toModelElement(selectedViewElement);\n        let shouldStopAndPreventDefault;\n        // Handle keyboard navigation when a type-around-compatible widget is currently selected.\n        if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget(isForward);\n        } else if (modelSelection.isCollapsed) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget(isForward);\n        } else if (!domEventData.shiftKey) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenNonCollapsedSelection(isForward);\n        }\n        if (shouldStopAndPreventDefault) {\n            domEventData.preventDefault();\n            evt.stop();\n        }\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n\t * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n\t * selection attribute and the direction of the pressed arrow key.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressOnSelectedWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        return model.change((writer)=>{\n            // If the fake caret is displayed...\n            if (typeAroundFakeCaretPosition) {\n                const isLeavingWidget = typeAroundFakeCaretPosition === (isForward ? 'after' : 'before');\n                // If the keyboard arrow works against the value of the selection attribute...\n                // then remove the selection attribute but prevent default DOM actions\n                // and do not let the Widget plugin listener move the selection. This brings\n                // the widget back to the state, for instance, like if was selected using the mouse.\n                //\n                // **Note**: If leaving the widget when the fake caret is active, then the default\n                // Widget handler will change the selection and, in turn, this will automatically discard\n                // the selection attribute.\n                if (!isLeavingWidget) {\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                    return true;\n                }\n            } else {\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n                return true;\n            }\n            return false;\n        });\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n\t * to one and upon the fake caret should become active for this widget upon arrow keypress\n\t * (AKA entering/selecting the widget).\n\t *\n\t * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n\t * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n\t * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressWhenSelectionNextToAWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const widgetPlugin = editor.plugins.get('Widget');\n        // This is the widget the selection is about to be set on.\n        const modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection(isForward);\n        const viewElementNextToSelection = editor.editing.mapper.toViewElement(modelElementNextToSelection);\n        if (isTypeAroundWidget(viewElementNextToSelection, modelElementNextToSelection, schema)) {\n            model.change((writer)=>{\n                widgetPlugin._setSelectionOverElement(modelElementNextToSelection);\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after');\n            });\n            // The change() block above does the same job as the Widget plugin. The event can\n            // be safely canceled.\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected (together with some other content)\n\t * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressWhenNonCollapsedSelection(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const mapper = editor.editing.mapper;\n        const modelSelection = model.document.selection;\n        const selectedModelNode = isForward ? modelSelection.getLastPosition().nodeBefore : modelSelection.getFirstPosition().nodeAfter;\n        const selectedViewNode = mapper.toViewElement(selectedModelNode);\n        // There is a widget at the collapse position so collapse the selection to the fake caret on it.\n        if (isTypeAroundWidget(selectedViewNode, selectedModelNode, schema)) {\n            model.change((writer)=>{\n                writer.setSelection(selectedModelNode, 'on');\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n            });\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Registers a `mousedown` listener for the view document which intercepts events\n\t * coming from the widget type around UI, which happens when a user clicks one of the buttons\n\t * that insert a paragraph next to a widget.\n\t */ _enableInsertingParagraphsOnButtonClick() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'mousedown', (evt, domEventData)=>{\n            const button = getClosestTypeAroundDomButton(domEventData.domTarget);\n            if (!button) {\n                return;\n            }\n            const buttonPosition = getTypeAroundButtonPosition(button);\n            const widgetViewElement = getClosestWidgetViewElement(button, editingView.domConverter);\n            const widgetModelElement = editor.editing.mapper.toModelElement(widgetViewElement);\n            this._insertParagraph(widgetModelElement, buttonPosition);\n            domEventData.preventDefault();\n            evt.stop();\n        });\n    }\n    /**\n\t * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n\t * near the widget when either:\n\t *\n\t * * The fake caret was first activated using the arrow keys,\n\t * * The entire widget is selected in the model.\n\t *\n\t * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n\t * attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n\t * was pressed or not.\n\t */ _enableInsertingParagraphsOnEnterKeypress() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'enter', (evt, domEventData)=>{\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const selectedModelElement = selection.getSelectedElement();\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            const schema = editor.model.schema;\n            let wasHandled;\n            // First check if the widget is selected and there's a type around selection attribute associated\n            // with the fake caret that would tell where to insert a new paragraph.\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                wasHandled = true;\n            } else if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                this._insertParagraph(selectedModelElement, domEventData.isSoft ? 'before' : 'after');\n                wasHandled = true;\n            }\n            if (wasHandled) {\n                domEventData.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: isWidget\n        });\n    }\n    /**\n\t * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n\t * to insert a paragraph next to a widget when the fake caret was activated using arrow\n\t * keys but it responds to typing instead of <kbd>Enter</kbd>.\n\t *\n\t * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`\n\t * model selection attribute as the user simply starts typing, which creates the impression that the fake caret\n\t * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n\t *\n\t * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n\t * and another one for actual typing. It is not a disaster but this may need to be fixed\n\t * sooner or later.\n\t */ _enableInsertingParagraphsOnTypingKeystroke() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        // Note: The priority must precede the default Input plugin insertText handler.\n        this._listenToIfEnabled(viewDocument, 'insertText', (evt, data)=>{\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                // The view selection in the event data contains the widget. If the new paragraph\n                // was inserted, modify the view selection passed along with the insertText event\n                // so the default event handler in the Input plugin starts typing inside the paragraph.\n                // Otherwise, the typing would be over the widget.\n                data.selection = viewDocument.selection;\n            }\n        }, {\n            priority: 'high'\n        });\n        if (env.isAndroid) {\n            // On Android with English keyboard, the composition starts just by putting caret\n            // at the word end or by selecting a table column. This is not a real composition started.\n            // Trigger delete content on first composition key pressed.\n            this._listenToIfEnabled(viewDocument, 'keydown', (evt, data)=>{\n                if (data.keyCode == 229) {\n                    this._insertParagraphAccordingToFakeCaretPosition();\n                }\n            });\n        } else {\n            // Note: The priority must precede the default Input plugin compositionstart handler (to call it before delete content).\n            this._listenToIfEnabled(viewDocument, 'compositionstart', ()=>{\n                this._insertParagraphAccordingToFakeCaretPosition();\n            }, {\n                priority: 'highest'\n            });\n        }\n    }\n    /**\n\t * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n\t * is pressed and the fake caret is currently active.\n\t *\n\t * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n\t * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n\t * before or after a widget (depending on the content surrounding the widget).\n\t */ _enableDeleteIntegration() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        const schema = model.schema;\n        this._listenToIfEnabled(editingView.document, 'delete', (evt, domEventData)=>{\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(model.document.selection);\n            // This listener handles only these cases when the fake caret is active.\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            const direction = domEventData.direction;\n            const selectedModelWidget = model.document.selection.getSelectedElement();\n            const isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n            const isDeleteForward = direction == 'forward';\n            const shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n            if (shouldDeleteEntireWidget) {\n                editor.execute('delete', {\n                    selection: model.createSelection(selectedModelWidget, 'on')\n                });\n            } else {\n                const range = schema.getNearestSelectionRange(model.createPositionAt(selectedModelWidget, typeAroundFakeCaretPosition), direction);\n                // If there is somewhere to move selection to, then there will be something to delete.\n                if (range) {\n                    // If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n                    if (!range.isCollapsed) {\n                        model.change((writer)=>{\n                            writer.setSelection(range);\n                            editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                        });\n                    } else {\n                        const probe = model.createSelection(range.start);\n                        model.modifySelection(probe, {\n                            direction\n                        });\n                        // If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n                        // If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n                        if (!probe.focus.isEqual(range.start)) {\n                            model.change((writer)=>{\n                                writer.setSelection(range);\n                                editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                            });\n                        } else {\n                            const deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor(schema, range.start.parent);\n                            model.deleteContent(model.createSelection(deepestEmptyRangeAncestor, 'on'), {\n                                doNotAutoparagraph: true\n                            });\n                        }\n                    }\n                }\n            }\n            // If some content was deleted, don't let the handler from the Widget plugin kick in.\n            // If nothing was deleted, then the default handler will have nothing to do anyway.\n            domEventData.preventDefault();\n            evt.stop();\n        }, {\n            context: isWidget\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n\t * content near a widget when the fake caret is first activated using the arrow keys.\n\t *\n\t * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */ _enableInsertContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertContent', (evt, [content, selectable])=>{\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            evt.stop();\n            return model.change((writer)=>{\n                const selectedElement = documentSelection.getSelectedElement();\n                const position = model.createPositionAt(selectedElement, typeAroundFakeCaretPosition);\n                const selection = writer.createSelection(position);\n                const result = model.insertContent(content, selection);\n                writer.setSelection(selection);\n                return result;\n            });\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the\n\t * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element\n\t * to reflect user's intent of desired insertion position.\n\t *\n\t * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */ _enableInsertObjectIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertObject', (evt, args)=>{\n            const [, selectable, options = {}] = args;\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            options.findOptimalPosition = typeAroundFakeCaretPosition;\n            args[3] = options;\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake\n\t * caret is active.\n\t *\n\t * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n\t * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,\n\t * plain text pasting.\n\t */ _enableDeleteContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'deleteContent', (evt, [selection])=>{\n            if (selection && !selection.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            // Disable removing the selection content while pasting plain text.\n            if (typeAroundFakeCaretPosition) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n}\n/**\n * Injects the type around UI into a view widget instance.\n */ function injectUIIntoWidget(viewWriter, buttonTitles, widgetViewElement) {\n    const typeAroundWrapper = viewWriter.createUIElement('div', {\n        class: 'ck ck-reset_all ck-widget__type-around'\n    }, function(domDocument) {\n        const wrapperDomElement = this.toDomElement(domDocument);\n        injectButtons(wrapperDomElement, buttonTitles);\n        injectFakeCaret(wrapperDomElement);\n        return wrapperDomElement;\n    });\n    // Inject the type around wrapper into the widget's wrapper.\n    viewWriter.insert(viewWriter.createPositionAt(widgetViewElement, 'end'), typeAroundWrapper);\n}\n/**\n * FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n * and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n * <svg> here.\n */ function injectButtons(wrapperDomElement, buttonTitles) {\n    for (const position of POSSIBLE_INSERTION_POSITIONS){\n        const buttonTemplate = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-widget__type-around__button',\n                    `ck-widget__type-around__button_${position}`\n                ],\n                title: buttonTitles[position],\n                'aria-hidden': 'true'\n            },\n            children: [\n                wrapperDomElement.ownerDocument.importNode(RETURN_ARROW_ICON_ELEMENT, true)\n            ]\n        });\n        wrapperDomElement.appendChild(buttonTemplate.render());\n    }\n}\nfunction injectFakeCaret(wrapperDomElement) {\n    const caretTemplate = new Template({\n        tag: 'div',\n        attributes: {\n            class: [\n                'ck',\n                'ck-widget__type-around__fake-caret'\n            ]\n        }\n    });\n    wrapperDomElement.appendChild(caretTemplate.render());\n}\n/**\n * Returns the ancestor of an element closest to the root which is empty. For instance,\n * for `<baz>`:\n *\n * ```\n * <foo>abc<bar><baz></baz></bar></foo>\n * ```\n *\n * it returns `<bar>`.\n */ function getDeepestEmptyElementAncestor(schema, element) {\n    let deepestEmptyAncestor = element;\n    for (const ancestor of element.getAncestors({\n        parentFirst: true\n    })){\n        if (ancestor.childCount > 1 || schema.isLimit(ancestor)) {\n            break;\n        }\n        deepestEmptyAncestor = ancestor;\n    }\n    return deepestEmptyAncestor;\n}\n\n/**\n * Returns 'keydown' handler for up/down arrow keys that modifies the caret movement if it's in a text line next to an object.\n *\n * @param editing The editing controller.\n */ function verticalWidgetNavigationHandler(editing) {\n    const model = editing.model;\n    return (evt, data)=>{\n        const arrowUpPressed = data.keyCode == keyCodes.arrowup;\n        const arrowDownPressed = data.keyCode == keyCodes.arrowdown;\n        const expandSelection = data.shiftKey;\n        const selection = model.document.selection;\n        if (!arrowUpPressed && !arrowDownPressed) {\n            return;\n        }\n        const isForward = arrowDownPressed;\n        // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n        // Selection for sure will not approach any object.\n        if (expandSelection && selectionWillShrink(selection, isForward)) {\n            return;\n        }\n        // Find a range between selection and closest limit element.\n        const range = findTextRangeFromSelection(editing, selection, isForward);\n        // There is no selection position inside the limit element.\n        if (!range) {\n            return;\n        }\n        // If already at the edge of a limit element.\n        if (range.isCollapsed) {\n            // A collapsed selection at limit edge - nothing more to do.\n            if (selection.isCollapsed) {\n                return;\n            } else if (expandSelection) {\n                return;\n            }\n        }\n        // If the range is a single line (there is no word wrapping) then move the selection to the position closest to the limit element.\n        //\n        // We can't move the selection directly to the isObject element (eg. table cell) because of dual position at the end/beginning\n        // of wrapped line (it's at the same time at the end of one line and at the start of the next line).\n        if (range.isCollapsed || isSingleLineRange(editing, range, isForward)) {\n            model.change((writer)=>{\n                const newPosition = isForward ? range.end : range.start;\n                if (expandSelection) {\n                    const newSelection = model.createSelection(selection.anchor);\n                    newSelection.setFocus(newPosition);\n                    writer.setSelection(newSelection);\n                } else {\n                    writer.setSelection(newPosition);\n                }\n            });\n            evt.stop();\n            data.preventDefault();\n            data.stopPropagation();\n        }\n    };\n}\n/**\n * Finds the range between selection and closest limit element (in the direction of navigation).\n * The position next to limit element is adjusted to the closest allowed `$text` position.\n *\n * Returns `null` if, according to the schema, the resulting range cannot contain a `$text` element.\n *\n * @param editing The editing controller.\n * @param selection The current selection.\n * @param isForward The expected navigation direction.\n */ function findTextRangeFromSelection(editing, selection, isForward) {\n    const model = editing.model;\n    if (isForward) {\n        const startPosition = selection.isCollapsed ? selection.focus : selection.getLastPosition();\n        const endPosition = getNearestNonInlineLimit(model, startPosition, 'forward');\n        // There is no limit element, browser should handle this.\n        if (!endPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const lastRangePosition = getNearestTextPosition(model.schema, range, 'backward');\n        if (lastRangePosition) {\n            return model.createRange(startPosition, lastRangePosition);\n        }\n        return null;\n    } else {\n        const endPosition = selection.isCollapsed ? selection.focus : selection.getFirstPosition();\n        const startPosition = getNearestNonInlineLimit(model, endPosition, 'backward');\n        // There is no limit element, browser should handle this.\n        if (!startPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const firstRangePosition = getNearestTextPosition(model.schema, range, 'forward');\n        if (firstRangePosition) {\n            return model.createRange(firstRangePosition, endPosition);\n        }\n        return null;\n    }\n}\n/**\n * Finds the limit element position that is closest to startPosition.\n *\n * @param direction Search direction.\n */ function getNearestNonInlineLimit(model, startPosition, direction) {\n    const schema = model.schema;\n    const range = model.createRangeIn(startPosition.root);\n    const walkerValueType = direction == 'forward' ? 'elementStart' : 'elementEnd';\n    for (const { previousPosition, item, type } of range.getWalker({\n        startPosition,\n        direction\n    })){\n        if (schema.isLimit(item) && !schema.isInline(item)) {\n            return previousPosition;\n        }\n        // Stop looking for isLimit element if the next element is a block element (it is for sure not single line).\n        if (type == walkerValueType && schema.isBlock(item)) {\n            return null;\n        }\n    }\n    return null;\n}\n/**\n * Basing on the provided range, finds the first or last (depending on `direction`) position inside the range\n * that can contain `$text` (according to schema).\n *\n * @param schema The schema.\n * @param range The range to find the position in.\n * @param direction Search direction.\n * @returns The nearest selection position.\n *\n */ function getNearestTextPosition(schema, range, direction) {\n    const position = direction == 'backward' ? range.end : range.start;\n    if (schema.checkChild(position, '$text')) {\n        return position;\n    }\n    for (const { nextPosition } of range.getWalker({\n        direction\n    })){\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n    return null;\n}\n/**\n * Checks if the DOM range corresponding to the provided model range renders as a single line by analyzing DOMRects\n * (verifying if they visually wrap content to the next line).\n *\n * @param editing The editing controller.\n * @param modelRange The current table cell content range.\n * @param isForward The expected navigation direction.\n */ function isSingleLineRange(editing, modelRange, isForward) {\n    const model = editing.model;\n    const domConverter = editing.view.domConverter;\n    // Wrapped lines contain exactly the same position at the end of current line\n    // and at the beginning of next line. That position's client rect is at the end\n    // of current line. In case of caret at first position of the last line that 'dual'\n    // position would be detected as it's not the last line.\n    if (isForward) {\n        const probe = model.createSelection(modelRange.start);\n        model.modifySelection(probe);\n        // If the new position is at the end of the container then we can't use this position\n        // because it would provide incorrect result for eg caption of image and selection\n        // just before end of it. Also in this case there is no \"dual\" position.\n        if (!probe.focus.isAtEnd && !modelRange.start.isEqual(probe.focus)) {\n            modelRange = model.createRange(probe.focus, modelRange.end);\n        }\n    }\n    const viewRange = editing.mapper.toViewRange(modelRange);\n    const domRange = domConverter.viewRangeToDom(viewRange);\n    const rects = Rect.getDomRangeRects(domRange);\n    let boundaryVerticalPosition;\n    for (const rect of rects){\n        if (boundaryVerticalPosition === undefined) {\n            boundaryVerticalPosition = Math.round(rect.bottom);\n            continue;\n        }\n        // Let's check if this rect is in new line.\n        if (Math.round(rect.top) >= boundaryVerticalPosition) {\n            return false;\n        }\n        boundaryVerticalPosition = Math.max(boundaryVerticalPosition, Math.round(rect.bottom));\n    }\n    return true;\n}\nfunction selectionWillShrink(selection, isForward) {\n    return !selection.isCollapsed && selection.isBackward == isForward;\n}\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~ViewSelection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n */ class Widget extends Plugin {\n    /**\n\t * Holds previously selected widgets.\n\t */ _previouslySelected = new Set();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Widget';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            WidgetTypeAround,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = editor.t;\n        // Model to view selection converter.\n        // Converts selection placed over widget element to fake selection.\n        //\n        // By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n        // child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n        // next to an inline widget: the view selection contains both the widget and the marker.\n        //\n        // This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n        // in these cases based on the model:\n        //\n        //\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n        //\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n        //\n        // Thanks to this:\n        //\n        // * fake selection can be set correctly,\n        // * any logic depending on (View)Selection#getSelectedElement() also works OK.\n        //\n        // See https://github.com/ckeditor/ckeditor5/issues/9524.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi)=>{\n            const viewWriter = conversionApi.writer;\n            const modelSelection = data.selection;\n            // The collapsed selection can't contain any widget.\n            if (modelSelection.isCollapsed) {\n                return;\n            }\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            if (!isWidget(selectedViewElement)) {\n                return;\n            }\n            if (!conversionApi.consumable.consume(modelSelection, 'selection')) {\n                return;\n            }\n            viewWriter.setSelection(viewWriter.createRangeOn(selectedViewElement), {\n                fake: true,\n                label: getLabel(selectedViewElement)\n            });\n        });\n        // Mark all widgets inside the selection with the css class.\n        // This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi)=>{\n            // Remove selected class from previously selected widgets.\n            this._clearPreviouslySelectedWidgets(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            const viewSelection = viewWriter.document.selection;\n            let lastMarked = null;\n            for (const range of viewSelection.getRanges()){\n                // Note: There could be multiple selected widgets in a range but no fake selection.\n                // All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n                for (const value of range){\n                    const node = value.item;\n                    // Do not mark nested widgets in selected one. See: #4594\n                    if (isWidget(node) && !isChild(node, lastMarked)) {\n                        viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n                        this._previouslySelected.add(node);\n                        lastMarked = node;\n                    }\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n        // If mouse down is pressed on widget - create selection over whole widget.\n        view.addObserver(MouseObserver);\n        this.listenTo(viewDocument, 'mousedown', (...args)=>this._onMousedown(...args));\n        // There are two keydown listeners working on different priorities. This allows other\n        // features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n        // and customize the behavior even further in different content/selection scenarios.\n        //\n        // * The first listener handles changing the selection on arrow key press\n        // if the widget is selected or if the selection is next to a widget and the widget\n        // should become selected upon the arrow key press.\n        //\n        // * The second (late) listener makes sure the default browser action on arrow key press is\n        // prevented when a widget is selected. This prevents the selection from being moved\n        // from a fake selection container.\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>{\n            this._handleSelectionChangeOnArrowKeyPress(...args);\n        }, {\n            context: [\n                isWidget,\n                '$text'\n            ]\n        });\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>{\n            this._preventDefaultOnArrowKeyPress(...args);\n        }, {\n            context: '$root'\n        });\n        this.listenTo(viewDocument, 'arrowKey', verticalWidgetNavigationHandler(this.editor.editing), {\n            context: '$text'\n        });\n        // Handle custom delete behaviour.\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            if (this._handleDelete(data.direction == 'forward')) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: '$root'\n        });\n        // Handle Tab key while a widget is selected.\n        this.listenTo(viewDocument, 'tab', (evt, data)=>{\n            // This event could be triggered from inside the widget, but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            if (data.shiftKey) {\n                return;\n            }\n            if (this._selectFirstNestedEditable()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: isWidget,\n            priority: 'low'\n        });\n        // Handle Shift+Tab key while caret inside a widget editable.\n        this.listenTo(viewDocument, 'tab', (evt, data)=>{\n            if (!data.shiftKey) {\n                return;\n            }\n            if (this._selectAncestorWidget()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            priority: 'low'\n        });\n        // Handle Esc key while inside a nested editable.\n        this.listenTo(viewDocument, 'keydown', (evt, data)=>{\n            if (data.keystroke != keyCodes.esc) {\n                return;\n            }\n            if (this._selectAncestorWidget()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            priority: 'low'\n        });\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'widget',\n            label: t('Keystrokes that can be used when a widget is selected (for example: image, table, etc.)'),\n            keystrokes: [\n                {\n                    label: t('Move focus from an editable area back to the parent widget'),\n                    keystroke: 'Esc'\n                },\n                {\n                    label: t('Insert a new paragraph directly after a widget'),\n                    keystroke: 'Enter'\n                },\n                {\n                    label: t('Insert a new paragraph directly before a widget'),\n                    keystroke: 'Shift+Enter'\n                },\n                {\n                    label: t('Move the caret to allow typing directly before a widget'),\n                    keystroke: [\n                        [\n                            'arrowup'\n                        ],\n                        [\n                            'arrowleft'\n                        ]\n                    ]\n                },\n                {\n                    label: t('Move the caret to allow typing directly after a widget'),\n                    keystroke: [\n                        [\n                            'arrowdown'\n                        ],\n                        [\n                            'arrowright'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:mousedown mousedown} events on widget elements.\n\t */ _onMousedown(eventInfo, domEventData) {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        let element = domEventData.target;\n        // Some of DOM elements have no view element representation so it may be null.\n        if (!element) {\n            return;\n        }\n        // If triple click should select entire paragraph.\n        if (domEventData.domEvent.detail >= 3) {\n            if (this._selectBlockContent(element)) {\n                domEventData.preventDefault();\n            }\n            return;\n        }\n        // If target is not a widget element - check if one of the ancestors is.\n        if (!isWidget(element)) {\n            const editableOrWidgetElement = findClosestEditableOrWidgetAncestor(element);\n            if (!editableOrWidgetElement) {\n                return;\n            }\n            if (isWidget(editableOrWidgetElement)) {\n                element = editableOrWidgetElement;\n            } else {\n                // Pick view range from the point where the mouse was clicked.\n                const clickTargetFromPoint = getElementFromMouseEvent(view, domEventData);\n                if (clickTargetFromPoint && isWidget(clickTargetFromPoint)) {\n                    element = clickTargetFromPoint;\n                } else {\n                    return;\n                }\n            }\n        }\n        // On Android selection would jump to the first table cell, on other devices\n        // we can't block it (and don't need to) because of drag and drop support.\n        if (env.isAndroid) {\n            domEventData.preventDefault();\n        }\n        // Focus editor if is not focused already.\n        if (!viewDocument.isFocused) {\n            view.focus();\n        }\n        // Create model selection over widget.\n        const modelElement = editor.editing.mapper.toModelElement(element);\n        this._setSelectionOverElement(modelElement);\n    }\n    /**\n\t * Selects entire block content, e.g. on triple click it selects entire paragraph.\n\t */ _selectBlockContent(element) {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const schema = model.schema;\n        const viewElement = mapper.findMappedViewAncestor(this.editor.editing.view.createPositionAt(element, 0));\n        const modelElement = findTextBlockAncestor(mapper.toModelElement(viewElement), model.schema);\n        if (!modelElement) {\n            return false;\n        }\n        model.change((writer)=>{\n            const nextTextBlock = !schema.isLimit(modelElement) ? findNextTextBlock(writer.createPositionAfter(modelElement), schema) : null;\n            const start = writer.createPositionAt(modelElement, 0);\n            const end = nextTextBlock ? writer.createPositionAt(nextTextBlock, 0) : writer.createPositionAt(modelElement, 'end');\n            writer.setSelection(writer.createRange(start, end));\n        });\n        return true;\n    }\n    /**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:keydown keydown} events and changes\n\t * the model selection when:\n\t *\n\t * * arrow key is pressed when the widget is selected,\n\t * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n\t *\n\t * See {@link #_preventDefaultOnArrowKeyPress}.\n\t */ _handleSelectionChangeOnArrowKeyPress(eventInfo, domEventData) {\n        const keyCode = domEventData.keyCode;\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        const objectElement = modelSelection.getSelectedElement();\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, this.editor.locale.contentLanguageDirection);\n        const isForward = direction == 'down' || direction == 'right';\n        const isVerticalNavigation = direction == 'up' || direction == 'down';\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            const position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n            const newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n            if (newRange) {\n                model.change((writer)=>{\n                    writer.setSelection(newRange);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Handle collapsing of the selection when there is any widget on the edge of selection.\n        // This is needed because browsers have problems with collapsing such selection.\n        if (!modelSelection.isCollapsed && !domEventData.shiftKey) {\n            const firstPosition = modelSelection.getFirstPosition();\n            const lastPosition = modelSelection.getLastPosition();\n            const firstSelectedNode = firstPosition.nodeAfter;\n            const lastSelectedNode = lastPosition.nodeBefore;\n            if (firstSelectedNode && schema.isObject(firstSelectedNode) || lastSelectedNode && schema.isObject(lastSelectedNode)) {\n                model.change((writer)=>{\n                    writer.setSelection(isForward ? lastPosition : firstPosition);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Return if not collapsed.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        // If selection is next to object element.\n        const objectElementNextToSelection = this._getObjectElementNextToSelection(isForward);\n        if (objectElementNextToSelection && schema.isObject(objectElementNextToSelection)) {\n            // Do not select an inline widget while handling up/down arrow.\n            if (schema.isInline(objectElementNextToSelection) && isVerticalNavigation) {\n                return;\n            }\n            this._setSelectionOverElement(objectElementNextToSelection);\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:keydown keydown} events and prevents\n\t * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n\t * container.\n\t *\n\t * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n\t */ _preventDefaultOnArrowKeyPress(eventInfo, domEventData) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const objectElement = model.document.selection.getSelectedElement();\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @param isForward Set to true if delete was performed in forward direction.\n\t * @returns Returns `true` if keys were handled correctly.\n\t */ _handleDelete(isForward) {\n        const modelDocument = this.editor.model.document;\n        const modelSelection = modelDocument.selection;\n        // Do nothing when the read only mode is enabled.\n        if (!this.editor.model.canEditAt(modelSelection)) {\n            return;\n        }\n        // Do nothing on non-collapsed selection.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        const objectElement = this._getObjectElementNextToSelection(isForward);\n        if (objectElement) {\n            this.editor.model.change((writer)=>{\n                let previousNode = modelSelection.anchor.parent;\n                // Remove previous element if empty.\n                while(previousNode.isEmpty){\n                    const nodeToRemove = previousNode;\n                    previousNode = nodeToRemove.parent;\n                    writer.remove(nodeToRemove);\n                }\n                this._setSelectionOverElement(objectElement);\n            });\n            return true;\n        }\n    }\n    /**\n\t * Sets {@link module:engine/model/selection~ModelSelection document's selection} over given element.\n\t *\n\t * @internal\n\t */ _setSelectionOverElement(element) {\n        this.editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeOn(element));\n        });\n    }\n    /**\n\t * Checks if {@link module:engine/model/element~ModelElement element} placed next to the current\n\t * {@link module:engine/model/selection~ModelSelection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~ModelSchema schema} as `object`.\n\t *\n\t * @internal\n\t * @param forward Direction of checking.\n\t */ _getObjectElementNextToSelection(forward) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n        // to its current state after undo.\n        const probe = model.createSelection(modelSelection);\n        model.modifySelection(probe, {\n            direction: forward ? 'forward' : 'backward'\n        });\n        // The selection didn't change so there is nothing there.\n        if (probe.isEqual(modelSelection)) {\n            return null;\n        }\n        const objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n        if (!!objectElement && schema.isObject(objectElement)) {\n            return objectElement;\n        }\n        return null;\n    }\n    /**\n\t * Removes CSS class from previously selected widgets.\n\t */ _clearPreviouslySelectedWidgets(writer) {\n        for (const widget of this._previouslySelected){\n            writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n        }\n        this._previouslySelected.clear();\n    }\n    /**\n\t * Moves the document selection into the first nested editable.\n\t */ _selectFirstNestedEditable() {\n        const editor = this.editor;\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        for (const item of viewDocument.selection.getFirstRange().getItems()){\n            if (item.is('editableElement')) {\n                const modelElement = editor.editing.mapper.toModelElement(item);\n                /* istanbul ignore next -- @preserve */ if (!modelElement) {\n                    continue;\n                }\n                const position = editor.model.createPositionAt(modelElement, 0);\n                const newRange = editor.model.schema.getNearestSelectionRange(position, 'forward');\n                editor.model.change((writer)=>{\n                    writer.setSelection(newRange);\n                });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Updates the document selection so that it selects first ancestor widget.\n\t */ _selectAncestorWidget() {\n        const editor = this.editor;\n        const mapper = editor.editing.mapper;\n        const selection = editor.editing.view.document.selection;\n        const positionParent = selection.getFirstPosition().parent;\n        const positionParentElement = positionParent.is('$text') ? positionParent.parent : positionParent;\n        const viewElement = positionParentElement.findAncestor(isWidget);\n        if (!viewElement) {\n            return false;\n        }\n        const modelElement = mapper.toModelElement(viewElement);\n        /* istanbul ignore next -- @preserve */ if (!modelElement) {\n            return false;\n        }\n        editor.model.change((writer)=>{\n            writer.setSelection(modelElement, 'on');\n        });\n        return true;\n    }\n}\n/**\n * Finds the closest ancestor element that is either an editable element or a widget.\n *\n * @param element The element from which to start searching.\n * @returns The closest ancestor element that is either an editable element or a widget, or null if none is found.\n */ function findClosestEditableOrWidgetAncestor(element) {\n    let currentElement = element;\n    while(currentElement){\n        if (currentElement.is('editableElement') || isWidget(currentElement)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parent;\n    }\n    return null;\n}\n/**\n * Retrieves the ViewElement associated with a mouse event in the editing view.\n *\n * @param view The editing view.\n * @param domEventData The DOM event data containing the mouse event.\n * @returns The ViewElement associated with the mouse event, or null if not found.\n */ function getElementFromMouseEvent(view, domEventData) {\n    const domRange = getRangeFromMouseEvent(domEventData.domEvent);\n    let viewRange = null;\n    if (domRange) {\n        viewRange = view.domConverter.domRangeToView(domRange);\n    } else {\n        // Fallback to create range in target element. It happens frequently on Safari browser.\n        // See more: https://github.com/ckeditor/ckeditor5/issues/16978\n        viewRange = view.createRange(view.createPositionAt(domEventData.target, 0));\n    }\n    if (!viewRange) {\n        return null;\n    }\n    const viewPosition = viewRange.start;\n    if (!viewPosition.parent) {\n        return null;\n    }\n    let viewNode = viewPosition.parent;\n    if (viewPosition.parent.is('editableElement')) {\n        if (viewPosition.isAtEnd && viewPosition.nodeBefore) {\n            // Click after a widget tend to return position at the end of the editable element\n            // so use the node before it if range is at the end of a parent.\n            viewNode = viewPosition.nodeBefore;\n        } else if (viewPosition.isAtStart && viewPosition.nodeAfter) {\n            // Click before a widget tend to return position at the start of the editable element\n            // so use the node after it if range is at the start of a parent.\n            // See more: https://github.com/ckeditor/ckeditor5/issues/16992\n            viewNode = viewPosition.nodeAfter;\n        }\n    }\n    if (viewNode.is('$text')) {\n        return viewNode.parent;\n    }\n    return viewNode;\n}\n/**\n * Checks whether the specified `element` is a child of the `parent` element.\n *\n * @param element An element to check.\n * @param parent A parent for the element.\n */ function isChild(element, parent) {\n    if (!parent) {\n        return false;\n    }\n    return Array.from(element.getAncestors()).includes(parent);\n}\n/**\n * Returns nearest text block ancestor.\n */ function findTextBlockAncestor(modelElement, schema) {\n    for (const element of modelElement.getAncestors({\n        includeSelf: true,\n        parentFirst: true\n    })){\n        if (schema.checkChild(element, '$text')) {\n            return element;\n        }\n        // Do not go beyond nested editable.\n        if (schema.isLimit(element) && !schema.isObject(element)) {\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Returns next text block where could put selection.\n */ function findNextTextBlock(position, schema) {\n    const treeWalker = new ModelTreeWalker({\n        startPosition: position\n    });\n    for (const { item } of treeWalker){\n        if (schema.isLimit(item) || !item.is('element')) {\n            return null;\n        }\n        if (schema.checkChild(item, '$text')) {\n            return item;\n        }\n    }\n    return null;\n}\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * ```ts\n * class ImageToolbar extends Plugin {\n * \tstatic get requires() {\n * \t\treturn [ WidgetToolbarRepository ];\n * \t}\n *\n * \tafterInit() {\n * \t\tconst editor = this.editor;\n * \t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n * \t\twidgetToolbarRepository.register( 'image', {\n * \t\t\titems: editor.config.get( 'image.toolbar' ),\n * \t\t\tgetRelatedElement: getClosestSelectedImageWidget\n * \t\t} );\n * \t}\n * }\n * ```\n */ class WidgetToolbarRepository extends Plugin {\n    /**\n\t * A map of toolbar definitions.\n\t */ _toolbarDefinitions = new Map();\n    _balloon;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetToolbarRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Disables the default balloon toolbar for all widgets.\n        if (editor.plugins.has('BalloonToolbar')) {\n            const balloonToolbar = editor.plugins.get('BalloonToolbar');\n            this.listenTo(balloonToolbar, 'show', (evt)=>{\n                if (isWidgetSelected(editor.editing.view.document.selection)) {\n                    evt.stop();\n                }\n            }, {\n                priority: 'high'\n            });\n        }\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        this.on('change:isEnabled', ()=>{\n            this._updateToolbarsVisibility();\n        });\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateToolbarsVisibility();\n        });\n        // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', ()=>{\n            this._updateToolbarsVisibility();\n        }, {\n            priority: 'low'\n        });\n    }\n    destroy() {\n        super.destroy();\n        for (const toolbarConfig of this._toolbarDefinitions.values()){\n            toolbarConfig.view.destroy();\n        }\n    }\n    /**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param toolbarId An id for the toolbar. Used to\n\t * @param options Detailed options\n\t * @param options.ariaLabel Label used by assistive technologies to describe this toolbar element.\n\t * @param options.items Array of toolbar items.\n\t * @param options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param options.balloonClassName CSS class for the widget balloon.\n\t */ register(toolbarId, { ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container', positions }) {\n        // Trying to register a toolbar without any item.\n        if (!items.length) {\n            /**\n\t\t\t * When {@link module:widget/widgettoolbarrepository~WidgetToolbarRepository#register registering} a new widget toolbar, you\n\t\t\t * need to provide a non-empty array with the items that will be inserted into the toolbar.\n\t\t\t *\n\t\t\t * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n\t\t\t *\n\t\t\t * See for instance:\n\t\t\t *\n\t\t\t * * {@link module:table/tableconfig~TableConfig#contentToolbar `config.table.contentToolbar`}\n\t\t\t * * {@link module:image/imageconfig~ImageConfig#toolbar `config.image.toolbar`}\n\t\t\t *\n\t\t\t * @error widget-toolbar-no-items\n\t\t\t * @param {string} toolbarId The id of the toolbar that has not been configured correctly.\n\t\t\t */ logWarning('widget-toolbar-no-items', {\n                toolbarId\n            });\n            return;\n        }\n        const editor = this.editor;\n        const t = editor.t;\n        const toolbarView = new ToolbarView(editor.locale);\n        toolbarView.ariaLabel = ariaLabel || t('Widget toolbar');\n        if (this._toolbarDefinitions.has(toolbarId)) {\n            /**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param {string} toolbarId Toolbar id.\n\t\t\t */ throw new CKEditorError('widget-toolbar-duplicated', this, {\n                toolbarId\n            });\n        }\n        const toolbarDefinition = {\n            view: toolbarView,\n            getRelatedElement,\n            balloonClassName,\n            itemsConfig: items,\n            positions,\n            initialized: false\n        };\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(toolbarView, {\n            isContextual: true,\n            beforeFocus: ()=>{\n                const relatedElement = getRelatedElement(editor.editing.view.document.selection);\n                if (relatedElement) {\n                    this._showToolbar(toolbarDefinition, relatedElement);\n                }\n            },\n            afterBlur: ()=>{\n                this._hideToolbar(toolbarDefinition);\n            }\n        });\n        this._toolbarDefinitions.set(toolbarId, toolbarDefinition);\n    }\n    /**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t */ _updateToolbarsVisibility() {\n        let maxRelatedElementDepth = 0;\n        let deepestRelatedElement = null;\n        let deepestToolbarDefinition = null;\n        for (const definition of this._toolbarDefinitions.values()){\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            if (!this.isEnabled || !relatedElement) {\n                if (this._isToolbarInBalloon(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else if (!this.editor.ui.focusTracker.isFocused) {\n                if (this._isToolbarVisible(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else {\n                const relatedElementDepth = relatedElement.getAncestors().length;\n                // Many toolbars can express willingness to be displayed but they do not know about\n                // each other. Figure out which toolbar is deepest in the view tree to decide which\n                // should be displayed. For instance, if a selected image is inside a table cell, display\n                // the ImageToolbar rather than the TableToolbar (#60).\n                if (relatedElementDepth > maxRelatedElementDepth) {\n                    maxRelatedElementDepth = relatedElementDepth;\n                    deepestRelatedElement = relatedElement;\n                    deepestToolbarDefinition = definition;\n                }\n            }\n        }\n        if (deepestToolbarDefinition) {\n            this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n        }\n    }\n    /**\n\t * Hides the given toolbar.\n\t */ _hideToolbar(toolbarDefinition) {\n        this._balloon.remove(toolbarDefinition.view);\n        this.stopListening(this._balloon, 'change:visibleView');\n    }\n    /**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:ui/editorui/editorui~EditorUI#event:update}.\n\t */ _showToolbar(toolbarDefinition, relatedElement) {\n        if (this._isToolbarVisible(toolbarDefinition)) {\n            repositionContextualBalloon(this.editor, relatedElement, toolbarDefinition.positions);\n        } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n            if (!toolbarDefinition.initialized) {\n                toolbarDefinition.initialized = true;\n                toolbarDefinition.view.fillFromConfig(toolbarDefinition.itemsConfig, this.editor.ui.componentFactory);\n            }\n            this._balloon.add({\n                view: toolbarDefinition.view,\n                position: getBalloonPositionData(this.editor, relatedElement, toolbarDefinition.positions),\n                balloonClassName: toolbarDefinition.balloonClassName\n            });\n            // Update toolbar position each time stack with toolbar view is switched to visible.\n            // This is in a case target element has changed when toolbar was in invisible stack\n            // e.g. target image was wrapped by a block quote.\n            // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n            this.listenTo(this._balloon, 'change:visibleView', ()=>{\n                for (const definition of this._toolbarDefinitions.values()){\n                    if (this._isToolbarVisible(definition)) {\n                        const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n                        repositionContextualBalloon(this.editor, relatedElement, toolbarDefinition.positions);\n                    }\n                }\n            });\n        }\n    }\n    _isToolbarVisible(toolbar) {\n        return this._balloon.visibleView === toolbar.view;\n    }\n    _isToolbarInBalloon(toolbar) {\n        return this._balloon.hasView(toolbar.view);\n    }\n}\nfunction repositionContextualBalloon(editor, relatedElement, positions) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const position = getBalloonPositionData(editor, relatedElement, positions);\n    balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement, positions) {\n    const editingView = editor.editing.view;\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    return {\n        target: editingView.domConverter.mapViewToDom(relatedElement),\n        positions: positions || [\n            defaultPositions.northArrowSouth,\n            defaultPositions.northArrowSouthWest,\n            defaultPositions.northArrowSouthEast,\n            defaultPositions.southArrowNorth,\n            defaultPositions.southArrowNorthWest,\n            defaultPositions.southArrowNorthEast,\n            defaultPositions.viewportStickyNorth\n        ]\n    };\n}\nfunction isWidgetSelected(selection) {\n    const viewElement = selection.getSelectedElement();\n    return !!(viewElement && isWidget(viewElement));\n}\n\n/**\n * Stores the internal state of a single resizable object.\n */ class WidgetResizeState extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t * traveled, so how much the image should be enlarged.\n\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t *\n\t * @internal\n\t */ _referenceCoordinates;\n    /**\n\t * Resizer options.\n\t */ _options;\n    /**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalWidth;\n    /**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalHeight;\n    /**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalWidthPercents;\n    /**\n\t * A width to height ratio of the resized image.\n\t *\n\t * @readonly\n\t */ _aspectRatio;\n    /**\n\t * @param options Resizer options.\n\t */ constructor(options){\n        super();\n        this.set('activeHandlePosition', null);\n        this.set('proposedWidthPercents', null);\n        this.set('proposedWidth', null);\n        this.set('proposedHeight', null);\n        this.set('proposedHandleHostWidth', null);\n        this.set('proposedHandleHostHeight', null);\n        this._options = options;\n        this._referenceCoordinates = null;\n    }\n    /**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t */ get originalWidth() {\n        return this._originalWidth;\n    }\n    /**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t */ get originalHeight() {\n        return this._originalHeight;\n    }\n    /**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t */ get originalWidthPercents() {\n        return this._originalWidthPercents;\n    }\n    /**\n\t * A width to height ratio of the resized image.\n\t */ get aspectRatio() {\n        return this._aspectRatio;\n    }\n    /**\n\t *\n\t * @param domResizeHandle The handle used to calculate the reference point.\n\t */ begin(domResizeHandle, domHandleHost, domResizeHost) {\n        const clientRect = new Rect(domHandleHost);\n        this.activeHandlePosition = getHandlePosition(domResizeHandle);\n        this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n        this._originalWidth = clientRect.width;\n        this._originalHeight = clientRect.height;\n        this._aspectRatio = clientRect.width / clientRect.height;\n        const widthStyle = domResizeHost.style.width;\n        if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n            this._originalWidthPercents = parseFloat(widthStyle);\n        } else {\n            this._originalWidthPercents = calculateResizeHostPercentageWidth(domResizeHost, clientRect);\n        }\n    }\n    update(newSize) {\n        this.proposedWidth = newSize.width;\n        this.proposedHeight = newSize.height;\n        this.proposedWidthPercents = newSize.widthPercents;\n        this.proposedHandleHostWidth = newSize.handleHostWidth;\n        this.proposedHandleHostHeight = newSize.handleHostHeight;\n    }\n}\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */ function getAbsoluteBoundaryPoint(element, resizerPosition) {\n    const elementRect = new Rect(element);\n    const positionParts = resizerPosition.split('-');\n    const ret = {\n        x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n        y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n    };\n    ret.x += element.ownerDocument.defaultView.scrollX;\n    ret.y += element.ownerDocument.defaultView.scrollY;\n    return ret;\n}\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */ function getResizerHandleClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */ function getHandlePosition(domHandle) {\n    const resizerPositions = [\n        'top-left',\n        'top-right',\n        'bottom-right',\n        'bottom-left'\n    ];\n    for (const position of resizerPositions){\n        if (domHandle.classList.contains(getResizerHandleClass(position))) {\n            return position;\n        }\n    }\n}\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */ function getOppositePosition(position) {\n    const parts = position.split('-');\n    const replacements = {\n        top: 'bottom',\n        bottom: 'top',\n        left: 'right',\n        right: 'left'\n    };\n    return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}\n\n/**\n * A view displaying the proposed new element size during the resizing.\n *\n * @internal\n */ class SizeView extends View {\n    constructor(){\n        super();\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-size-view',\n                    bind.to('_viewPosition', (value)=>value ? `ck-orientation-${value}` : '')\n                ],\n                style: {\n                    display: bind.if('_isVisible', 'none', (visible)=>!visible)\n                }\n            },\n            children: [\n                {\n                    text: bind.to('_label')\n                }\n            ]\n        });\n    }\n    /**\n\t * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n\t *\n\t * @internal\n\t * @param options An object defining the resizer options, used for setting the proper size label.\n\t * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n\t */ _bindToState(options, resizeState) {\n        this.bind('_isVisible').to(resizeState, 'proposedWidth', resizeState, 'proposedHeight', (width, height)=>width !== null && height !== null);\n        this.bind('_label').to(resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', resizeState, 'proposedWidthPercents', (width, height, widthPercents)=>{\n            if (options.unit === 'px') {\n                return `${width}×${height}`;\n            } else {\n                return `${widthPercents}%`;\n            }\n        });\n        this.bind('_viewPosition').to(resizeState, 'activeHandlePosition', resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', // If the widget is too small to contain the size label, display the label above.\n        (position, width, height)=>width < 50 || height < 50 ? 'above-center' : position);\n    }\n    /**\n\t * A method used for cleaning up. It removes the bindings and hides the view.\n\t *\n\t * @internal\n\t */ _dismiss() {\n        this.unbind();\n        this._isVisible = false;\n    }\n}\n\n/**\n * Represents a resizer for a single resizable object.\n */ class WidgetResizer extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */ _state;\n    /**\n\t * A view displaying the proposed new element size during the resizing.\n\t */ _sizeView;\n    /**\n\t * Options passed to the {@link #constructor}.\n\t */ _options;\n    /**\n\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t */ _viewResizerWrapper = null;\n    /**\n\t * The width of the resized {@link module:widget/widgetresize~WidgetResizerOptions#viewElement viewElement} before the resizing started.\n\t */ _initialViewWidth;\n    /**\n\t * @param options Resizer options.\n\t */ constructor(options){\n        super();\n        this._options = options;\n        this.set('isEnabled', true);\n        this.set('isSelected', false);\n        this.bind('isVisible').to(this, 'isEnabled', this, 'isSelected', (isEnabled, isSelected)=>isEnabled && isSelected);\n        this.decorate('begin');\n        this.decorate('cancel');\n        this.decorate('commit');\n        this.decorate('updateSize');\n        this.on('commit', (event)=>{\n            // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n            // cleaned up (#5195).\n            if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n                this._cleanup();\n                event.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */ get state() {\n        return this._state;\n    }\n    /**\n\t * Makes resizer visible in the UI.\n\t */ show() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.removeClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n\t * Hides resizer in the UI.\n\t */ hide() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.addClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n\t * Attaches the resizer to the DOM.\n\t */ attach() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const widgetElement = this._options.viewElement;\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            const viewResizerWrapper = writer.createUIElement('div', {\n                class: 'ck ck-reset_all ck-widget__resizer'\n            }, function(domDocument) {\n                const domElement = this.toDomElement(domDocument);\n                that._appendHandles(domElement);\n                that._appendSizeUI(domElement);\n                return domElement;\n            });\n            // Append the resizer wrapper to the widget's wrapper.\n            writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n            writer.addClass('ck-widget_with-resizer', widgetElement);\n            this._viewResizerWrapper = viewResizerWrapper;\n            if (!this.isVisible) {\n                this.hide();\n            }\n        });\n        this.on('change:isVisible', ()=>{\n            if (this.isVisible) {\n                this.show();\n                this.redraw();\n            } else {\n                this.hide();\n            }\n        });\n    }\n    /**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param domResizeHandle Clicked handle.\n\t */ begin(domResizeHandle) {\n        this._state = new WidgetResizeState(this._options);\n        this._sizeView._bindToState(this._options, this.state);\n        this._initialViewWidth = this._options.viewElement.getStyle('width');\n        this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n    }\n    /**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t */ updateSize(domEventData) {\n        const newSize = this._proposeNewSize(domEventData);\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            const unit = this._options.unit || '%';\n            const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n            writer.setStyle('width', newWidth, this._options.viewElement);\n        });\n        // Get an actual image width, and:\n        // * reflect this size to the resize wrapper\n        // * apply this **real** size to the state\n        const domHandleHost = this._getHandleHost();\n        const domHandleHostRect = new Rect(domHandleHost);\n        const handleHostWidth = Math.round(domHandleHostRect.width);\n        const handleHostHeight = Math.round(domHandleHostRect.height);\n        // Handle max-width limitation.\n        const domResizeHostRect = new Rect(domHandleHost);\n        newSize.width = Math.round(domResizeHostRect.width);\n        newSize.height = Math.round(domResizeHostRect.height);\n        this.redraw(domHandleHostRect);\n        this.state.update({\n            ...newSize,\n            handleHostWidth,\n            handleHostHeight\n        });\n    }\n    /**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */ commit() {\n        const unit = this._options.unit || '%';\n        const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit;\n        // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n        this._options.editor.editing.view.change(()=>{\n            this._cleanup();\n            this._options.onCommit(newValue);\n        });\n    }\n    /**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */ cancel() {\n        this._cleanup();\n    }\n    /**\n\t * Destroys the resizer.\n\t */ destroy() {\n        this.cancel();\n    }\n    /**\n\t * Redraws the resizer.\n\t *\n\t * @param handleHostRect Handle host rectangle might be given to improve performance.\n\t */ redraw(handleHostRect) {\n        const domWrapper = this._domResizerWrapper;\n        // Refresh only if resizer exists in the DOM.\n        if (!existsInDom(domWrapper)) {\n            return;\n        }\n        const widgetWrapper = domWrapper.parentElement;\n        const handleHost = this._getHandleHost();\n        const resizerWrapper = this._viewResizerWrapper;\n        const currentDimensions = [\n            resizerWrapper.getStyle('width'),\n            resizerWrapper.getStyle('height'),\n            resizerWrapper.getStyle('left'),\n            resizerWrapper.getStyle('top')\n        ];\n        let newDimensions;\n        if (widgetWrapper.isSameNode(handleHost)) {\n            const clientRect = handleHostRect || new Rect(handleHost);\n            newDimensions = [\n                clientRect.width + 'px',\n                clientRect.height + 'px',\n                undefined,\n                undefined\n            ];\n        } else {\n            newDimensions = [\n                handleHost.offsetWidth + 'px',\n                handleHost.offsetHeight + 'px',\n                handleHost.offsetLeft + 'px',\n                handleHost.offsetTop + 'px'\n            ];\n        }\n        // Make changes to the view only if the resizer should actually get new dimensions.\n        // Otherwise, if View#change() was always called, this would cause EditorUI#update\n        // loops because the WidgetResize plugin listens to EditorUI#update and updates\n        // the resizer.\n        // https://github.com/ckeditor/ckeditor5/issues/7633\n        if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n            this._options.editor.editing.view.change((writer)=>{\n                writer.setStyle({\n                    width: newDimensions[0],\n                    height: newDimensions[1],\n                    left: newDimensions[2],\n                    top: newDimensions[3]\n                }, resizerWrapper);\n            });\n        }\n    }\n    containsHandle(domElement) {\n        return this._domResizerWrapper.contains(domElement);\n    }\n    static isResizeHandle(domElement) {\n        return domElement.classList.contains('ck-widget__resizer__handle');\n    }\n    /**\n\t * Cleans up the context state.\n\t */ _cleanup() {\n        this._sizeView._dismiss();\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n        });\n    }\n    /**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t */ _proposeNewSize(domEventData) {\n        const state = this.state;\n        const currentCoordinates = extractCoordinates(domEventData);\n        const isCentered = this._options.isCentered ? this._options.isCentered(this) : true;\n        // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n        // meaning that it has been shrunk.\n        //\n        // +----------------+--+\n        // |                |  |\n        // |       img      |  |\n        // |  /handle host  |  |\n        // +----------------+  | ^\n        // |                   | | - enlarge y\n        // +-------------------+ v\n        // \t\t\t\t\t<-->\n        // \t\t\t\t\t enlarge x\n        const enlargement = {\n            x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n            y: currentCoordinates.y - state.originalHeight - state._referenceCoordinates.y\n        };\n        if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n            enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n        }\n        // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n        // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n        if (isCentered) {\n            enlargement.x *= 2;\n        }\n        // const resizeHost = this._getResizeHost();\n        // The size proposed by the user. It does not consider the aspect ratio.\n        let width = Math.abs(state.originalWidth + enlargement.x);\n        let height = Math.abs(state.originalHeight + enlargement.y);\n        // Dominant determination must take the ratio into account.\n        const dominant = width / state.aspectRatio > height ? 'width' : 'height';\n        if (dominant == 'width') {\n            height = width / state.aspectRatio;\n        } else {\n            width = height * state.aspectRatio;\n        }\n        return {\n            width: Math.round(width),\n            height: Math.round(height),\n            widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * width * 100) / 100, 100)\n        };\n    }\n    /**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t */ _getResizeHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getResizeHost(widgetWrapper);\n    }\n    /**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t */ _getHandleHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getHandleHost(widgetWrapper);\n    }\n    /**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t */ get _domResizerWrapper() {\n        return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n    }\n    /**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @param domElement The resizer wrapper.\n\t */ _appendHandles(domElement) {\n        const resizerPositions = [\n            'top-left',\n            'top-right',\n            'bottom-right',\n            'bottom-left'\n        ];\n        for (const currentPosition of resizerPositions){\n            domElement.appendChild(new Template({\n                tag: 'div',\n                attributes: {\n                    class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n                }\n            }).render());\n        }\n    }\n    /**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t */ _appendSizeUI(domElement) {\n        this._sizeView = new SizeView();\n        // Make sure icon#element is rendered before passing to appendChild().\n        this._sizeView.render();\n        domElement.appendChild(this._sizeView.element);\n    }\n}\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */ function getResizerClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\nfunction extractCoordinates(event) {\n    return {\n        x: event.pageX,\n        y: event.pageY\n    };\n}\nfunction existsInDom(element) {\n    return element && element.ownerDocument && element.ownerDocument.contains(element);\n}\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n */ class WidgetResize extends Plugin {\n    /**\n\t * A map of resizers created using this plugin instance.\n\t */ _resizers = new Map();\n    _observer;\n    _redrawSelectedResizerThrottled;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetResize';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editing = this.editor.editing;\n        const domDocument = global.window.document;\n        this.set('selectedResizer', null);\n        this.set('_activeResizer', null);\n        editing.view.addObserver(MouseObserver);\n        this._observer = new (DomEmitterMixin())();\n        this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), {\n            priority: 'high'\n        });\n        this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n        this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n        this._redrawSelectedResizerThrottled = throttle(()=>this.redrawSelectedResizer(), 200);\n        // Redrawing on any change of the UI of the editor (including content changes).\n        this.editor.ui.on('update', this._redrawSelectedResizerThrottled);\n        // Remove view widget-resizer mappings for widgets that have been removed from the document.\n        // https://github.com/ckeditor/ckeditor5/issues/10156\n        // https://github.com/ckeditor/ckeditor5/issues/10266\n        this.editor.model.document.on('change', ()=>{\n            for (const [viewElement, resizer] of this._resizers){\n                if (!viewElement.isAttached()) {\n                    this._resizers.delete(viewElement);\n                    resizer.destroy();\n                }\n            }\n        }, {\n            priority: 'lowest'\n        });\n        // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n        this._observer.listenTo(global.window, 'resize', this._redrawSelectedResizerThrottled);\n        const viewSelection = this.editor.editing.view.document.selection;\n        viewSelection.on('change', ()=>{\n            const selectedElement = viewSelection.getSelectedElement();\n            const resizer = this.getResizerByViewElement(selectedElement) || null;\n            if (resizer) {\n                this.select(resizer);\n            } else {\n                this.deselect();\n            }\n        });\n    }\n    /**\n\t * Redraws the selected resizer if there is any selected resizer and if it is visible.\n\t */ redrawSelectedResizer() {\n        if (this.selectedResizer && this.selectedResizer.isVisible) {\n            this.selectedResizer.redraw();\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._observer.stopListening();\n        for (const resizer of this._resizers.values()){\n            resizer.destroy();\n        }\n        this._redrawSelectedResizerThrottled.cancel();\n    }\n    /**\n\t * Marks resizer as selected.\n\t */ select(resizer) {\n        this.deselect();\n        this.selectedResizer = resizer;\n        this.selectedResizer.isSelected = true;\n    }\n    /**\n\t * Deselects currently set resizer.\n\t */ deselect() {\n        if (this.selectedResizer) {\n            this.selectedResizer.isSelected = false;\n        }\n        this.selectedResizer = null;\n    }\n    /**\n\t * @param options Resizer options.\n\t */ attachTo(options) {\n        const resizer = new WidgetResizer(options);\n        const plugins = this.editor.plugins;\n        resizer.attach();\n        if (plugins.has('WidgetToolbarRepository')) {\n            // Hiding widget toolbar to improve the performance\n            // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n            const widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n            resizer.on('begin', ()=>{\n                widgetToolbarRepository.forceDisabled('resize');\n            }, {\n                priority: 'lowest'\n            });\n            resizer.on('cancel', ()=>{\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, {\n                priority: 'highest'\n            });\n            resizer.on('commit', ()=>{\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, {\n                priority: 'highest'\n            });\n        }\n        this._resizers.set(options.viewElement, resizer);\n        const viewSelection = this.editor.editing.view.document.selection;\n        const selectedElement = viewSelection.getSelectedElement();\n        // If the element the resizer is created for is currently focused, it should become visible.\n        if (this.getResizerByViewElement(selectedElement) == resizer) {\n            this.select(resizer);\n        }\n        return resizer;\n    }\n    /**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param viewElement View element associated with the resizer.\n\t */ getResizerByViewElement(viewElement) {\n        return this._resizers.get(viewElement);\n    }\n    /**\n\t * Returns a resizer that contains a given resize handle.\n\t */ _getResizerByHandle(domResizeHandle) {\n        for (const resizer of this._resizers.values()){\n            if (resizer.containsHandle(domResizeHandle)) {\n                return resizer;\n            }\n        }\n    }\n    /**\n\t * @param domEventData Native DOM event.\n\t */ _mouseDownListener(event, domEventData) {\n        const resizeHandle = domEventData.domTarget;\n        if (!WidgetResizer.isResizeHandle(resizeHandle)) {\n            return;\n        }\n        this._activeResizer = this._getResizerByHandle(resizeHandle) || null;\n        if (this._activeResizer) {\n            this._activeResizer.begin(resizeHandle);\n            // Do not call other events when resizing. See: #6755.\n            event.stop();\n            domEventData.preventDefault();\n        }\n    }\n    /**\n\t * @param domEventData Native DOM event.\n\t */ _mouseMoveListener(event, domEventData) {\n        if (this._activeResizer) {\n            this._activeResizer.updateSize(domEventData);\n        }\n    }\n    _mouseUpListener() {\n        if (this._activeResizer) {\n            this._activeResizer.commit();\n            this._activeResizer = null;\n        }\n    }\n}\n\nexport { WIDGET_CLASS_NAME, WIDGET_SELECTED_CLASS_NAME, Widget, WidgetHighlightStack, WidgetResize, WidgetResizeState, WidgetResizer, WidgetToolbarRepository, WidgetTypeAround, TYPE_AROUND_SELECTION_ATTRIBUTE as _WIDGET_TYPE_AROUND_SELECTION_ATTRIBUTE, SizeView as _WidgetSizeView, getClosestTypeAroundDomButton as _getClosestWidgetTypeAroundDomButton, getClosestWidgetViewElement as _getClosestWidgetViewElement, getTypeAroundButtonPosition as _getWidgetTypeAroundButtonPosition, getTypeAroundFakeCaretPosition as _getWidgetTypeAroundFakeCaretPosition, calculateResizeHostAncestorWidth, calculateResizeHostPercentageWidth, findOptimalInsertionRange, getLabel, isTypeAroundWidget, isWidget, setHighlightHandling, setLabel, toWidget, toWidgetEditable, verticalWidgetNavigationHandler, viewToModelPositionOutsideModelElement };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport { EmitterMixin, type ArrayOrItem } from '@ckeditor/ckeditor5-utils';\n\nimport type { ViewDowncastWriter, DowncastHighlightDescriptor } from '@ckeditor/ckeditor5-engine';\n\n/**\n * Class used to handle the correct order of highlights on elements.\n *\n * When different highlights are applied to same element the correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~DowncastHighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport class WidgetHighlightStack extends /* #__PURE__ */ EmitterMixin() {\n\tprivate readonly _stack: Array<DowncastHighlightDescriptor> = [];\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t */\n\tpublic add( descriptor: DowncastHighlightDescriptor, writer: ViewDowncastWriter ): void {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire<WidgetHighlightStackChangeEvent>( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param id Id of the descriptor to remove.\n\t */\n\tpublic remove( id: string, writer: ViewDowncastWriter ): void {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire<WidgetHighlightStackChangeEvent>( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts a given descriptor in correct place in the stack. It also takes care about updating information\n\t * when descriptor with same id is already present.\n\t */\n\tprivate _insertDescriptor( descriptor: DowncastHighlightDescriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It has different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @param id Descriptor's id.\n\t */\n\tprivate _removeDescriptor( id: string ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\n/**\n * Compares two descriptors by checking their priority and class list.\n *\n * @returns Returns true if both descriptors are defined and have same priority and classes.\n */\nfunction compareDescriptors( a: DowncastHighlightDescriptor, b: DowncastHighlightDescriptor ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n/**\n * Checks whenever first descriptor should be placed in the stack before second one.\n */\nfunction shouldABeBeforeB( a: DowncastHighlightDescriptor, b: DowncastHighlightDescriptor ) {\n\tif ( a.priority! > b.priority! ) {\n\t\treturn true;\n\t} else if ( a.priority! < b.priority! ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n/**\n * Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~DowncastHighlightDescriptor} to\n * sorted string.\n */\nfunction classesToString( classes: ArrayOrItem<string> ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~WidgetHighlightStack} has been changed\n *\n * @eventName ~WidgetHighlightStack#change:top\n */\nexport type WidgetHighlightStackChangeEvent = {\n\tname: 'change' | 'change:top';\n\targs: [ WidgetHighlightStackChangeEventData ];\n};\n\n/**\n * Additional information about the change.\n */\nexport type WidgetHighlightStackChangeEventData = {\n\n\t/**\n\t * Old highlight descriptor. It will be `undefined` when first descriptor is added to the stack.\n\t */\n\toldDescriptor: DowncastHighlightDescriptor;\n\n\t/**\n\t * New highlight descriptor. It will be `undefined` when last descriptor is removed from the stack.\n\t */\n\tnewDescriptor: DowncastHighlightDescriptor;\n\n\t/**\n\t * View writer that can be used to modify element.\n\t */\n\twriter: ViewDowncastWriter;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/utils\n */\n\nimport { IconDragHandle } from '@ckeditor/ckeditor5-icons';\nimport {\n\tRect,\n\tCKEditorError,\n\ttoArray,\n\ttype ObservableChangeEvent,\n\ttype GetCallback\n} from '@ckeditor/ckeditor5-utils';\n\nimport {\n\ttype DowncastAddHighlightCallback,\n\ttype DowncastHighlightDescriptor,\n\ttype DowncastRemoveHighlightCallback,\n\ttype MapperViewToModelPositionEvent,\n\ttype ModelDocumentSelection,\n\ttype ViewDowncastWriter,\n\ttype Model,\n\ttype ModelRange,\n\ttype ModelSelection,\n\ttype ViewContainerElement,\n\ttype ViewEditableElement,\n\ttype ViewElement,\n\ttype ViewTypeCheckable\n} from '@ckeditor/ckeditor5-engine';\n\nimport { IconView } from '@ckeditor/ckeditor5-ui';\n\nimport { WidgetHighlightStack, type WidgetHighlightStackChangeEvent } from './highlightstack.js';\nimport { getTypeAroundFakeCaretPosition } from './widgettypearound/utils.js';\n\n/**\n * CSS class added to each widget element.\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n\n/**\n * CSS class added to currently selected widget element.\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n\n/**\n * Returns `true` if given {@link module:engine/view/node~ViewNode} is an {@link module:engine/view/element~ViewElement} and a widget.\n */\nexport function isWidget( node: ViewTypeCheckable ): boolean {\n\tif ( !node.is( 'element' ) ) {\n\t\treturn false;\n\t}\n\n\treturn !!node.getCustomProperty( 'widget' );\n}\n\n/**\n * Converts the given {@link module:engine/view/element~ViewElement} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"false\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~ViewElement#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n * \t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param options.hasSelectionHandle If `true`, the widget will have a selection handle added.\n * @returns Returns the same element.\n */\nexport function toWidget(\n\telement: ViewElement,\n\twriter: ViewDowncastWriter,\n\toptions: {\n\t\tlabel?: string | ( () => string );\n\t\thasSelectionHandle?: boolean;\n\t} = {}\n): ViewElement {\n\tif ( !element.is( 'containerElement' ) ) {\n\t\t/**\n\t\t * The element passed to `toWidget()` must be a {@link module:engine/view/containerelement~ViewContainerElement}\n\t\t * instance.\n\t\t *\n\t\t * @error widget-to-widget-wrong-element-type\n\t\t * @param {any} element The view element passed to `toWidget()`.\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'widget-to-widget-wrong-element-type',\n\t\t\tnull,\n\t\t\t{ element }\n\t\t);\n\t}\n\n\twriter.setAttribute( 'contenteditable', 'false', element );\n\n\twriter.addClass( WIDGET_CLASS_NAME, element );\n\twriter.setCustomProperty( 'widget', true, element );\n\telement.getFillerOffset = getFillerOffset;\n\n\twriter.setCustomProperty( 'widgetLabel', [], element );\n\n\tif ( options.label ) {\n\t\tsetLabel( element, options.label );\n\t}\n\n\tif ( options.hasSelectionHandle ) {\n\t\taddSelectionHandle( element, writer );\n\t}\n\n\tsetHighlightHandling( element, writer );\n\n\treturn element;\n}\n\n/**\n * Default handler for adding a highlight on a widget.\n * It adds CSS class and attributes basing on the given highlight descriptor.\n */\nfunction addHighlight( element: ViewElement, descriptor: DowncastHighlightDescriptor, writer: ViewDowncastWriter ) {\n\tif ( descriptor.classes ) {\n\t\twriter.addClass( toArray( descriptor.classes ), element );\n\t}\n\n\tif ( descriptor.attributes ) {\n\t\tfor ( const key in descriptor.attributes ) {\n\t\t\twriter.setAttribute( key, descriptor.attributes[ key ], element );\n\t\t}\n\t}\n}\n\n/**\n * Default handler for removing a highlight from a widget.\n * It removes CSS class and attributes basing on the given highlight descriptor.\n */\nfunction removeHighlight( element: ViewElement, descriptor: DowncastHighlightDescriptor, writer: ViewDowncastWriter ) {\n\tif ( descriptor.classes ) {\n\t\twriter.removeClass( toArray( descriptor.classes ), element );\n\t}\n\n\tif ( descriptor.attributes ) {\n\t\tfor ( const key in descriptor.attributes ) {\n\t\t\twriter.removeAttribute( key, element );\n\t\t}\n\t}\n}\n\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~WidgetHighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n */\nexport function setHighlightHandling(\n\telement: ViewElement,\n\twriter: ViewDowncastWriter,\n\tadd: ( element: ViewElement, descriptor: DowncastHighlightDescriptor, writer: ViewDowncastWriter ) => void = addHighlight,\n\tremove: ( element: ViewElement, descriptor: DowncastHighlightDescriptor, writer: ViewDowncastWriter ) => void = removeHighlight\n): void {\n\tconst stack = new WidgetHighlightStack();\n\n\tstack.on<WidgetHighlightStackChangeEvent>( 'change:top', ( evt, data ) => {\n\t\tif ( data.oldDescriptor ) {\n\t\t\tremove( element, data.oldDescriptor, data.writer );\n\t\t}\n\n\t\tif ( data.newDescriptor ) {\n\t\t\tadd( element, data.newDescriptor, data.writer );\n\t\t}\n\t} );\n\n\tconst addHighlightCallback: DowncastAddHighlightCallback = ( element, descriptor, writer ) => stack.add( descriptor, writer );\n\tconst removeHighlightCallback: DowncastRemoveHighlightCallback = ( element, id, writer ) => stack.remove( id, writer );\n\n\twriter.setCustomProperty( 'addHighlight', addHighlightCallback, element );\n\twriter.setCustomProperty( 'removeHighlight', removeHighlightCallback, element );\n}\n\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n */\nexport function setLabel( element: ViewElement, labelOrCreator: string | ( () => string ) ): void {\n\tconst widgetLabel = element.getCustomProperty( 'widgetLabel' ) as Array<string | ( () => string )>;\n\n\twidgetLabel.push( labelOrCreator );\n}\n\n/**\n * Returns the label of the provided element.\n */\nexport function getLabel( element: ViewElement ): string {\n\tconst widgetLabel = element.getCustomProperty( 'widgetLabel' ) as Array<string | ( () => string )>;\n\n\treturn widgetLabel.reduce( ( prev: string, current: string | ( () => string ) ) => {\n\t\tif ( typeof current === 'function' ) {\n\t\t\treturn prev ? prev + '. ' + current() : current();\n\t\t} else {\n\t\t\treturn prev ? prev + '. ' + current : current;\n\t\t}\n\t}, '' );\n}\n\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~ViewEditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when\n * {@link module:engine/view/editableelement~ViewEditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n * * implements the {@link ~setHighlightHandling view highlight on widget's editable}.\n * * sets the `role` attribute to `textbox` for accessibility purposes.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `editingDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n * \t\t\treturn toWidgetEditable( nested, writer, { label: 'label for editable' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Editable's label used by assistive technologies (e.g. screen readers).\n * @param options.withAriaRole Whether to add the role=\"textbox\" attribute on the editable. Defaults to `true`.\n * @returns Returns the same element that was provided in the `editable` parameter\n */\nexport function toWidgetEditable(\n\teditable: ViewEditableElement,\n\twriter: ViewDowncastWriter,\n\toptions: {\n\t\tlabel?: string;\n\t\twithAriaRole?: boolean;\n\t} = {}\n): ViewEditableElement {\n\twriter.addClass( [ 'ck-editor__editable', 'ck-editor__nested-editable' ], editable );\n\n\t// Set role=\"textbox\" only if explicitly requested (defaults to true for backward compatibility).\n\tif ( options.withAriaRole !== false ) {\n\t\twriter.setAttribute( 'role', 'textbox', editable );\n\t}\n\n\twriter.setAttribute( 'tabindex', '-1', editable );\n\n\tif ( options.label ) {\n\t\twriter.setAttribute( 'aria-label', options.label, editable );\n\t}\n\n\t// Set initial contenteditable value.\n\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\n\n\t// Bind the contenteditable property to element#isReadOnly.\n\teditable.on<ObservableChangeEvent<boolean>>( 'change:isReadOnly', ( evt, property, is ) => {\n\t\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\n\t} );\n\n\teditable.on<ObservableChangeEvent<boolean>>( 'change:isFocused', ( evt, property, is ) => {\n\t\tif ( is ) {\n\t\t\twriter.addClass( 'ck-editor__nested-editable_focused', editable );\n\t\t} else {\n\t\t\twriter.removeClass( 'ck-editor__nested-editable_focused', editable );\n\t\t}\n\t} );\n\n\tsetHighlightHandling( editable, writer );\n\n\treturn editable;\n}\n\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @returns The optimal range.\n */\nexport function findOptimalInsertionRange(\n\tselection: ModelSelection | ModelDocumentSelection,\n\tmodel: Model\n): ModelRange {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement ) {\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( selection );\n\n\t\t// If the WidgetTypeAround \"fake caret\" is displayed, use its position for the insertion\n\t\t// to provide the most predictable UX (https://github.com/ckeditor/ckeditor5/issues/7438).\n\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\treturn model.createRange( model.createPositionAt( selectedElement, typeAroundFakeCaretPosition ) );\n\t\t}\n\t}\n\n\treturn model.schema.findOptimalInsertionRange( selection );\n}\n\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n * ```\n * // Model:\n * <placeholder type=\"name\"></placeholder>\n *\n * // View:\n * <span class=\"placeholder\">name</span>\n * ```\n *\n * In such case, view positions inside `<span>` cannot be correctly mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n * ```ts\n * editor.editing.mapper.on(\n * \t'viewToModelPosition',\n * \tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n * );\n * ```\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n * // Model:\n * <paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n * ```\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n * // Model:\n * <paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n * ```\n *\n * @param model Model instance on which the callback operates.\n * @param viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n */\nexport function viewToModelPositionOutsideModelElement(\n\tmodel: Model,\n\tviewElementMatcher: ( element: ViewElement ) => boolean\n): GetCallback<MapperViewToModelPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tconst { mapper, viewPosition } = data;\n\n\t\tconst viewParent = mapper.findMappedViewAncestor( viewPosition );\n\n\t\tif ( !viewElementMatcher( viewParent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelParent = mapper.toModelElement( viewParent );\n\n\t\tdata.modelPosition = model.createPositionAt( modelParent!, viewPosition.isAtStart ? 'before' : 'after' );\n\t};\n}\n\n/**\n * Default filler offset function applied to all widget elements.\n */\nfunction getFillerOffset() {\n\treturn null;\n}\n\n/**\n * Adds a drag handle to the widget.\n */\nfunction addSelectionHandle( widgetElement: ViewContainerElement, writer: ViewDowncastWriter ) {\n\tconst selectionHandle = writer.createUIElement( 'div', { class: 'ck ck-widget__selection-handle' }, function( domDocument ) {\n\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t// Use the IconView from the ui library.\n\t\tconst icon = new IconView();\n\t\ticon.set( 'content', IconDragHandle );\n\n\t\t// Render the icon view right away to append its #element to the selectionHandle DOM element.\n\t\ticon.render();\n\n\t\tdomElement.appendChild( icon.element! );\n\n\t\treturn domElement;\n\t} );\n\n\t// Append the selection handle into the widget wrapper.\n\twriter.insert( writer.createPositionAt( widgetElement, 0 ), selectionHandle );\n\twriter.addClass( [ 'ck-widget_with-selection-handle' ], widgetElement );\n}\n\n/**\n * Starting from a DOM resize host element (an element that receives dimensions as a result of resizing),\n * this helper returns the width of the found ancestor element.\n *\n *\t* It searches up to 5 levels of ancestors only.\n *\n * @param domResizeHost Resize host DOM element that receives dimensions as a result of resizing.\n * @returns Width of ancestor element in pixels or 0 if no ancestor with a computed width has been found.\n */\nexport function calculateResizeHostAncestorWidth( domResizeHost: HTMLElement ): number {\n\tconst getElementComputedWidth = ( element: HTMLElement ) => {\n\t\tconst { width, paddingLeft, paddingRight } = element.ownerDocument.defaultView!.getComputedStyle( element! );\n\n\t\treturn parseFloat( width ) - ( parseFloat( paddingLeft ) || 0 ) - ( parseFloat( paddingRight ) || 0 );\n\t};\n\n\tconst domResizeHostParent = domResizeHost.parentElement;\n\n\tif ( !domResizeHostParent ) {\n\t\treturn 0;\n\t}\n\n\t// Need to use computed style as it properly excludes parent's paddings from the returned value.\n\tlet parentWidth = getElementComputedWidth( domResizeHostParent! );\n\n\t// Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n\t// and try to get width from next ancestor.\n\t// https://github.com/ckeditor/ckeditor5/issues/10776\n\tconst ancestorLevelLimit = 5;\n\tlet currentLevel = 0;\n\n\tlet checkedElement = domResizeHostParent!;\n\n\twhile ( isNaN( parentWidth ) ) {\n\t\tcheckedElement = checkedElement.parentElement!;\n\n\t\tif ( ++currentLevel > ancestorLevelLimit ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tparentWidth = getElementComputedWidth( checkedElement );\n\t}\n\n\treturn parentWidth;\n}\n\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n *\n * @param domResizeHost Resize host DOM element.\n * @returns Percentage value between 0 and 100.\n */\nexport function calculateResizeHostPercentageWidth(\n\tdomResizeHost: HTMLElement,\n\tresizeHostRect: Rect = new Rect( domResizeHost )\n): number {\n\tconst parentWidth = calculateResizeHostAncestorWidth( domResizeHost );\n\n\tif ( !parentWidth ) {\n\t\treturn 0;\n\t}\n\n\treturn resizeHostRect.width / parentWidth * 100;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgettypearound/utils\n */\n\nimport { isWidget } from '../utils.js';\n\nimport type {\n\tModelDocumentSelection,\n\tViewDomConverter,\n\tModelElement,\n\tModelSchema,\n\tModelSelection,\n\tViewElement\n} from '@ckeditor/ckeditor5-engine';\n\n/**\n * The name of the type around model selection attribute responsible for\n * displaying a fake caret next to a selected widget.\n *\n * @internal\n */\nexport const TYPE_AROUND_SELECTION_ATTRIBUTE = 'widget-type-around';\n\n/**\n * Checks if an element is a widget that qualifies to get the widget type around UI.\n */\nexport function isTypeAroundWidget( viewElement: ViewElement | undefined, modelElement: ModelElement, schema: ModelSchema ): boolean {\n\treturn !!viewElement && isWidget( viewElement ) && !schema.isInline( modelElement );\n}\n\n/**\n * For the passed HTML element, this helper finds the closest widget type around button ancestor.\n *\n * @internal\n */\nexport function getClosestTypeAroundDomButton( domElement: HTMLElement ): HTMLElement | null {\n\treturn domElement.closest( '.ck-widget__type-around__button' );\n}\n\n/**\n * For the passed widget type around button element, this helper determines at which position\n * the paragraph would be inserted into the content if, for instance, the button was\n * clicked by the user.\n *\n * @internal\n * @returns The position of the button.\n */\nexport function getTypeAroundButtonPosition( domElement: HTMLElement ): 'before' | 'after' {\n\treturn domElement.classList.contains( 'ck-widget__type-around__button_before' ) ? 'before' : 'after';\n}\n\n/**\n * For the passed HTML element, this helper returns the closest view widget ancestor.\n *\n * @internal\n */\nexport function getClosestWidgetViewElement( domElement: HTMLElement, domConverter: ViewDomConverter ): ViewElement {\n\tconst widgetDomElement = domElement.closest( '.ck-widget' );\n\n\treturn domConverter.mapDomToView( widgetDomElement as any ) as ViewElement;\n}\n\n/**\n * For the passed selection instance, it returns the position of the fake caret displayed next to a widget.\n *\n * **Note**: If the fake caret is not currently displayed, `null` is returned.\n *\n * @internal\n * @returns The position of the fake caret or `null` when none is present.\n */\nexport function getTypeAroundFakeCaretPosition( selection: ModelSelection | ModelDocumentSelection ): 'before' | 'after' | null {\n\treturn selection.getAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE ) as any;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgettypearound/widgettypearound\n */\n\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { IconReturnArrow } from '@ckeditor/ckeditor5-icons';\nimport { Template } from '@ckeditor/ckeditor5-ui';\n\nimport {\n\tEnter,\n\ttype ViewDocumentEnterEvent\n} from '@ckeditor/ckeditor5-enter';\n\nimport {\n\tDelete,\n\ttype ViewDocumentDeleteEvent,\n\ttype ViewDocumentInsertTextEvent\n} from '@ckeditor/ckeditor5-typing';\n\nimport {\n\tenv,\n\tisForwardArrowKeyCode,\n\ttype BaseEvent,\n\ttype Emitter,\n\ttype GetCallback,\n\ttype GetCallbackOptions,\n\ttype ObservableChangeEvent,\n\ttype KeystrokeInfo\n} from '@ckeditor/ckeditor5-utils';\n\nimport type {\n\tBubblingEventInfo,\n\tModelDocumentChangeEvent,\n\tViewDocumentDomEventData,\n\tDowncastInsertEvent,\n\tDowncastSelectionEvent,\n\tViewDowncastWriter,\n\tModelElement,\n\tModelSchema,\n\tModelSelectionChangeRangeEvent,\n\tViewDocumentArrowKeyEvent,\n\tViewDocumentCompositionStartEvent,\n\tViewDocumentKeyDownEvent,\n\tViewDocumentMouseDownEvent,\n\tViewElement,\n\tModelDeleteContentEvent,\n\tModelInsertContentEvent,\n\tModelInsertObjectEvent\n} from '@ckeditor/ckeditor5-engine';\n\nimport {\n\tisTypeAroundWidget,\n\tgetClosestTypeAroundDomButton,\n\tgetTypeAroundButtonPosition,\n\tgetClosestWidgetViewElement,\n\tgetTypeAroundFakeCaretPosition,\n\tTYPE_AROUND_SELECTION_ATTRIBUTE\n} from './utils.js';\n\nimport { isWidget } from '../utils.js';\nimport { type Widget } from '../widget.js';\n\n// @if CK_DEBUG_TYPING // const { _buildLogMessage } = require( '@ckeditor/ckeditor5-engine/src/dev-utils/utils.js' );\n\nimport '../../theme/widgettypearound.css';\n\nconst POSSIBLE_INSERTION_POSITIONS = [ 'before', 'after' ] as const;\n\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString( IconReturnArrow, 'image/svg+xml' ).firstChild!;\n\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n */\nexport class WidgetTypeAround extends Plugin {\n\t/**\n\t * A reference to the model widget element that has the fake caret active\n\t * on either side of it. It is later used to remove CSS classes associated with the fake caret\n\t * when the widget no longer needs it.\n\t */\n\tprivate _currentFakeCaretModelElement: ModelElement | null = null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'WidgetTypeAround' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Enter, Delete ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n\t\t// and lines visually disappear. All the interactions are disabled in individual plugin methods.\n\t\tthis.on<ObservableChangeEvent<boolean>>( 'change:isEnabled', ( evt, data, isEnabled ) => {\n\t\t\teditingView.change( writer => {\n\t\t\t\tfor ( const root of editingView.document.roots ) {\n\t\t\t\t\tif ( isEnabled ) {\n\t\t\t\t\t\twriter.removeClass( PLUGIN_DISABLED_EDITING_ROOT_CLASS, root );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.addClass( PLUGIN_DISABLED_EDITING_ROOT_CLASS, root );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( !isEnabled ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tthis._enableTypeAroundUIInjection();\n\t\tthis._enableInsertingParagraphsOnButtonClick();\n\t\tthis._enableInsertingParagraphsOnEnterKeypress();\n\t\tthis._enableInsertingParagraphsOnTypingKeystroke();\n\t\tthis._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n\t\tthis._enableDeleteIntegration();\n\t\tthis._enableInsertContentIntegration();\n\t\tthis._enableInsertObjectIntegration();\n\t\tthis._enableDeleteContentIntegration();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis._currentFakeCaretModelElement = null;\n\t}\n\n\t/**\n\t * Inserts a new paragraph next to a widget element with the selection anchored in it.\n\t *\n\t * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n\t * the viewport to the selection in the inserted paragraph.\n\t *\n\t * @param widgetModelElement The model widget element next to which a paragraph is inserted.\n\t * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n\t */\n\tprivate _insertParagraph( widgetModelElement: ModelElement, position: 'before' | 'after' ) {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst attributesToCopy = editor.model.schema.getAttributesWithProperty( widgetModelElement, 'copyOnReplace', true );\n\n\t\teditor.execute( 'insertParagraph', {\n\t\t\tposition: editor.model.createPositionAt( widgetModelElement, position ),\n\t\t\tattributes: attributesToCopy\n\t\t} );\n\n\t\teditingView.focus();\n\t\teditingView.scrollToTheSelection();\n\t}\n\n\t/**\n\t * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only\n\t * when the plugin {@link #isEnabled is enabled}.\n\t *\n\t * @param emitter The object that fires the event.\n\t * @param event The name of the event.\n\t * @param callback The function to be called on event.\n\t * @param options Additional options.\n\t */\n\tprivate _listenToIfEnabled<TEvent extends BaseEvent>(\n\t\temitter: Emitter,\n\t\tevent: TEvent[ 'name' ],\n\t\tcallback: OmitThisParameter<GetCallback<TEvent>>,\n\t\toptions?: GetCallbackOptions<TEvent>\n\t): void {\n\t\tthis.listenTo( emitter, event, ( ...args ) => {\n\t\t\t// Do not respond if the plugin is disabled.\n\t\t\tif ( this.isEnabled ) {\n\t\t\t\tcallback( ...args );\n\t\t\t}\n\t\t}, options );\n\t}\n\n\t/**\n\t * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n\t * does not expect a position. Instead, it performs the insertion next to a selected widget\n\t * according to the `widget-type-around` model selection attribute value (fake caret position).\n\t *\n\t * Because this method requires the `widget-type-around` attribute to be set,\n\t * the insertion can only happen when the widget's fake caret is active (e.g. activated\n\t * using the keyboard).\n\t *\n\t * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n\t */\n\tprivate _insertParagraphAccordingToFakeCaretPosition() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( modelSelection );\n\n\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n\t\t// @if CK_DEBUG_TYPING // \tconsole.info( ..._buildLogMessage( this, 'WidgetTypeAround',\n\t\t// @if CK_DEBUG_TYPING // \t\t'Fake caret -> insert paragraph',\n\t\t// @if CK_DEBUG_TYPING // \t) );\n\t\t// @if CK_DEBUG_TYPING // }\n\n\t\tconst selectedModelElement = modelSelection.getSelectedElement()!;\n\n\t\tthis._insertParagraph( selectedModelElement, typeAroundFakeCaretPosition );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates a listener in the editing conversion pipeline that injects the widget type around\n\t * UI into every single widget instance created in the editor.\n\t *\n\t * The UI is delivered as a {@link module:engine/view/uielement~ViewUIElement}\n\t * wrapper which renders DOM buttons that users can use to insert paragraphs.\n\t */\n\tprivate _enableTypeAroundUIInjection() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst t = editor.locale.t;\n\t\tconst buttonTitles = {\n\t\t\tbefore: t( 'Insert paragraph before block' ),\n\t\t\tafter: t( 'Insert paragraph after block' )\n\t\t};\n\n\t\teditor.editing.downcastDispatcher.on<DowncastInsertEvent<ModelElement>>( 'insert', ( evt, data, conversionApi ) => {\n\t\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\t\tif ( !viewElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Filter out non-widgets and inline widgets.\n\t\t\tif ( isTypeAroundWidget( viewElement, data.item, schema ) ) {\n\t\t\t\tinjectUIIntoWidget( conversionApi.writer, buttonTitles, viewElement! );\n\n\t\t\t\tconst widgetLabel = viewElement.getCustomProperty( 'widgetLabel' ) as Array<string | ( () => string )>;\n\n\t\t\t\twidgetLabel.push( () => {\n\t\t\t\t\treturn this.isEnabled ? t( 'Press Enter to type after or press Shift + Enter to type before the widget' ) : '';\n\t\t\t\t} );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Brings support for the fake caret that appears when either:\n\t *\n\t * * the selection moves to a widget from a position next to it using arrow keys,\n\t * * the arrow key is pressed when the widget is already selected.\n\t *\n\t * The fake caret lets the user know that they can start typing or just press\n\t * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n\t *\n\t * The fake caret disappears when the user changes the selection or the editor\n\t * gets blurred.\n\t *\n\t * The whole idea is as follows:\n\t *\n\t * 1. A user does one of the 2 scenarios described at the beginning.\n\t * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n\t * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n\t *    on which side of the widget it should appear.\n\t * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n\t *    fake caret on the view widget.\n\t * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n\t *    does the CSS class clean-up in the view.\n\t * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n\t *    attribute (the former also removes widget CSS classes).\n\t */\n\tprivate _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// This is the main listener responsible for the fake caret.\n\t\t// Note: The priority must precede the default Widget class keydown handler (\"high\").\n\t\tthis._listenToIfEnabled<ViewDocumentArrowKeyEvent>( editingView.document, 'arrowKey', ( evt, domEventData ) => {\n\t\t\tthis._handleArrowKeyPress( evt, domEventData );\n\t\t}, { context: [ isWidget, '$text' ], priority: 'high' } );\n\n\t\t// This listener makes sure the widget type around selection attribute will be gone from the model\n\t\t// selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n\t\t// (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n\t\t// let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n\t\tthis._listenToIfEnabled<ModelSelectionChangeRangeEvent>( modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t// Do not reset the selection attribute when the change was indirect.\n\t\t\tif ( !data.directChange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get rid of the widget type around attribute of the selection on every change:range.\n\t\t\t// If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t} );\n\t\t} );\n\n\t\t// Get rid of the widget type around attribute of the selection on every document change\n\t\t// that makes widget not selected any more (i.e. widget was removed).\n\t\tthis._listenToIfEnabled<ModelDocumentChangeEvent>( model.document, 'change:data', () => {\n\t\t\tconst selectedModelElement = modelSelection.getSelectedElement();\n\n\t\t\tif ( selectedModelElement ) {\n\t\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement );\n\n\t\t\t\tif ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t} );\n\t\t} );\n\n\t\t// React to changes of the model selection attribute made by the arrow keys listener.\n\t\t// If the block widget is selected and the attribute changes, downcast the attribute to special\n\t\t// CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n\t\tthis._listenToIfEnabled<DowncastSelectionEvent>( editor.editing.downcastDispatcher, 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst writer = conversionApi.writer;\n\n\t\t\tif ( this._currentFakeCaretModelElement ) {\n\t\t\t\tconst selectedViewElement = conversionApi.mapper.toViewElement( this._currentFakeCaretModelElement );\n\n\t\t\t\tif ( selectedViewElement ) {\n\t\t\t\t\t// Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n\t\t\t\t\twriter.removeClass( POSSIBLE_INSERTION_POSITIONS.map( positionToWidgetCssClass ), selectedViewElement );\n\n\t\t\t\t\tthis._currentFakeCaretModelElement = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst selectedModelElement = data.selection.getSelectedElement();\n\n\t\t\tif ( !selectedModelElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedViewElement = conversionApi.mapper.toViewElement( selectedModelElement );\n\n\t\t\tif ( !isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( data.selection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twriter.addClass( positionToWidgetCssClass( typeAroundFakeCaretPosition ), selectedViewElement! );\n\n\t\t\t// Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n\t\t\t// selection changes\n\t\t\tthis._currentFakeCaretModelElement = selectedModelElement;\n\t\t} );\n\n\t\tthis._listenToIfEnabled<ObservableChangeEvent<boolean>>( editor.ui.focusTracker, 'change:isFocused', ( evt, name, isFocused ) => {\n\t\t\tif ( !isFocused ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tfunction positionToWidgetCssClass( position: 'before' | 'after' ) {\n\t\t\treturn `ck-widget_type-around_show-fake-caret_${ position }`;\n\t\t}\n\t}\n\n\t/**\n\t * A listener executed on each \"keydown\" in the view document, a part of\n\t * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n\t *\n\t * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n\t * be deactivated).\n\t *\n\t * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n\t * in this listener, and stopping and preventing the event that would normally be handled by the widget\n\t * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n\t * includes inline widgets, which are ignored by the widget type around plugin).\n\t */\n\tprivate _handleArrowKeyPress( evt: BubblingEventInfo<'arrowKey'>, domEventData: ViewDocumentDomEventData & KeystrokeInfo ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isForward = isForwardArrowKeyCode( keyCode, editor.locale.contentLanguageDirection );\n\t\tconst selectedViewElement = editingView.document.selection.getSelectedElement()!;\n\t\tconst selectedModelElement = editor.editing.mapper.toModelElement( selectedViewElement )!;\n\t\tlet shouldStopAndPreventDefault;\n\n\t\t// Handle keyboard navigation when a type-around-compatible widget is currently selected.\n\t\tif ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget( isForward );\n\t\t}\n\t\t// Handle keyboard arrow navigation when the selection is next to a type-around-compatible widget\n\t\t// and the widget is about to be selected.\n\t\telse if ( modelSelection.isCollapsed ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget( isForward );\n\t\t}\n\t\t// Handle collapsing a non-collapsed selection that is wider than on a single widget.\n\t\telse if ( !domEventData.shiftKey ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressWhenNonCollapsedSelection( isForward );\n\t\t}\n\n\t\tif ( shouldStopAndPreventDefault ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n\t * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n\t * selection attribute and the direction of the pressed arrow key.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\tprivate _handleArrowKeyPressOnSelectedWidget( isForward: boolean ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( modelSelection );\n\n\t\treturn model.change( writer => {\n\t\t\t// If the fake caret is displayed...\n\t\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\t\tconst isLeavingWidget = typeAroundFakeCaretPosition === ( isForward ? 'after' : 'before' );\n\n\t\t\t\t// If the keyboard arrow works against the value of the selection attribute...\n\t\t\t\t// then remove the selection attribute but prevent default DOM actions\n\t\t\t\t// and do not let the Widget plugin listener move the selection. This brings\n\t\t\t\t// the widget back to the state, for instance, like if was selected using the mouse.\n\t\t\t\t//\n\t\t\t\t// **Note**: If leaving the widget when the fake caret is active, then the default\n\t\t\t\t// Widget handler will change the selection and, in turn, this will automatically discard\n\t\t\t\t// the selection attribute.\n\t\t\t\tif ( !isLeavingWidget ) {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the fake caret wasn't displayed, let's set it now according to the direction of the arrow\n\t\t\t// key press. This also means we cannot let the Widget plugin listener move the selection.\n\t\t\telse {\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before' );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n\t * to one and upon the fake caret should become active for this widget upon arrow keypress\n\t * (AKA entering/selecting the widget).\n\t *\n\t * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n\t * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n\t * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\tprivate _handleArrowKeyPressWhenSelectionNextToAWidget( isForward: boolean ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst widgetPlugin: Widget = editor.plugins.get( 'Widget' );\n\n\t\t// This is the widget the selection is about to be set on.\n\t\tconst modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection( isForward )!;\n\t\tconst viewElementNextToSelection = editor.editing.mapper.toViewElement( modelElementNextToSelection );\n\n\t\tif ( isTypeAroundWidget( viewElementNextToSelection, modelElementNextToSelection, schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twidgetPlugin._setSelectionOverElement( modelElementNextToSelection );\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after' );\n\t\t\t} );\n\n\t\t\t// The change() block above does the same job as the Widget plugin. The event can\n\t\t\t// be safely canceled.\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected (together with some other content)\n\t * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\tprivate _handleArrowKeyPressWhenNonCollapsedSelection( isForward: boolean ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst modelSelection = model.document.selection;\n\n\t\tconst selectedModelNode = isForward ?\n\t\t\tmodelSelection.getLastPosition()!.nodeBefore :\n\t\t\tmodelSelection.getFirstPosition()!.nodeAfter;\n\n\t\tconst selectedViewNode = mapper.toViewElement( selectedModelNode as any );\n\n\t\t// There is a widget at the collapse position so collapse the selection to the fake caret on it.\n\t\tif ( isTypeAroundWidget( selectedViewNode, selectedModelNode as any, schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectedModelNode!, 'on' );\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before' );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Registers a `mousedown` listener for the view document which intercepts events\n\t * coming from the widget type around UI, which happens when a user clicks one of the buttons\n\t * that insert a paragraph next to a widget.\n\t */\n\tprivate _enableInsertingParagraphsOnButtonClick() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tthis._listenToIfEnabled<ViewDocumentMouseDownEvent>( editingView.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tconst button = getClosestTypeAroundDomButton( domEventData.domTarget );\n\n\t\t\tif ( !button ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst buttonPosition = getTypeAroundButtonPosition( button );\n\t\t\tconst widgetViewElement = getClosestWidgetViewElement( button, editingView.domConverter );\n\t\t\tconst widgetModelElement = editor.editing.mapper.toModelElement( widgetViewElement );\n\n\t\t\tthis._insertParagraph( widgetModelElement!, buttonPosition );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t} );\n\t}\n\n\t/**\n\t * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n\t * near the widget when either:\n\t *\n\t * * The fake caret was first activated using the arrow keys,\n\t * * The entire widget is selected in the model.\n\t *\n\t * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n\t * attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n\t * was pressed or not.\n\t */\n\tprivate _enableInsertingParagraphsOnEnterKeypress() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst editingView = editor.editing.view;\n\n\t\tthis._listenToIfEnabled<ViewDocumentEnterEvent>( editingView.document, 'enter', ( evt, domEventData ) => {\n\t\t\t// This event could be triggered from inside the widget but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedModelElement = selection.getSelectedElement()!;\n\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement );\n\n\t\t\tconst schema = editor.model.schema;\n\t\t\tlet wasHandled;\n\n\t\t\t// First check if the widget is selected and there's a type around selection attribute associated\n\t\t\t// with the fake caret that would tell where to insert a new paragraph.\n\t\t\tif ( this._insertParagraphAccordingToFakeCaretPosition() ) {\n\t\t\t\twasHandled = true;\n\t\t\t}\n\t\t\t// Then, if there is no selection attribute associated with the fake caret, check if the widget\n\t\t\t// simply is selected and create a new paragraph according to the keystroke (Shift+)Enter.\n\t\t\telse if ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\tthis._insertParagraph( selectedModelElement, domEventData.isSoft ? 'before' : 'after' );\n\n\t\t\t\twasHandled = true;\n\t\t\t}\n\n\t\t\tif ( wasHandled ) {\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: isWidget } );\n\t}\n\n\t/**\n\t * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n\t * to insert a paragraph next to a widget when the fake caret was activated using arrow\n\t * keys but it responds to typing instead of <kbd>Enter</kbd>.\n\t *\n\t * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`\n\t * model selection attribute as the user simply starts typing, which creates the impression that the fake caret\n\t * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n\t *\n\t * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n\t * and another one for actual typing. It is not a disaster but this may need to be fixed\n\t * sooner or later.\n\t */\n\tprivate _enableInsertingParagraphsOnTypingKeystroke() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\t// Note: The priority must precede the default Input plugin insertText handler.\n\t\tthis._listenToIfEnabled<ViewDocumentInsertTextEvent>( viewDocument, 'insertText', ( evt, data ) => {\n\t\t\tif ( this._insertParagraphAccordingToFakeCaretPosition() ) {\n\t\t\t\t// The view selection in the event data contains the widget. If the new paragraph\n\t\t\t\t// was inserted, modify the view selection passed along with the insertText event\n\t\t\t\t// so the default event handler in the Input plugin starts typing inside the paragraph.\n\t\t\t\t// Otherwise, the typing would be over the widget.\n\t\t\t\tdata.selection = viewDocument.selection;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\tif ( env.isAndroid ) {\n\t\t\t// On Android with English keyboard, the composition starts just by putting caret\n\t\t\t// at the word end or by selecting a table column. This is not a real composition started.\n\t\t\t// Trigger delete content on first composition key pressed.\n\t\t\tthis._listenToIfEnabled<ViewDocumentKeyDownEvent>( viewDocument, 'keydown', ( evt, data ) => {\n\t\t\t\tif ( data.keyCode == 229 ) {\n\t\t\t\t\tthis._insertParagraphAccordingToFakeCaretPosition();\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// Note: The priority must precede the default Input plugin compositionstart handler (to call it before delete content).\n\t\t\tthis._listenToIfEnabled<ViewDocumentCompositionStartEvent>( viewDocument, 'compositionstart', () => {\n\t\t\t\tthis._insertParagraphAccordingToFakeCaretPosition();\n\t\t\t}, { priority: 'highest' } );\n\t\t}\n\t}\n\n\t/**\n\t * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n\t * is pressed and the fake caret is currently active.\n\t *\n\t * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n\t * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n\t * before or after a widget (depending on the content surrounding the widget).\n\t */\n\tprivate _enableDeleteIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\n\t\tthis._listenToIfEnabled<ViewDocumentDeleteEvent>( editingView.document, 'delete', ( evt, domEventData ) => {\n\t\t\t// This event could be triggered from inside the widget but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( model.document.selection );\n\n\t\t\t// This listener handles only these cases when the fake caret is active.\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst direction = domEventData.direction;\n\t\t\tconst selectedModelWidget = model.document.selection.getSelectedElement();\n\n\t\t\tconst isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n\t\t\tconst isDeleteForward = direction == 'forward';\n\t\t\tconst shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n\n\t\t\tif ( shouldDeleteEntireWidget ) {\n\t\t\t\teditor.execute( 'delete', {\n\t\t\t\t\tselection: model.createSelection( selectedModelWidget!, 'on' )\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tconst range = schema.getNearestSelectionRange(\n\t\t\t\t\tmodel.createPositionAt( selectedModelWidget!, typeAroundFakeCaretPosition ),\n\t\t\t\t\tdirection\n\t\t\t\t);\n\n\t\t\t\t// If there is somewhere to move selection to, then there will be something to delete.\n\t\t\t\tif ( range ) {\n\t\t\t\t\t// If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n\t\t\t\t\tif ( !range.isCollapsed ) {\n\t\t\t\t\t\tmodel.change( writer => {\n\t\t\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t\t\t\teditor.execute( isDeleteForward ? 'deleteForward' : 'delete' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst probe = model.createSelection( range.start );\n\t\t\t\t\t\tmodel.modifySelection( probe, { direction } );\n\n\t\t\t\t\t\t// If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n\t\t\t\t\t\t// If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n\t\t\t\t\t\tif ( !probe.focus!.isEqual( range.start ) ) {\n\t\t\t\t\t\t\tmodel.change( writer => {\n\t\t\t\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t\t\t\t\teditor.execute( isDeleteForward ? 'deleteForward' : 'delete' );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If there is no non-collapsed range to be deleted then we are sure that there is an empty element\n\t\t\t\t\t\t// next to a widget that should be removed. \"delete\" and \"deleteForward\" commands cannot get rid of it\n\t\t\t\t\t\t// so calling Model#deleteContent here manually.\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor( schema, range.start.parent as ModelElement );\n\n\t\t\t\t\t\t\tmodel.deleteContent( model.createSelection( deepestEmptyRangeAncestor, 'on' ), {\n\t\t\t\t\t\t\t\tdoNotAutoparagraph: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If some content was deleted, don't let the handler from the Widget plugin kick in.\n\t\t\t// If nothing was deleted, then the default handler will have nothing to do anyway.\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: isWidget } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n\t * content near a widget when the fake caret is first activated using the arrow keys.\n\t *\n\t * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */\n\tprivate _enableInsertContentIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled<ModelInsertContentEvent>( editor.model, 'insertContent', ( evt, [ content, selectable ] ) => {\n\t\t\tif ( selectable && !( selectable as any ).is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevt.stop();\n\n\t\t\treturn model.change( writer => {\n\t\t\t\tconst selectedElement = documentSelection.getSelectedElement();\n\t\t\t\tconst position = model.createPositionAt( selectedElement!, typeAroundFakeCaretPosition );\n\t\t\t\tconst selection = writer.createSelection( position );\n\n\t\t\t\tconst result = model.insertContent( content, selection );\n\n\t\t\t\twriter.setSelection( selection );\n\n\t\t\t\treturn result;\n\t\t\t} );\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the\n\t * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element\n\t * to reflect user's intent of desired insertion position.\n\t *\n\t * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */\n\tprivate _enableInsertObjectIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled<ModelInsertObjectEvent>( editor.model, 'insertObject', ( evt, args ) => {\n\t\t\tconst [ , selectable, options = {} ] = args;\n\n\t\t\tif ( selectable && !( selectable as any ).is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toptions.findOptimalPosition = typeAroundFakeCaretPosition;\n\t\t\targs[ 3 ] = options;\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake\n\t * caret is active.\n\t *\n\t * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n\t * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,\n\t * plain text pasting.\n\t */\n\tprivate _enableDeleteContentIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled<ModelDeleteContentEvent>( editor.model, 'deleteContent', ( evt, [ selection ] ) => {\n\t\t\tif ( selection && !selection.is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\t// Disable removing the selection content while pasting plain text.\n\t\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n}\n\n/**\n * Injects the type around UI into a view widget instance.\n */\nfunction injectUIIntoWidget(\n\tviewWriter: ViewDowncastWriter,\n\tbuttonTitles: { before: string; after: string },\n\twidgetViewElement: ViewElement ) {\n\tconst typeAroundWrapper = viewWriter.createUIElement( 'div', {\n\t\tclass: 'ck ck-reset_all ck-widget__type-around'\n\t}, function( domDocument ) {\n\t\tconst wrapperDomElement = this.toDomElement( domDocument );\n\n\t\tinjectButtons( wrapperDomElement, buttonTitles );\n\t\tinjectFakeCaret( wrapperDomElement );\n\n\t\treturn wrapperDomElement;\n\t} );\n\n\t// Inject the type around wrapper into the widget's wrapper.\n\tviewWriter.insert( viewWriter.createPositionAt( widgetViewElement, 'end' ), typeAroundWrapper );\n}\n\n/**\n * FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n * and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n * <svg> here.\n */\nfunction injectButtons( wrapperDomElement: HTMLElement, buttonTitles: { before: string; after: string } ) {\n\tfor ( const position of POSSIBLE_INSERTION_POSITIONS ) {\n\t\tconst buttonTemplate = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-widget__type-around__button',\n\t\t\t\t\t`ck-widget__type-around__button_${ position }`\n\t\t\t\t],\n\t\t\t\ttitle: buttonTitles[ position ],\n\t\t\t\t'aria-hidden': 'true'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\twrapperDomElement.ownerDocument.importNode( RETURN_ARROW_ICON_ELEMENT, true )\n\t\t\t]\n\t\t} );\n\n\t\twrapperDomElement.appendChild( buttonTemplate.render() );\n\t}\n}\n\nfunction injectFakeCaret( wrapperDomElement: HTMLElement ) {\n\tconst caretTemplate = new Template( {\n\t\ttag: 'div',\n\t\tattributes: {\n\t\t\tclass: [\n\t\t\t\t'ck',\n\t\t\t\t'ck-widget__type-around__fake-caret'\n\t\t\t]\n\t\t}\n\t} );\n\n\twrapperDomElement.appendChild( caretTemplate.render() );\n}\n\n/**\n * Returns the ancestor of an element closest to the root which is empty. For instance,\n * for `<baz>`:\n *\n * ```\n * <foo>abc<bar><baz></baz></bar></foo>\n * ```\n *\n * it returns `<bar>`.\n */\nfunction getDeepestEmptyElementAncestor( schema: ModelSchema, element: ModelElement ) {\n\tlet deepestEmptyAncestor = element;\n\n\tfor ( const ancestor of element.getAncestors( { parentFirst: true } ) ) {\n\t\tif ( ( ancestor as any ).childCount > 1 || schema.isLimit( ancestor ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdeepestEmptyAncestor = ancestor as ModelElement;\n\t}\n\n\treturn deepestEmptyAncestor;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/verticalnavigation\n */\n\nimport {\n\tkeyCodes,\n\tRect,\n\ttype GetCallback\n} from '@ckeditor/ckeditor5-utils';\n\nimport type {\n\tModelDocumentSelection,\n\tEditingController,\n\tModel,\n\tModelPosition,\n\tModelRange,\n\tModelSchema,\n\tModelSelection,\n\tViewDocumentArrowKeyEvent\n} from '@ckeditor/ckeditor5-engine';\n\n/**\n * Returns 'keydown' handler for up/down arrow keys that modifies the caret movement if it's in a text line next to an object.\n *\n * @param editing The editing controller.\n */\nexport function verticalWidgetNavigationHandler(\n\tediting: EditingController\n): GetCallback<ViewDocumentArrowKeyEvent> {\n\tconst model = editing.model;\n\n\treturn ( evt, data ) => {\n\t\tconst arrowUpPressed = data.keyCode == keyCodes.arrowup;\n\t\tconst arrowDownPressed = data.keyCode == keyCodes.arrowdown;\n\t\tconst expandSelection = data.shiftKey;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !arrowUpPressed && !arrowDownPressed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isForward = arrowDownPressed;\n\n\t\t// Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n\t\t// Selection for sure will not approach any object.\n\t\tif ( expandSelection && selectionWillShrink( selection, isForward ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find a range between selection and closest limit element.\n\t\tconst range = findTextRangeFromSelection( editing, selection, isForward );\n\n\t\t// There is no selection position inside the limit element.\n\t\tif ( !range ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If already at the edge of a limit element.\n\t\tif ( range.isCollapsed ) {\n\t\t\t// A collapsed selection at limit edge - nothing more to do.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// A non collapsed selection is at the limit edge while expanding the selection - let others do their stuff.\n\t\t\telse if ( expandSelection ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If the range is a single line (there is no word wrapping) then move the selection to the position closest to the limit element.\n\t\t//\n\t\t// We can't move the selection directly to the isObject element (eg. table cell) because of dual position at the end/beginning\n\t\t// of wrapped line (it's at the same time at the end of one line and at the start of the next line).\n\t\tif ( range.isCollapsed || isSingleLineRange( editing, range, isForward ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\tconst newPosition = isForward ? range.end : range.start;\n\n\t\t\t\tif ( expandSelection ) {\n\t\t\t\t\tconst newSelection = model.createSelection( selection.anchor );\n\t\t\t\t\tnewSelection.setFocus( newPosition );\n\n\t\t\t\t\twriter.setSelection( newSelection );\n\t\t\t\t} else {\n\t\t\t\t\twriter.setSelection( newPosition );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tevt.stop();\n\t\t\tdata.preventDefault();\n\t\t\tdata.stopPropagation();\n\t\t}\n\t};\n}\n\n/**\n * Finds the range between selection and closest limit element (in the direction of navigation).\n * The position next to limit element is adjusted to the closest allowed `$text` position.\n *\n * Returns `null` if, according to the schema, the resulting range cannot contain a `$text` element.\n *\n * @param editing The editing controller.\n * @param selection The current selection.\n * @param isForward The expected navigation direction.\n */\nfunction findTextRangeFromSelection( editing: EditingController, selection: ModelSelection | ModelDocumentSelection, isForward: boolean ) {\n\tconst model = editing.model;\n\n\tif ( isForward ) {\n\t\tconst startPosition = selection.isCollapsed ? selection.focus! : selection.getLastPosition()!;\n\t\tconst endPosition = getNearestNonInlineLimit( model, startPosition, 'forward' );\n\n\t\t// There is no limit element, browser should handle this.\n\t\tif ( !endPosition ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = model.createRange( startPosition, endPosition );\n\t\tconst lastRangePosition = getNearestTextPosition( model.schema, range, 'backward' );\n\n\t\tif ( lastRangePosition ) {\n\t\t\treturn model.createRange( startPosition, lastRangePosition );\n\t\t}\n\n\t\treturn null;\n\t} else {\n\t\tconst endPosition = selection.isCollapsed ? selection.focus! : selection.getFirstPosition()!;\n\t\tconst startPosition = getNearestNonInlineLimit( model, endPosition, 'backward' );\n\n\t\t// There is no limit element, browser should handle this.\n\t\tif ( !startPosition ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = model.createRange( startPosition, endPosition );\n\t\tconst firstRangePosition = getNearestTextPosition( model.schema, range, 'forward' );\n\n\t\tif ( firstRangePosition ) {\n\t\t\treturn model.createRange( firstRangePosition, endPosition );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * Finds the limit element position that is closest to startPosition.\n *\n * @param direction Search direction.\n */\nfunction getNearestNonInlineLimit( model: Model, startPosition: ModelPosition, direction: 'forward' | 'backward' ) {\n\tconst schema = model.schema;\n\tconst range = model.createRangeIn( startPosition.root );\n\n\tconst walkerValueType = direction == 'forward' ? 'elementStart' : 'elementEnd';\n\n\tfor ( const { previousPosition, item, type } of range.getWalker( { startPosition, direction } ) ) {\n\t\tif ( schema.isLimit( item ) && !schema.isInline( item ) ) {\n\t\t\treturn previousPosition;\n\t\t}\n\n\t\t// Stop looking for isLimit element if the next element is a block element (it is for sure not single line).\n\t\tif ( type == walkerValueType && schema.isBlock( item ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Basing on the provided range, finds the first or last (depending on `direction`) position inside the range\n * that can contain `$text` (according to schema).\n *\n * @param schema The schema.\n * @param range The range to find the position in.\n * @param direction Search direction.\n * @returns The nearest selection position.\n *\n */\nfunction getNearestTextPosition( schema: ModelSchema, range: ModelRange, direction: 'forward' | 'backward' ) {\n\tconst position = direction == 'backward' ? range.end : range.start;\n\n\tif ( schema.checkChild( position, '$text' ) ) {\n\t\treturn position;\n\t}\n\n\tfor ( const { nextPosition } of range.getWalker( { direction } ) ) {\n\t\tif ( schema.checkChild( nextPosition, '$text' ) ) {\n\t\t\treturn nextPosition;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if the DOM range corresponding to the provided model range renders as a single line by analyzing DOMRects\n * (verifying if they visually wrap content to the next line).\n *\n * @param editing The editing controller.\n * @param modelRange The current table cell content range.\n * @param isForward The expected navigation direction.\n */\nfunction isSingleLineRange( editing: EditingController, modelRange: ModelRange, isForward: boolean ) {\n\tconst model = editing.model;\n\tconst domConverter = editing.view.domConverter;\n\n\t// Wrapped lines contain exactly the same position at the end of current line\n\t// and at the beginning of next line. That position's client rect is at the end\n\t// of current line. In case of caret at first position of the last line that 'dual'\n\t// position would be detected as it's not the last line.\n\tif ( isForward ) {\n\t\tconst probe = model.createSelection( modelRange.start );\n\n\t\tmodel.modifySelection( probe );\n\n\t\t// If the new position is at the end of the container then we can't use this position\n\t\t// because it would provide incorrect result for eg caption of image and selection\n\t\t// just before end of it. Also in this case there is no \"dual\" position.\n\t\tif ( !probe.focus!.isAtEnd && !modelRange.start.isEqual( probe.focus! ) ) {\n\t\t\tmodelRange = model.createRange( probe.focus!, modelRange.end );\n\t\t}\n\t}\n\n\tconst viewRange = editing.mapper.toViewRange( modelRange );\n\tconst domRange = domConverter.viewRangeToDom( viewRange );\n\tconst rects = Rect.getDomRangeRects( domRange );\n\n\tlet boundaryVerticalPosition;\n\n\tfor ( const rect of rects ) {\n\t\tif ( boundaryVerticalPosition === undefined ) {\n\t\t\tboundaryVerticalPosition = Math.round( rect.bottom );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Let's check if this rect is in new line.\n\t\tif ( Math.round( rect.top ) >= boundaryVerticalPosition ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tboundaryVerticalPosition = Math.max( boundaryVerticalPosition, Math.round( rect.bottom ) );\n\t}\n\n\treturn true;\n}\n\nfunction selectionWillShrink( selection: ModelDocumentSelection, isForward: boolean ) {\n\treturn !selection.isCollapsed && selection.isBackward == isForward;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widget\n */\n\nimport { Plugin } from '@ckeditor/ckeditor5-core';\n\nimport {\n\tMouseObserver,\n\tModelTreeWalker,\n\ttype ViewDocumentDomEventData,\n\ttype DowncastSelectionEvent,\n\ttype ViewDowncastWriter,\n\ttype ModelElement,\n\ttype ModelNode,\n\ttype ViewDocumentArrowKeyEvent,\n\ttype ViewDocumentMouseDownEvent,\n\ttype ViewElement,\n\ttype ModelSchema,\n\ttype ModelPosition,\n\ttype EditingView,\n\ttype ViewDocumentTabEvent,\n\ttype ViewDocumentKeyDownEvent,\n\ttype ViewNode,\n\ttype ViewRange\n} from '@ckeditor/ckeditor5-engine';\n\nimport { Delete, type ViewDocumentDeleteEvent } from '@ckeditor/ckeditor5-typing';\n\nimport {\n\tenv,\n\tkeyCodes,\n\tgetLocalizedArrowKeyCodeDirection,\n\tgetRangeFromMouseEvent,\n\ttype EventInfo,\n\ttype KeystrokeInfo\n} from '@ckeditor/ckeditor5-utils';\n\nimport { WidgetTypeAround } from './widgettypearound/widgettypearound.js';\nimport { verticalWidgetNavigationHandler } from './verticalnavigation.js';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils.js';\n\nimport '../theme/widget.css';\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~ViewSelection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n */\nexport class Widget extends Plugin {\n\t/**\n\t * Holds previously selected widgets.\n\t */\n\tprivate _previouslySelected = new Set<ViewElement>();\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'Widget' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ WidgetTypeAround, Delete ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst t = editor.t;\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection.\n\t\t//\n\t\t// By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n\t\t// child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n\t\t// next to an inline widget: the view selection contains both the widget and the marker.\n\t\t//\n\t\t// This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n\t\t// in these cases based on the model:\n\t\t//\n\t\t//\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n\t\t//\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n\t\t//\n\t\t// Thanks to this:\n\t\t//\n\t\t// * fake selection can be set correctly,\n\t\t// * any logic depending on (View)Selection#getSelectedElement() also works OK.\n\t\t//\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/9524.\n\t\tthis.editor.editing.downcastDispatcher.on<DowncastSelectionEvent>( 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst modelSelection = data.selection;\n\n\t\t\t// The collapsed selection can't contain any widget.\n\t\t\tif ( modelSelection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedModelElement = modelSelection.getSelectedElement();\n\n\t\t\tif ( !selectedModelElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement )!;\n\n\t\t\tif ( !isWidget( selectedViewElement ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !conversionApi.consumable.consume( modelSelection, 'selection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tviewWriter.setSelection( viewWriter.createRangeOn( selectedViewElement ), {\n\t\t\t\tfake: true,\n\t\t\t\tlabel: getLabel( selectedViewElement )\n\t\t\t} );\n\t\t} );\n\n\t\t// Mark all widgets inside the selection with the css class.\n\t\t// This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n\t\tthis.editor.editing.downcastDispatcher.on<DowncastSelectionEvent>( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\t\tlet lastMarked = null;\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\t// Note: There could be multiple selected widgets in a range but no fake selection.\n\t\t\t\t// All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item as ViewElement;\n\t\t\t\t\t// Do not mark nested widgets in selected one. See: #4594\n\t\t\t\t\tif ( isWidget( node ) && !isChild( node, lastMarked ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\t\t\t\t\t\tlastMarked = node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo<ViewDocumentMouseDownEvent>( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// There are two keydown listeners working on different priorities. This allows other\n\t\t// features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n\t\t// and customize the behavior even further in different content/selection scenarios.\n\t\t//\n\t\t// * The first listener handles changing the selection on arrow key press\n\t\t// if the widget is selected or if the selection is next to a widget and the widget\n\t\t// should become selected upon the arrow key press.\n\t\t//\n\t\t// * The second (late) listener makes sure the default browser action on arrow key press is\n\t\t// prevented when a widget is selected. This prevents the selection from being moved\n\t\t// from a fake selection container.\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>( viewDocument, 'arrowKey', ( ...args ) => {\n\t\t\tthis._handleSelectionChangeOnArrowKeyPress( ...args );\n\t\t}, { context: [ isWidget, '$text' ] } );\n\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>( viewDocument, 'arrowKey', ( ...args ) => {\n\t\t\tthis._preventDefaultOnArrowKeyPress( ...args );\n\t\t}, { context: '$root' } );\n\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tviewDocument,\n\t\t\t'arrowKey',\n\t\t\tverticalWidgetNavigationHandler( this.editor.editing ),\n\t\t\t{ context: '$text' }\n\t\t);\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo<ViewDocumentDeleteEvent>( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: '$root' } );\n\n\t\t// Handle Tab key while a widget is selected.\n\t\tthis.listenTo<ViewDocumentTabEvent>( viewDocument, 'tab', ( evt, data ) => {\n\t\t\t// This event could be triggered from inside the widget, but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( data.shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._selectFirstNestedEditable() ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: isWidget, priority: 'low' } );\n\n\t\t// Handle Shift+Tab key while caret inside a widget editable.\n\t\tthis.listenTo<ViewDocumentTabEvent>( viewDocument, 'tab', ( evt, data ) => {\n\t\t\tif ( !data.shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._selectAncestorWidget() ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handle Esc key while inside a nested editable.\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( viewDocument, 'keydown', ( evt, data ) => {\n\t\t\tif ( data.keystroke != keyCodes.esc ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._selectAncestorWidget() ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Add the information about the keystrokes to the accessibility database.\n\t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t\t\tid: 'widget',\n\t\t\tlabel: t( 'Keystrokes that can be used when a widget is selected (for example: image, table, etc.)' ),\n\t\t\tkeystrokes: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move focus from an editable area back to the parent widget' ),\n\t\t\t\t\tkeystroke: 'Esc'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Insert a new paragraph directly after a widget' ),\n\t\t\t\t\tkeystroke: 'Enter'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Insert a new paragraph directly before a widget' ),\n\t\t\t\t\tkeystroke: 'Shift+Enter'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the caret to allow typing directly before a widget' ),\n\t\t\t\t\tkeystroke: [ [ 'arrowup' ], [ 'arrowleft' ] ]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the caret to allow typing directly after a widget' ),\n\t\t\t\t\tkeystroke: [ [ 'arrowdown' ], [ 'arrowright' ] ]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:mousedown mousedown} events on widget elements.\n\t */\n\tprivate _onMousedown( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData<MouseEvent> ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element: ViewElement | null = domEventData.target;\n\n\t\t// Some of DOM elements have no view element representation so it may be null.\n\t\tif ( !element ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If triple click should select entire paragraph.\n\t\tif ( domEventData.domEvent.detail >= 3 ) {\n\t\t\tif ( this._selectBlockContent( element ) ) {\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\tconst editableOrWidgetElement = findClosestEditableOrWidgetAncestor( element );\n\n\t\t\tif ( !editableOrWidgetElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isWidget( editableOrWidgetElement ) ) {\n\t\t\t\telement = editableOrWidgetElement;\n\t\t\t} else {\n\t\t\t\t// Pick view range from the point where the mouse was clicked.\n\t\t\t\tconst clickTargetFromPoint = getElementFromMouseEvent( view, domEventData );\n\n\t\t\t\tif ( clickTargetFromPoint && isWidget( clickTargetFromPoint ) ) {\n\t\t\t\t\telement = clickTargetFromPoint;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// On Android selection would jump to the first table cell, on other devices\n\t\t// we can't block it (and don't need to) because of drag and drop support.\n\t\tif ( env.isAndroid ) {\n\t\t\tdomEventData.preventDefault();\n\t\t}\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\tthis._setSelectionOverElement( modelElement! );\n\t}\n\n\t/**\n\t * Selects entire block content, e.g. on triple click it selects entire paragraph.\n\t */\n\tprivate _selectBlockContent( element: ViewElement ): boolean {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst schema = model.schema;\n\n\t\tconst viewElement = mapper.findMappedViewAncestor( this.editor.editing.view.createPositionAt( element, 0 ) );\n\t\tconst modelElement = findTextBlockAncestor( mapper.toModelElement( viewElement )!, model.schema );\n\n\t\tif ( !modelElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst nextTextBlock = !schema.isLimit( modelElement ) ?\n\t\t\t\tfindNextTextBlock( writer.createPositionAfter( modelElement ), schema ) :\n\t\t\t\tnull;\n\n\t\t\tconst start = writer.createPositionAt( modelElement, 0 );\n\t\t\tconst end = nextTextBlock ?\n\t\t\t\twriter.createPositionAt( nextTextBlock, 0 ) :\n\t\t\t\twriter.createPositionAt( modelElement, 'end' );\n\n\t\t\twriter.setSelection( writer.createRange( start, end ) );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:keydown keydown} events and changes\n\t * the model selection when:\n\t *\n\t * * arrow key is pressed when the widget is selected,\n\t * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n\t *\n\t * See {@link #_preventDefaultOnArrowKeyPress}.\n\t */\n\tprivate _handleSelectionChangeOnArrowKeyPress( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData & KeystrokeInfo ) {\n\t\tconst keyCode = domEventData.keyCode;\n\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( keyCode, this.editor.locale.contentLanguageDirection );\n\t\tconst isForward = direction == 'down' || direction == 'right';\n\t\tconst isVerticalNavigation = direction == 'up' || direction == 'down';\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position!, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Handle collapsing of the selection when there is any widget on the edge of selection.\n\t\t// This is needed because browsers have problems with collapsing such selection.\n\t\tif ( !modelSelection.isCollapsed && !domEventData.shiftKey ) {\n\t\t\tconst firstPosition = modelSelection.getFirstPosition();\n\t\t\tconst lastPosition = modelSelection.getLastPosition();\n\n\t\t\tconst firstSelectedNode = firstPosition!.nodeAfter;\n\t\t\tconst lastSelectedNode = lastPosition!.nodeBefore;\n\n\t\t\tif ( firstSelectedNode && schema.isObject( firstSelectedNode ) || lastSelectedNode && schema.isObject( lastSelectedNode ) ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( isForward ? lastPosition : firstPosition );\n\t\t\t\t} );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If selection is next to object element.\n\n\t\tconst objectElementNextToSelection = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElementNextToSelection && schema.isObject( objectElementNextToSelection ) ) {\n\t\t\t// Do not select an inline widget while handling up/down arrow.\n\t\t\tif ( schema.isInline( objectElementNextToSelection ) && isVerticalNavigation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._setSelectionOverElement( objectElementNextToSelection );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~ViewDocument#event:keydown keydown} events and prevents\n\t * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n\t * container.\n\t *\n\t * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n\t */\n\tprivate _preventDefaultOnArrowKeyPress( eventInfo: EventInfo, domEventData: ViewDocumentDomEventData ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst objectElement = model.document.selection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @param isForward Set to true if delete was performed in forward direction.\n\t * @returns Returns `true` if keys were handled correctly.\n\t */\n\tprivate _handleDelete( isForward: boolean ) {\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( !this.editor.model.canEditAt( modelSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor!.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent!;\n\n\t\t\t\t\twriter.remove( nodeToRemove as ModelElement );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~ModelSelection document's selection} over given element.\n\t *\n\t * @internal\n\t */\n\tpublic _setSelectionOverElement( element: ModelNode ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~ModelElement element} placed next to the current\n\t * {@link module:engine/model/selection~ModelSelection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~ModelSchema schema} as `object`.\n\t *\n\t * @internal\n\t * @param forward Direction of checking.\n\t */\n\tpublic _getObjectElementNextToSelection( forward: boolean ): ModelElement | null {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = model.createSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\n\t\t// The selection didn't change so there is nothing there.\n\t\tif ( probe.isEqual( modelSelection ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst objectElement = forward ? probe.focus!.nodeBefore : probe.focus!.nodeAfter;\n\n\t\tif ( !!objectElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement as ModelElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t */\n\tprivate _clearPreviouslySelectedWidgets( writer: ViewDowncastWriter ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n\n\t/**\n\t * Moves the document selection into the first nested editable.\n\t */\n\tprivate _selectFirstNestedEditable(): boolean {\n\t\tconst editor = this.editor;\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tfor ( const item of viewDocument.selection.getFirstRange()!.getItems() ) {\n\t\t\tif ( item.is( 'editableElement' ) ) {\n\t\t\t\tconst modelElement = editor.editing.mapper.toModelElement( item );\n\n\t\t\t\t/* istanbul ignore next -- @preserve */\n\t\t\t\tif ( !modelElement ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst position = editor.model.createPositionAt( modelElement, 0 );\n\t\t\t\tconst newRange = editor.model.schema.getNearestSelectionRange( position, 'forward' );\n\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Updates the document selection so that it selects first ancestor widget.\n\t */\n\tprivate _selectAncestorWidget(): boolean {\n\t\tconst editor = this.editor;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst selection = editor.editing.view.document.selection;\n\n\t\tconst positionParent = selection.getFirstPosition()!.parent;\n\n\t\tconst positionParentElement = positionParent.is( '$text' ) ?\n\t\t\tpositionParent.parent as ViewElement :\n\t\t\tpositionParent as ViewElement;\n\n\t\tconst viewElement = positionParentElement.findAncestor( isWidget );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst modelElement = mapper.toModelElement( viewElement );\n\n\t\t/* istanbul ignore next -- @preserve */\n\t\tif ( !modelElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.setSelection( modelElement, 'on' );\n\t\t} );\n\n\t\treturn true;\n\t}\n}\n\n/**\n * Finds the closest ancestor element that is either an editable element or a widget.\n *\n * @param element The element from which to start searching.\n * @returns The closest ancestor element that is either an editable element or a widget, or null if none is found.\n */\nfunction findClosestEditableOrWidgetAncestor( element: ViewElement ): ViewElement | null {\n\tlet currentElement: ViewElement | null = element;\n\n\twhile ( currentElement ) {\n\t\tif ( currentElement.is( 'editableElement' ) || isWidget( currentElement ) ) {\n\t\t\treturn currentElement;\n\t\t}\n\n\t\tcurrentElement = currentElement.parent as ViewElement | null;\n\t}\n\n\treturn null;\n}\n\n/**\n * Retrieves the ViewElement associated with a mouse event in the editing view.\n *\n * @param view The editing view.\n * @param domEventData The DOM event data containing the mouse event.\n * @returns The ViewElement associated with the mouse event, or null if not found.\n */\nfunction getElementFromMouseEvent( view: EditingView, domEventData: ViewDocumentDomEventData<MouseEvent> ): ViewElement | null {\n\tconst domRange = getRangeFromMouseEvent( domEventData.domEvent );\n\tlet viewRange: ViewRange | null = null;\n\n\tif ( domRange ) {\n\t\tviewRange = view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\t// Fallback to create range in target element. It happens frequently on Safari browser.\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/16978\n\t\tviewRange = view.createRange( view.createPositionAt( domEventData.target, 0 ) );\n\t}\n\n\tif ( !viewRange ) {\n\t\treturn null;\n\t}\n\n\tconst viewPosition = viewRange.start;\n\n\tif ( !viewPosition.parent ) {\n\t\treturn null;\n\t}\n\n\tlet viewNode = viewPosition.parent;\n\n\tif ( viewPosition.parent.is( 'editableElement' ) ) {\n\t\tif ( viewPosition.isAtEnd && viewPosition.nodeBefore ) {\n\t\t\t// Click after a widget tend to return position at the end of the editable element\n\t\t\t// so use the node before it if range is at the end of a parent.\n\t\t\tviewNode = viewPosition.nodeBefore as ViewNode;\n\t\t} else if ( viewPosition.isAtStart && viewPosition.nodeAfter ) {\n\t\t\t// Click before a widget tend to return position at the start of the editable element\n\t\t\t// so use the node after it if range is at the start of a parent.\n\t\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/16992\n\t\t\tviewNode = viewPosition.nodeAfter as ViewNode;\n\t\t}\n\t}\n\n\tif ( viewNode.is( '$text' ) ) {\n\t\treturn viewNode.parent as ViewElement;\n\t}\n\n\treturn viewNode as ViewElement;\n}\n\n/**\n * Checks whether the specified `element` is a child of the `parent` element.\n *\n * @param element An element to check.\n * @param parent A parent for the element.\n */\nfunction isChild( element: ViewElement, parent: ViewElement | null ) {\n\tif ( !parent ) {\n\t\treturn false;\n\t}\n\n\treturn Array.from( element.getAncestors() ).includes( parent );\n}\n\n/**\n * Returns nearest text block ancestor.\n */\nfunction findTextBlockAncestor( modelElement: ModelElement, schema: ModelSchema ): ModelElement | null {\n\tfor ( const element of modelElement.getAncestors( { includeSelf: true, parentFirst: true } ) ) {\n\t\tif ( schema.checkChild( element as ModelElement, '$text' ) ) {\n\t\t\treturn element as ModelElement;\n\t\t}\n\n\t\t// Do not go beyond nested editable.\n\t\tif ( schema.isLimit( element ) && !schema.isObject( element ) ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns next text block where could put selection.\n */\nfunction findNextTextBlock( position: ModelPosition, schema: ModelSchema ): ModelElement | null {\n\tconst treeWalker = new ModelTreeWalker( { startPosition: position } );\n\n\tfor ( const { item } of treeWalker ) {\n\t\tif ( schema.isLimit( item ) || !item.is( 'element' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( schema.checkChild( item, '$text' ) ) {\n\t\t\treturn item;\n\t\t}\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgettoolbarrepository\n */\n\nimport {\n\tPlugin,\n\ttype Editor,\n\ttype ToolbarConfigItem\n} from '@ckeditor/ckeditor5-core';\n\nimport type { ViewDocumentSelection, ViewElement } from '@ckeditor/ckeditor5-engine';\n\nimport {\n\tBalloonPanelView,\n\tContextualBalloon,\n\tToolbarView,\n\ttype BalloonToolbar,\n\ttype BalloonToolbarShowEvent,\n\ttype EditorUIUpdateEvent\n} from '@ckeditor/ckeditor5-ui';\n\nimport {\n\tCKEditorError,\n\tlogWarning,\n\ttype ObservableChangeEvent,\n\ttype PositioningFunction,\n\ttype RectSource\n} from '@ckeditor/ckeditor5-utils';\n\nimport { isWidget } from './utils.js';\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * ```ts\n * class ImageToolbar extends Plugin {\n * \tstatic get requires() {\n * \t\treturn [ WidgetToolbarRepository ];\n * \t}\n *\n * \tafterInit() {\n * \t\tconst editor = this.editor;\n * \t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n * \t\twidgetToolbarRepository.register( 'image', {\n * \t\t\titems: editor.config.get( 'image.toolbar' ),\n * \t\t\tgetRelatedElement: getClosestSelectedImageWidget\n * \t\t} );\n * \t}\n * }\n * ```\n */\nexport class WidgetToolbarRepository extends Plugin {\n\t/**\n\t * A map of toolbar definitions.\n\t */\n\tprivate _toolbarDefinitions = new Map<string, WidgetRepositoryToolbarDefinition>();\n\n\tprivate _balloon!: ContextualBalloon;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ContextualBalloon ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'WidgetToolbarRepository' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Disables the default balloon toolbar for all widgets.\n\t\tif ( editor.plugins.has( 'BalloonToolbar' ) ) {\n\t\t\tconst balloonToolbar: BalloonToolbar = editor.plugins.get( 'BalloonToolbar' );\n\n\t\t\tthis.listenTo<BalloonToolbarShowEvent>( balloonToolbar, 'show', evt => {\n\t\t\t\tif ( isWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t}\n\n\t\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\n\n\t\tthis.on<ObservableChangeEvent>( 'change:isEnabled', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\tthis.listenTo<EditorUIUpdateEvent>( editor.ui, 'update', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\t// UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n\t\tthis.listenTo<ObservableChangeEvent>( editor.ui.focusTracker, 'change:isFocused', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t}, { priority: 'low' } );\n\t}\n\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tfor ( const toolbarConfig of this._toolbarDefinitions.values() ) {\n\t\t\ttoolbarConfig.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param toolbarId An id for the toolbar. Used to\n\t * @param options Detailed options\n\t * @param options.ariaLabel Label used by assistive technologies to describe this toolbar element.\n\t * @param options.items Array of toolbar items.\n\t * @param options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param options.balloonClassName CSS class for the widget balloon.\n\t */\n\tpublic register(\n\t\ttoolbarId: string,\n\t\t{\n\t\t\tariaLabel,\n\t\t\titems,\n\t\t\tgetRelatedElement,\n\t\t\tballoonClassName = 'ck-toolbar-container',\n\t\t\tpositions\n\t\t}: {\n\t\t\tariaLabel?: string;\n\t\t\titems: Array<ToolbarConfigItem>;\n\t\t\tgetRelatedElement: ( selection: ViewDocumentSelection ) => ( ViewElement | null );\n\t\t\tballoonClassName?: string;\n\t\t\tpositions?: ReadonlyArray<PositioningFunction>;\n\t\t}\n\t): void {\n\t\t// Trying to register a toolbar without any item.\n\t\tif ( !items.length ) {\n\t\t\t/**\n\t\t\t * When {@link module:widget/widgettoolbarrepository~WidgetToolbarRepository#register registering} a new widget toolbar, you\n\t\t\t * need to provide a non-empty array with the items that will be inserted into the toolbar.\n\t\t\t *\n\t\t\t * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n\t\t\t *\n\t\t\t * See for instance:\n\t\t\t *\n\t\t\t * * {@link module:table/tableconfig~TableConfig#contentToolbar `config.table.contentToolbar`}\n\t\t\t * * {@link module:image/imageconfig~ImageConfig#toolbar `config.image.toolbar`}\n\t\t\t *\n\t\t\t * @error widget-toolbar-no-items\n\t\t\t * @param {string} toolbarId The id of the toolbar that has not been configured correctly.\n\t\t\t */\n\t\t\tlogWarning( 'widget-toolbar-no-items', { toolbarId } );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst toolbarView = new ToolbarView( editor.locale );\n\n\t\ttoolbarView.ariaLabel = ariaLabel || t( 'Widget toolbar' );\n\n\t\tif ( this._toolbarDefinitions.has( toolbarId ) ) {\n\t\t\t/**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param {string} toolbarId Toolbar id.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'widget-toolbar-duplicated', this, { toolbarId } );\n\t\t}\n\n\t\tconst toolbarDefinition: WidgetRepositoryToolbarDefinition = {\n\t\t\tview: toolbarView,\n\t\t\tgetRelatedElement,\n\t\t\tballoonClassName,\n\t\t\titemsConfig: items,\n\t\t\tpositions,\n\t\t\tinitialized: false\n\t\t};\n\n\t\t// Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n\t\teditor.ui.addToolbar( toolbarView, {\n\t\t\tisContextual: true,\n\t\t\tbeforeFocus: () => {\n\t\t\t\tconst relatedElement = getRelatedElement( editor.editing.view.document.selection );\n\n\t\t\t\tif ( relatedElement ) {\n\t\t\t\t\tthis._showToolbar( toolbarDefinition, relatedElement );\n\t\t\t\t}\n\t\t\t},\n\t\t\tafterBlur: () => {\n\t\t\t\tthis._hideToolbar( toolbarDefinition );\n\t\t\t}\n\t\t} );\n\n\t\tthis._toolbarDefinitions.set( toolbarId, toolbarDefinition );\n\t}\n\n\t/**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t */\n\tprivate _updateToolbarsVisibility() {\n\t\tlet maxRelatedElementDepth = 0;\n\t\tlet deepestRelatedElement = null;\n\t\tlet deepestToolbarDefinition = null;\n\n\t\tfor ( const definition of this._toolbarDefinitions.values() ) {\n\t\t\tconst relatedElement = definition.getRelatedElement( this.editor.editing.view.document.selection );\n\n\t\t\tif ( !this.isEnabled || !relatedElement ) {\n\t\t\t\tif ( this._isToolbarInBalloon( definition ) ) {\n\t\t\t\t\tthis._hideToolbar( definition );\n\t\t\t\t}\n\t\t\t} else if ( !this.editor.ui.focusTracker.isFocused ) {\n\t\t\t\tif ( this._isToolbarVisible( definition ) ) {\n\t\t\t\t\tthis._hideToolbar( definition );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst relatedElementDepth = relatedElement.getAncestors().length;\n\n\t\t\t\t// Many toolbars can express willingness to be displayed but they do not know about\n\t\t\t\t// each other. Figure out which toolbar is deepest in the view tree to decide which\n\t\t\t\t// should be displayed. For instance, if a selected image is inside a table cell, display\n\t\t\t\t// the ImageToolbar rather than the TableToolbar (#60).\n\t\t\t\tif ( relatedElementDepth > maxRelatedElementDepth ) {\n\t\t\t\t\tmaxRelatedElementDepth = relatedElementDepth;\n\t\t\t\t\tdeepestRelatedElement = relatedElement;\n\t\t\t\t\tdeepestToolbarDefinition = definition;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( deepestToolbarDefinition ) {\n\t\t\tthis._showToolbar( deepestToolbarDefinition, deepestRelatedElement! );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the given toolbar.\n\t */\n\tprivate _hideToolbar( toolbarDefinition: WidgetRepositoryToolbarDefinition ) {\n\t\tthis._balloon.remove( toolbarDefinition.view );\n\t\tthis.stopListening( this._balloon, 'change:visibleView' );\n\t}\n\n\t/**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:ui/editorui/editorui~EditorUI#event:update}.\n\t */\n\tprivate _showToolbar(\n\t\ttoolbarDefinition: WidgetRepositoryToolbarDefinition,\n\t\trelatedElement: ViewElement\n\t) {\n\t\tif ( this._isToolbarVisible( toolbarDefinition ) ) {\n\t\t\trepositionContextualBalloon( this.editor, relatedElement, toolbarDefinition.positions );\n\t\t} else if ( !this._isToolbarInBalloon( toolbarDefinition ) ) {\n\t\t\tif ( !toolbarDefinition.initialized ) {\n\t\t\t\ttoolbarDefinition.initialized = true;\n\t\t\t\ttoolbarDefinition.view.fillFromConfig( toolbarDefinition.itemsConfig, this.editor.ui.componentFactory );\n\t\t\t}\n\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: toolbarDefinition.view,\n\t\t\t\tposition: getBalloonPositionData( this.editor, relatedElement, toolbarDefinition.positions ),\n\t\t\t\tballoonClassName: toolbarDefinition.balloonClassName\n\t\t\t} );\n\n\t\t\t// Update toolbar position each time stack with toolbar view is switched to visible.\n\t\t\t// This is in a case target element has changed when toolbar was in invisible stack\n\t\t\t// e.g. target image was wrapped by a block quote.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n\t\t\tthis.listenTo<ObservableChangeEvent>( this._balloon, 'change:visibleView', () => {\n\t\t\t\tfor ( const definition of this._toolbarDefinitions.values() ) {\n\t\t\t\t\tif ( this._isToolbarVisible( definition ) ) {\n\t\t\t\t\t\tconst relatedElement = definition.getRelatedElement( this.editor.editing.view.document.selection );\n\t\t\t\t\t\trepositionContextualBalloon( this.editor, relatedElement!, toolbarDefinition.positions );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\tprivate _isToolbarVisible( toolbar: WidgetRepositoryToolbarDefinition ) {\n\t\treturn this._balloon.visibleView === toolbar.view;\n\t}\n\n\tprivate _isToolbarInBalloon( toolbar: WidgetRepositoryToolbarDefinition ) {\n\t\treturn this._balloon.hasView( toolbar.view );\n\t}\n}\n\nfunction repositionContextualBalloon( editor: Editor, relatedElement: ViewElement, positions?: ReadonlyArray<PositioningFunction> ) {\n\tconst balloon: ContextualBalloon = editor.plugins.get( 'ContextualBalloon' );\n\tconst position = getBalloonPositionData( editor, relatedElement, positions );\n\n\tballoon.updatePosition( position );\n}\n\nfunction getBalloonPositionData( editor: Editor, relatedElement: ViewElement, positions?: ReadonlyArray<PositioningFunction> ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn {\n\t\ttarget: editingView.domConverter.mapViewToDom( relatedElement ) as RectSource | undefined,\n\t\tpositions: positions || [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\tdefaultPositions.viewportStickyNorth\n\t\t]\n\t};\n}\n\nfunction isWidgetSelected( selection: ViewDocumentSelection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\treturn !!( viewElement && isWidget( viewElement ) );\n}\n\n/**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n */\ninterface WidgetRepositoryToolbarDefinition {\n\n\t/**\n\t * The UI view of the toolbar.\n\t */\n\tview: ToolbarView;\n\n\t/**\n\t * A function that returns an engine {@link module:engine/view/view~EditingView}\n\t * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n\t * there is no such element). The function accepts an instance of {@link module:engine/view/selection~ViewSelection}.\n\t */\n\tgetRelatedElement: ( selection: ViewDocumentSelection ) => ViewElement | null | undefined;\n\n\t/**\n\t * CSS class for the widget balloon when a toolbar is displayed.\n\t */\n\tballoonClassName: string;\n\n\titemsConfig: Array<ToolbarConfigItem>;\n\n\tpositions?: ReadonlyArray<PositioningFunction>;\n\n\tinitialized: boolean;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\n\nimport { ObservableMixin, Rect } from '@ckeditor/ckeditor5-utils';\n\nimport type { WidgetResizerOptions } from '../widgetresize.js';\nimport { calculateResizeHostPercentageWidth } from '../utils.js';\n\n/**\n * Stores the internal state of a single resizable object.\n */\nexport class WidgetResizeState extends /* #__PURE__ */ ObservableMixin() {\n\t/**\n\t * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n\t * if unknown.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public activeHandlePosition: string | null;\n\n\t/**\n\t * The width (percents) proposed, but not committed yet, in the current resize process.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedWidthPercents: number | null;\n\n\t/**\n\t * The width (pixels) proposed, but not committed yet, in the current resize process.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedWidth: number | null;\n\n\t/**\n\t * The height (pixels) proposed, but not committed yet, in the current resize process.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedHeight: number | null;\n\n\t/**\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedHandleHostWidth: number | null;\n\n\t/**\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedHandleHostHeight: number | null;\n\n\t/**\n\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t * traveled, so how much the image should be enlarged.\n\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t *\n\t * @internal\n\t */\n\tpublic _referenceCoordinates: { x: number; y: number } | null;\n\n\t/**\n\t * Resizer options.\n\t */\n\tprivate readonly _options: WidgetResizerOptions;\n\n\t/**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */\n\tprivate _originalWidth?: number;\n\n\t/**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */\n\tprivate _originalHeight?: number;\n\n\t/**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */\n\tprivate _originalWidthPercents?: number;\n\n\t/**\n\t * A width to height ratio of the resized image.\n\t *\n\t * @readonly\n\t */\n\tprivate _aspectRatio?: number;\n\n\t/**\n\t * @param options Resizer options.\n\t */\n\tconstructor( options: WidgetResizerOptions ) {\n\t\tsuper();\n\n\t\tthis.set( 'activeHandlePosition', null );\n\t\tthis.set( 'proposedWidthPercents', null );\n\t\tthis.set( 'proposedWidth', null );\n\t\tthis.set( 'proposedHeight', null );\n\t\tthis.set( 'proposedHandleHostWidth', null );\n\t\tthis.set( 'proposedHandleHostHeight', null );\n\n\t\tthis._options = options;\n\t\tthis._referenceCoordinates = null;\n\t}\n\n\t/**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t */\n\tpublic get originalWidth(): number | undefined {\n\t\treturn this._originalWidth;\n\t}\n\n\t/**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t */\n\tpublic get originalHeight(): number | undefined {\n\t\treturn this._originalHeight;\n\t}\n\n\t/**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t */\n\tpublic get originalWidthPercents(): number | undefined {\n\t\treturn this._originalWidthPercents;\n\t}\n\n\t/**\n\t * A width to height ratio of the resized image.\n\t */\n\tpublic get aspectRatio(): number | undefined {\n\t\treturn this._aspectRatio;\n\t}\n\n\t/**\n\t *\n\t * @param domResizeHandle The handle used to calculate the reference point.\n\t */\n\tpublic begin( domResizeHandle: HTMLElement, domHandleHost: HTMLElement, domResizeHost: HTMLElement ): void {\n\t\tconst clientRect = new Rect( domHandleHost );\n\n\t\tthis.activeHandlePosition = getHandlePosition( domResizeHandle )!;\n\n\t\tthis._referenceCoordinates = getAbsoluteBoundaryPoint( domHandleHost, getOppositePosition( this.activeHandlePosition ) );\n\n\t\tthis._originalWidth = clientRect.width;\n\t\tthis._originalHeight = clientRect.height;\n\n\t\tthis._aspectRatio = clientRect.width / clientRect.height;\n\n\t\tconst widthStyle = domResizeHost.style.width;\n\n\t\tif ( widthStyle && widthStyle.match( /^\\d+(\\.\\d*)?%$/ ) ) {\n\t\t\tthis._originalWidthPercents = parseFloat( widthStyle );\n\t\t} else {\n\t\t\tthis._originalWidthPercents = calculateResizeHostPercentageWidth( domResizeHost, clientRect );\n\t\t}\n\t}\n\n\tpublic update( newSize: {\n\t\twidth: number;\n\t\theight: number;\n\t\twidthPercents: number;\n\t\thandleHostWidth: number;\n\t\thandleHostHeight: number;\n\t} ): void {\n\t\tthis.proposedWidth = newSize.width;\n\t\tthis.proposedHeight = newSize.height;\n\t\tthis.proposedWidthPercents = newSize.widthPercents;\n\n\t\tthis.proposedHandleHostWidth = newSize.handleHostWidth;\n\t\tthis.proposedHandleHostHeight = newSize.handleHostHeight;\n\t}\n}\n\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */\nfunction getAbsoluteBoundaryPoint( element: HTMLElement, resizerPosition: string ) {\n\tconst elementRect = new Rect( element );\n\tconst positionParts = resizerPosition.split( '-' );\n\tconst ret = {\n\t\tx: positionParts[ 1 ] == 'right' ? elementRect.right : elementRect.left,\n\t\ty: positionParts[ 0 ] == 'bottom' ? elementRect.bottom : elementRect.top\n\t};\n\n\tret.x += element.ownerDocument.defaultView!.scrollX;\n\tret.y += element.ownerDocument.defaultView!.scrollY;\n\n\treturn ret;\n}\n\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */\nfunction getResizerHandleClass( resizerPosition: string ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */\nfunction getHandlePosition( domHandle: HTMLElement ) {\n\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\tfor ( const position of resizerPositions ) {\n\t\tif ( domHandle.classList.contains( getResizerHandleClass( position ) ) ) {\n\t\t\treturn position;\n\t\t}\n\t}\n}\n\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */\nfunction getOppositePosition( position: string ) {\n\tconst parts = position.split( '-' );\n\tconst replacements: Record<string, string> = {\n\t\ttop: 'bottom',\n\t\tbottom: 'top',\n\t\tleft: 'right',\n\t\tright: 'left'\n\t};\n\n\treturn `${ replacements[ parts[ 0 ] ] }-${ replacements[ parts[ 1 ] ] }`;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize/sizeview\n */\n\nimport { View } from '@ckeditor/ckeditor5-ui';\nimport type { WidgetResizerOptions } from '../widgetresize.js';\nimport { type WidgetResizeState } from './resizerstate.js';\n\n/**\n * A view displaying the proposed new element size during the resizing.\n *\n * @internal\n */\nexport class SizeView extends View {\n\t/**\n\t * The visibility of the view defined based on the existence of the host proposed dimensions.\n\t *\n\t * @internal\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public _isVisible: boolean;\n\n\t/**\n\t * The text that will be displayed in the `SizeView` child.\n\t * It can be formatted as the pixel values (e.g. 10x20) or the percentage value (e.g. 10%).\n\t *\n\t * @internal\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public _label: string;\n\n\t/**\n\t * The position of the view defined based on the host size and active handle position.\n\t *\n\t * @internal\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public _viewPosition: string;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-size-view',\n\t\t\t\t\tbind.to( '_viewPosition', value => value ? `ck-orientation-${ value }` : '' )\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.if( '_isVisible', 'none', visible => !visible )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttext: bind.to( '_label' )\n\t\t\t} ]\n\t\t} );\n\t}\n\n\t/**\n\t * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n\t *\n\t * @internal\n\t * @param options An object defining the resizer options, used for setting the proper size label.\n\t * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n\t */\n\tpublic _bindToState( options: WidgetResizerOptions, resizeState: WidgetResizeState ): void {\n\t\tthis.bind( '_isVisible' ).to( resizeState, 'proposedWidth', resizeState, 'proposedHeight', ( width, height ) =>\n\t\t\twidth !== null && height !== null );\n\n\t\tthis.bind( '_label' ).to(\n\t\t\tresizeState, 'proposedHandleHostWidth',\n\t\t\tresizeState, 'proposedHandleHostHeight',\n\t\t\tresizeState, 'proposedWidthPercents',\n\t\t\t( width, height, widthPercents ) => {\n\t\t\t\tif ( options.unit === 'px' ) {\n\t\t\t\t\treturn `${ width }×${ height }`;\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ widthPercents }%`;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis.bind( '_viewPosition' ).to(\n\t\t\tresizeState, 'activeHandlePosition',\n\t\t\tresizeState, 'proposedHandleHostWidth',\n\t\t\tresizeState, 'proposedHandleHostHeight',\n\t\t\t// If the widget is too small to contain the size label, display the label above.\n\t\t\t( position, width, height ) => width! < 50 || height! < 50 ? 'above-center' : position!\n\t\t);\n\t}\n\n\t/**\n\t * A method used for cleaning up. It removes the bindings and hides the view.\n\t *\n\t * @internal\n\t */\n\tpublic _dismiss(): void {\n\t\tthis.unbind();\n\t\tthis._isVisible = false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\n\nimport { Template } from '@ckeditor/ckeditor5-ui';\nimport {\n\tRect,\n\tObservableMixin,\n\tcompareArrays,\n\ttype ObservableChangeEvent,\n\ttype DecoratedMethodEvent\n} from '@ckeditor/ckeditor5-utils';\n\nimport { WidgetResizeState } from './resizerstate.js';\nimport { SizeView } from './sizeview.js';\n\nimport type { WidgetResizerOptions } from '../widgetresize.js';\nimport type { ViewElement } from '@ckeditor/ckeditor5-engine';\n\n/**\n * Represents a resizer for a single resizable object.\n */\nexport class WidgetResizer extends /* #__PURE__ */ ObservableMixin() {\n\t/**\n\t * Flag that indicates whether resizer can be used.\n\t *\n\t * @observable\n\t */\n\tdeclare public isEnabled: boolean;\n\n\t/**\n\t * Flag that indicates that resizer is currently focused.\n\t *\n\t * @observable\n\t */\n\tdeclare public isSelected: boolean;\n\n\t/**\n\t * Flag that indicates whether resizer is rendered (visible on the screen).\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public isVisible: boolean;\n\n\t/**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */\n\tprivate _state!: WidgetResizeState;\n\n\t/**\n\t * A view displaying the proposed new element size during the resizing.\n\t */\n\tprivate _sizeView!: SizeView;\n\n\t/**\n\t * Options passed to the {@link #constructor}.\n\t */\n\tprivate _options: WidgetResizerOptions;\n\n\t/**\n\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t */\n\tprivate _viewResizerWrapper: ViewElement | null = null;\n\n\t/**\n\t * The width of the resized {@link module:widget/widgetresize~WidgetResizerOptions#viewElement viewElement} before the resizing started.\n\t */\n\tprivate _initialViewWidth: string | undefined;\n\n\t/**\n\t * @param options Resizer options.\n\t */\n\tconstructor( options: WidgetResizerOptions ) {\n\t\tsuper();\n\n\t\tthis._options = options;\n\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isSelected', false );\n\n\t\tthis.bind( 'isVisible' ).to( this, 'isEnabled', this, 'isSelected', ( isEnabled, isSelected ) => isEnabled && isSelected );\n\n\t\tthis.decorate( 'begin' );\n\t\tthis.decorate( 'cancel' );\n\t\tthis.decorate( 'commit' );\n\t\tthis.decorate( 'updateSize' );\n\n\t\tthis.on( 'commit', event => {\n\t\t\t// State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n\t\t\t// cleaned up (#5195).\n\t\t\tif ( !this.state.proposedWidth && !this.state.proposedWidthPercents ) {\n\t\t\t\tthis._cleanup();\n\t\t\t\tevent.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */\n\tpublic get state(): WidgetResizeState {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * Makes resizer visible in the UI.\n\t */\n\tpublic show(): void {\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.removeClass( 'ck-hidden', this._viewResizerWrapper! );\n\t\t} );\n\t}\n\n\t/**\n\t * Hides resizer in the UI.\n\t */\n\tpublic hide(): void {\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.addClass( 'ck-hidden', this._viewResizerWrapper! );\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches the resizer to the DOM.\n\t */\n\tpublic attach(): void {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst that = this;\n\t\tconst widgetElement = this._options.viewElement;\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst viewResizerWrapper = writer.createUIElement( 'div', {\n\t\t\t\tclass: 'ck ck-reset_all ck-widget__resizer'\n\t\t\t}, function( domDocument ) {\n\t\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\t\tthat._appendHandles( domElement );\n\t\t\t\tthat._appendSizeUI( domElement );\n\n\t\t\t\treturn domElement;\n\t\t\t} );\n\n\t\t\t// Append the resizer wrapper to the widget's wrapper.\n\t\t\twriter.insert( writer.createPositionAt( widgetElement, 'end' ), viewResizerWrapper );\n\t\t\twriter.addClass( 'ck-widget_with-resizer', widgetElement );\n\n\t\t\tthis._viewResizerWrapper = viewResizerWrapper;\n\n\t\t\tif ( !this.isVisible ) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t} );\n\n\t\tthis.on<ObservableChangeEvent>( 'change:isVisible', () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis.show();\n\t\t\t\tthis.redraw();\n\t\t\t} else {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param domResizeHandle Clicked handle.\n\t */\n\tpublic begin( domResizeHandle: HTMLElement ): void {\n\t\tthis._state = new WidgetResizeState( this._options );\n\n\t\tthis._sizeView._bindToState( this._options, this.state );\n\n\t\tthis._initialViewWidth = this._options.viewElement.getStyle( 'width' );\n\n\t\tthis.state.begin( domResizeHandle, this._getHandleHost(), this._getResizeHost() );\n\t}\n\n\t/**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t */\n\tpublic updateSize( domEventData: MouseEvent ): void {\n\t\tconst newSize = this._proposeNewSize( domEventData );\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst unit = this._options.unit || '%';\n\t\t\tconst newWidth = ( unit === '%' ? newSize.widthPercents : newSize.width ) + unit;\n\n\t\t\twriter.setStyle( 'width', newWidth, this._options.viewElement );\n\t\t} );\n\n\t\t// Get an actual image width, and:\n\t\t// * reflect this size to the resize wrapper\n\t\t// * apply this **real** size to the state\n\t\tconst domHandleHost = this._getHandleHost();\n\t\tconst domHandleHostRect = new Rect( domHandleHost );\n\n\t\tconst handleHostWidth = Math.round( domHandleHostRect.width );\n\t\tconst handleHostHeight = Math.round( domHandleHostRect.height );\n\n\t\t// Handle max-width limitation.\n\t\tconst domResizeHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.width = Math.round( domResizeHostRect.width );\n\t\tnewSize.height = Math.round( domResizeHostRect.height );\n\n\t\tthis.redraw( domHandleHostRect );\n\n\t\tthis.state.update( {\n\t\t\t...newSize,\n\t\t\thandleHostWidth,\n\t\t\thandleHostHeight\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */\n\tpublic commit(): void {\n\t\tconst unit = this._options.unit || '%';\n\t\tconst newValue = ( unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth ) + unit;\n\n\t\t// Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n\t\tthis._options.editor.editing.view.change( () => {\n\t\t\tthis._cleanup();\n\t\t\tthis._options.onCommit( newValue );\n\t\t} );\n\t}\n\n\t/**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */\n\tpublic cancel(): void {\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Destroys the resizer.\n\t */\n\tpublic destroy(): void {\n\t\tthis.cancel();\n\t}\n\n\t/**\n\t * Redraws the resizer.\n\t *\n\t * @param handleHostRect Handle host rectangle might be given to improve performance.\n\t */\n\tpublic redraw( handleHostRect?: Rect ): void {\n\t\tconst domWrapper = this._domResizerWrapper;\n\n\t\t// Refresh only if resizer exists in the DOM.\n\t\tif ( !existsInDom( domWrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst widgetWrapper = domWrapper!.parentElement;\n\t\tconst handleHost = this._getHandleHost();\n\t\tconst resizerWrapper = this._viewResizerWrapper!;\n\t\tconst currentDimensions = [\n\t\t\tresizerWrapper.getStyle( 'width' ),\n\t\t\tresizerWrapper.getStyle( 'height' ),\n\t\t\tresizerWrapper.getStyle( 'left' ),\n\t\t\tresizerWrapper.getStyle( 'top' )\n\t\t];\n\t\tlet newDimensions: Array<string | undefined>;\n\n\t\tif ( widgetWrapper!.isSameNode( handleHost ) ) {\n\t\t\tconst clientRect = handleHostRect || new Rect( handleHost );\n\n\t\t\tnewDimensions = [\n\t\t\t\tclientRect.width + 'px',\n\t\t\t\tclientRect.height + 'px',\n\t\t\t\tundefined,\n\t\t\t\tundefined\n\t\t\t];\n\t\t}\n\t\t// In case a resizing host is not a widget wrapper, we need to compensate\n\t\t// for any additional offsets the resize host might have. E.g. wrapper padding\n\t\t// or simply another editable. By doing that the border and resizers are shown\n\t\t// only around the resize host.\n\t\telse {\n\t\t\tnewDimensions = [\n\t\t\t\thandleHost.offsetWidth + 'px',\n\t\t\t\thandleHost.offsetHeight + 'px',\n\t\t\t\thandleHost.offsetLeft + 'px',\n\t\t\t\thandleHost.offsetTop + 'px'\n\t\t\t];\n\t\t}\n\n\t\t// Make changes to the view only if the resizer should actually get new dimensions.\n\t\t// Otherwise, if View#change() was always called, this would cause EditorUI#update\n\t\t// loops because the WidgetResize plugin listens to EditorUI#update and updates\n\t\t// the resizer.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/7633\n\t\tif ( compareArrays( currentDimensions, newDimensions ) !== 'same' ) {\n\t\t\tthis._options.editor.editing.view.change( writer => {\n\t\t\t\twriter.setStyle( {\n\t\t\t\t\twidth: newDimensions[ 0 ]!,\n\t\t\t\t\theight: newDimensions[ 1 ]!,\n\t\t\t\t\tleft: newDimensions[ 2 ]!,\n\t\t\t\t\ttop: newDimensions[ 3 ]!\n\t\t\t\t}, resizerWrapper );\n\t\t\t} );\n\t\t}\n\t}\n\n\tpublic containsHandle( domElement: HTMLElement ): boolean {\n\t\treturn this._domResizerWrapper!.contains( domElement );\n\t}\n\n\tpublic static isResizeHandle( domElement: HTMLElement ): boolean {\n\t\treturn domElement.classList.contains( 'ck-widget__resizer__handle' );\n\t}\n\n\t/**\n\t * Cleans up the context state.\n\t */\n\tprivate _cleanup(): void {\n\t\tthis._sizeView._dismiss();\n\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.setStyle( 'width', this._initialViewWidth!, this._options.viewElement );\n\t\t} );\n\t}\n\n\t/**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t */\n\tprivate _proposeNewSize( domEventData: MouseEvent ): { width: number; height: number; widthPercents: number } {\n\t\tconst state = this.state;\n\t\tconst currentCoordinates = extractCoordinates( domEventData );\n\t\tconst isCentered = this._options.isCentered ? this._options.isCentered( this ) : true;\n\n\t\t// Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n\t\t// meaning that it has been shrunk.\n\t\t//\n\t\t// +----------------+--+\n\t\t// |                |  |\n\t\t// |       img      |  |\n\t\t// |  /handle host  |  |\n\t\t// +----------------+  | ^\n\t\t// |                   | | - enlarge y\n\t\t// +-------------------+ v\n\t\t// \t\t\t\t\t<-->\n\t\t// \t\t\t\t\t enlarge x\n\t\tconst enlargement = {\n\t\t\tx: state._referenceCoordinates!.x - ( currentCoordinates.x + state.originalWidth! ),\n\t\t\ty: ( currentCoordinates.y - state.originalHeight! ) - state._referenceCoordinates!.y\n\t\t};\n\n\t\tif ( isCentered && state.activeHandlePosition!.endsWith( '-right' ) ) {\n\t\t\tenlargement.x = currentCoordinates.x - ( state._referenceCoordinates!.x + state.originalWidth! );\n\t\t}\n\n\t\t// Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n\t\t// one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\t\tif ( isCentered ) {\n\t\t\tenlargement.x *= 2;\n\t\t}\n\n\t\t// const resizeHost = this._getResizeHost();\n\n\t\t// The size proposed by the user. It does not consider the aspect ratio.\n\t\tlet width = Math.abs( state.originalWidth! + enlargement.x );\n\t\tlet height = Math.abs( state.originalHeight! + enlargement.y );\n\n\t\t// Dominant determination must take the ratio into account.\n\t\tconst dominant = width / state.aspectRatio! > height ? 'width' : 'height';\n\n\t\tif ( dominant == 'width' ) {\n\t\t\theight = width / state.aspectRatio!;\n\t\t} else {\n\t\t\twidth = height * state.aspectRatio!;\n\t\t}\n\n\t\treturn {\n\t\t\twidth: Math.round( width ),\n\t\t\theight: Math.round( height ),\n\t\t\twidthPercents: Math.min( Math.round( state.originalWidthPercents! / state.originalWidth! * width * 100 ) / 100, 100 )\n\t\t};\n\t}\n\n\t/**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t */\n\tprivate _getResizeHost(): HTMLElement {\n\t\tconst widgetWrapper = this._domResizerWrapper!.parentElement;\n\n\t\treturn this._options.getResizeHost( widgetWrapper! );\n\t}\n\n\t/**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t */\n\tprivate _getHandleHost(): HTMLElement {\n\t\tconst widgetWrapper = this._domResizerWrapper!.parentElement;\n\n\t\treturn this._options.getHandleHost( widgetWrapper! );\n\t}\n\n\t/**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t */\n\tprivate get _domResizerWrapper(): HTMLElement | null {\n\t\treturn this._options.editor.editing.view.domConverter.mapViewToDom( this._viewResizerWrapper! ) as any;\n\t}\n\n\t/**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @param domElement The resizer wrapper.\n\t */\n\tprivate _appendHandles( domElement: HTMLElement ) {\n\t\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\t\tfor ( const currentPosition of resizerPositions ) {\n\t\t\tdomElement.appendChild( ( new Template( {\n\t\t\t\ttag: 'div',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: `ck-widget__resizer__handle ${ getResizerClass( currentPosition ) }`\n\t\t\t\t}\n\t\t\t} ).render() ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t */\n\tprivate _appendSizeUI( domElement: HTMLElement ) {\n\t\tthis._sizeView = new SizeView();\n\n\t\t// Make sure icon#element is rendered before passing to appendChild().\n\t\tthis._sizeView.render();\n\n\t\tdomElement.appendChild( this._sizeView.element! );\n\t}\n}\n\n/**\n * @eventName ~WidgetResizer#begin\n */\nexport type WidgetResizerBeginEvent = DecoratedMethodEvent<WidgetResizer, 'begin'>;\n\n/**\n * @eventName ~WidgetResizer#cancel\n */\nexport type WidgetResizerCancelEvent = DecoratedMethodEvent<WidgetResizer, 'cancel'>;\n\n/**\n * @eventName ~WidgetResizer#commit\n */\nexport type WidgetResizerCommitEvent = DecoratedMethodEvent<WidgetResizer, 'commit'>;\n\n/**\n * @eventName ~WidgetResizer#updateSize\n */\nexport type WidgetResizerUpdateSizeEvent = DecoratedMethodEvent<WidgetResizer, 'updateSize'>;\n\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */\nfunction getResizerClass( resizerPosition: string ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\nfunction extractCoordinates( event: MouseEvent ) {\n\treturn {\n\t\tx: event.pageX,\n\t\ty: event.pageY\n\t};\n}\n\nfunction existsInDom( element: Node | DocumentFragment | undefined | null ) {\n\treturn element && element.ownerDocument && element.ownerDocument.contains( element );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize\n */\n\nimport {\n\tWidgetResizer,\n\ttype WidgetResizerBeginEvent,\n\ttype WidgetResizerCancelEvent,\n\ttype WidgetResizerCommitEvent\n} from './widgetresize/resizer.js';\n\nimport { type WidgetToolbarRepository } from './widgettoolbarrepository.js';\n\nimport {\n\tPlugin,\n\ttype Editor\n} from '@ckeditor/ckeditor5-core';\n\nimport {\n\tMouseObserver,\n\ttype ModelDocumentChangeEvent,\n\ttype ViewDocumentDomEventData,\n\ttype ModelElement,\n\ttype ViewContainerElement,\n\ttype ViewDocumentMouseDownEvent,\n\ttype ViewSelectionChangeEvent\n} from '@ckeditor/ckeditor5-engine';\n\nimport type { EditorUIUpdateEvent } from '@ckeditor/ckeditor5-ui';\n\nimport {\n\tDomEmitterMixin,\n\tglobal,\n\ttype DomEmitter,\n\ttype EventInfo\n} from '@ckeditor/ckeditor5-utils';\n\nimport { throttle, type DebouncedFunc } from 'es-toolkit/compat';\n\nimport '../theme/widgetresize.css';\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n */\nexport class WidgetResize extends Plugin {\n\t/**\n\t * The currently selected resizer.\n\t *\n\t * @observable\n\t */\n\tdeclare public selectedResizer: WidgetResizer | null;\n\n\t/**\n\t * References an active resizer.\n\t *\n\t * Active resizer means a resizer which handle is actively used by the end user.\n\t *\n\t * @internal\n\t * @observable\n\t */\n\tdeclare public _activeResizer: WidgetResizer | null;\n\n\t/**\n\t * A map of resizers created using this plugin instance.\n\t */\n\tprivate _resizers = new Map<ViewContainerElement, WidgetResizer>();\n\n\tprivate _observer!: DomEmitter;\n\n\tprivate _redrawSelectedResizerThrottled!: DebouncedFunc<() => void>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'WidgetResize' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editing = this.editor.editing;\n\t\tconst domDocument = global.window.document;\n\n\t\tthis.set( 'selectedResizer', null );\n\t\tthis.set( '_activeResizer', null );\n\n\t\tediting.view.addObserver( MouseObserver );\n\n\t\tthis._observer = new ( DomEmitterMixin() )();\n\n\t\tthis.listenTo<ViewDocumentMouseDownEvent>(\n\t\t\tediting.view.document,\n\t\t\t'mousedown',\n\t\t\tthis._mouseDownListener.bind( this ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis._observer.listenTo( domDocument, 'mousemove', this._mouseMoveListener.bind( this ) );\n\t\tthis._observer.listenTo( domDocument, 'mouseup', this._mouseUpListener.bind( this ) );\n\n\t\tthis._redrawSelectedResizerThrottled = throttle( () => this.redrawSelectedResizer(), 200 );\n\n\t\t// Redrawing on any change of the UI of the editor (including content changes).\n\t\tthis.editor.ui.on<EditorUIUpdateEvent>( 'update', this._redrawSelectedResizerThrottled );\n\n\t\t// Remove view widget-resizer mappings for widgets that have been removed from the document.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10156\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10266\n\t\tthis.editor.model.document.on<ModelDocumentChangeEvent>( 'change', () => {\n\t\t\tfor ( const [ viewElement, resizer ] of this._resizers ) {\n\t\t\t\tif ( !viewElement.isAttached() ) {\n\t\t\t\t\tthis._resizers.delete( viewElement );\n\t\t\t\t\tresizer.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\t\tthis._observer.listenTo( global.window, 'resize', this._redrawSelectedResizerThrottled );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\n\t\tviewSelection.on<ViewSelectionChangeEvent>( 'change', () => {\n\t\t\tconst selectedElement = viewSelection.getSelectedElement() as ViewContainerElement;\n\n\t\t\tconst resizer = this.getResizerByViewElement( selectedElement ) || null;\n\t\t\tif ( resizer ) {\n\t\t\t\tthis.select( resizer );\n\t\t\t} else {\n\t\t\t\tthis.deselect();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Redraws the selected resizer if there is any selected resizer and if it is visible.\n\t */\n\tpublic redrawSelectedResizer(): void {\n\t\tif ( this.selectedResizer && this.selectedResizer.isVisible ) {\n\t\t\tthis.selectedResizer.redraw();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis._observer.stopListening();\n\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tresizer.destroy();\n\t\t}\n\n\t\tthis._redrawSelectedResizerThrottled.cancel();\n\t}\n\n\t/**\n\t * Marks resizer as selected.\n\t */\n\tpublic select( resizer: WidgetResizer ): void {\n\t\tthis.deselect();\n\t\tthis.selectedResizer = resizer;\n\t\tthis.selectedResizer.isSelected = true;\n\t}\n\n\t/**\n\t * Deselects currently set resizer.\n\t */\n\tpublic deselect(): void {\n\t\tif ( this.selectedResizer ) {\n\t\t\tthis.selectedResizer.isSelected = false;\n\t\t}\n\n\t\tthis.selectedResizer = null;\n\t}\n\n\t/**\n\t * @param options Resizer options.\n\t */\n\tpublic attachTo( options: WidgetResizerOptions ): WidgetResizer {\n\t\tconst resizer = new WidgetResizer( options );\n\t\tconst plugins = this.editor.plugins;\n\n\t\tresizer.attach();\n\n\t\tif ( plugins.has( 'WidgetToolbarRepository' ) ) {\n\t\t\t// Hiding widget toolbar to improve the performance\n\t\t\t// (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n\t\t\tconst widgetToolbarRepository: WidgetToolbarRepository = plugins.get( 'WidgetToolbarRepository' );\n\n\t\t\tresizer.on<WidgetResizerBeginEvent>( 'begin', () => {\n\t\t\t\twidgetToolbarRepository.forceDisabled( 'resize' );\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tresizer.on<WidgetResizerCancelEvent>( 'cancel', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\n\t\t\tresizer.on<WidgetResizerCommitEvent>( 'commit', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\t\t}\n\n\t\tthis._resizers.set( options.viewElement, resizer );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\t\tconst selectedElement = viewSelection.getSelectedElement() as ViewContainerElement;\n\n\t\t// If the element the resizer is created for is currently focused, it should become visible.\n\t\tif ( this.getResizerByViewElement( selectedElement ) == resizer ) {\n\t\t\tthis.select( resizer );\n\t\t}\n\n\t\treturn resizer;\n\t}\n\n\t/**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param viewElement View element associated with the resizer.\n\t */\n\tpublic getResizerByViewElement( viewElement: ViewContainerElement ): WidgetResizer | undefined {\n\t\treturn this._resizers.get( viewElement );\n\t}\n\n\t/**\n\t * Returns a resizer that contains a given resize handle.\n\t */\n\tprivate _getResizerByHandle( domResizeHandle: HTMLElement ): WidgetResizer | undefined {\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tif ( resizer.containsHandle( domResizeHandle ) ) {\n\t\t\t\treturn resizer;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param domEventData Native DOM event.\n\t */\n\tprivate _mouseDownListener( event: EventInfo, domEventData: ViewDocumentDomEventData ) {\n\t\tconst resizeHandle = domEventData.domTarget;\n\n\t\tif ( !WidgetResizer.isResizeHandle( resizeHandle ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._activeResizer = this._getResizerByHandle( resizeHandle ) || null;\n\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.begin( resizeHandle );\n\n\t\t\t// Do not call other events when resizing. See: #6755.\n\t\t\tevent.stop();\n\t\t\tdomEventData.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * @param domEventData Native DOM event.\n\t */\n\tprivate _mouseMoveListener( event: unknown, domEventData: MouseEvent ) {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.updateSize( domEventData );\n\t\t}\n\t}\n\n\tprivate _mouseUpListener(): void {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.commit();\n\t\t\tthis._activeResizer = null;\n\t\t}\n\t}\n}\n\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n */\nexport interface WidgetResizerOptions {\n\n\t/**\n\t * Editor instance associated with the resizer.\n\t */\n\teditor: Editor;\n\n\tmodelElement: ModelElement;\n\n\t/**\n\t * A view of an element to be resized. Typically it's the main widget's view instance.\n\t */\n\tviewElement: ViewContainerElement;\n\n\tunit?: 'px' | '%';\n\n\t/**\n\t * A callback to be executed once the resizing process is done.\n\t *\n\t * It receives a `Number` (`newValue`) as a parameter.\n\t *\n\t * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n\t * which puts the new value into the model.\n\t *\n\t * ```ts\n\t * {\n\t *\teditor,\n\t *\tmodelElement: data.item,\n\t *\tviewElement: widget,\n\t *\n\t *\tonCommit( newValue ) {\n\t *\t\teditor.execute( 'resizeImage', { width: newValue } );\n\t *\t}\n\t * };\n\t * ```\n\t */\n\tonCommit: ( newValue: string ) => void;\n\n\tgetResizeHost: ( widgetWrapper: HTMLElement ) => HTMLElement;\n\n\tgetHandleHost: ( widgetWrapper: HTMLElement ) => HTMLElement;\n\n\tisCentered?: ( resizer: WidgetResizer ) => boolean;\n}\n"],"names":["WidgetHighlightStack","EmitterMixin","_stack","add","descriptor","writer","stack","oldTop","_insertDescriptor","newTop","compareDescriptors","fire","oldDescriptor","newDescriptor","remove","id","_removeDescriptor","index","findIndex","item","splice","i","shouldABeBeforeB","a","b","priority","classesToString","classes","Array","isArray","sort","join","WIDGET_CLASS_NAME","WIDGET_SELECTED_CLASS_NAME","isWidget","node","is","getCustomProperty","toWidget","element","options","CKEditorError","setAttribute","addClass","setCustomProperty","getFillerOffset","label","setLabel","hasSelectionHandle","addSelectionHandle","setHighlightHandling","addHighlight","toArray","attributes","key","removeHighlight","removeClass","removeAttribute","on","evt","data","addHighlightCallback","removeHighlightCallback","labelOrCreator","widgetLabel","push","getLabel","reduce","prev","current","toWidgetEditable","editable","withAriaRole","isReadOnly","property","findOptimalInsertionRange","selection","model","selectedElement","getSelectedElement","typeAroundFakeCaretPosition","getTypeAroundFakeCaretPosition","createRange","createPositionAt","schema","viewToModelPositionOutsideModelElement","viewElementMatcher","mapper","viewPosition","viewParent","findMappedViewAncestor","modelParent","toModelElement","modelPosition","isAtStart","widgetElement","selectionHandle","createUIElement","class","domDocument","domElement","toDomElement","icon","IconView","set","IconDragHandle","render","appendChild","insert","calculateResizeHostAncestorWidth","domResizeHost","getElementComputedWidth","width","paddingLeft","paddingRight","ownerDocument","defaultView","getComputedStyle","parseFloat","domResizeHostParent","parentElement","parentWidth","ancestorLevelLimit","currentLevel","checkedElement","isNaN","calculateResizeHostPercentageWidth","resizeHostRect","Rect","TYPE_AROUND_SELECTION_ATTRIBUTE","isTypeAroundWidget","viewElement","modelElement","isInline","getClosestTypeAroundDomButton","closest","getTypeAroundButtonPosition","classList","contains","getClosestWidgetViewElement","domConverter","widgetDomElement","mapDomToView","getAttribute","POSSIBLE_INSERTION_POSITIONS","RETURN_ARROW_ICON_ELEMENT","DOMParser","parseFromString","IconReturnArrow","firstChild","PLUGIN_DISABLED_EDITING_ROOT_CLASS","WidgetTypeAround","Plugin","_currentFakeCaretModelElement","pluginName","isOfficialPlugin","requires","Enter","Delete","init","editor","editingView","editing","view","isEnabled","change","root","document","roots","removeSelectionAttribute","_enableTypeAroundUIInjection","_enableInsertingParagraphsOnButtonClick","_enableInsertingParagraphsOnEnterKeypress","_enableInsertingParagraphsOnTypingKeystroke","_enableTypeAroundFakeCaretActivationUsingKeyboardArrows","_enableDeleteIntegration","_enableInsertContentIntegration","_enableInsertObjectIntegration","_enableDeleteContentIntegration","destroy","_insertParagraph","widgetModelElement","position","attributesToCopy","getAttributesWithProperty","execute","focus","scrollToTheSelection","_listenToIfEnabled","emitter","event","callback","listenTo","args","_insertParagraphAccordingToFakeCaretPosition","modelSelection","selectedModelElement","t","locale","buttonTitles","before","after","downcastDispatcher","conversionApi","toViewElement","injectUIIntoWidget","domEventData","_handleArrowKeyPress","context","directChange","selectedViewElement","map","positionToWidgetCssClass","ui","focusTracker","name","isFocused","keyCode","isForward","isForwardArrowKeyCode","contentLanguageDirection","shouldStopAndPreventDefault","_handleArrowKeyPressOnSelectedWidget","isCollapsed","_handleArrowKeyPressWhenSelectionNextToAWidget","shiftKey","_handleArrowKeyPressWhenNonCollapsedSelection","preventDefault","stop","isLeavingWidget","setSelectionAttribute","widgetPlugin","plugins","get","modelElementNextToSelection","_getObjectElementNextToSelection","viewElementNextToSelection","_setSelectionOverElement","selectedModelNode","getLastPosition","nodeBefore","getFirstPosition","nodeAfter","selectedViewNode","setSelection","button","domTarget","buttonPosition","widgetViewElement","eventPhase","wasHandled","isSoft","viewDocument","env","isAndroid","direction","selectedModelWidget","isFakeCaretBefore","isDeleteForward","shouldDeleteEntireWidget","createSelection","range","getNearestSelectionRange","probe","start","modifySelection","isEqual","deepestEmptyRangeAncestor","getDeepestEmptyElementAncestor","parent","deleteContent","doNotAutoparagraph","documentSelection","content","selectable","result","insertContent","findOptimalPosition","viewWriter","typeAroundWrapper","wrapperDomElement","injectButtons","injectFakeCaret","buttonTemplate","Template","tag","title","children","importNode","caretTemplate","deepestEmptyAncestor","ancestor","getAncestors","parentFirst","childCount","isLimit","verticalWidgetNavigationHandler","arrowUpPressed","keyCodes","arrowup","arrowDownPressed","arrowdown","expandSelection","selectionWillShrink","findTextRangeFromSelection","isSingleLineRange","newPosition","end","newSelection","anchor","setFocus","stopPropagation","startPosition","endPosition","getNearestNonInlineLimit","lastRangePosition","getNearestTextPosition","firstRangePosition","createRangeIn","walkerValueType","previousPosition","type","getWalker","isBlock","checkChild","nextPosition","modelRange","isAtEnd","viewRange","toViewRange","domRange","viewRangeToDom","rects","getDomRangeRects","boundaryVerticalPosition","rect","undefined","Math","round","bottom","top","max","isBackward","Widget","_previouslySelected","Set","consumable","consume","createRangeOn","fake","_clearPreviouslySelectedWidgets","viewSelection","lastMarked","getRanges","value","isChild","addObserver","MouseObserver","_onMousedown","_handleSelectionChangeOnArrowKeyPress","_preventDefaultOnArrowKeyPress","_handleDelete","_selectFirstNestedEditable","_selectAncestorWidget","keystroke","esc","accessibility","addKeystrokeInfoGroup","keystrokes","eventInfo","target","domEvent","detail","_selectBlockContent","editableOrWidgetElement","findClosestEditableOrWidgetAncestor","clickTargetFromPoint","getElementFromMouseEvent","findTextBlockAncestor","nextTextBlock","findNextTextBlock","createPositionAfter","objectElement","getLocalizedArrowKeyCodeDirection","isVerticalNavigation","isObject","newRange","firstPosition","lastPosition","firstSelectedNode","lastSelectedNode","objectElementNextToSelection","modelDocument","canEditAt","previousNode","isEmpty","nodeToRemove","forward","widget","clear","getFirstRange","getItems","positionParent","positionParentElement","findAncestor","currentElement","getRangeFromMouseEvent","domRangeToView","viewNode","from","includes","includeSelf","treeWalker","ModelTreeWalker","WidgetToolbarRepository","_toolbarDefinitions","Map","_balloon","ContextualBalloon","has","balloonToolbar","isWidgetSelected","_updateToolbarsVisibility","toolbarConfig","values","register","toolbarId","ariaLabel","items","getRelatedElement","balloonClassName","positions","length","logWarning","toolbarView","ToolbarView","toolbarDefinition","itemsConfig","initialized","addToolbar","isContextual","beforeFocus","relatedElement","_showToolbar","afterBlur","_hideToolbar","maxRelatedElementDepth","deepestRelatedElement","deepestToolbarDefinition","definition","_isToolbarInBalloon","_isToolbarVisible","relatedElementDepth","stopListening","repositionContextualBalloon","fillFromConfig","componentFactory","getBalloonPositionData","toolbar","visibleView","hasView","balloon","updatePosition","defaultPositions","BalloonPanelView","mapViewToDom","northArrowSouth","northArrowSouthWest","northArrowSouthEast","southArrowNorth","southArrowNorthWest","southArrowNorthEast","viewportStickyNorth","WidgetResizeState","ObservableMixin","_referenceCoordinates","_options","_originalWidth","_originalHeight","_originalWidthPercents","_aspectRatio","originalWidth","originalHeight","originalWidthPercents","aspectRatio","begin","domResizeHandle","domHandleHost","clientRect","activeHandlePosition","getHandlePosition","getAbsoluteBoundaryPoint","getOppositePosition","height","widthStyle","style","match","update","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","resizerPosition","elementRect","positionParts","split","ret","x","right","left","y","scrollX","scrollY","getResizerHandleClass","domHandle","resizerPositions","parts","replacements","SizeView","View","bind","bindTemplate","setTemplate","to","display","if","visible","text","_bindToState","resizeState","unit","_dismiss","unbind","_isVisible","WidgetResizer","_state","_sizeView","_viewResizerWrapper","_initialViewWidth","isSelected","decorate","state","_cleanup","show","hide","attach","that","viewResizerWrapper","_appendHandles","_appendSizeUI","isVisible","redraw","getStyle","_getHandleHost","_getResizeHost","updateSize","_proposeNewSize","newWidth","setStyle","domHandleHostRect","domResizeHostRect","commit","newValue","onCommit","cancel","handleHostRect","domWrapper","_domResizerWrapper","existsInDom","widgetWrapper","handleHost","resizerWrapper","currentDimensions","newDimensions","isSameNode","offsetWidth","offsetHeight","offsetLeft","offsetTop","compareArrays","containsHandle","isResizeHandle","currentCoordinates","extractCoordinates","isCentered","enlargement","endsWith","abs","dominant","min","getResizeHost","getHandleHost","currentPosition","getResizerClass","pageX","pageY","WidgetResize","_resizers","_observer","_redrawSelectedResizerThrottled","global","window","DomEmitterMixin","_mouseDownListener","_mouseMoveListener","_mouseUpListener","throttle","redrawSelectedResizer","resizer","isAttached","delete","getResizerByViewElement","select","deselect","selectedResizer","attachTo","widgetToolbarRepository","forceDisabled","clearForceDisabled","_getResizerByHandle","resizeHandle","_activeResizer"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11],"debugId":null}}]
}