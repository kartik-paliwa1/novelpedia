{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/dist/index.js","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/utils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/converters.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/schemadefinitions.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/dataschema.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/datafilter.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/codeblock.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/dualcontent.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/heading.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/integrationutils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/image.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/mediaembed.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/script.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/table.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/style.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/list.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/horizontalline.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/integrations/customelement.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/generalhtmlsupport.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/htmlcomment.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/htmlpagedataprocessor.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/fullpage.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-html-support/src/emptyblock.ts"],"sourcesContent":["import { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toArray, priorities, CKEditorError, isValidAttributeName, uid, logWarning, global } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { Matcher, StylesMap, ViewUpcastWriter, HtmlDataProcessor } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { cloneDeep, startCase, mergeWith, isPlainObject, isEqual } from 'es-toolkit/compat';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\n\n/**\n* Helper function for the downcast converter. Updates attributes on the given view element.\n*\n* @param writer The view writer.\n* @param oldViewAttributes The previous GHS attribute value.\n* @param newViewAttributes The current GHS attribute value.\n* @param viewElement The view element to update.\n* @internal\n*/ function updateViewAttributes(writer, oldViewAttributes, newViewAttributes, viewElement) {\n    if (oldViewAttributes) {\n        removeViewAttributes(writer, oldViewAttributes, viewElement);\n    }\n    if (newViewAttributes) {\n        setViewAttributes(writer, newViewAttributes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Sets attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n * @internal\n */ function setViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key, value] of Object.entries(viewAttributes.attributes)){\n            writer.setAttribute(key, value, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        writer.setStyle(viewAttributes.styles, viewElement);\n    }\n    if (viewAttributes.classes) {\n        writer.addClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Removes attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n * @internal\n */ function removeViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key] of Object.entries(viewAttributes.attributes)){\n            writer.removeAttribute(key, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        for (const style of Object.keys(viewAttributes.styles)){\n            writer.removeStyle(style, viewElement);\n        }\n    }\n    if (viewAttributes.classes) {\n        writer.removeClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n* Merges view element attribute objects.\n*\n* @internal\n*/ function mergeViewElementAttributes(target, source) {\n    const result = cloneDeep(target);\n    let key = 'attributes';\n    for(key in source){\n        // Merge classes.\n        if (key == 'classes') {\n            result[key] = Array.from(new Set([\n                ...target[key] || [],\n                ...source[key]\n            ]));\n        } else {\n            result[key] = {\n                ...target[key],\n                ...source[key]\n            };\n        }\n    }\n    return result;\n}\nfunction modifyGhsAttribute(writer, item, ghsAttributeName, subject, callback) {\n    const oldValue = item.getAttribute(ghsAttributeName);\n    const newValue = {};\n    for (const kind of [\n        'attributes',\n        'styles',\n        'classes'\n    ]){\n        // Properties other than `subject` should be assigned from `oldValue`.\n        if (kind != subject) {\n            if (oldValue && oldValue[kind]) {\n                newValue[kind] = oldValue[kind];\n            }\n            continue;\n        }\n        // `callback` should be applied on property [`subject`].\n        if (subject == 'classes') {\n            const values = new Set(oldValue && oldValue.classes || []);\n            callback(values);\n            if (values.size) {\n                newValue[kind] = Array.from(values);\n            }\n            continue;\n        }\n        const values = new Map(Object.entries(oldValue && oldValue[kind] || {}));\n        callback(values);\n        if (values.size) {\n            newValue[kind] = Object.fromEntries(values);\n        }\n    }\n    if (Object.keys(newValue).length) {\n        if (item.is('documentSelection')) {\n            writer.setSelectionAttribute(ghsAttributeName, newValue);\n        } else {\n            writer.setAttribute(ghsAttributeName, newValue, item);\n        }\n    } else if (oldValue) {\n        if (item.is('documentSelection')) {\n            writer.removeSelectionAttribute(ghsAttributeName);\n        } else {\n            writer.removeAttribute(ghsAttributeName, item);\n        }\n    }\n}\n/**\n * Strips the `styles`, and `classes` keys from the GHS attribute value on the given item.\n *\n * @internal\n */ function removeFormatting(ghsAttributeName, itemRange, writer) {\n    for (const item of itemRange.getItems({\n        shallow: true\n    })){\n        const value = item.getAttribute(ghsAttributeName);\n        // Copy only attributes to the new attribute value.\n        if (value && value.attributes && Object.keys(value.attributes).length) {\n            // But reset the GHS attribute only when there is anything more than just attributes.\n            if (Object.keys(value).length > 1) {\n                writer.setAttribute(ghsAttributeName, {\n                    attributes: value.attributes\n                }, item);\n            }\n        } else {\n            // There are no attributes, so remove the GHS attribute completely.\n            writer.removeAttribute(ghsAttributeName, item);\n        }\n    }\n}\n/**\n * Transforms passed string to PascalCase format. Examples:\n * * `div` => `Div`\n * * `h1` => `H1`\n * * `table` => `Table`\n *\n * @internal\n */ function toPascalCase(data) {\n    return startCase(data).replace(/ /g, '');\n}\n/**\n * Returns the attribute name of the model element that holds raw HTML attributes.\n *\n * @internal\n */ function getHtmlAttributeName(viewElementName) {\n    return `html${toPascalCase(viewElementName)}Attributes`;\n}\n\n/**\n * View-to-model conversion helper for object elements.\n *\n * Preserves object element content in `htmlContent` attribute.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/ function viewToModelObjectConverter({ model: modelName }) {\n    return (viewElement, conversionApi)=>{\n        // Let's keep element HTML and its attributes, so we can rebuild element in downcast conversions.\n        return conversionApi.writer.createElement(modelName, {\n            htmlContent: viewElement.getCustomProperty('$rawContent')\n        });\n    };\n}\n/**\n * Conversion helper converting an object element to an HTML object widget.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/ function toObjectWidgetConverter(editor, { view: viewName, isInline }) {\n    const t = editor.t;\n    return (modelElement, { writer })=>{\n        const widgetLabel = t('HTML object');\n        const viewElement = createObjectView(viewName, modelElement, writer);\n        const viewAttributes = modelElement.getAttribute(getHtmlAttributeName(viewName));\n        writer.addClass('html-object-embed__content', viewElement);\n        if (viewAttributes) {\n            setViewAttributes(writer, viewAttributes, viewElement);\n        }\n        // Widget cannot be a raw element because the widget system would not be able\n        // to add its UI to it. Thus, we need separate view container.\n        const viewContainer = writer.createContainerElement(isInline ? 'span' : 'div', {\n            class: 'html-object-embed',\n            'data-html-object-embed-label': widgetLabel\n        }, viewElement);\n        return toWidget(viewContainer, writer, {\n            label: widgetLabel\n        });\n    };\n}\n/**\n* Creates object view element from the given model element.\n*\n* @internal\n*/ function createObjectView(viewName, modelElement, writer) {\n    return writer.createRawElement(viewName, null, (domElement, domConverter)=>{\n        domConverter.setContentOf(domElement, modelElement.getAttribute('htmlContent'));\n    });\n}\n/**\n * View-to-attribute conversion helper preserving inline element attributes on `$text`.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/ function viewToAttributeInlineConverter({ view: viewName, model: attributeKey, allowEmpty }, dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi)=>{\n            let viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            // Do not apply the attribute if the element itself is already consumed and there are no view attributes to store.\n            if (!viewAttributes && !conversionApi.consumable.test(data.viewItem, {\n                name: true\n            })) {\n                return;\n            }\n            // Otherwise, we might need to convert it to an empty object just to preserve element itself,\n            // for example `<cite>` => <$text htmlCite=\"{}\">.\n            viewAttributes = viewAttributes || {};\n            // Consume the element itself if it wasn't consumed by any other converter.\n            conversionApi.consumable.consume(data.viewItem, {\n                name: true\n            });\n            // Since we are converting to attribute we need a range on which we will set the attribute.\n            // If the range is not created yet, we will create it.\n            if (!data.modelRange) {\n                data = Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n            }\n            // Convert empty inline element if allowed and has any attributes.\n            if (allowEmpty && data.modelRange.isCollapsed && Object.keys(viewAttributes).length) {\n                const modelElement = conversionApi.writer.createElement('htmlEmptyElement');\n                if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n                    return;\n                }\n                const parts = conversionApi.getSplitParts(modelElement);\n                data.modelRange = conversionApi.writer.createRange(data.modelRange.start, conversionApi.writer.createPositionAfter(parts[parts.length - 1]));\n                conversionApi.updateConversionResult(modelElement, data);\n                setAttributeOnItem(modelElement, viewAttributes, conversionApi);\n                return;\n            }\n            // Set attribute on each item in range according to the schema.\n            for (const node of data.modelRange.getItems()){\n                setAttributeOnItem(node, viewAttributes, conversionApi);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n    function setAttributeOnItem(node, viewAttributes, conversionApi) {\n        if (conversionApi.schema.checkAttribute(node, attributeKey)) {\n            // Node's children are converted recursively, so node can already include model attribute.\n            // We want to extend it, not replace.\n            const nodeAttributes = node.getAttribute(attributeKey);\n            const attributesToAdd = mergeViewElementAttributes(viewAttributes, nodeAttributes || {});\n            conversionApi.writer.setAttribute(attributeKey, attributesToAdd, node);\n        }\n    }\n}\n/**\n * Conversion helper converting an empty inline model element to an HTML element or widget.\n *\n * @internal\n */ function emptyInlineModelElementToViewConverter({ model: attributeKey, view: viewName }, asWidget) {\n    return (item, { writer, consumable })=>{\n        if (!item.hasAttribute(attributeKey)) {\n            return null;\n        }\n        const viewElement = writer.createContainerElement(viewName);\n        const attributeValue = item.getAttribute(attributeKey);\n        consumable.consume(item, `attribute:${attributeKey}`);\n        setViewAttributes(writer, attributeValue, viewElement);\n        viewElement.getFillerOffset = ()=>null;\n        return asWidget ? toWidget(viewElement, writer) : viewElement;\n    };\n}\n/**\n * Attribute-to-view conversion helper applying attributes to view element preserved on `$text`.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/ function attributeToViewInlineConverter({ priority, view: viewName }) {\n    return (attributeValue, conversionApi)=>{\n        if (!attributeValue) {\n            return;\n        }\n        const { writer } = conversionApi;\n        const viewElement = writer.createAttributeElement(viewName, null, {\n            priority\n        });\n        setViewAttributes(writer, attributeValue, viewElement);\n        return viewElement;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on block element.\n *\n * All matched attributes will be preserved on `html*Attributes` attribute.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/ function viewToModelBlockAttributeConverter({ view: viewName }, dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi)=>{\n            // Converting an attribute of an element that has not been converted to anything does not make sense\n            // because there will be nowhere to set that attribute on. At this stage, the element should've already\n            // been converted. A collapsed range can show up in to-do lists (<input>) or complex widgets (e.g. table).\n            // (https://github.com/ckeditor/ckeditor5/issues/11000).\n            if (!data.modelRange || data.modelRange.isCollapsed) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            if (!viewAttributes) {\n                return;\n            }\n            conversionApi.writer.setAttribute(getHtmlAttributeName(data.viewItem.name), viewAttributes, data.modelRange);\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes preserved in `html*Attributes` attribute\n * for block elements.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/ function modelToViewBlockAttributeConverter({ view: viewName, model: modelName }) {\n    return (dispatcher)=>{\n        dispatcher.on(`attribute:${getHtmlAttributeName(viewName)}:${modelName}`, (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewWriter = conversionApi.writer;\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(viewWriter, attributeOldValue, attributeNewValue, viewElement);\n        });\n    };\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module html-support/schemadefinitions\n */ /**\n * Skipped elements due to HTML deprecation:\n * * noframes (not sure if we should provide support for this element. CKE4 is not supporting frameset and frame,\n *   but it will unpack <frameset><noframes>foobar</noframes></frameset> to <noframes>foobar</noframes>, so there\n *   may be some content loss. Although using noframes as a standalone element seems invalid)\n * * keygen (this one is also empty)\n * * applet (support is limited mostly to old IE)\n * * basefont (this one is also empty)\n * * isindex (basically no support for modern browsers at all)\n *\n * Skipped elements due to lack empty element support:\n * * hr\n * * area\n * * br\n * * command\n * * map\n * * wbr\n * * colgroup -> col\n *\n * Skipped elements due to complexity:\n * * datalist with option elements used as a data source for input[list] element\n *\n * Skipped elements as they are handled as an object content:\n * * track\n * * source\n * * option\n * * param\n * * optgroup\n *\n * Skipped full page HTML elements:\n * * body\n * * html\n * * title\n * * head\n * * meta\n * * link\n * * etc...\n *\n * Skipped hidden elements:\n * noscript\n *\n * When adding elements to this list, update the feature guide listing, too.\n *\n * @internal\n */ const defaultConfig = {\n    block: [\n        // Existing features.\n        {\n            model: 'codeBlock',\n            view: 'pre'\n        },\n        {\n            model: 'paragraph',\n            view: 'p'\n        },\n        {\n            model: 'blockQuote',\n            view: 'blockquote'\n        },\n        {\n            model: 'listItem',\n            view: 'li'\n        },\n        {\n            model: 'pageBreak',\n            view: 'div'\n        },\n        {\n            model: 'rawHtml',\n            view: 'div'\n        },\n        {\n            model: 'table',\n            view: 'table'\n        },\n        {\n            model: 'tableRow',\n            view: 'tr'\n        },\n        {\n            model: 'tableCell',\n            view: 'td'\n        },\n        {\n            model: 'tableCell',\n            view: 'th'\n        },\n        {\n            model: 'tableColumnGroup',\n            view: 'colgroup'\n        },\n        {\n            model: 'tableColumn',\n            view: 'col'\n        },\n        {\n            model: 'caption',\n            view: 'caption'\n        },\n        {\n            model: 'caption',\n            view: 'figcaption'\n        },\n        {\n            model: 'imageBlock',\n            view: 'img'\n        },\n        {\n            model: 'imageInline',\n            view: 'img'\n        },\n        {\n            model: 'horizontalLine',\n            view: 'hr'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlP',\n            view: 'p',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlBlockquote',\n            view: 'blockquote',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        {\n            model: 'htmlTable',\n            view: 'table',\n            modelSchema: {\n                allowWhere: '$block',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlTbody',\n            view: 'tbody',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlThead',\n            view: 'thead',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTfoot',\n            view: 'tfoot',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCaption',\n            view: 'caption',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlColgroup',\n            view: 'colgroup',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: 'col',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCol',\n            view: 'col',\n            modelSchema: {\n                allowIn: 'htmlColgroup',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTr',\n            view: 'tr',\n            modelSchema: {\n                allowIn: [\n                    'htmlTable',\n                    'htmlThead',\n                    'htmlTbody'\n                ],\n                isLimit: true\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTd',\n            view: 'td',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTh',\n            view: 'th',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFigure',\n            view: 'figure',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlFigcaption',\n            view: 'figcaption',\n            modelSchema: {\n                allowIn: 'htmlFigure',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAddress',\n            view: 'address',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAside',\n            view: 'aside',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlMain',\n            view: 'main',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlDetails',\n            view: 'details',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSummary',\n            view: 'summary',\n            modelSchema: {\n                allowChildren: [\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6',\n                    '$text'\n                ],\n                allowIn: 'htmlDetails',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDiv',\n            view: 'div',\n            paragraphLikeModel: 'htmlDivParagraph',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFieldset',\n            view: 'fieldset',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include h1-h6.\n        {\n            model: 'htmlLegend',\n            view: 'legend',\n            modelSchema: {\n                allowIn: 'htmlFieldset',\n                allowChildren: '$text'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlHeader',\n            view: 'header',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFooter',\n            view: 'footer',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlForm',\n            view: 'form',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlHgroup',\n            view: 'hgroup',\n            modelSchema: {\n                allowIn: [\n                    '$root',\n                    '$container'\n                ],\n                allowChildren: [\n                    'paragraph',\n                    'htmlP',\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlH1',\n            view: 'h1',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH2',\n            view: 'h2',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH3',\n            view: 'h3',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH4',\n            view: 'h4',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH5',\n            view: 'h5',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH6',\n            view: 'h6',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: '$htmlList',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: [\n                    '$htmlList',\n                    'htmlLi'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDir',\n            view: 'dir',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlMenu',\n            view: 'menu',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlUl',\n            view: 'ul',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlOl',\n            view: 'ol',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlLi',\n            view: 'li',\n            modelSchema: {\n                allowIn: '$htmlList',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlPre',\n            view: 'pre',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlArticle',\n            view: 'article',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSection',\n            view: 'section',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlNav',\n            view: 'nav',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDivDl',\n            view: 'div',\n            modelSchema: {\n                allowChildren: [\n                    'htmlDt',\n                    'htmlDd'\n                ],\n                allowIn: 'htmlDl'\n            }\n        },\n        {\n            model: 'htmlDl',\n            view: 'dl',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: [\n                    'htmlDt',\n                    'htmlDd',\n                    'htmlDivDl'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDt',\n            view: 'dt',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDd',\n            view: 'dd',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCenter',\n            view: 'center',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlHr',\n            view: 'hr',\n            isEmpty: true,\n            modelSchema: {\n                inheritAllFrom: '$blockObject'\n            }\n        }\n    ],\n    inline: [\n        // Existing features (attribute set on an existing model element).\n        {\n            model: 'htmlLiAttributes',\n            view: 'li',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlOlAttributes',\n            view: 'ol',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlUlAttributes',\n            view: 'ul',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTheadAttributes',\n            view: 'thead',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTbodyAttributes',\n            view: 'tbody',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'imageBlock'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlAcronym',\n            view: 'acronym',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTt',\n            view: 'tt',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlFont',\n            view: 'font',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTime',\n            view: 'time',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlVar',\n            view: 'var',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBig',\n            view: 'big',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSmall',\n            view: 'small',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSamp',\n            view: 'samp',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlQ',\n            view: 'q',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlOutput',\n            view: 'output',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlKbd',\n            view: 'kbd',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdi',\n            view: 'bdi',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdo',\n            view: 'bdo',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlAbbr',\n            view: 'abbr',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlA',\n            view: 'a',\n            priority: 5,\n            coupledAttribute: 'linkHref',\n            attributeProperties: {\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlStrong',\n            view: 'strong',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlB',\n            view: 'b',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlI',\n            view: 'i',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlEm',\n            view: 'em',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlS',\n            view: 's',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlDel',\n            view: 'del',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlIns',\n            view: 'ins',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlU',\n            view: 'u',\n            coupledAttribute: 'underline',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSub',\n            view: 'sub',\n            coupledAttribute: 'subscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSup',\n            view: 'sup',\n            coupledAttribute: 'superscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCode',\n            view: 'code',\n            coupledAttribute: 'code',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlMark',\n            view: 'mark',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSpan',\n            view: 'span',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCite',\n            view: 'cite',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlLabel',\n            view: 'label',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlDfn',\n            view: 'dfn',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // Objects.\n        {\n            model: 'htmlObject',\n            view: 'object',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlIframe',\n            view: 'iframe',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlInput',\n            view: 'input',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlButton',\n            view: 'button',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlTextarea',\n            view: 'textarea',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlSelect',\n            view: 'select',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlVideo',\n            view: 'video',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlEmbed',\n            view: 'embed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlOembed',\n            view: 'oembed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlAudio',\n            view: 'audio',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlImg',\n            view: 'img',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlCanvas',\n            view: 'canvas',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlMeter',\n            view: 'meter',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlProgress',\n            view: 'progress',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlScript',\n            view: 'script',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlStyle',\n            view: 'style',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlCustomElement',\n            view: '$customElement',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                allowAttributesOf: '$inlineObject',\n                isInline: true\n            }\n        }\n    ]\n};\n\n/**\n * Holds representation of the extended HTML document type definitions to be used by the\n * editor in HTML support.\n *\n * Data schema is represented by data schema definitions.\n *\n * To add new definition for block element,\n * use {@link module:html-support/dataschema~DataSchema#registerBlockElement} method:\n *\n * ```ts\n * dataSchema.registerBlockElement( {\n * \tview: 'section',\n * \tmodel: 'my-section',\n * \tmodelSchema: {\n * \t\tinheritAllFrom: '$block'\n * \t}\n * } );\n * ```\n *\n * To add new definition for inline element,\n * use {@link module:html-support/dataschema~DataSchema#registerInlineElement} method:\n *\n * ```\n * dataSchema.registerInlineElement( {\n * \tview: 'span',\n * \tmodel: 'my-span',\n * \tattributeProperties: {\n * \t\tcopyOnEnter: true\n * \t}\n * } );\n * ```\n */ class DataSchema extends Plugin {\n    /**\n\t * A map of registered data schema definitions.\n\t */ _definitions = [];\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DataSchema';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        for (const definition of defaultConfig.block){\n            this.registerBlockElement(definition);\n        }\n        for (const definition of defaultConfig.inline){\n            this.registerInlineElement(definition);\n        }\n    }\n    /**\n\t * Add new data schema definition describing block element.\n\t */ registerBlockElement(definition) {\n        this._definitions.push({\n            ...definition,\n            isBlock: true\n        });\n    }\n    /**\n\t * Add new data schema definition describing inline element.\n\t */ registerInlineElement(definition) {\n        this._definitions.push({\n            ...definition,\n            isInline: true\n        });\n    }\n    /**\n\t * Updates schema definition describing block element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ extendBlockElement(definition) {\n        this._extendDefinition({\n            ...definition,\n            isBlock: true\n        });\n    }\n    /**\n\t * Updates schema definition describing inline element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ extendInlineElement(definition) {\n        this._extendDefinition({\n            ...definition,\n            isInline: true\n        });\n    }\n    /**\n\t * Returns all definitions matching the given view name.\n\t *\n\t * @param includeReferences Indicates if this method should also include definitions of referenced models.\n\t */ getDefinitionsForView(viewName, includeReferences = false) {\n        const definitions = new Set();\n        for (const definition of this._getMatchingViewDefinitions(viewName)){\n            if (includeReferences) {\n                for (const reference of this._getReferences(definition.model)){\n                    definitions.add(reference);\n                }\n            }\n            definitions.add(definition);\n        }\n        return definitions;\n    }\n    /**\n\t * Returns definitions matching the given model name.\n\t */ getDefinitionsForModel(modelName) {\n        return this._definitions.filter((definition)=>definition.model == modelName);\n    }\n    /**\n\t * Returns definitions matching the given view name.\n\t */ _getMatchingViewDefinitions(viewName) {\n        return this._definitions.filter((def)=>def.view && testViewName(viewName, def.view));\n    }\n    /**\n\t * Resolves all definition references registered for the given data schema definition.\n\t *\n\t * @param modelName Data schema model name.\n\t */ *_getReferences(modelName) {\n        const inheritProperties = [\n            'inheritAllFrom',\n            'inheritTypesFrom',\n            'allowWhere',\n            'allowContentOf',\n            'allowAttributesOf'\n        ];\n        const definitions = this._definitions.filter((definition)=>definition.model == modelName);\n        for (const { modelSchema } of definitions){\n            if (!modelSchema) {\n                continue;\n            }\n            for (const property of inheritProperties){\n                for (const referenceName of toArray(modelSchema[property] || [])){\n                    const definitions = this._definitions.filter((definition)=>definition.model == referenceName);\n                    for (const definition of definitions){\n                        if (referenceName !== modelName) {\n                            yield* this._getReferences(definition.model);\n                            yield definition;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n\t * Updates schema definition with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ _extendDefinition(definition) {\n        const currentDefinitions = Array.from(this._definitions.entries()).filter(([, currentDefinition])=>currentDefinition.model == definition.model);\n        if (currentDefinitions.length == 0) {\n            this._definitions.push(definition);\n            return;\n        }\n        for (const [idx, currentDefinition] of currentDefinitions){\n            this._definitions[idx] = mergeWith({}, currentDefinition, definition, (target, source)=>{\n                return Array.isArray(target) ? target.concat(source) : undefined;\n            });\n        }\n    }\n}\n/**\n * Test view name against the given pattern.\n */ function testViewName(pattern, viewName) {\n    if (typeof pattern === 'string') {\n        return pattern === viewName;\n    }\n    if (pattern instanceof RegExp) {\n        return pattern.test(viewName);\n    }\n    return false;\n}\n\n/**\n * Allows to validate elements and element attributes registered by {@link module:html-support/dataschema~DataSchema}.\n *\n * To enable registered element in the editor, use {@link module:html-support/datafilter~DataFilter#allowElement} method:\n *\n * ```ts\n * dataFilter.allowElement( 'section' );\n * ```\n *\n * You can also allow or disallow specific element attributes:\n *\n * ```ts\n * // Allow `data-foo` attribute on `section` element.\n * dataFilter.allowAttributes( {\n * \tname: 'section',\n * \tattributes: {\n * \t\t'data-foo': true\n * \t}\n * } );\n *\n * // Disallow `color` style attribute on 'section' element.\n * dataFilter.disallowAttributes( {\n * \tname: 'section',\n * \tstyles: {\n * \t\tcolor: /[\\s\\S]+/\n * \t}\n * } );\n * ```\n *\n * To apply the information about allowed and disallowed attributes in custom integration plugin,\n * use the {@link module:html-support/datafilter~DataFilter#processViewAttributes `processViewAttributes()`} method.\n */ class DataFilter extends Plugin {\n    /**\n\t * An instance of the {@link module:html-support/dataschema~DataSchema}.\n\t */ _dataSchema;\n    /**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be allowed.\n\t */ _allowedAttributes;\n    /**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be disallowed.\n\t */ _disallowedAttributes;\n    /**\n\t * Allowed element definitions by {@link module:html-support/datafilter~DataFilter#allowElement} method.\n\t*/ _allowedElements;\n    /**\n\t * Disallowed element names by {@link module:html-support/datafilter~DataFilter#disallowElement} method.\n\t */ _disallowedElements;\n    /**\n\t * Indicates if {@link module:engine/controller/datacontroller~DataController editor's data controller}\n\t * data has been already initialized.\n\t*/ _dataInitialized;\n    /**\n\t * Cached map of coupled attributes. Keys are the feature attributes names\n\t * and values are arrays with coupled GHS attributes names.\n\t */ _coupledAttributes;\n    constructor(editor){\n        super(editor);\n        this._dataSchema = editor.plugins.get('DataSchema');\n        this._allowedAttributes = new Matcher();\n        this._disallowedAttributes = new Matcher();\n        this._allowedElements = new Set();\n        this._disallowedElements = new Set();\n        this._dataInitialized = false;\n        this._coupledAttributes = null;\n        this._registerElementsAfterInit();\n        this._registerElementHandlers();\n        this._registerCoupledAttributesPostFixer();\n        this._registerAssociatedHtmlAttributesPostFixer();\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DataFilter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataSchema,\n            Widget\n        ];\n    }\n    /**\n\t * Load a configuration of one or many elements, where their attributes should be allowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes accepted in the editor.\n\t */ loadAllowedConfig(config) {\n        for (const pattern of config){\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            this.allowElement(elementName);\n            rules.forEach((pattern)=>this.allowAttributes(pattern));\n        }\n    }\n    /**\n\t * Load a configuration of one or many elements, where their attributes should be disallowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes rejected from the editor.\n\t */ loadDisallowedConfig(config) {\n        for (const pattern of config){\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            // Disallow element itself if there is no other rules.\n            if (rules.length == 0) {\n                this.disallowElement(elementName);\n            } else {\n                rules.forEach((pattern)=>this.disallowAttributes(pattern));\n            }\n        }\n    }\n    /**\n\t * Load a configuration of one or many elements, where when empty should be allowed.\n\t *\n\t * **Note**: It modifies DataSchema so must be loaded before registering filtering rules.\n\t *\n\t * @param config Configuration of elements that should be preserved even if empty.\n\t */ loadAllowedEmptyElementsConfig(config) {\n        for (const elementName of config){\n            this.allowEmptyElement(elementName);\n        }\n    }\n    /**\n\t * Allow the given element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ allowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)){\n            this._addAllowedElement(definition);\n            // Reset cached map to recalculate it on the next usage.\n            this._coupledAttributes = null;\n        }\n    }\n    /**\n\t * Disallow the given element in the editor context.\n\t *\n\t * This method will only disallow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ disallowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, false)){\n            this._disallowedElements.add(definition.view);\n        }\n    }\n    /**\n\t * Allow the given empty element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: It modifies DataSchema so must be called before registering filtering rules.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ allowEmptyElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)){\n            if (definition.isInline) {\n                this._dataSchema.extendInlineElement({\n                    ...definition,\n                    allowEmpty: true\n                });\n            }\n        }\n    }\n    /**\n\t * Allow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be allowed.\n\t */ allowAttributes(config) {\n        this._allowedAttributes.add(config);\n    }\n    /**\n\t * Disallow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be disallowed.\n\t */ disallowAttributes(config) {\n        this._disallowedAttributes.add(config);\n    }\n    /**\n\t * Processes all allowed and disallowed attributes on the view element by consuming them and returning the allowed ones.\n\t *\n\t * This method applies the configuration set up by {@link #allowAttributes `allowAttributes()`}\n\t * and {@link #disallowAttributes `disallowAttributes()`} over the given view element by consuming relevant attributes.\n\t * It returns the allowed attributes that were found on the given view element for further processing by integration code.\n\t *\n\t * ```ts\n\t * dispatcher.on( 'element:myElement', ( evt, data, conversionApi ) => {\n\t * \t// Get rid of disallowed and extract all allowed attributes from a viewElement.\n\t * \tconst viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n\t * \t// Do something with them, i.e. store inside a model as a dictionary.\n\t * \tif ( viewAttributes ) {\n\t * \t\tconversionApi.writer.setAttribute( 'htmlAttributesOfMyElement', viewAttributes, data.modelRange );\n\t * \t}\n\t * } );\n\t * ```\n\t *\n\t * @see module:engine/conversion/viewconsumable~ViewConsumable#consume\n\t *\n\t * @returns Object with following properties:\n\t * - attributes Set with matched attribute names.\n\t * - styles Set with matched style names.\n\t * - classes Set with matched class names.\n\t */ processViewAttributes(viewElement, conversionApi) {\n        const { consumable } = conversionApi;\n        // Make sure that the disabled attributes are handled before the allowed attributes are called.\n        // For example, for block images the <figure> converter triggers conversion for <img> first and then for other elements, i.e. <a>.\n        matchAndConsumeAttributes(viewElement, this._disallowedAttributes, consumable);\n        return prepareGHSAttribute(viewElement, matchAndConsumeAttributes(viewElement, this._allowedAttributes, consumable));\n    }\n    /**\n\t * Adds allowed element definition and fires registration event.\n\t */ _addAllowedElement(definition) {\n        if (this._allowedElements.has(definition)) {\n            return;\n        }\n        this._allowedElements.add(definition);\n        // For attribute based integrations (table figure, document lists, etc.) register related element definitions.\n        if ('appliesToBlock' in definition && typeof definition.appliesToBlock == 'string') {\n            for (const relatedDefinition of this._dataSchema.getDefinitionsForModel(definition.appliesToBlock)){\n                if (relatedDefinition.isBlock) {\n                    this._addAllowedElement(relatedDefinition);\n                }\n            }\n        }\n        // We need to wait for all features to be initialized before we can register\n        // element, so we can access existing features model schemas.\n        // If the data has not been initialized yet, _registerElementsAfterInit() method will take care of\n        // registering elements.\n        if (this._dataInitialized) {\n            // Defer registration to the next data pipeline data set so any disallow rules could be applied\n            // even if added after allow rule (disallowElement).\n            this.editor.data.once('set', ()=>{\n                this._fireRegisterEvent(definition);\n            }, {\n                // With the highest priority listener we are able to register elements right before\n                // running data conversion.\n                priority: priorities.highest + 1\n            });\n        }\n    }\n    /**\n\t * Registers elements allowed by {@link module:html-support/datafilter~DataFilter#allowElement} method\n\t * once {@link module:engine/controller/datacontroller~DataController editor's data controller} is initialized.\n\t*/ _registerElementsAfterInit() {\n        this.editor.data.on('init', ()=>{\n            this._dataInitialized = true;\n            for (const definition of this._allowedElements){\n                this._fireRegisterEvent(definition);\n            }\n        }, {\n            // With highest priority listener we are able to register elements right before\n            // running data conversion. Also:\n            // * Make sure that priority is higher than the one used by `RealTimeCollaborationClient`,\n            // as RTC is stopping event propagation.\n            // * Make sure no other features hook into this event before GHS because otherwise the\n            // downcast conversion (for these features) could run before GHS registered its converters\n            // (https://github.com/ckeditor/ckeditor5/issues/11356).\n            priority: priorities.highest + 1\n        });\n    }\n    /**\n\t * Registers default element handlers.\n\t */ _registerElementHandlers() {\n        this.on('register', (evt, definition)=>{\n            const schema = this.editor.model.schema;\n            // Object element should be only registered for new features.\n            // If the model schema is already registered, it should be handled by\n            // #_registerBlockElement() or #_registerObjectElement() attribute handlers.\n            if (definition.isObject && !schema.isRegistered(definition.model)) {\n                this._registerObjectElement(definition);\n            } else if (definition.isBlock) {\n                this._registerBlockElement(definition);\n            } else if (definition.isInline) {\n                this._registerInlineElement(definition);\n            } else {\n                /**\n\t\t\t\t * The definition cannot be handled by the data filter.\n\t\t\t\t *\n\t\t\t\t * Make sure that the registered definition is correct.\n\t\t\t\t *\n\t\t\t\t * @error data-filter-invalid-definition\n\t\t\t\t */ throw new CKEditorError('data-filter-invalid-definition', null, definition);\n            }\n            evt.stop();\n        }, {\n            priority: 'lowest'\n        });\n    }\n    /**\n\t * Registers a model post-fixer that is removing coupled GHS attributes of inline elements. Those attributes\n\t * are removed if a coupled feature attribute is removed.\n\t *\n\t * For example, consider following HTML:\n\t *\n\t * ```html\n\t * <a href=\"foo.html\" id=\"myId\">bar</a>\n\t * ```\n\t *\n\t * Which would be upcasted to following text node in the model:\n\t *\n\t * ```html\n\t * <$text linkHref=\"foo.html\" htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * When the user removes the link from that text (using UI), only `linkHref` attribute would be removed:\n\t *\n\t * ```html\n\t * <$text htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * The `htmlA` attribute would stay in the model and would cause GHS to generate an `<a>` element.\n\t * This is incorrect from UX point of view, as the user wanted to remove the whole link (not only `href`).\n\t */ _registerCoupledAttributesPostFixer() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const change of changes){\n                // Handle only attribute removals.\n                if (change.type != 'attribute' || change.attributeNewValue !== null) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const attributeKeys = coupledAttributes.get(change.attributeKey);\n                if (!attributeKeys) {\n                    continue;\n                }\n                // Remove the coupled GHS attributes on the same range as the feature attribute was removed.\n                for (const { item } of change.range.getWalker()){\n                    for (const attributeKey of attributeKeys){\n                        if (item.hasAttribute(attributeKey)) {\n                            writer.removeAttribute(attributeKey, item);\n                            changed = true;\n                        }\n                    }\n                }\n            }\n            return changed;\n        });\n        this.listenTo(selection, 'change:attribute', (evt, { attributeKeys })=>{\n            const removeAttributes = new Set();\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const attributeKey of attributeKeys){\n                // Handle only attribute removals.\n                if (selection.hasAttribute(attributeKey)) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const coupledAttributeKeys = coupledAttributes.get(attributeKey);\n                if (!coupledAttributeKeys) {\n                    continue;\n                }\n                for (const coupledAttributeKey of coupledAttributeKeys){\n                    if (selection.hasAttribute(coupledAttributeKey)) {\n                        removeAttributes.add(coupledAttributeKey);\n                    }\n                }\n            }\n            if (removeAttributes.size == 0) {\n                return;\n            }\n            model.change((writer)=>{\n                for (const attributeKey of removeAttributes){\n                    writer.removeSelectionAttribute(attributeKey);\n                }\n            });\n        });\n    }\n    /**\n\t * Removes `html*Attributes` attributes from incompatible elements.\n\t *\n\t * For example, consider the following HTML:\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar[]</heading2>\n\t * ```\n\t *\n\t * Pressing `enter` creates a new `paragraph` element that inherits\n\t * the `htmlH2Attributes` attribute from `heading2`.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph htmlH2Attributes=\"...\">[]</paragraph>\n\t * ```\n\t *\n\t * This postfixer ensures that this doesn't happen, and that elements can\n\t * only have `html*Attributes` associated with them,\n\t * e.g.: `htmlPAttributes` for `<p>`, `htmlDivAttributes` for `<div>`, etc.\n\t *\n\t * With it enabled, pressing `enter` at the end of `<heading2>` will create\n\t * a new paragraph without the `htmlH2Attributes` attribute.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph>[]</paragraph>\n\t * ```\n\t */ _registerAssociatedHtmlAttributesPostFixer() {\n        const model = this.editor.model;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            for (const change of changes){\n                if (change.type !== 'insert' || change.name === '$text') {\n                    continue;\n                }\n                for (const attr of change.attributes.keys()){\n                    if (!attr.startsWith('html') || !attr.endsWith('Attributes')) {\n                        continue;\n                    }\n                    if (!model.schema.checkAttribute(change.name, attr)) {\n                        writer.removeAttribute(attr, change.position.nodeAfter);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n    }\n    /**\n\t * Collects the map of coupled attributes. The returned map is keyed by the feature attribute name\n\t * and coupled GHS attribute names are stored in the value array.\n\t */ _getCoupledAttributesMap() {\n        if (this._coupledAttributes) {\n            return this._coupledAttributes;\n        }\n        this._coupledAttributes = new Map();\n        for (const definition of this._allowedElements){\n            if (definition.coupledAttribute && definition.model) {\n                const attributeNames = this._coupledAttributes.get(definition.coupledAttribute);\n                if (attributeNames) {\n                    attributeNames.push(definition.model);\n                } else {\n                    this._coupledAttributes.set(definition.coupledAttribute, [\n                        definition.model\n                    ]);\n                }\n            }\n        }\n        return this._coupledAttributes;\n    }\n    /**\n\t * Fires `register` event for the given element definition.\n\t */ _fireRegisterEvent(definition) {\n        if (definition.view && this._disallowedElements.has(definition.view)) {\n            return;\n        }\n        this.fire(definition.view ? `register:${definition.view}` : 'register', definition);\n    }\n    /**\n\t * Registers object element and attribute converters for the given data schema definition.\n\t */ _registerObjectElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        schema.register(modelName, definition.modelSchema);\n        /* istanbul ignore next: paranoid check -- @preserve */ if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: [\n                getHtmlAttributeName(viewName),\n                'htmlContent'\n            ]\n        });\n        // Store element content in special `$rawContent` custom property to\n        // avoid editor's data filtering mechanism.\n        editor.data.registerRawContentMatcher({\n            name: viewName\n        });\n        conversion.for('upcast').elementToElement({\n            view: viewName,\n            model: viewToModelObjectConverter(definition),\n            // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n            // this listener is called before it. If not, some elements will be transformed into a paragraph.\n            // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n            converterPriority: priorities.low + 2\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: modelName,\n                attributes: [\n                    getHtmlAttributeName(viewName)\n                ]\n            },\n            view: toObjectWidgetConverter(editor, definition)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: modelName,\n            view: (modelElement, { writer })=>{\n                return createObjectView(viewName, modelElement, writer);\n            }\n        });\n        conversion.for('dataDowncast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n\t * Registers block element and attribute converters for the given data schema definition.\n\t */ _registerBlockElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        if (!schema.isRegistered(definition.model)) {\n            // Do not register converters and empty schema for editor existing feature\n            // as empty schema won't allow element anywhere in the model.\n            if (!definition.modelSchema) {\n                return;\n            }\n            schema.register(definition.model, definition.modelSchema);\n            if (!viewName) {\n                return;\n            }\n            conversion.for('upcast').elementToElement({\n                model: modelName,\n                view: viewName,\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n                converterPriority: priorities.low + 2\n            });\n            conversion.for('downcast').elementToElement({\n                model: modelName,\n                view: (modelElement, { writer })=>definition.isEmpty ? writer.createEmptyElement(viewName) : writer.createContainerElement(viewName)\n            });\n        }\n        if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(viewName)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n\t * Registers inline element and attribute converters for the given data schema definition.\n\t *\n\t * Extends `$text` model schema to allow the given definition model attribute and its properties.\n\t */ _registerInlineElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const attributeKey = definition.model;\n        // This element is stored in the model as an attribute on a block element, for example Lists.\n        if (definition.appliesToBlock) {\n            return;\n        }\n        schema.extend('$text', {\n            allowAttributes: attributeKey\n        });\n        if (definition.attributeProperties) {\n            schema.setAttributeProperties(attributeKey, definition.attributeProperties);\n        }\n        conversion.for('upcast').add(viewToAttributeInlineConverter(definition, this));\n        conversion.for('downcast').attributeToElement({\n            model: attributeKey,\n            view: attributeToViewInlineConverter(definition)\n        });\n        if (!definition.allowEmpty) {\n            return;\n        }\n        schema.setAttributeProperties(attributeKey, {\n            copyFromObject: false\n        });\n        if (!schema.isRegistered('htmlEmptyElement')) {\n            schema.register('htmlEmptyElement', {\n                inheritAllFrom: '$inlineObject'\n            });\n            // Helper function to check if an element has any HTML attributes.\n            const hasHtmlAttributes = (element)=>Array.from(element.getAttributeKeys()).some((key)=>key.startsWith('html'));\n            // Register a post-fixer that removes htmlEmptyElement when its htmlXX attribute is removed.\n            // See: https://github.com/ckeditor/ckeditor5/issues/18089\n            editor.model.document.registerPostFixer((writer)=>{\n                const changes = editor.model.document.differ.getChanges();\n                const elementsToRemove = new Set();\n                for (const change of changes){\n                    if (change.type === 'remove') {\n                        continue;\n                    }\n                    // Look for removal of html* attributes.\n                    if (change.type === 'attribute' && change.attributeNewValue === null) {\n                        // Find htmlEmptyElement instances in the range that lost their html attribute.\n                        for (const { item } of change.range){\n                            if (item.is('element', 'htmlEmptyElement') && !hasHtmlAttributes(item)) {\n                                elementsToRemove.add(item);\n                            }\n                        }\n                    }\n                    // Look for insertion of htmlEmptyElement.\n                    if (change.type === 'insert' && change.position.nodeAfter) {\n                        const insertedElement = change.position.nodeAfter;\n                        for (const { item } of writer.createRangeOn(insertedElement)){\n                            if (item.is('element', 'htmlEmptyElement') && !hasHtmlAttributes(item)) {\n                                elementsToRemove.add(item);\n                            }\n                        }\n                    }\n                }\n                for (const element of elementsToRemove){\n                    writer.remove(element);\n                }\n                return elementsToRemove.size > 0;\n            });\n        }\n        editor.data.htmlProcessor.domConverter.registerInlineObjectMatcher((element)=>{\n            // Element must be empty and have any attribute.\n            if (element.name == definition.view && element.isEmpty && Array.from(element.getAttributeKeys()).length) {\n                return {\n                    name: true\n                };\n            }\n            return null;\n        });\n        conversion.for('editingDowncast').elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition, true)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition)\n        });\n    }\n}\n/**\n * Matches and consumes matched attributes.\n *\n * @returns Object with following properties:\n * - attributes Array with matched attribute names.\n * - classes Array with matched class names.\n * - styles Array with matched style names.\n */ function matchAndConsumeAttributes(viewElement, matcher, consumable) {\n    const matches = matcher.matchAll(viewElement) || [];\n    const stylesProcessor = viewElement.document.stylesProcessor;\n    return matches.reduce((result, { match })=>{\n        for (const [key, token] of match.attributes || []){\n            // Verify and consume styles.\n            if (key == 'style') {\n                const style = token;\n                // Check longer forms of the same style as those could be matched\n                // but not present in the element directly.\n                // Consider only longhand (or longer than current notation) so that\n                // we do not include all sides of the box if only one side is allowed.\n                const sortedRelatedStyles = stylesProcessor.getRelatedStyles(style).filter((relatedStyle)=>relatedStyle.split('-').length > style.split('-').length).sort((a, b)=>b.split('-').length - a.split('-').length);\n                for (const relatedStyle of sortedRelatedStyles){\n                    if (consumable.consume(viewElement, {\n                        styles: [\n                            relatedStyle\n                        ]\n                    })) {\n                        result.styles.push(relatedStyle);\n                    }\n                }\n                // Verify and consume style as specified in the matcher.\n                if (consumable.consume(viewElement, {\n                    styles: [\n                        style\n                    ]\n                })) {\n                    result.styles.push(style);\n                }\n            } else if (key == 'class') {\n                const className = token;\n                if (consumable.consume(viewElement, {\n                    classes: [\n                        className\n                    ]\n                })) {\n                    result.classes.push(className);\n                }\n            } else {\n                // Verify and consume other attributes.\n                if (consumable.consume(viewElement, {\n                    attributes: [\n                        key\n                    ]\n                })) {\n                    result.attributes.push(key);\n                }\n            }\n        }\n        return result;\n    }, {\n        attributes: [],\n        classes: [],\n        styles: []\n    });\n}\n/**\n * Prepares the GHS attribute value as an object with element attributes' values.\n */ function prepareGHSAttribute(viewElement, { attributes, classes, styles }) {\n    if (!attributes.length && !classes.length && !styles.length) {\n        return null;\n    }\n    return {\n        ...attributes.length && {\n            attributes: getAttributes(viewElement, attributes)\n        },\n        ...styles.length && {\n            styles: getReducedStyles(viewElement, styles)\n        },\n        ...classes.length && {\n            classes\n        }\n    };\n}\n/**\n * Returns attributes as an object with names and values.\n */ function getAttributes(viewElement, attributes) {\n    const attributesObject = {};\n    for (const key of attributes){\n        const value = viewElement.getAttribute(key);\n        if (value !== undefined && isValidAttributeName(key)) {\n            attributesObject[key] = value;\n        }\n    }\n    return attributesObject;\n}\n/**\n * Returns styles as an object reduced to shorthand notation without redundant entries.\n */ function getReducedStyles(viewElement, styles) {\n    // Use StyleMap to reduce style value to the minimal form (without shorthand and long-hand notation and duplication).\n    const stylesMap = new StylesMap(viewElement.document.stylesProcessor);\n    for (const key of styles){\n        const styleValue = viewElement.getStyle(key);\n        if (styleValue !== undefined) {\n            stylesMap.set(key, styleValue);\n        }\n    }\n    return Object.fromEntries(stylesMap.getStylesEntries());\n}\n/**\n * Matcher by default has to match **all** patterns to count it as an actual match. Splitting the pattern\n * into separate patterns means that any matched pattern will be count as a match.\n *\n * @param pattern Pattern to split.\n * @param attributeName Name of the attribute to split (e.g. 'attributes', 'classes', 'styles').\n */ function splitPattern(pattern, attributeName) {\n    const { name } = pattern;\n    const attributeValue = pattern[attributeName];\n    if (isPlainObject(attributeValue)) {\n        return Object.entries(attributeValue).map(([key, value])=>({\n                name,\n                [attributeName]: {\n                    [key]: value\n                }\n            }));\n    }\n    if (Array.isArray(attributeValue)) {\n        return attributeValue.map((value)=>({\n                name,\n                [attributeName]: [\n                    value\n                ]\n            }));\n    }\n    return [\n        pattern\n    ];\n}\n/**\n * Rules are matched in conjunction (AND operation), but we want to have a match if *any* of the rules is matched (OR operation).\n * By splitting the rules we force the latter effect.\n */ function splitRules(rules) {\n    const { name, attributes, classes, styles } = rules;\n    const splitRules = [];\n    if (attributes) {\n        splitRules.push(...splitPattern({\n            name,\n            attributes\n        }, 'attributes'));\n    }\n    if (classes) {\n        splitRules.push(...splitPattern({\n            name,\n            classes\n        }, 'classes'));\n    }\n    if (styles) {\n        splitRules.push(...splitPattern({\n            name,\n            styles\n        }, 'styles'));\n    }\n    return splitRules;\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:code-block/codeblock~CodeBlock Code Block} feature.\n */ class CodeBlockElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        if (!this.editor.plugins.has('CodeBlockEditing')) {\n            return;\n        }\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:pre', (evt, definition)=>{\n            if (definition.model !== 'codeBlock') {\n                return;\n            }\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            // Extend codeBlock to allow attributes required by attribute filtration.\n            schema.extend('codeBlock', {\n                allowAttributes: [\n                    'htmlPreAttributes',\n                    'htmlContentAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelCodeBlockAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewCodeBlockAttributeConverter());\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n *\n * Attributes are preserved as a value of `html*Attributes` model attribute.\n * @param dataFilter\n * @returns Returns a conversion callback.\n */ function viewToModelCodeBlockAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:code', (evt, data, conversionApi)=>{\n            const viewCodeElement = data.viewItem;\n            const viewPreElement = viewCodeElement.parent;\n            if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n                return;\n            }\n            preserveElementAttributes(viewPreElement, 'htmlPreAttributes');\n            preserveElementAttributes(viewCodeElement, 'htmlContentAttributes');\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n * @returns Returns a conversion callback.\n */ function modelToViewCodeBlockAttributeConverter() {\n    return (dispatcher)=>{\n        dispatcher.on('attribute:htmlPreAttributes:codeBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            const viewPreElement = viewCodeElement.parent;\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewPreElement);\n        });\n        dispatcher.on('attribute:htmlContentAttributes:codeBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewCodeElement);\n        });\n    };\n}\n\n/**\n * Provides the General HTML Support integration for elements which can behave like sectioning element (e.g. article) or\n * element accepting only inline content (e.g. paragraph).\n *\n * The distinction between this two content models is important for choosing correct schema model and proper content conversion.\n * As an example, it ensures that:\n *\n * * children elements paragraphing is enabled for sectioning elements only,\n * * element and its content can be correctly handled by editing view (splitting and merging elements),\n * * model element HTML is semantically correct and easier to work with.\n *\n * If element contains any block element, it will be treated as a sectioning element and registered using\n * {@link module:html-support/dataschema~HtmlSupportDataSchemaDefinition#model} and\n * {@link module:html-support/dataschema~HtmlSupportDataSchemaDefinition#modelSchema} in editor schema.\n * Otherwise, it will be registered under\n * {@link module:html-support/dataschema~HtmlSupportDataSchemaBlockElementDefinition#paragraphLikeModel} model\n * name with model schema accepting only inline content (inheriting from `$block`).\n */ class DualContentModelElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DualContentModelElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register', (evt, definition)=>{\n            const blockDefinition = definition;\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            if (!blockDefinition.paragraphLikeModel) {\n                return;\n            }\n            // Can only apply to newly registered features.\n            if (schema.isRegistered(blockDefinition.model) || schema.isRegistered(blockDefinition.paragraphLikeModel)) {\n                return;\n            }\n            const paragraphLikeModelDefinition = {\n                model: blockDefinition.paragraphLikeModel,\n                view: blockDefinition.view\n            };\n            schema.register(blockDefinition.model, blockDefinition.modelSchema);\n            schema.register(paragraphLikeModelDefinition.model, {\n                inheritAllFrom: '$block'\n            });\n            conversion.for('upcast').elementToElement({\n                view: blockDefinition.view,\n                model: (viewElement, { writer })=>{\n                    if (this._hasBlockContent(viewElement)) {\n                        return writer.createElement(blockDefinition.model);\n                    }\n                    return writer.createElement(paragraphLikeModelDefinition.model);\n                },\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                converterPriority: priorities.low + 0.5\n            });\n            conversion.for('downcast').elementToElement({\n                view: blockDefinition.view,\n                model: blockDefinition.model\n            });\n            this._addAttributeConversion(blockDefinition);\n            conversion.for('downcast').elementToElement({\n                view: paragraphLikeModelDefinition.view,\n                model: paragraphLikeModelDefinition.model\n            });\n            this._addAttributeConversion(paragraphLikeModelDefinition);\n            evt.stop();\n        });\n    }\n    /**\n\t * Checks whether the given view element includes any other block element.\n\t */ _hasBlockContent(viewElement) {\n        const view = this.editor.editing.view;\n        const blockElements = view.domConverter.blockElements;\n        // Traversing the viewElement subtree looking for block elements.\n        // Especially for the cases like <div><a href=\"#\"><p>foo</p></a></div>.\n        // https://github.com/ckeditor/ckeditor5/issues/11513\n        for (const viewItem of view.createRangeIn(viewElement).getItems()){\n            if (viewItem.is('element') && blockElements.includes(viewItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Adds attribute filtering conversion for the given data schema.\n\t */ _addAttributeConversion(definition) {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        editor.model.schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(definition.view)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:heading/heading~Heading Heading} feature.\n */ class HeadingElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataSchema,\n            Enter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HeadingElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('HeadingEditing')) {\n            return;\n        }\n        const options = editor.config.get('heading.options');\n        this.registerHeadingElements(editor, options);\n    }\n    /**\n\t * Registers all elements supported by HeadingEditing to enable custom attributes for those elements.\n\t */ registerHeadingElements(editor, options) {\n        const dataSchema = editor.plugins.get(DataSchema);\n        const headerModels = [];\n        for (const option of options){\n            if ('model' in option && 'view' in option) {\n                dataSchema.registerBlockElement({\n                    view: option.view,\n                    model: option.model\n                });\n                headerModels.push(option.model);\n            }\n        }\n        dataSchema.extendBlockElement({\n            model: 'htmlHgroup',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n        dataSchema.extendBlockElement({\n            model: 'htmlSummary',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module html-support/integrations/integrationutils\n */ /**\n * Returns the first view element descendant matching the given view name.\n * Includes view element itself.\n *\n * @internal\n */ function getDescendantElement(writer, containerElement, elementName) {\n    const range = writer.createRangeOn(containerElement);\n    for (const { item } of range.getWalker()){\n        if (item.is('element', elementName)) {\n            return item;\n        }\n    }\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:image/image~Image Image} feature.\n */ class ImageElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ImageElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // At least one image plugin should be loaded for the integration to work properly.\n        if (!editor.plugins.has('ImageInlineEditing') && !editor.plugins.has('ImageBlockEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter$1(dataFilter));\n        });\n        dataFilter.on('register:img', (evt, definition)=>{\n            if (definition.model !== 'imageBlock' && definition.model !== 'imageInline') {\n                return;\n            }\n            if (schema.isRegistered('imageBlock')) {\n                schema.extend('imageBlock', {\n                    allowAttributes: [\n                        'htmlImgAttributes',\n                        // Figure and Link don't have model counterpart.\n                        // We will preserve attributes on image model element using these attribute keys.\n                        'htmlFigureAttributes',\n                        'htmlLinkAttributes'\n                    ]\n                });\n            }\n            if (schema.isRegistered('imageInline')) {\n                schema.extend('imageInline', {\n                    allowAttributes: [\n                        // `htmlA` is needed for standard GHS link integration.\n                        'htmlA',\n                        'htmlImgAttributes'\n                    ]\n                });\n            }\n            conversion.for('upcast').add(viewToModelImageAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewImageAttributeConverter());\n            if (editor.plugins.has('LinkImage')) {\n                conversion.for('upcast').add(viewToModelLinkImageAttributeConverter(dataFilter, editor));\n            }\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on the {@link module:image/image~Image Image}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelImageAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:img', (evt, data, conversionApi)=>{\n            if (!data.modelRange) {\n                return;\n            }\n            const viewImageElement = data.viewItem;\n            const viewAttributes = dataFilter.processViewAttributes(viewImageElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlImgAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from link view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelLinkImageAttributeConverter(dataFilter, editor) {\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher)=>{\n        dispatcher.on('element:a', (evt, data, conversionApi)=>{\n            const viewLink = data.viewItem;\n            const viewImage = imageUtils.findViewImgElement(viewLink);\n            if (!viewImage) {\n                return;\n            }\n            const modelImage = data.modelCursor.parent;\n            if (!modelImage.is('element', 'imageBlock')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewLink, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlLinkAttributes', viewAttributes, modelImage);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributeConverter$1(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('image')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * A model-to-view conversion helper applying attributes from the {@link module:image/image~Image Image}\n * feature.\n * @returns Returns a conversion callback.\n */ function modelToViewImageAttributeConverter() {\n    return (dispatcher)=>{\n        addInlineAttributeConversion('htmlImgAttributes');\n        addBlockAttributeConversion('img', 'htmlImgAttributes');\n        addBlockAttributeConversion('figure', 'htmlFigureAttributes');\n        addBlockAttributeConversion('a', 'htmlLinkAttributes');\n        function addInlineAttributeConversion(attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageInline`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const viewElement = conversionApi.mapper.toViewElement(data.item);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            }, {\n                priority: 'low'\n            });\n        }\n        function addBlockAttributeConversion(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageBlock`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (viewElement) {\n                    updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n                    conversionApi.consumable.consume(data.item, evt.name);\n                }\n            }, {\n                priority: 'low'\n            });\n            if (elementName === 'a') {\n                // To have a link element in the view, we need to attach a converter to the `linkHref` attribute as well.\n                dispatcher.on('attribute:linkHref:imageBlock', (evt, data, conversionApi)=>{\n                    if (!conversionApi.consumable.consume(data.item, 'attribute:htmlLinkAttributes:imageBlock')) {\n                        return;\n                    }\n                    const containerElement = conversionApi.mapper.toViewElement(data.item);\n                    const viewElement = getDescendantElement(conversionApi.writer, containerElement, 'a');\n                    setViewAttributes(conversionApi.writer, data.item.getAttribute('htmlLinkAttributes'), viewElement);\n                }, {\n                    priority: 'low'\n                });\n            }\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:media-embed/mediaembed~MediaEmbed Media Embed} feature.\n */ class MediaEmbedElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbedElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Stop here if MediaEmbed plugin is not provided or the integrator wants to output markup with previews as\n        // we do not support filtering previews.\n        if (!editor.plugins.has('MediaEmbed') || editor.config.get('mediaEmbed.previewsInData')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        const mediaElementName = editor.config.get('mediaEmbed.elementName');\n        // Overwrite GHS schema definition for a given elementName.\n        dataSchema.registerBlockElement({\n            model: 'media',\n            view: mediaElementName\n        });\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributesConverter(dataFilter));\n        });\n        dataFilter.on(`register:${mediaElementName}`, (evt, definition)=>{\n            if (definition.model !== 'media') {\n                return;\n            }\n            schema.extend('media', {\n                allowAttributes: [\n                    getHtmlAttributeName(mediaElementName),\n                    'htmlFigureAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelMediaAttributesConverter(dataFilter, mediaElementName));\n            conversion.for('dataDowncast').add(modelToViewMediaAttributeConverter(mediaElementName));\n            evt.stop();\n        });\n    }\n}\nfunction viewToModelMediaAttributesConverter(dataFilter, mediaElementName) {\n    const upcastMedia = (evt, data, conversionApi)=>{\n        const viewMediaElement = data.viewItem;\n        preserveElementAttributes(viewMediaElement, getHtmlAttributeName(mediaElementName));\n        function preserveElementAttributes(viewElement, attributeName) {\n            const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n            }\n        }\n    };\n    return (dispatcher)=>{\n        dispatcher.on(`element:${mediaElementName}`, upcastMedia, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:media-embed/mediaembed~MediaEmbed MediaEmbed}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributesConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('media')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\nfunction modelToViewMediaAttributeConverter(mediaElementName) {\n    return (dispatcher)=>{\n        addAttributeConversionDispatcherHandler(mediaElementName, getHtmlAttributeName(mediaElementName));\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:media`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support for `script` elements.\n */ class ScriptElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ScriptElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:script', (evt, definition)=>{\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlScript', definition.modelSchema);\n            schema.extend('htmlScript', {\n                allowAttributes: [\n                    'htmlScriptAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'script'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'script',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlScript',\n                view: (modelElement, { writer })=>{\n                    return createObjectView('script', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n\nconst STYLE_ATTRIBUTES_TO_PROPAGATE = [\n    'width',\n    'max-width',\n    'min-width',\n    'height',\n    'min-height',\n    'max-height'\n];\n/**\n * Provides the General HTML Support integration with {@link module:table/table~Table Table} feature.\n */ class TableElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('TableEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const tableUtils = editor.plugins.get('TableUtils');\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter(dataFilter));\n        });\n        dataFilter.on('register:table', (evt, definition)=>{\n            if (definition.model !== 'table') {\n                return;\n            }\n            schema.extend('table', {\n                allowAttributes: [\n                    'htmlTableAttributes',\n                    // Figure, thead and tbody elements don't have model counterparts.\n                    // We will be preserving attributes on table element using these attribute keys.\n                    'htmlFigureAttributes',\n                    'htmlTheadAttributes',\n                    'htmlTbodyAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelTableAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewTableAttributeConverter());\n            editor.model.document.registerPostFixer(createHeadingRowsPostFixer(editor.model, tableUtils));\n            evt.stop();\n        });\n    }\n}\n/**\n * Creates a model post-fixer for thead and tbody GHS related attributes.\n */ function createHeadingRowsPostFixer(model, tableUtils) {\n    return (writer)=>{\n        const changes = model.document.differ.getChanges();\n        let wasFixed = false;\n        for (const change of changes){\n            if (change.type != 'attribute' || change.attributeKey != 'headingRows') {\n                continue;\n            }\n            const table = change.range.start.nodeAfter;\n            const hasTHeadAttributes = table.getAttribute('htmlTheadAttributes');\n            const hasTBodyAttributes = table.getAttribute('htmlTbodyAttributes');\n            if (hasTHeadAttributes && !change.attributeNewValue) {\n                writer.removeAttribute('htmlTheadAttributes', table);\n                wasFixed = true;\n            } else if (hasTBodyAttributes && change.attributeNewValue == tableUtils.getRows(table)) {\n                writer.removeAttribute('htmlTbodyAttributes', table);\n                wasFixed = true;\n            }\n        }\n        return wasFixed;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelTableAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            if (!data.modelRange) {\n                return;\n            }\n            const viewTableElement = data.viewItem;\n            preserveElementAttributes(viewTableElement, 'htmlTableAttributes');\n            for (const childNode of viewTableElement.getChildren()){\n                if (childNode.is('element', 'thead')) {\n                    preserveElementAttributes(childNode, 'htmlTheadAttributes');\n                }\n                if (childNode.is('element', 'tbody')) {\n                    preserveElementAttributes(childNode, 'htmlTbodyAttributes');\n                }\n            }\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('table')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:table/table~Table Table}\n * feature.\n *\n * @returns Returns a conversion callback.\n */ function modelToViewTableAttributeConverter() {\n    return (dispatcher)=>{\n        addAttributeConversionDispatcherHandler('table', 'htmlTableAttributes');\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        addAttributeConversionDispatcherHandler('thead', 'htmlTheadAttributes');\n        addAttributeConversionDispatcherHandler('tbody', 'htmlTbodyAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:table`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (!viewElement) {\n                    return;\n                }\n                conversionApi.consumable.consume(data.item, evt.name);\n                // Downcast selected styles to a figure element instead of a table element.\n                if (attributeName === 'htmlTableAttributes' && containerElement !== viewElement) {\n                    const oldAttributes = splitAttributesForFigureAndTable(data.attributeOldValue);\n                    const newAttributes = splitAttributesForFigureAndTable(data.attributeNewValue);\n                    updateViewAttributes(conversionApi.writer, oldAttributes.tableAttributes, newAttributes.tableAttributes, viewElement);\n                    updateViewAttributes(conversionApi.writer, oldAttributes.figureAttributes, newAttributes.figureAttributes, containerElement);\n                } else {\n                    updateViewAttributes(conversionApi.writer, data.attributeOldValue, data.attributeNewValue, viewElement);\n                }\n            });\n        }\n    };\n}\n/**\n * Splits styles based on the `STYLE_ATTRIBUTES_TO_PROPAGATE` pattern that should be moved to the parent element\n * and those that should remain on element.\n */ function splitAttributesForFigureAndTable(data) {\n    const figureAttributes = {};\n    const tableAttributes = {\n        ...data\n    };\n    if (!data || !('styles' in data)) {\n        return {\n            figureAttributes,\n            tableAttributes\n        };\n    }\n    tableAttributes.styles = {};\n    for (const [key, value] of Object.entries(data.styles)){\n        if (STYLE_ATTRIBUTES_TO_PROPAGATE.includes(key)) {\n            figureAttributes.styles = {\n                ...figureAttributes.styles,\n                [key]: value\n            };\n        } else {\n            tableAttributes.styles = {\n                ...tableAttributes.styles,\n                [key]: value\n            };\n        }\n    }\n    return {\n        figureAttributes,\n        tableAttributes\n    };\n}\n\n/**\n * Provides the General HTML Support for `style` elements.\n */ class StyleElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StyleElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:style', (evt, definition)=>{\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlStyle', definition.modelSchema);\n            schema.extend('htmlStyle', {\n                allowAttributes: [\n                    'htmlStyleAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'style'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'style',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlStyle',\n                view: (modelElement, { writer })=>{\n                    return createObjectView('style', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:list/list~List List} feature.\n */ class ListElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ListEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const listEditing = editor.plugins.get('ListEditing');\n        const listUtils = editor.plugins.get('ListUtils');\n        const viewElements = [\n            'ul',\n            'ol',\n            'li'\n        ];\n        // Register downcast strategy.\n        // Note that this must be done before document list editing registers conversion in afterInit.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'htmlLiAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlUlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlOlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        dataFilter.on('register', (evt, definition)=>{\n            if (!viewElements.includes(definition.view)) {\n                return;\n            }\n            evt.stop();\n            // Do not register same converters twice.\n            if (schema.checkAttribute('$block', 'htmlLiAttributes')) {\n                return;\n            }\n            const allowAttributes = viewElements.map((element)=>getHtmlAttributeName(element));\n            schema.extend('$listItem', {\n                allowAttributes\n            });\n            conversion.for('upcast').add((dispatcher)=>{\n                dispatcher.on('element:ul', viewToModelListAttributeConverter('htmlUlAttributes', dataFilter), {\n                    priority: 'low'\n                });\n                dispatcher.on('element:ol', viewToModelListAttributeConverter('htmlOlAttributes', dataFilter), {\n                    priority: 'low'\n                });\n                dispatcher.on('element:li', viewToModelListAttributeConverter('htmlLiAttributes', dataFilter), {\n                    priority: 'low'\n                });\n            });\n        });\n        // Make sure that all items in a single list (items at the same level & listType) have the same properties.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                if (previousNodeInList.getAttribute('listType') == node.getAttribute('listType')) {\n                    const attribute = getAttributeFromListType(previousNodeInList.getAttribute('listType'));\n                    const value = previousNodeInList.getAttribute(attribute);\n                    if (!isEqual(node.getAttribute(attribute), value) && writer.model.schema.checkAttribute(node, attribute)) {\n                        writer.setAttribute(attribute, value, node);\n                        evt.return = true;\n                    }\n                }\n                if (previousNodeInList.getAttribute('listItemId') == node.getAttribute('listItemId')) {\n                    const value = previousNodeInList.getAttribute('htmlLiAttributes');\n                    if (!isEqual(node.getAttribute('htmlLiAttributes'), value) && writer.model.schema.checkAttribute(node, 'htmlLiAttributes')) {\n                        writer.setAttribute('htmlLiAttributes', value, node);\n                        evt.return = true;\n                    }\n                }\n            }\n        });\n        // Remove `ol` attributes from `ul` elements and vice versa.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node } of listNodes){\n                const listType = node.getAttribute('listType');\n                if (!listUtils.isNumberedListType(listType) && node.getAttribute('htmlOlAttributes')) {\n                    writer.removeAttribute('htmlOlAttributes', node);\n                    evt.return = true;\n                }\n                if (listUtils.isNumberedListType(listType) && node.getAttribute('htmlUlAttributes')) {\n                    writer.removeAttribute('htmlUlAttributes', node);\n                    evt.return = true;\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        if (!editor.commands.get('indentList')) {\n            return;\n        }\n        // Reset list attributes after indenting list items.\n        const indentList = editor.commands.get('indentList');\n        this.listenTo(indentList, 'afterExecute', (evt, changedBlocks)=>{\n            editor.model.change((writer)=>{\n                for (const node of changedBlocks){\n                    const attribute = getAttributeFromListType(node.getAttribute('listType'));\n                    if (!editor.model.schema.checkAttribute(node, attribute)) {\n                        continue;\n                    }\n                    // Just reset the attribute.\n                    // If there is a previous indented list that this node should be merged into,\n                    // the postfixer will unify all the attributes of both sub-lists.\n                    writer.setAttribute(attribute, {}, node);\n                }\n            });\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link TODO}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelListAttributeConverter(attributeName, dataFilter) {\n    return (evt, data, conversionApi)=>{\n        const viewElement = data.viewItem;\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n        for (const item of data.modelRange.getItems({\n            shallow: true\n        })){\n            // Apply only to list item blocks.\n            if (!item.hasAttribute('listItemId')) {\n                continue;\n            }\n            // Set list attributes only on same level items, those nested deeper are already handled\n            // by the recursive conversion.\n            if (item.hasAttribute('htmlUlAttributes') || item.hasAttribute('htmlOlAttributes')) {\n                continue;\n            }\n            if (conversionApi.writer.model.schema.checkAttribute(item, attributeName)) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes || {}, item);\n            }\n        }\n    };\n}\n/**\n * Returns HTML attribute name based on provided list type.\n */ function getAttributeFromListType(listType) {\n    return listType === 'numbered' || listType == 'customNumbered' ? 'htmlOlAttributes' : 'htmlUlAttributes';\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:horizontal-line/horizontalline~HorizontalLine} feature.\n */ class HorizontalLineElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HorizontalLineElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('HorizontalLineEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        dataFilter.on('register:hr', (evt, definition)=>{\n            if (definition.model !== 'horizontalLine') {\n                return;\n            }\n            schema.extend('horizontalLine', {\n                allowAttributes: [\n                    'htmlHrAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').add(modelToViewHorizontalLineAttributeConverter());\n            evt.stop();\n        });\n    }\n}\n/**\n * A model-to-view conversion helper applying attributes from the\n * {@link module:horizontal-line/horizontalline~HorizontalLine HorizontalLine} feature.\n *\n * @returns Returns a conversion callback.\n */ function modelToViewHorizontalLineAttributeConverter() {\n    return (dispatcher)=>{\n        dispatcher.on('attribute:htmlHrAttributes:horizontalLine', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.test(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const containerElement = conversionApi.mapper.toViewElement(data.item);\n            const viewElement = getDescendantElement(conversionApi.writer, containerElement, 'hr');\n            if (viewElement) {\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n                conversionApi.consumable.consume(data.item, evt.name);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n\n/**\n * Provides the General HTML Support for custom elements (not registered in the {@link module:html-support/dataschema~DataSchema}).\n */ class CustomElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter,\n            DataSchema\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CustomElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        dataFilter.on('register:$customElement', (evt, definition)=>{\n            evt.stop();\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            const unsafeElements = editor.editing.view.domConverter.unsafeElements;\n            const preLikeElements = editor.data.htmlProcessor.domConverter.preElements;\n            schema.register(definition.model, definition.modelSchema);\n            schema.extend(definition.model, {\n                allowAttributes: [\n                    'htmlElementName',\n                    'htmlCustomElementAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            // For the `<template>` element we use only raw-content because DOM API exposes its content\n            // only as a document fragment in the `content` property (or innerHTML).\n            editor.data.htmlProcessor.domConverter.registerRawContentMatcher({\n                name: 'template'\n            });\n            // Being executed on the low priority, it will catch all elements that were not caught by other converters.\n            conversion.for('upcast').elementToElement({\n                view: /.*/,\n                model: (viewElement, conversionApi)=>{\n                    // Do not try to convert $comment fake element.\n                    if (viewElement.name == '$comment') {\n                        return null;\n                    }\n                    if (!isValidElementName(viewElement.name)) {\n                        return null;\n                    }\n                    // Allow for fallback only if this element is not defined in data schema to make sure\n                    // that this will handle only custom elements not registered in the data schema.\n                    if (dataSchema.getDefinitionsForView(viewElement.name).size) {\n                        return null;\n                    }\n                    // Make sure that this element will not render in the editing view.\n                    if (!unsafeElements.includes(viewElement.name)) {\n                        unsafeElements.push(viewElement.name);\n                    }\n                    // Make sure that whitespaces will not be trimmed or replaced by nbsps while stringify content.\n                    if (!preLikeElements.includes(viewElement.name)) {\n                        preLikeElements.push(viewElement.name);\n                    }\n                    const modelElement = conversionApi.writer.createElement(definition.model, {\n                        htmlElementName: viewElement.name\n                    });\n                    const htmlAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                    if (htmlAttributes) {\n                        conversionApi.writer.setAttribute('htmlCustomElementAttributes', htmlAttributes, modelElement);\n                    }\n                    let htmlContent;\n                    // For the `<template>` element we use only raw-content because DOM API exposes its content\n                    // only as a document fragment in the `content` property.\n                    if (viewElement.is('element', 'template') && viewElement.getCustomProperty('$rawContent')) {\n                        htmlContent = viewElement.getCustomProperty('$rawContent');\n                    } else {\n                        // Store the whole element in the attribute so that ViewDomConverter\n                        // will be able to use the pre like element context.\n                        const viewWriter = new ViewUpcastWriter(viewElement.document);\n                        const documentFragment = viewWriter.createDocumentFragment(viewElement);\n                        const domFragment = editor.data.htmlProcessor.domConverter.viewToDom(documentFragment);\n                        const domElement = domFragment.firstChild;\n                        while(domElement.firstChild){\n                            domFragment.appendChild(domElement.firstChild);\n                        }\n                        domElement.remove();\n                        htmlContent = editor.data.htmlProcessor.htmlWriter.getHtml(domFragment);\n                    }\n                    conversionApi.writer.setAttribute('htmlContent', htmlContent, modelElement);\n                    // Consume the content of the element.\n                    for (const { item } of editor.editing.view.createRangeIn(viewElement)){\n                        conversionApi.consumable.consume(item, {\n                            name: true\n                        });\n                    }\n                    return modelElement;\n                },\n                converterPriority: 'low'\n            });\n            // Because this element is unsafe (DomConverter#unsafeElements), it will render as a transparent <span> but it must\n            // be rendered anyway for the mapping between the model and the view to exist.\n            conversion.for('editingDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: [\n                        'htmlElementName',\n                        'htmlCustomElementAttributes',\n                        'htmlContent'\n                    ]\n                },\n                view: (modelElement, { writer })=>{\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const viewElement = writer.createRawElement(viewName);\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n            conversion.for('dataDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: [\n                        'htmlElementName',\n                        'htmlCustomElementAttributes',\n                        'htmlContent'\n                    ]\n                },\n                view: (modelElement, { writer })=>{\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const htmlContent = modelElement.getAttribute('htmlContent');\n                    const viewElement = writer.createRawElement(viewName, null, (domElement, domConverter)=>{\n                        domConverter.setContentOf(domElement, htmlContent);\n                    });\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n        });\n    }\n}\n/**\n * Returns true if name is valid for a DOM element name.\n */ function isValidElementName(name) {\n    try {\n        document.createElement(name);\n    } catch  {\n        return false;\n    }\n    return true;\n}\n\n/**\n * The General HTML Support feature.\n *\n * This is a \"glue\" plugin which initializes the {@link module:html-support/datafilter~DataFilter data filter} configuration\n * and features integration with the General HTML Support.\n */ class GeneralHtmlSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'GeneralHtmlSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter,\n            CodeBlockElementSupport,\n            DualContentModelElementSupport,\n            HeadingElementSupport,\n            ImageElementSupport,\n            MediaEmbedElementSupport,\n            ScriptElementSupport,\n            TableElementSupport,\n            StyleElementSupport,\n            ListElementSupport,\n            HorizontalLineElementSupport,\n            CustomElementSupport\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const dataFilter = editor.plugins.get(DataFilter);\n        // Load the allowed empty inline elements' configuration.\n        // Note that this modifies DataSchema so must be loaded before registering filtering rules.\n        dataFilter.loadAllowedEmptyElementsConfig(editor.config.get('htmlSupport.allowEmpty') || []);\n        // Load the filtering configuration.\n        dataFilter.loadAllowedConfig(editor.config.get('htmlSupport.allow') || []);\n        dataFilter.loadDisallowedConfig(editor.config.get('htmlSupport.disallow') || []);\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const removeFormatCommand = this.editor.commands.get('removeFormat');\n        removeFormatCommand?.registerCustomAttribute((attributeName)=>attributeName.startsWith('html') && attributeName.endsWith('Attributes'), removeFormatting);\n    }\n    /**\n\t * Returns a GHS model attribute name related to a given view element name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t */ getGhsAttributeNameForElement(viewElementName) {\n        const dataSchema = this.editor.plugins.get('DataSchema');\n        const definitions = Array.from(dataSchema.getDefinitionsForView(viewElementName, false));\n        const inlineDefinition = definitions.find((definition)=>definition.isInline && !definitions[0].isObject);\n        if (inlineDefinition) {\n            return inlineDefinition.model;\n        }\n        return getHtmlAttributeName(viewElementName);\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to add.\n\t * @param selectable The selection or element to update.\n\t */ addModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', (classes)=>{\n                    for (const value of toArray(className)){\n                        classes.add(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', (classes)=>{\n                    for (const value of toArray(className)){\n                        classes.delete(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributes The object with attributes to set.\n\t * @param selectable The selection or element to update.\n\t */ setModelHtmlAttributes(viewElementName, attributes, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', (attributesMap)=>{\n                    for (const [key, value] of Object.entries(attributes)){\n                        attributesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributeName The attribute name (or names) to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlAttributes(viewElementName, attributeName, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', (attributesMap)=>{\n                    for (const key of toArray(attributeName)){\n                        attributesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param styles The object with styles to set.\n\t * @param selectable The selection or element to update.\n\t */ setModelHtmlStyles(viewElementName, styles, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', (stylesMap)=>{\n                    for (const [key, value] of Object.entries(styles)){\n                        stylesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param properties The style (or styles list) to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlStyles(viewElementName, properties, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', (stylesMap)=>{\n                    for (const key of toArray(properties)){\n                        stylesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n}\n/**\n * Returns an iterator over an items in the selectable that accept given GHS attribute.\n */ function* getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName) {\n    if (!selectable) {\n        return;\n    }\n    if (!(Symbol.iterator in selectable) && selectable.is('documentSelection') && selectable.isCollapsed) {\n        if (model.schema.checkAttributeInSelection(selectable, ghsAttributeName)) {\n            yield selectable;\n        }\n    } else {\n        for (const range of getValidRangesForSelectable(model, selectable, ghsAttributeName)){\n            yield* range.getItems({\n                shallow: true\n            });\n        }\n    }\n}\n/**\n * Translates a given selectable to an iterable of ranges.\n */ function getValidRangesForSelectable(model, selectable, ghsAttributeName) {\n    if (!(Symbol.iterator in selectable) && (selectable.is('node') || selectable.is('$text') || selectable.is('$textProxy'))) {\n        if (model.schema.checkAttribute(selectable, ghsAttributeName)) {\n            return [\n                model.createRangeOn(selectable)\n            ];\n        } else {\n            return [];\n        }\n    } else {\n        return model.schema.getValidRanges(model.createSelection(selectable).getRanges(), ghsAttributeName);\n    }\n}\n\n/**\n * The HTML comment feature. It preserves the HTML comments (`<!-- -->`) in the editor data.\n *\n * For a detailed overview, check the {@glink features/html/html-comments HTML comment feature documentation}.\n */ class HtmlComment extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HtmlComment';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const loadedCommentsContent = new Map();\n        editor.data.processor.skipComments = false;\n        // Allow storing comment's content as the $root attribute with the name `$comment:<unique id>`.\n        editor.model.schema.addAttributeCheck((context, attributeName)=>{\n            if (context.endsWith('$root') && attributeName.startsWith('$comment')) {\n                return true;\n            }\n        });\n        // Convert the `$comment` view element to `$comment:<unique id>` marker and store its content (the comment itself) as a $root\n        // attribute. The comment content is needed in the `dataDowncast` pipeline to re-create the comment node.\n        editor.conversion.for('upcast').elementToMarker({\n            view: '$comment',\n            model: (viewElement)=>{\n                const markerUid = uid();\n                const markerName = `$comment:${markerUid}`;\n                const commentContent = viewElement.getCustomProperty('$rawContent');\n                loadedCommentsContent.set(markerName, commentContent);\n                return markerName;\n            }\n        });\n        // Convert the `$comment` marker to `$comment` UI element with `$rawContent` custom property containing the comment content.\n        editor.conversion.for('dataDowncast').markerToElement({\n            model: '$comment',\n            view: (modelElement, { writer })=>{\n                let root = undefined;\n                for (const rootName of this.editor.model.document.getRootNames()){\n                    root = this.editor.model.document.getRoot(rootName);\n                    if (root.hasAttribute(modelElement.markerName)) {\n                        break;\n                    }\n                }\n                const markerName = modelElement.markerName;\n                const commentContent = root.getAttribute(markerName);\n                const comment = writer.createUIElement('$comment');\n                writer.setCustomProperty('$rawContent', commentContent, comment);\n                return comment;\n            }\n        });\n        // Remove comments' markers and their corresponding $root attributes, which are moved to the graveyard.\n        editor.model.document.registerPostFixer((writer)=>{\n            let changed = false;\n            const markers = editor.model.document.differ.getChangedMarkers().filter((marker)=>marker.name.startsWith('$comment:'));\n            for (const marker of markers){\n                const { oldRange, newRange } = marker.data;\n                if (oldRange && newRange && oldRange.root == newRange.root) {\n                    continue;\n                }\n                if (oldRange) {\n                    // The comment marker was moved from one root to another (most probably to the graveyard).\n                    // Remove the related attribute from the previous root.\n                    const oldRoot = oldRange.root;\n                    if (oldRoot.hasAttribute(marker.name)) {\n                        writer.removeAttribute(marker.name, oldRoot);\n                        changed = true;\n                    }\n                }\n                if (newRange) {\n                    const newRoot = newRange.root;\n                    if (newRoot.rootName == '$graveyard') {\n                        // Comment marker was moved to the graveyard -- remove it entirely.\n                        writer.removeMarker(marker.name);\n                        changed = true;\n                    } else if (!newRoot.hasAttribute(marker.name)) {\n                        // Comment marker was just added or was moved to another root - updated roots attributes.\n                        //\n                        // Added fallback to `''` for the comment content in case if someone incorrectly added just the marker \"by hand\"\n                        // and forgot to add the root attribute or add them in different change blocks.\n                        //\n                        // It caused an infinite loop in one of the unit tests.\n                        writer.setAttribute(marker.name, loadedCommentsContent.get(marker.name) || '', newRoot);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n        // Delete all comment markers from the document before setting new data.\n        editor.data.on('set', ()=>{\n            for (const commentMarker of editor.model.markers.getMarkersGroup('$comment')){\n                this.removeHtmlComment(commentMarker.name);\n            }\n        }, {\n            priority: 'high'\n        });\n        // Delete all comment markers that are within a removed range.\n        // Delete all comment markers at the limit element boundaries if the whole content of the limit element is removed.\n        editor.model.on('deleteContent', (evt, [selection])=>{\n            for (const range of selection.getRanges()){\n                const limitElement = editor.model.schema.getLimitElement(range);\n                const firstPosition = editor.model.createPositionAt(limitElement, 0);\n                const lastPosition = editor.model.createPositionAt(limitElement, 'end');\n                let affectedCommentIDs;\n                if (firstPosition.isTouching(range.start) && lastPosition.isTouching(range.end)) {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(editor.model.createRange(firstPosition, lastPosition));\n                } else {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(range, {\n                        skipBoundaries: true\n                    });\n                }\n                for (const commentMarkerID of affectedCommentIDs){\n                    this.removeHtmlComment(commentMarkerID);\n                }\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Creates an HTML comment on the specified position and returns its ID.\n\t *\n\t * *Note*: If two comments are created at the same position, the second comment will be inserted before the first one.\n\t *\n\t * @returns Comment ID. This ID can be later used to e.g. remove the comment from the content.\n\t */ createHtmlComment(position, content) {\n        const id = uid();\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot(position.root.rootName);\n        const markerName = `$comment:${id}`;\n        return model.change((writer)=>{\n            const range = writer.createRange(position);\n            writer.addMarker(markerName, {\n                usingOperation: true,\n                affectsData: true,\n                range\n            });\n            writer.setAttribute(markerName, content, root);\n            return markerName;\n        });\n    }\n    /**\n\t * Removes an HTML comment with the given comment ID.\n\t *\n\t * It does nothing and returns `false` if the comment with the given ID does not exist.\n\t * Otherwise it removes the comment and returns `true`.\n\t *\n\t * Note that a comment can be removed also by removing the content around the comment.\n\t *\n\t * @param commentID The ID of the comment to be removed.\n\t * @returns `true` when the comment with the given ID was removed, `false` otherwise.\n\t */ removeHtmlComment(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return false;\n        }\n        editor.model.change((writer)=>{\n            writer.removeMarker(marker);\n        });\n        return true;\n    }\n    /**\n\t * Gets the HTML comment data for the comment with a given ID.\n\t *\n\t * Returns `null` if the comment does not exist.\n\t */ getHtmlCommentData(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return null;\n        }\n        let content = '';\n        for (const root of this.editor.model.document.getRoots()){\n            if (root.hasAttribute(commentID)) {\n                content = root.getAttribute(commentID);\n                break;\n            }\n        }\n        return {\n            content,\n            position: marker.getStart()\n        };\n    }\n    /**\n\t * Gets all HTML comments in the given range.\n\t *\n\t * By default, it includes comments at the range boundaries.\n\t *\n\t * @param range The range to search for HTML comments.\n\t * @param options Additional options.\n\t * @param options.skipBoundaries When set to `true` the range boundaries will be skipped.\n\t * @returns HTML comment IDs\n\t */ getHtmlCommentsInRange(range, { skipBoundaries = false } = {}) {\n        const includeBoundaries = !skipBoundaries;\n        // Unfortunately, MarkerCollection#getMarkersAtPosition() filters out collapsed markers.\n        return Array.from(this.editor.model.markers.getMarkersGroup('$comment')).filter((marker)=>isCommentMarkerInRange(marker, range)).map((marker)=>marker.name);\n        function isCommentMarkerInRange(commentMarker, range) {\n            const position = commentMarker.getRange().start;\n            return (position.isAfter(range.start) || includeBoundaries && position.isEqual(range.start)) && (position.isBefore(range.end) || includeBoundaries && position.isEqual(range.end));\n        }\n    }\n}\n\n/**\n * The full page HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */ class HtmlPageDataProcessor extends HtmlDataProcessor {\n    /**\n\t * @inheritDoc\n\t */ toView(data) {\n        // Ignore content that is not a full page source.\n        if (!/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i.test(data.trim().slice(0, 10_000))) {\n            return super.toView(data);\n        }\n        // Store doctype and xml declaration in a separate properties as they can't be stringified later.\n        let docType = '';\n        let xmlDeclaration = '';\n        data = data.trim().replace(/<\\?xml\\s[^?]*\\?>/i, (match)=>{\n            xmlDeclaration = match;\n            return '';\n        });\n        data = data.trim().replace(/^<!DOCTYPE\\s[^>]*?>/i, (match)=>{\n            docType = match;\n            return '';\n        });\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        const viewFragment = this.domConverter.domToView(domFragment, {\n            skipComments: this.skipComments\n        });\n        const writer = new ViewUpcastWriter(viewFragment.document);\n        // Using the DOM document with body content extracted as a skeleton of the page.\n        writer.setCustomProperty('$fullPageDocument', domFragment.ownerDocument.documentElement.outerHTML, viewFragment);\n        // List of `<style>` elements extracted from document's `<head>` element.\n        const headStylesElements = Array.from(domFragment.ownerDocument.querySelectorAll('head style'));\n        writer.setCustomProperty('$fullPageHeadStyles', headStylesElements, viewFragment);\n        if (docType) {\n            writer.setCustomProperty('$fullPageDocType', docType, viewFragment);\n        }\n        if (xmlDeclaration) {\n            writer.setCustomProperty('$fullPageXmlDeclaration', xmlDeclaration, viewFragment);\n        }\n        return viewFragment;\n    }\n    /**\n\t * @inheritDoc\n\t */ toData(viewFragment) {\n        let data = super.toData(viewFragment);\n        const page = viewFragment.getCustomProperty('$fullPageDocument');\n        const docType = viewFragment.getCustomProperty('$fullPageDocType');\n        const xmlDeclaration = viewFragment.getCustomProperty('$fullPageXmlDeclaration');\n        if (page) {\n            data = page.replace(/<\\/body\\s*>/, data + '$&');\n            if (docType) {\n                data = docType + '\\n' + data;\n            }\n            if (xmlDeclaration) {\n                data = xmlDeclaration + '\\n' + data;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * The full page editing feature. It preserves the whole HTML page in the editor data.\n */ class FullPage extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FullPage';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('htmlSupport.fullPage', {\n            allowRenderStylesFromHead: false,\n            sanitizeCss: (rawCss)=>{\n                /**\n\t\t\t\t * When using the Full page with the `config.htmlSupport.fullPage.allowRenderStylesFromHead` set to `true`,\n\t\t\t\t * it is strongly recommended to define a sanitize function that will clean up the CSS\n\t\t\t\t * which is present in the `<head>` in editors content in order to avoid XSS vulnerability.\n\t\t\t\t *\n\t\t\t\t * For a detailed overview, check the {@glink features/html/full-page-html Full page HTML feature} documentation.\n\t\t\t\t *\n\t\t\t\t * @error css-full-page-provide-sanitize-function\n\t\t\t\t */ logWarning('css-full-page-provide-sanitize-function');\n                return {\n                    css: rawCss,\n                    hasChanged: false\n                };\n            }\n        });\n        editor.data.processor = new HtmlPageDataProcessor(editor.data.viewDocument);\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const properties = [\n            '$fullPageDocument',\n            '$fullPageDocType',\n            '$fullPageXmlDeclaration',\n            '$fullPageHeadStyles'\n        ];\n        editor.model.schema.extend('$root', {\n            allowAttributes: properties\n        });\n        // Apply custom properties from view document fragment to the model root attributes.\n        editor.data.on('toModel', (evt, [viewElementOrFragment])=>{\n            const root = editor.model.document.getRoot();\n            editor.model.change((writer)=>{\n                for (const name of properties){\n                    const value = viewElementOrFragment.getCustomProperty(name);\n                    if (value) {\n                        writer.setAttribute(name, value, root);\n                    }\n                }\n            });\n            if (isAllowedRenderStylesFromHead(editor)) {\n                this._renderStylesFromHead(root);\n            }\n        }, {\n            priority: 'low'\n        });\n        // Apply root attributes to the view document fragment.\n        editor.data.on('toView', (evt, [modelElementOrFragment])=>{\n            if (!modelElementOrFragment.is('rootElement')) {\n                return;\n            }\n            const root = modelElementOrFragment;\n            const viewFragment = evt.return;\n            if (!root.hasAttribute('$fullPageDocument')) {\n                return;\n            }\n            const writer = new ViewUpcastWriter(viewFragment.document);\n            for (const name of properties){\n                const value = root.getAttribute(name);\n                if (value) {\n                    writer.setCustomProperty(name, value, viewFragment);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n        // Clear root attributes related to full page editing on editor content reset.\n        editor.data.on('set', ()=>{\n            const root = editor.model.document.getRoot();\n            editor.model.change((writer)=>{\n                for (const name of properties){\n                    if (root.hasAttribute(name)) {\n                        writer.removeAttribute(name, root);\n                    }\n                }\n            });\n        }, {\n            priority: 'high'\n        });\n        // Make sure that document is returned even if there is no content in the page body.\n        editor.data.on('get', (evt, args)=>{\n            if (!args[0]) {\n                args[0] = {};\n            }\n            args[0].trim = false;\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        if (isAllowedRenderStylesFromHead(this.editor)) {\n            this._removeStyleElementsFromDom();\n        }\n    }\n    /**\n\t * Checks if in the document exists any `<style>` elements injected by the plugin and removes them,\n\t * so these could be re-rendered later.\n\t * There is used `data-full-page-style-id` attribute to recognize styles injected by the feature.\n\t */ _removeStyleElementsFromDom() {\n        const existingStyleElements = Array.from(global.document.querySelectorAll(`[data-full-page-style-id=\"${this.editor.id}\"]`));\n        for (const style of existingStyleElements){\n            style.remove();\n        }\n    }\n    /**\n\t * Extracts `<style>` elements from the full page data and renders them in the main document `<head>`.\n\t * CSS content is sanitized before rendering.\n\t */ _renderStyleElementsInDom(root) {\n        const editor = this.editor;\n        // Get `<style>` elements list from the `<head>` from the full page data.\n        const styleElements = root.getAttribute('$fullPageHeadStyles');\n        if (!styleElements) {\n            return;\n        }\n        const sanitizeCss = editor.config.get('htmlSupport.fullPage.sanitizeCss');\n        // Add `data-full-page-style-id` attribute to the `<style>` element and render it in `<head>` in the main document.\n        for (const style of styleElements){\n            style.setAttribute('data-full-page-style-id', editor.id);\n            // Sanitize the CSS content before rendering it in the editor.\n            const sanitizedCss = sanitizeCss(style.innerText);\n            if (sanitizedCss.hasChanged) {\n                style.innerText = sanitizedCss.css;\n            }\n            global.document.head.append(style);\n        }\n    }\n    /**\n\t * Removes existing `<style>` elements injected by the plugin and renders new ones from the full page data.\n\t */ _renderStylesFromHead(root) {\n        this._removeStyleElementsFromDom();\n        this._renderStyleElementsInDom(root);\n    }\n}\n/**\n * Normalize the Full page configuration option `allowRenderStylesFromHead`.\n */ function isAllowedRenderStylesFromHead(editor) {\n    return editor.config.get('htmlSupport.fullPage.allowRenderStylesFromHead');\n}\n\nconst EMPTY_BLOCK_MODEL_ATTRIBUTE = 'htmlEmptyBlock';\n/**\n * This plugin allows for preserving empty block elements in the editor content\n * instead of automatically filling them with block fillers (`&nbsp;`).\n *\n * This is useful when you want to:\n *\n * * Preserve empty block elements exactly as they were in the source HTML.\n * * Allow for styling empty blocks with CSS (block fillers can interfere with height/margin).\n * * Maintain compatibility with external systems that expect empty blocks to remain empty.\n *\n * Known limitations:\n *\n * * Empty blocks may not work correctly with revision history features.\n * * Keyboard navigation through the document might behave unexpectedly, especially when\n *   navigating through structures like lists and tables.\n *\n * For example, this allows for HTML like:\n *\n * ```html\n * <p></p>\n * <p class=\"spacer\"></p>\n * <td></td>\n * ```\n * to remain empty instead of being converted to:\n *\n * ```html\n * <p>&nbsp;</p>\n * <p class=\"spacer\">&nbsp;</p>\n * <td>&nbsp;</td>\n * ```\n */ class EmptyBlock extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'EmptyBlock';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const { model, conversion, plugins, config } = this.editor;\n        const schema = model.schema;\n        const preserveEmptyBlocksInEditingView = config.get('htmlSupport.preserveEmptyBlocksInEditingView');\n        schema.extend('$block', {\n            allowAttributes: [\n                EMPTY_BLOCK_MODEL_ATTRIBUTE\n            ]\n        });\n        schema.extend('$container', {\n            allowAttributes: [\n                EMPTY_BLOCK_MODEL_ATTRIBUTE\n            ]\n        });\n        if (schema.isRegistered('tableCell')) {\n            schema.extend('tableCell', {\n                allowAttributes: [\n                    EMPTY_BLOCK_MODEL_ATTRIBUTE\n                ]\n            });\n        }\n        if (preserveEmptyBlocksInEditingView) {\n            conversion.for('downcast').add(createEmptyBlockDowncastConverter());\n        } else {\n            conversion.for('dataDowncast').add(createEmptyBlockDowncastConverter());\n        }\n        conversion.for('upcast').add(createEmptyBlockUpcastConverter(schema));\n        if (plugins.has('ClipboardPipeline')) {\n            this._registerClipboardPastingHandler();\n        }\n    }\n    /**\n\t * Handle clipboard paste events:\n\t *\n\t * * It does not affect *copying* content from the editor, only *pasting*.\n\t * * When content is pasted from another editor instance with `<p></p>`,\n\t *   the `&nbsp;` filler is added, so the getData result is `<p>&nbsp;</p>`.\n\t * * When content is pasted from the same editor instance with `<p></p>`,\n\t *   the `&nbsp;` filler is not added, so the getData result is `<p></p>`.\n\t */ _registerClipboardPastingHandler() {\n        const clipboardPipeline = this.editor.plugins.get('ClipboardPipeline');\n        this.listenTo(clipboardPipeline, 'contentInsertion', (evt, data)=>{\n            if (data.sourceEditorId === this.editor.id) {\n                return;\n            }\n            this.editor.model.change((writer)=>{\n                for (const { item } of writer.createRangeIn(data.content)){\n                    if (item.is('element') && item.hasAttribute(EMPTY_BLOCK_MODEL_ATTRIBUTE)) {\n                        writer.removeAttribute(EMPTY_BLOCK_MODEL_ATTRIBUTE, item);\n                    }\n                }\n            });\n        });\n    }\n}\n/**\n * Creates a downcast converter for handling empty blocks.\n * This converter prevents filler elements from being added to elements marked as empty blocks.\n */ function createEmptyBlockDowncastConverter() {\n    return (dispatcher)=>{\n        dispatcher.on(`attribute:${EMPTY_BLOCK_MODEL_ATTRIBUTE}`, (evt, data, conversionApi)=>{\n            const { mapper, consumable } = conversionApi;\n            const { item } = data;\n            if (!consumable.consume(item, evt.name)) {\n                return;\n            }\n            const viewElement = mapper.toViewElement(item);\n            if (viewElement && data.attributeNewValue) {\n                viewElement.getFillerOffset = ()=>null;\n            }\n        });\n    };\n}\n/**\n * Creates an upcast converter for handling empty blocks.\n * The converter detects empty elements and marks them with the empty block attribute.\n */ function createEmptyBlockUpcastConverter(schema) {\n    return (dispatcher)=>{\n        dispatcher.on('element', (evt, data, conversionApi)=>{\n            const { viewItem, modelRange } = data;\n            if (!viewItem.is('element') || !viewItem.isEmpty || viewItem.getCustomProperty('$hasBlockFiller')) {\n                return;\n            }\n            // Handle element itself.\n            const modelElement = modelRange && modelRange.start.nodeAfter;\n            if (!modelElement || !schema.checkAttribute(modelElement, EMPTY_BLOCK_MODEL_ATTRIBUTE)) {\n                return;\n            }\n            conversionApi.writer.setAttribute(EMPTY_BLOCK_MODEL_ATTRIBUTE, true, modelElement);\n            // Handle an auto-paragraphed bogus paragraph inside empty element.\n            if (modelElement.childCount != 1) {\n                return;\n            }\n            const firstModelChild = modelElement.getChild(0);\n            if (firstModelChild.is('element', 'paragraph') && schema.checkAttribute(firstModelChild, EMPTY_BLOCK_MODEL_ATTRIBUTE)) {\n                conversionApi.writer.setAttribute(EMPTY_BLOCK_MODEL_ATTRIBUTE, true, firstModelChild);\n            }\n        }, {\n            priority: 'lowest'\n        });\n    };\n}\n\nexport { CodeBlockElementSupport, CustomElementSupport, DataFilter, DataSchema, DualContentModelElementSupport, EmptyBlock, FullPage, GeneralHtmlSupport, HeadingElementSupport, HorizontalLineElementSupport, HtmlComment, HtmlPageDataProcessor, ImageElementSupport, ListElementSupport, MediaEmbedElementSupport, ScriptElementSupport, StyleElementSupport, TableElementSupport, defaultConfig as _HTML_SUPPORT_SCHEMA_DEFINITIONS, attributeToViewInlineConverter as _attributeToInlineHtmlSupportConverter, createObjectView as _createObjectHtmlSupportView, emptyInlineModelElementToViewConverter as _emptyInlineModelElementToViewHtmlSupportConverter, getHtmlAttributeName as _getHtmlSupportAttributeName, getDescendantElement as _getHtmlSupportDescendantElement, mergeViewElementAttributes as _mergeHtmlSupportViewElementAttributes, modelToViewBlockAttributeConverter as _modelToViewBlockAttributeHtmlSupportConverter, modifyGhsAttribute as _modifyHtmlSupportGhsAttribute, removeViewAttributes as _removeHtmlSupportViewAttributes, setViewAttributes as _setHtmlSupportViewAttributes, toPascalCase as _toHtmlSupportPascalCase, toObjectWidgetConverter as _toObjectWidgetHtmlSupportConverter, updateViewAttributes as _updateHtmlSupportViewAttributes, viewToAttributeInlineConverter as _viewToAttributeInlineHtmlSupportConverter, viewToModelBlockAttributeConverter as _viewToModelBlockAttributeHtmlSupportConverter, viewToModelObjectConverter as _viewToModelObjectContentHtmlSupportConverter };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/utils\n */\n\nimport type {\n\tModelDocumentSelection,\n\tViewDowncastWriter,\n\tModelItem,\n\tModelRange,\n\tViewElement,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\nimport { startCase, cloneDeep } from 'es-toolkit/compat';\n\nexport interface GHSViewAttributes {\n\tattributes?: Record<string, unknown>;\n\tclasses?: Array<string>;\n\tstyles?: Record<string, string>;\n}\n\n/**\n* Helper function for the downcast converter. Updates attributes on the given view element.\n*\n* @param writer The view writer.\n* @param oldViewAttributes The previous GHS attribute value.\n* @param newViewAttributes The current GHS attribute value.\n* @param viewElement The view element to update.\n* @internal\n*/\nexport function updateViewAttributes(\n\twriter: ViewDowncastWriter,\n\toldViewAttributes: GHSViewAttributes,\n\tnewViewAttributes: GHSViewAttributes,\n\tviewElement: ViewElement\n): void {\n\tif ( oldViewAttributes ) {\n\t\tremoveViewAttributes( writer, oldViewAttributes, viewElement );\n\t}\n\n\tif ( newViewAttributes ) {\n\t\tsetViewAttributes( writer, newViewAttributes, viewElement );\n\t}\n}\n\n/**\n * Helper function for the downcast converter. Sets attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n * @internal\n */\nexport function setViewAttributes( writer: ViewDowncastWriter, viewAttributes: GHSViewAttributes, viewElement: ViewElement ): void {\n\tif ( viewAttributes.attributes ) {\n\t\tfor ( const [ key, value ] of Object.entries( viewAttributes.attributes ) ) {\n\t\t\twriter.setAttribute( key, value, viewElement );\n\t\t}\n\t}\n\n\tif ( viewAttributes.styles ) {\n\t\twriter.setStyle( viewAttributes.styles, viewElement );\n\t}\n\n\tif ( viewAttributes.classes ) {\n\t\twriter.addClass( viewAttributes.classes, viewElement );\n\t}\n}\n\n/**\n * Helper function for the downcast converter. Removes attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n * @internal\n */\nexport function removeViewAttributes( writer: ViewDowncastWriter, viewAttributes: GHSViewAttributes, viewElement: ViewElement ): void {\n\tif ( viewAttributes.attributes ) {\n\t\tfor ( const [ key ] of Object.entries( viewAttributes.attributes ) ) {\n\t\t\twriter.removeAttribute( key, viewElement );\n\t\t}\n\t}\n\n\tif ( viewAttributes.styles ) {\n\t\tfor ( const style of Object.keys( viewAttributes.styles ) ) {\n\t\t\twriter.removeStyle( style, viewElement );\n\t\t}\n\t}\n\n\tif ( viewAttributes.classes ) {\n\t\twriter.removeClass( viewAttributes.classes, viewElement );\n\t}\n}\n\n/**\n* Merges view element attribute objects.\n*\n* @internal\n*/\nexport function mergeViewElementAttributes( target: GHSViewAttributes, source: GHSViewAttributes ): GHSViewAttributes {\n\tconst result = cloneDeep( target ) as Record<string, any>;\n\tlet key: keyof GHSViewAttributes = 'attributes';\n\tfor ( key in source ) {\n\t\t// Merge classes.\n\t\tif ( key == 'classes' ) {\n\t\t\tresult[ key ] = Array.from( new Set( [ ...( target[ key ] || [] ), ...source[ key ]! ] ) );\n\t\t}\n\n\t\t// Merge attributes or styles.\n\t\telse {\n\t\t\tresult[ key ] = { ...target[ key ], ...source[ key ] };\n\t\t}\n\t}\n\n\treturn result;\n}\n\ntype ModifyGhsAttributesCallback = ( t: Map<string, unknown> ) => void;\ntype ModifyGhsClassesCallback = ( t: Set<string> ) => void;\ntype ModifyGhsStylesCallback = ( t: Map<string, string> ) => void;\n\n/**\n * Updates a GHS attribute on a specified item.\n *\n * @param callback That receives a map as an argument and should modify it (add or remove entries).\n * @internal\n */\nexport function modifyGhsAttribute(\n\twriter: ModelWriter,\n\titem: ModelItem | ModelDocumentSelection,\n\tghsAttributeName: string,\n\tsubject: 'attributes',\n\tcallback: ModifyGhsAttributesCallback\n): void;\n\n/**\n * Updates a GHS attribute on a specified item.\n *\n * @param callback That receives a set as an argument and should modify it (add or remove entries).\n * @internal\n */\nexport function modifyGhsAttribute(\n\twriter: ModelWriter,\n\titem: ModelItem | ModelDocumentSelection,\n\tghsAttributeName: string,\n\tsubject: 'classes',\n\tcallback: ModifyGhsClassesCallback\n): void;\n\n/**\n * Updates a GHS attribute on a specified item.\n * @param callback That receives a map as an argument and should modify it (add or remove entries).\n */\nexport function modifyGhsAttribute(\n\twriter: ModelWriter,\n\titem: ModelItem | ModelDocumentSelection,\n\tghsAttributeName: string,\n\tsubject: 'styles',\n\tcallback: ModifyGhsStylesCallback\n): void;\n\nexport function modifyGhsAttribute(\n\twriter: ModelWriter,\n\titem: ModelItem | ModelDocumentSelection,\n\tghsAttributeName: string,\n\tsubject: 'attributes' | 'styles' | 'classes',\n\tcallback: ModifyGhsClassesCallback | ModifyGhsAttributesCallback | ModifyGhsStylesCallback\n): void {\n\tconst oldValue = item.getAttribute( ghsAttributeName ) as Record<string, any>;\n\tconst newValue: Record<string, any> = {};\n\n\tfor ( const kind of [ 'attributes', 'styles', 'classes' ] ) {\n\t\t// Properties other than `subject` should be assigned from `oldValue`.\n\t\tif ( kind != subject ) {\n\t\t\tif ( oldValue && oldValue[ kind ] ) {\n\t\t\t\tnewValue[ kind ] = oldValue[ kind ];\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// `callback` should be applied on property [`subject`].\n\t\tif ( subject == 'classes' ) {\n\t\t\tconst values = new Set<string>( oldValue && oldValue.classes || [] );\n\t\t\t( callback as ModifyGhsClassesCallback )( values );\n\t\t\tif ( values.size ) {\n\t\t\t\tnewValue[ kind ] = Array.from( values );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst values = new Map<string, any>( Object.entries( oldValue && oldValue[ kind ] || {} ) );\n\t\t( callback as ( ModifyGhsAttributesCallback | ModifyGhsStylesCallback ) )( values );\n\t\tif ( values.size ) {\n\t\t\tnewValue[ kind ] = Object.fromEntries( values );\n\t\t}\n\t}\n\n\tif ( Object.keys( newValue ).length ) {\n\t\tif ( item.is( 'documentSelection' ) ) {\n\t\t\twriter.setSelectionAttribute( ghsAttributeName, newValue );\n\t\t} else {\n\t\t\twriter.setAttribute( ghsAttributeName, newValue, item );\n\t\t}\n\t} else if ( oldValue ) {\n\t\tif ( item.is( 'documentSelection' ) ) {\n\t\t\twriter.removeSelectionAttribute( ghsAttributeName );\n\t\t} else {\n\t\t\twriter.removeAttribute( ghsAttributeName, item );\n\t\t}\n\t}\n}\n\n/**\n * Strips the `styles`, and `classes` keys from the GHS attribute value on the given item.\n *\n * @internal\n */\nexport function removeFormatting( ghsAttributeName: string, itemRange: ModelRange, writer: ModelWriter ): void {\n\tfor ( const item of itemRange.getItems( { shallow: true } ) ) {\n\t\tconst value = item.getAttribute( ghsAttributeName ) as Record<string, any>;\n\n\t\t// Copy only attributes to the new attribute value.\n\t\tif ( value && value.attributes && Object.keys( value.attributes ).length ) {\n\t\t\t// But reset the GHS attribute only when there is anything more than just attributes.\n\t\t\tif ( Object.keys( value ).length > 1 ) {\n\t\t\t\twriter.setAttribute( ghsAttributeName, { attributes: value.attributes }, item );\n\t\t\t}\n\t\t} else {\n\t\t\t// There are no attributes, so remove the GHS attribute completely.\n\t\t\twriter.removeAttribute( ghsAttributeName, item );\n\t\t}\n\t}\n}\n\n/**\n * Transforms passed string to PascalCase format. Examples:\n * * `div` => `Div`\n * * `h1` => `H1`\n * * `table` => `Table`\n *\n * @internal\n */\nexport function toPascalCase( data: string ): string {\n\treturn startCase( data ).replace( / /g, '' );\n}\n\n/**\n * Returns the attribute name of the model element that holds raw HTML attributes.\n *\n * @internal\n */\nexport function getHtmlAttributeName( viewElementName: string ): string {\n\treturn `html${ toPascalCase( viewElementName ) }Attributes`;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/converters\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type {\n\tViewAttributeElement,\n\tDowncastAttributeEvent,\n\tDowncastConversionApi,\n\tDowncastDispatcher,\n\tViewDowncastWriter,\n\tModelElement,\n\tDowncastElementCreatorFunction,\n\tUpcastConversionApi,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement,\n\tModelItem\n} from 'ckeditor5/src/engine.js';\nimport { toWidget } from 'ckeditor5/src/widget.js';\nimport {\n\tsetViewAttributes,\n\tmergeViewElementAttributes,\n\tupdateViewAttributes,\n\tgetHtmlAttributeName,\n\ttype GHSViewAttributes\n} from './utils.js';\nimport { type DataFilter } from './datafilter.js';\nimport type {\n\tHtmlSupportDataSchemaBlockElementDefinition,\n\tHtmlSupportDataSchemaDefinition,\n\tHtmlSupportDataSchemaInlineElementDefinition\n} from './dataschema.js';\n\n/**\n * View-to-model conversion helper for object elements.\n *\n * Preserves object element content in `htmlContent` attribute.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/\nexport function viewToModelObjectConverter( { model: modelName }: HtmlSupportDataSchemaDefinition ) {\n\treturn ( viewElement: ViewElement, conversionApi: UpcastConversionApi ): ModelElement => {\n\t\t// Let's keep element HTML and its attributes, so we can rebuild element in downcast conversions.\n\t\treturn conversionApi.writer.createElement( modelName, {\n\t\t\thtmlContent: viewElement.getCustomProperty( '$rawContent' )\n\t\t} );\n\t};\n}\n\n/**\n * Conversion helper converting an object element to an HTML object widget.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/\nexport function toObjectWidgetConverter(\n\teditor: Editor,\n\t{ view: viewName, isInline }: HtmlSupportDataSchemaInlineElementDefinition\n): DowncastElementCreatorFunction {\n\tconst t = editor.t;\n\n\treturn ( modelElement: ModelElement, { writer }: DowncastConversionApi ) => {\n\t\tconst widgetLabel = t( 'HTML object' );\n\n\t\tconst viewElement = createObjectView( viewName!, modelElement, writer );\n\t\tconst viewAttributes = modelElement.getAttribute( getHtmlAttributeName( viewName! ) );\n\n\t\twriter.addClass( 'html-object-embed__content', viewElement );\n\n\t\tif ( viewAttributes ) {\n\t\t\tsetViewAttributes( writer, viewAttributes, viewElement );\n\t\t}\n\n\t\t// Widget cannot be a raw element because the widget system would not be able\n\t\t// to add its UI to it. Thus, we need separate view container.\n\t\tconst viewContainer = writer.createContainerElement( isInline ? 'span' : 'div',\n\t\t\t{\n\t\t\t\tclass: 'html-object-embed',\n\t\t\t\t'data-html-object-embed-label': widgetLabel\n\t\t\t},\n\t\t\tviewElement\n\t\t);\n\n\t\treturn toWidget( viewContainer, writer, { label: widgetLabel } );\n\t};\n}\n\n/**\n* Creates object view element from the given model element.\n*\n* @internal\n*/\nexport function createObjectView( viewName: string, modelElement: ModelElement, writer: ViewDowncastWriter ): ViewElement {\n\treturn writer.createRawElement( viewName, null, ( domElement, domConverter ) => {\n\t\tdomConverter.setContentOf( domElement, modelElement.getAttribute( 'htmlContent' ) as string );\n\t} );\n}\n\n/**\n * View-to-attribute conversion helper preserving inline element attributes on `$text`.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/\nexport function viewToAttributeInlineConverter(\n\t{ view: viewName, model: attributeKey, allowEmpty }: HtmlSupportDataSchemaInlineElementDefinition,\n\tdataFilter: DataFilter\n): ( dispatcher: UpcastDispatcher ) => void {\n\treturn dispatcher => {\n\t\tdispatcher.on<UpcastElementEvent>( `element:${ viewName }`, ( evt, data, conversionApi ) => {\n\t\t\tlet viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n\n\t\t\t// Do not apply the attribute if the element itself is already consumed and there are no view attributes to store.\n\t\t\tif ( !viewAttributes && !conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, we might need to convert it to an empty object just to preserve element itself,\n\t\t\t// for example `<cite>` => <$text htmlCite=\"{}\">.\n\t\t\tviewAttributes = viewAttributes || {};\n\n\t\t\t// Consume the element itself if it wasn't consumed by any other converter.\n\t\t\tconversionApi.consumable.consume( data.viewItem, { name: true } );\n\n\t\t\t// Since we are converting to attribute we need a range on which we will set the attribute.\n\t\t\t// If the range is not created yet, we will create it.\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t\t}\n\n\t\t\t// Convert empty inline element if allowed and has any attributes.\n\t\t\tif ( allowEmpty && data.modelRange!.isCollapsed && Object.keys( viewAttributes ).length ) {\n\t\t\t\tconst modelElement = conversionApi.writer.createElement( 'htmlEmptyElement' );\n\n\t\t\t\tif ( !conversionApi.safeInsert( modelElement, data.modelCursor ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parts = conversionApi.getSplitParts( modelElement );\n\n\t\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t\tdata.modelRange!.start,\n\t\t\t\t\tconversionApi.writer.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t\t\t);\n\n\t\t\t\tconversionApi.updateConversionResult( modelElement, data );\n\t\t\t\tsetAttributeOnItem( modelElement, viewAttributes, conversionApi );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set attribute on each item in range according to the schema.\n\t\t\tfor ( const node of data.modelRange!.getItems() ) {\n\t\t\t\tsetAttributeOnItem( node, viewAttributes, conversionApi );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n\n\tfunction setAttributeOnItem( node: ModelItem, viewAttributes: GHSViewAttributes, conversionApi: UpcastConversionApi ): void {\n\t\tif ( conversionApi.schema.checkAttribute( node, attributeKey ) ) {\n\t\t\t// Node's children are converted recursively, so node can already include model attribute.\n\t\t\t// We want to extend it, not replace.\n\t\t\tconst nodeAttributes = node.getAttribute( attributeKey );\n\t\t\tconst attributesToAdd = mergeViewElementAttributes( viewAttributes, nodeAttributes || {} );\n\n\t\t\tconversionApi.writer.setAttribute( attributeKey, attributesToAdd, node );\n\t\t}\n\t}\n}\n\n/**\n * Conversion helper converting an empty inline model element to an HTML element or widget.\n *\n * @internal\n */\nexport function emptyInlineModelElementToViewConverter(\n\t{ model: attributeKey, view: viewName }: HtmlSupportDataSchemaInlineElementDefinition,\n\tasWidget?: boolean\n): DowncastElementCreatorFunction {\n\treturn ( item, { writer, consumable } ) => {\n\t\tif ( !item.hasAttribute( attributeKey ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst viewElement = writer.createContainerElement( viewName! );\n\t\tconst attributeValue = item.getAttribute( attributeKey ) as GHSViewAttributes;\n\n\t\tconsumable.consume( item, `attribute:${ attributeKey }` );\n\t\tsetViewAttributes( writer, attributeValue, viewElement );\n\n\t\tviewElement.getFillerOffset = () => null;\n\n\t\treturn asWidget ? toWidget( viewElement, writer ) : viewElement;\n\t};\n}\n\n/**\n * Attribute-to-view conversion helper applying attributes to view element preserved on `$text`.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/\nexport function attributeToViewInlineConverter( { priority, view: viewName }: HtmlSupportDataSchemaInlineElementDefinition ) {\n\treturn ( attributeValue: any, conversionApi: DowncastConversionApi ): ViewAttributeElement | undefined => {\n\t\tif ( !attributeValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { writer } = conversionApi;\n\t\tconst viewElement = writer.createAttributeElement( viewName!, null, { priority } );\n\n\t\tsetViewAttributes( writer, attributeValue, viewElement );\n\n\t\treturn viewElement;\n\t};\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on block element.\n *\n * All matched attributes will be preserved on `html*Attributes` attribute.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/\nexport function viewToModelBlockAttributeConverter(\n\t{ view: viewName }: HtmlSupportDataSchemaBlockElementDefinition,\n\tdataFilter: DataFilter\n) {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( `element:${ viewName }`, ( evt, data, conversionApi ) => {\n\t\t\t// Converting an attribute of an element that has not been converted to anything does not make sense\n\t\t\t// because there will be nowhere to set that attribute on. At this stage, the element should've already\n\t\t\t// been converted. A collapsed range can show up in to-do lists (<input>) or complex widgets (e.g. table).\n\t\t\t// (https://github.com/ckeditor/ckeditor5/issues/11000).\n\t\t\tif ( !data.modelRange || data.modelRange.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n\n\t\t\tif ( !viewAttributes ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.setAttribute(\n\t\t\t\tgetHtmlAttributeName( data.viewItem.name ),\n\t\t\t\tviewAttributes,\n\t\t\t\tdata.modelRange\n\t\t\t);\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Model-to-view conversion helper applying attributes preserved in `html*Attributes` attribute\n * for block elements.\n *\n * @returns Returns a conversion callback.\n * @internal\n*/\nexport function modelToViewBlockAttributeConverter( { view: viewName, model: modelName }: HtmlSupportDataSchemaBlockElementDefinition ) {\n\treturn ( dispatcher: DowncastDispatcher ): void => {\n\t\tdispatcher.on<DowncastAttributeEvent>(\n\t\t\t`attribute:${ getHtmlAttributeName( viewName! ) }:${ modelName }`,\n\t\t\t( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item as ModelElement )!;\n\n\t\t\t\tupdateViewAttributes(\n\t\t\t\t\tviewWriter,\n\t\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\t\tviewElement\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\nimport type { HtmlSupportDataSchemaBlockElementDefinition, HtmlSupportDataSchemaInlineElementDefinition } from './dataschema.js';\n\n/**\n * @module html-support/schemadefinitions\n */\n\n/**\n * Skipped elements due to HTML deprecation:\n * * noframes (not sure if we should provide support for this element. CKE4 is not supporting frameset and frame,\n *   but it will unpack <frameset><noframes>foobar</noframes></frameset> to <noframes>foobar</noframes>, so there\n *   may be some content loss. Although using noframes as a standalone element seems invalid)\n * * keygen (this one is also empty)\n * * applet (support is limited mostly to old IE)\n * * basefont (this one is also empty)\n * * isindex (basically no support for modern browsers at all)\n *\n * Skipped elements due to lack empty element support:\n * * hr\n * * area\n * * br\n * * command\n * * map\n * * wbr\n * * colgroup -> col\n *\n * Skipped elements due to complexity:\n * * datalist with option elements used as a data source for input[list] element\n *\n * Skipped elements as they are handled as an object content:\n * * track\n * * source\n * * option\n * * param\n * * optgroup\n *\n * Skipped full page HTML elements:\n * * body\n * * html\n * * title\n * * head\n * * meta\n * * link\n * * etc...\n *\n * Skipped hidden elements:\n * noscript\n *\n * When adding elements to this list, update the feature guide listing, too.\n *\n * @internal\n */\nexport const defaultConfig = {\n\tblock: [\n\t\t// Existing features.\n\t\t{\n\t\t\tmodel: 'codeBlock',\n\t\t\tview: 'pre'\n\t\t},\n\t\t{\n\t\t\tmodel: 'paragraph',\n\t\t\tview: 'p'\n\t\t},\n\t\t{\n\t\t\tmodel: 'blockQuote',\n\t\t\tview: 'blockquote'\n\t\t},\n\t\t{\n\t\t\tmodel: 'listItem',\n\t\t\tview: 'li'\n\t\t},\n\t\t{\n\t\t\tmodel: 'pageBreak',\n\t\t\tview: 'div'\n\t\t},\n\t\t{\n\t\t\tmodel: 'rawHtml',\n\t\t\tview: 'div'\n\t\t},\n\t\t{\n\t\t\tmodel: 'table',\n\t\t\tview: 'table'\n\t\t},\n\t\t{\n\t\t\tmodel: 'tableRow',\n\t\t\tview: 'tr'\n\t\t},\n\t\t{\n\t\t\tmodel: 'tableCell',\n\t\t\tview: 'td'\n\t\t},\n\t\t{\n\t\t\tmodel: 'tableCell',\n\t\t\tview: 'th'\n\t\t},\n\t\t{\n\t\t\tmodel: 'tableColumnGroup',\n\t\t\tview: 'colgroup'\n\t\t},\n\t\t{\n\t\t\tmodel: 'tableColumn',\n\t\t\tview: 'col'\n\t\t},\n\t\t{\n\t\t\tmodel: 'caption',\n\t\t\tview: 'caption'\n\t\t},\n\t\t{\n\t\t\tmodel: 'caption',\n\t\t\tview: 'figcaption'\n\t\t},\n\t\t{\n\t\t\tmodel: 'imageBlock',\n\t\t\tview: 'img'\n\t\t},\n\t\t{\n\t\t\tmodel: 'imageInline',\n\t\t\tview: 'img'\n\t\t},\n\t\t{\n\t\t\tmodel: 'horizontalLine',\n\t\t\tview: 'hr'\n\t\t},\n\n\t\t// Compatibility features.\n\t\t{\n\t\t\tmodel: 'htmlP',\n\t\t\tview: 'p',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlBlockquote',\n\t\t\tview: 'blockquote',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTable',\n\t\t\tview: 'table',\n\t\t\tmodelSchema: {\n\t\t\t\tallowWhere: '$block',\n\t\t\t\tisBlock: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTbody',\n\t\t\tview: 'tbody',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTable',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlThead',\n\t\t\tview: 'thead',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTable',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTfoot',\n\t\t\tview: 'tfoot',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTable',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCaption',\n\t\t\tview: 'caption',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTable',\n\t\t\t\tallowChildren: '$text',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlColgroup',\n\t\t\tview: 'colgroup',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTable',\n\t\t\t\tallowChildren: 'col',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCol',\n\t\t\tview: 'col',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlColgroup',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTr',\n\t\t\tview: 'tr',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: [ 'htmlTable', 'htmlThead', 'htmlTbody' ],\n\t\t\t\tisLimit: true\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlTd',\n\t\t\tview: 'td',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTr',\n\t\t\t\tallowContentOf: '$container',\n\t\t\t\tisLimit: true,\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlTh',\n\t\t\tview: 'th',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlTr',\n\t\t\t\tallowContentOf: '$container',\n\t\t\t\tisLimit: true,\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlFigure',\n\t\t\tview: 'figure',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include other block elements.\n\t\t{\n\t\t\tmodel: 'htmlFigcaption',\n\t\t\tview: 'figcaption',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlFigure',\n\t\t\t\tallowChildren: '$text',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlAddress',\n\t\t\tview: 'address',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlAside',\n\t\t\tview: 'aside',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlMain',\n\t\t\tview: 'main',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlDetails',\n\t\t\tview: 'details',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSummary',\n\t\t\tview: 'summary',\n\t\t\tmodelSchema: {\n\t\t\t\tallowChildren: [\n\t\t\t\t\t'htmlH1',\n\t\t\t\t\t'htmlH2',\n\t\t\t\t\t'htmlH3',\n\t\t\t\t\t'htmlH4',\n\t\t\t\t\t'htmlH5',\n\t\t\t\t\t'htmlH6',\n\t\t\t\t\t'$text'\n\t\t\t\t],\n\t\t\t\tallowIn: 'htmlDetails',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDiv',\n\t\t\tview: 'div',\n\t\t\tparagraphLikeModel: 'htmlDivParagraph',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container'\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlFieldset',\n\t\t\tview: 'fieldset',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include h1-h6.\n\t\t{\n\t\t\tmodel: 'htmlLegend',\n\t\t\tview: 'legend',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: 'htmlFieldset',\n\t\t\t\tallowChildren: '$text'\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlHeader',\n\t\t\tview: 'header',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlFooter',\n\t\t\tview: 'footer',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlForm',\n\t\t\tview: 'form',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlHgroup',\n\t\t\tview: 'hgroup',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: [ '$root', '$container' ],\n\t\t\t\tallowChildren: [\n\t\t\t\t\t'paragraph',\n\t\t\t\t\t'htmlP',\n\t\t\t\t\t'htmlH1',\n\t\t\t\t\t'htmlH2',\n\t\t\t\t\t'htmlH3',\n\t\t\t\t\t'htmlH4',\n\t\t\t\t\t'htmlH5',\n\t\t\t\t\t'htmlH6'\n\t\t\t\t],\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlH1',\n\t\t\tview: 'h1',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlH2',\n\t\t\tview: 'h2',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlH3',\n\t\t\tview: 'h3',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlH4',\n\t\t\tview: 'h4',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlH5',\n\t\t\tview: 'h5',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlH6',\n\t\t\tview: 'h6',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: '$htmlList',\n\t\t\tmodelSchema: {\n\t\t\t\tallowWhere: '$container',\n\t\t\t\tallowChildren: [ '$htmlList', 'htmlLi' ],\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDir',\n\t\t\tview: 'dir',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$htmlList'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlMenu',\n\t\t\tview: 'menu',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$htmlList'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlUl',\n\t\t\tview: 'ul',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$htmlList'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlOl',\n\t\t\tview: 'ol',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$htmlList'\n\t\t\t}\n\t\t},\n\t\t// TODO can also include other block elements.\n\t\t{\n\t\t\tmodel: 'htmlLi',\n\t\t\tview: 'li',\n\t\t\tmodelSchema: {\n\t\t\t\tallowIn: '$htmlList',\n\t\t\t\tallowChildren: '$text',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlPre',\n\t\t\tview: 'pre',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlArticle',\n\t\t\tview: 'article',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSection',\n\t\t\tview: 'section',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t// TODO can also include text.\n\t\t{\n\t\t\tmodel: 'htmlNav',\n\t\t\tview: 'nav',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDivDl',\n\t\t\tview: 'div',\n\t\t\tmodelSchema: {\n\t\t\t\tallowChildren: [ 'htmlDt', 'htmlDd' ],\n\t\t\t\tallowIn: 'htmlDl'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDl',\n\t\t\tview: 'dl',\n\t\t\tmodelSchema: {\n\t\t\t\tallowWhere: '$container',\n\t\t\t\tallowChildren: [ 'htmlDt', 'htmlDd', 'htmlDivDl' ],\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDt',\n\t\t\tview: 'dt',\n\t\t\tmodelSchema: {\n\t\t\t\tallowChildren: '$block',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDd',\n\t\t\tview: 'dd',\n\t\t\tmodelSchema: {\n\t\t\t\tallowChildren: '$block',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCenter',\n\t\t\tview: 'center',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$container',\n\t\t\t\tisBlock: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlHr',\n\t\t\tview: 'hr',\n\t\t\tisEmpty: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$blockObject'\n\t\t\t}\n\t\t}\n\t] as Array<HtmlSupportDataSchemaBlockElementDefinition>,\n\n\tinline: [\n\t\t// Existing features (attribute set on an existing model element).\n\t\t{\n\t\t\tmodel: 'htmlLiAttributes',\n\t\t\tview: 'li',\n\t\t\tappliesToBlock: true,\n\t\t\tcoupledAttribute: 'listItemId'\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlOlAttributes',\n\t\t\tview: 'ol',\n\t\t\tappliesToBlock: true,\n\t\t\tcoupledAttribute: 'listItemId'\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlUlAttributes',\n\t\t\tview: 'ul',\n\t\t\tappliesToBlock: true,\n\t\t\tcoupledAttribute: 'listItemId'\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlFigureAttributes',\n\t\t\tview: 'figure',\n\t\t\tappliesToBlock: 'table'\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTheadAttributes',\n\t\t\tview: 'thead',\n\t\t\tappliesToBlock: 'table'\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTbodyAttributes',\n\t\t\tview: 'tbody',\n\t\t\tappliesToBlock: 'table'\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlFigureAttributes',\n\t\t\tview: 'figure',\n\t\t\tappliesToBlock: 'imageBlock'\n\t\t},\n\n\t\t// Compatibility features.\n\t\t{\n\t\t\tmodel: 'htmlAcronym',\n\t\t\tview: 'acronym',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTt',\n\t\t\tview: 'tt',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlFont',\n\t\t\tview: 'font',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTime',\n\t\t\tview: 'time',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlVar',\n\t\t\tview: 'var',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlBig',\n\t\t\tview: 'big',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSmall',\n\t\t\tview: 'small',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSamp',\n\t\t\tview: 'samp',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlQ',\n\t\t\tview: 'q',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlOutput',\n\t\t\tview: 'output',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlKbd',\n\t\t\tview: 'kbd',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlBdi',\n\t\t\tview: 'bdi',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlBdo',\n\t\t\tview: 'bdo',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlAbbr',\n\t\t\tview: 'abbr',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlA',\n\t\t\tview: 'a',\n\t\t\tpriority: 5,\n\t\t\tcoupledAttribute: 'linkHref',\n\t\t\tattributeProperties: {\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlStrong',\n\t\t\tview: 'strong',\n\t\t\tcoupledAttribute: 'bold',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlB',\n\t\t\tview: 'b',\n\t\t\tcoupledAttribute: 'bold',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlI',\n\t\t\tview: 'i',\n\t\t\tcoupledAttribute: 'italic',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlEm',\n\t\t\tview: 'em',\n\t\t\tcoupledAttribute: 'italic',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlS',\n\t\t\tview: 's',\n\t\t\tcoupledAttribute: 'strikethrough',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t// TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n\t\t{\n\t\t\tmodel: 'htmlDel',\n\t\t\tview: 'del',\n\t\t\tcoupledAttribute: 'strikethrough',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t// TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n\t\t{\n\t\t\tmodel: 'htmlIns',\n\t\t\tview: 'ins',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlU',\n\t\t\tview: 'u',\n\t\t\tcoupledAttribute: 'underline',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSub',\n\t\t\tview: 'sub',\n\t\t\tcoupledAttribute: 'subscript',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSup',\n\t\t\tview: 'sup',\n\t\t\tcoupledAttribute: 'superscript',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCode',\n\t\t\tview: 'code',\n\t\t\tcoupledAttribute: 'code',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlMark',\n\t\t\tview: 'mark',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSpan',\n\t\t\tview: 'span',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCite',\n\t\t\tview: 'cite',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlLabel',\n\t\t\tview: 'label',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlDfn',\n\t\t\tview: 'dfn',\n\t\t\tattributeProperties: {\n\t\t\t\tcopyOnEnter: true,\n\t\t\t\tisFormatting: true\n\t\t\t}\n\t\t},\n\n\t\t// Objects.\n\t\t{\n\t\t\tmodel: 'htmlObject',\n\t\t\tview: 'object',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlIframe',\n\t\t\tview: 'iframe',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlInput',\n\t\t\tview: 'input',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlButton',\n\t\t\tview: 'button',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlTextarea',\n\t\t\tview: 'textarea',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlSelect',\n\t\t\tview: 'select',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlVideo',\n\t\t\tview: 'video',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlEmbed',\n\t\t\tview: 'embed',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlOembed',\n\t\t\tview: 'oembed',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlAudio',\n\t\t\tview: 'audio',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlImg',\n\t\t\tview: 'img',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCanvas',\n\t\t\tview: 'canvas',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t// TODO it could be probably represented as non-object element, although it has graphical representation,\n\t\t// so probably makes more sense to keep it as an object.\n\t\t{\n\t\t\tmodel: 'htmlMeter',\n\t\t\tview: 'meter',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t// TODO it could be probably represented as non-object element, although it has graphical representation,\n\t\t// so probably makes more sense to keep it as an object.\n\t\t{\n\t\t\tmodel: 'htmlProgress',\n\t\t\tview: 'progress',\n\t\t\tisObject: true,\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlScript',\n\t\t\tview: 'script',\n\t\t\tmodelSchema: {\n\t\t\t\tallowWhere: [ '$text', '$block' ],\n\t\t\t\tisInline: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlStyle',\n\t\t\tview: 'style',\n\t\t\tmodelSchema: {\n\t\t\t\tallowWhere: [ '$text', '$block' ],\n\t\t\t\tisInline: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmodel: 'htmlCustomElement',\n\t\t\tview: '$customElement',\n\t\t\tmodelSchema: {\n\t\t\t\tallowWhere: [ '$text', '$block' ],\n\t\t\t\tallowAttributesOf: '$inlineObject',\n\t\t\t\tisInline: true\n\t\t\t}\n\t\t}\n\t] as Array<HtmlSupportDataSchemaInlineElementDefinition>\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/dataschema\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { toArray } from 'ckeditor5/src/utils.js';\nimport { defaultConfig } from './schemadefinitions.js';\nimport { mergeWith } from 'es-toolkit/compat';\nimport type { ModelAttributeProperties, ModelSchemaItemDefinition } from 'ckeditor5/src/engine.js';\n\n/**\n * Holds representation of the extended HTML document type definitions to be used by the\n * editor in HTML support.\n *\n * Data schema is represented by data schema definitions.\n *\n * To add new definition for block element,\n * use {@link module:html-support/dataschema~DataSchema#registerBlockElement} method:\n *\n * ```ts\n * dataSchema.registerBlockElement( {\n * \tview: 'section',\n * \tmodel: 'my-section',\n * \tmodelSchema: {\n * \t\tinheritAllFrom: '$block'\n * \t}\n * } );\n * ```\n *\n * To add new definition for inline element,\n * use {@link module:html-support/dataschema~DataSchema#registerInlineElement} method:\n *\n * ```\n * dataSchema.registerInlineElement( {\n * \tview: 'span',\n * \tmodel: 'my-span',\n * \tattributeProperties: {\n * \t\tcopyOnEnter: true\n * \t}\n * } );\n * ```\n */\nexport class DataSchema extends Plugin {\n\t/**\n\t * A map of registered data schema definitions.\n\t */\n\tprivate readonly _definitions: Array<HtmlSupportDataSchemaDefinition> = [];\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'DataSchema' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tfor ( const definition of defaultConfig.block ) {\n\t\t\tthis.registerBlockElement( definition );\n\t\t}\n\n\t\tfor ( const definition of defaultConfig.inline ) {\n\t\t\tthis.registerInlineElement( definition );\n\t\t}\n\t}\n\n\t/**\n\t * Add new data schema definition describing block element.\n\t */\n\tpublic registerBlockElement( definition: HtmlSupportDataSchemaBlockElementDefinition ): void {\n\t\tthis._definitions.push( { ...definition, isBlock: true } );\n\t}\n\n\t/**\n\t * Add new data schema definition describing inline element.\n\t */\n\tpublic registerInlineElement( definition: HtmlSupportDataSchemaInlineElementDefinition ): void {\n\t\tthis._definitions.push( { ...definition, isInline: true } );\n\t}\n\n\t/**\n\t * Updates schema definition describing block element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */\n\tpublic extendBlockElement( definition: HtmlSupportDataSchemaBlockElementDefinition ): void {\n\t\tthis._extendDefinition( { ...definition, isBlock: true } );\n\t}\n\n\t/**\n\t * Updates schema definition describing inline element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */\n\tpublic extendInlineElement( definition: HtmlSupportDataSchemaInlineElementDefinition ): void {\n\t\tthis._extendDefinition( { ...definition, isInline: true } );\n\t}\n\n\t/**\n\t * Returns all definitions matching the given view name.\n\t *\n\t * @param includeReferences Indicates if this method should also include definitions of referenced models.\n\t */\n\tpublic getDefinitionsForView( viewName: string | RegExp, includeReferences: boolean = false ): Set<HtmlSupportDataSchemaDefinition> {\n\t\tconst definitions = new Set<HtmlSupportDataSchemaDefinition>();\n\n\t\tfor ( const definition of this._getMatchingViewDefinitions( viewName ) ) {\n\t\t\tif ( includeReferences ) {\n\t\t\t\tfor ( const reference of this._getReferences( definition.model ) ) {\n\t\t\t\t\tdefinitions.add( reference );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdefinitions.add( definition );\n\t\t}\n\n\t\treturn definitions;\n\t}\n\n\t/**\n\t * Returns definitions matching the given model name.\n\t */\n\tpublic getDefinitionsForModel( modelName: string ): Array<HtmlSupportDataSchemaDefinition> {\n\t\treturn this._definitions.filter( definition => definition.model == modelName );\n\t}\n\n\t/**\n\t * Returns definitions matching the given view name.\n\t */\n\tprivate _getMatchingViewDefinitions( viewName: string | RegExp ): Array<HtmlSupportDataSchemaDefinition> {\n\t\treturn this._definitions.filter( def => def.view && testViewName( viewName, def.view ) );\n\t}\n\n\t/**\n\t * Resolves all definition references registered for the given data schema definition.\n\t *\n\t * @param modelName Data schema model name.\n\t */\n\tprivate* _getReferences( modelName: string ): Iterable<HtmlSupportDataSchemaDefinition> {\n\t\tconst inheritProperties = [\n\t\t\t'inheritAllFrom',\n\t\t\t'inheritTypesFrom',\n\t\t\t'allowWhere',\n\t\t\t'allowContentOf',\n\t\t\t'allowAttributesOf'\n\t\t] as const;\n\n\t\tconst definitions = this._definitions.filter( definition => definition.model == modelName );\n\n\t\tfor ( const { modelSchema } of definitions ) {\n\t\t\tif ( !modelSchema ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor ( const property of inheritProperties ) {\n\t\t\t\tfor ( const referenceName of toArray( modelSchema[ property ] || [] ) ) {\n\t\t\t\t\tconst definitions = this._definitions.filter( definition => definition.model == referenceName );\n\n\t\t\t\t\tfor ( const definition of definitions ) {\n\t\t\t\t\t\tif ( referenceName !== modelName ) {\n\t\t\t\t\t\t\tyield* this._getReferences( definition.model );\n\t\t\t\t\t\t\tyield definition;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates schema definition with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */\n\tprivate _extendDefinition( definition: HtmlSupportDataSchemaDefinition ): void {\n\t\tconst currentDefinitions = Array.from( this._definitions.entries() )\n\t\t\t.filter( ( [ , currentDefinition ] ) => currentDefinition.model == definition.model );\n\n\t\tif ( currentDefinitions.length == 0 ) {\n\t\t\tthis._definitions.push( definition );\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const [ idx, currentDefinition ] of currentDefinitions ) {\n\t\t\tthis._definitions[ idx ] = mergeWith( {}, currentDefinition, definition, ( target, source ) => {\n\t\t\t\treturn Array.isArray( target ) ? target.concat( source ) : undefined;\n\t\t\t} );\n\t\t}\n\t}\n}\n\n/**\n * Test view name against the given pattern.\n */\nfunction testViewName( pattern: string | RegExp, viewName: string ): boolean {\n\tif ( typeof pattern === 'string' ) {\n\t\treturn pattern === viewName;\n\t}\n\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( viewName );\n\t}\n\n\treturn false;\n}\n\n/**\n * A base definition of {@link module:html-support/dataschema~DataSchema data schema}.\n */\nexport interface HtmlSupportDataSchemaDefinition {\n\n\t/**\n\t * Name of the model.\n\t */\n\tmodel: string;\n\n\t/**\n\t * Name of the view element.\n\t */\n\tview?: string;\n\n\t/**\n\t * Indicates that the definition describes object element.\n\t */\n\tisObject?: boolean;\n\n\t/**\n\t * The model schema item definition describing registered model.\n\t */\n\tmodelSchema?: ModelSchemaItemDefinition;\n\n\t/**\n\t * Indicates that the definition describes block element.\n\t * Set by {@link module:html-support/dataschema~DataSchema#registerBlockElement} method.\n\t */\n\tisBlock?: boolean;\n\n\t/**\n\t * Indicates that the definition describes inline element.\n\t */\n\tisInline?: boolean;\n\n\t/**\n\t * Indicates that the definition describes an empty HTML element like `<hr>`.\n\t */\n\tisEmpty?: boolean;\n}\n\n/**\n * A definition of {@link module:html-support/dataschema~DataSchema data schema} for block elements.\n */\nexport interface HtmlSupportDataSchemaBlockElementDefinition extends HtmlSupportDataSchemaDefinition {\n\n\t/**\n\t * Should be used when an element can behave both as a sectioning element (e.g. article) and\n\t * element accepting only inline content (e.g. paragraph).\n\t * If an element contains only inline content, this option will be used as a model name.\n\t */\n\tparagraphLikeModel?: string;\n}\n\n/**\n * A definition of {@link module:html-support/dataschema~DataSchema data schema} for inline elements.\n */\nexport interface HtmlSupportDataSchemaInlineElementDefinition extends HtmlSupportDataSchemaDefinition {\n\n\t/**\n\t *  Additional metadata describing the model attribute.\n\t */\n\tattributeProperties?: ModelAttributeProperties;\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by\n\t * {@link module:engine/view/downcastwriter~ViewDowncastWriter}.\n\t * Set by {@link module:html-support/dataschema~DataSchema#registerInlineElement} method.\n\t */\n\tpriority?: number;\n\n\t/**\n\t * The name of the model attribute that generates the same view element. GHS inline attribute\n\t * will be removed from the model tree as soon as the coupled attribute is removed. See\n\t * {@link module:html-support/datafilter~DataFilter#_registerCoupledAttributesPostFixer GHS post-fixer} for more details.\n\t */\n\tcoupledAttribute?: string;\n\n\t/**\n\t * Indicates that element should not be converted as a model text attribute.\n\t * It is used to map view elements that do not have a separate model element but their data is stored in a model attribute.\n\t * For example `<tbody>` element does not have a dedicated model element and GHS stores attributes of `<tbody>`\n\t * in the `htmlTbodyAttributes` model attribute of the `table` model element.\n\t */\n\tappliesToBlock?: boolean | string;\n\n\t/**\n\t * Indicates that an element should be preserved even if it has no content.\n\t */\n\tallowEmpty?: boolean;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/datafilter\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tMatcher,\n\tStylesMap,\n\ttype MatcherPattern,\n\ttype UpcastConversionApi,\n\ttype ViewElement,\n\ttype ViewConsumable,\n\ttype MatcherObjectPattern,\n\ttype ModelDocumentSelectionChangeAttributeEvent,\n\ttype ModelElement,\n\ttype ModelItem\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tCKEditorError,\n\tpriorities,\n\tisValidAttributeName\n} from 'ckeditor5/src/utils.js';\n\nimport { Widget } from 'ckeditor5/src/widget.js';\n\nimport {\n\tviewToModelObjectConverter,\n\ttoObjectWidgetConverter,\n\tcreateObjectView,\n\n\tviewToAttributeInlineConverter,\n\tattributeToViewInlineConverter,\n\temptyInlineModelElementToViewConverter,\n\n\tviewToModelBlockAttributeConverter,\n\tmodelToViewBlockAttributeConverter\n} from './converters.js';\n\nimport {\n\tDataSchema,\n\ttype HtmlSupportDataSchemaBlockElementDefinition,\n\ttype HtmlSupportDataSchemaDefinition,\n\ttype HtmlSupportDataSchemaInlineElementDefinition\n} from './dataschema.js';\n\nimport {\n\tgetHtmlAttributeName,\n\ttype GHSViewAttributes\n} from './utils.js';\n\nimport { isPlainObject } from 'es-toolkit/compat';\n\nimport '../theme/datafilter.css';\n\n/**\n * Allows to validate elements and element attributes registered by {@link module:html-support/dataschema~DataSchema}.\n *\n * To enable registered element in the editor, use {@link module:html-support/datafilter~DataFilter#allowElement} method:\n *\n * ```ts\n * dataFilter.allowElement( 'section' );\n * ```\n *\n * You can also allow or disallow specific element attributes:\n *\n * ```ts\n * // Allow `data-foo` attribute on `section` element.\n * dataFilter.allowAttributes( {\n * \tname: 'section',\n * \tattributes: {\n * \t\t'data-foo': true\n * \t}\n * } );\n *\n * // Disallow `color` style attribute on 'section' element.\n * dataFilter.disallowAttributes( {\n * \tname: 'section',\n * \tstyles: {\n * \t\tcolor: /[\\s\\S]+/\n * \t}\n * } );\n * ```\n *\n * To apply the information about allowed and disallowed attributes in custom integration plugin,\n * use the {@link module:html-support/datafilter~DataFilter#processViewAttributes `processViewAttributes()`} method.\n */\nexport class DataFilter extends Plugin {\n\t/**\n\t * An instance of the {@link module:html-support/dataschema~DataSchema}.\n\t */\n\tprivate readonly _dataSchema: DataSchema;\n\n\t/**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be allowed.\n\t */\n\tprivate readonly _allowedAttributes: Matcher;\n\n\t/**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be disallowed.\n\t */\n\tprivate readonly _disallowedAttributes: Matcher;\n\n\t/**\n\t * Allowed element definitions by {@link module:html-support/datafilter~DataFilter#allowElement} method.\n\t*/\n\tprivate readonly _allowedElements: Set<HtmlSupportDataSchemaDefinition & { coupledAttribute?: string }>;\n\n\t/**\n\t * Disallowed element names by {@link module:html-support/datafilter~DataFilter#disallowElement} method.\n\t */\n\tprivate readonly _disallowedElements: Set<string>;\n\n\t/**\n\t * Indicates if {@link module:engine/controller/datacontroller~DataController editor's data controller}\n\t * data has been already initialized.\n\t*/\n\tprivate _dataInitialized: boolean;\n\n\t/**\n\t * Cached map of coupled attributes. Keys are the feature attributes names\n\t * and values are arrays with coupled GHS attributes names.\n\t */\n\tprivate _coupledAttributes: Map<string, Array<string>> | null;\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._dataSchema = editor.plugins.get( 'DataSchema' );\n\t\tthis._allowedAttributes = new Matcher();\n\t\tthis._disallowedAttributes = new Matcher();\n\t\tthis._allowedElements = new Set();\n\t\tthis._disallowedElements = new Set();\n\t\tthis._dataInitialized = false;\n\t\tthis._coupledAttributes = null;\n\n\t\tthis._registerElementsAfterInit();\n\t\tthis._registerElementHandlers();\n\t\tthis._registerCoupledAttributesPostFixer();\n\t\tthis._registerAssociatedHtmlAttributesPostFixer();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'DataFilter' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataSchema, Widget ] as const;\n\t}\n\n\t/**\n\t * Load a configuration of one or many elements, where their attributes should be allowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes accepted in the editor.\n\t */\n\tpublic loadAllowedConfig( config: Array<MatcherObjectPattern> ): void {\n\t\tfor ( const pattern of config ) {\n\t\t\t// MatcherPattern allows omitting `name` to widen the search of elements.\n\t\t\t// Let's keep it consistent and match every element if a `name` has not been provided.\n\t\t\tconst elementName = pattern.name || /[\\s\\S]+/;\n\t\t\tconst rules = splitRules( pattern );\n\n\t\t\tthis.allowElement( elementName );\n\n\t\t\trules.forEach( pattern => this.allowAttributes( pattern ) );\n\t\t}\n\t}\n\n\t/**\n\t * Load a configuration of one or many elements, where their attributes should be disallowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes rejected from the editor.\n\t */\n\tpublic loadDisallowedConfig( config: Array<MatcherObjectPattern> ): void {\n\t\tfor ( const pattern of config ) {\n\t\t\t// MatcherPattern allows omitting `name` to widen the search of elements.\n\t\t\t// Let's keep it consistent and match every element if a `name` has not been provided.\n\t\t\tconst elementName = pattern.name || /[\\s\\S]+/;\n\t\t\tconst rules = splitRules( pattern );\n\n\t\t\t// Disallow element itself if there is no other rules.\n\t\t\tif ( rules.length == 0 ) {\n\t\t\t\tthis.disallowElement( elementName );\n\t\t\t} else {\n\t\t\t\trules.forEach( pattern => this.disallowAttributes( pattern ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Load a configuration of one or many elements, where when empty should be allowed.\n\t *\n\t * **Note**: It modifies DataSchema so must be loaded before registering filtering rules.\n\t *\n\t * @param config Configuration of elements that should be preserved even if empty.\n\t */\n\tpublic loadAllowedEmptyElementsConfig( config: Array<string> ): void {\n\t\tfor ( const elementName of config ) {\n\t\t\tthis.allowEmptyElement( elementName );\n\t\t}\n\t}\n\n\t/**\n\t * Allow the given element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */\n\tpublic allowElement( viewName: string | RegExp ): void {\n\t\tfor ( const definition of this._dataSchema.getDefinitionsForView( viewName, true ) ) {\n\t\t\tthis._addAllowedElement( definition );\n\n\t\t\t// Reset cached map to recalculate it on the next usage.\n\t\t\tthis._coupledAttributes = null;\n\t\t}\n\t}\n\n\t/**\n\t * Disallow the given element in the editor context.\n\t *\n\t * This method will only disallow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */\n\tpublic disallowElement( viewName: string | RegExp ): void {\n\t\tfor ( const definition of this._dataSchema.getDefinitionsForView( viewName, false ) ) {\n\t\t\tthis._disallowedElements.add( definition.view! );\n\t\t}\n\t}\n\n\t/**\n\t * Allow the given empty element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: It modifies DataSchema so must be called before registering filtering rules.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */\n\tpublic allowEmptyElement( viewName: string ): void {\n\t\tfor ( const definition of this._dataSchema.getDefinitionsForView( viewName, true ) ) {\n\t\t\tif ( definition.isInline ) {\n\t\t\t\tthis._dataSchema.extendInlineElement( { ...definition, allowEmpty: true } );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Allow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be allowed.\n\t */\n\tpublic allowAttributes( config: MatcherPattern ): void {\n\t\tthis._allowedAttributes.add( config );\n\t}\n\n\t/**\n\t * Disallow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be disallowed.\n\t */\n\tpublic disallowAttributes( config: MatcherPattern ): void {\n\t\tthis._disallowedAttributes.add( config );\n\t}\n\n\t/**\n\t * Processes all allowed and disallowed attributes on the view element by consuming them and returning the allowed ones.\n\t *\n\t * This method applies the configuration set up by {@link #allowAttributes `allowAttributes()`}\n\t * and {@link #disallowAttributes `disallowAttributes()`} over the given view element by consuming relevant attributes.\n\t * It returns the allowed attributes that were found on the given view element for further processing by integration code.\n\t *\n\t * ```ts\n\t * dispatcher.on( 'element:myElement', ( evt, data, conversionApi ) => {\n\t * \t// Get rid of disallowed and extract all allowed attributes from a viewElement.\n\t * \tconst viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n\t * \t// Do something with them, i.e. store inside a model as a dictionary.\n\t * \tif ( viewAttributes ) {\n\t * \t\tconversionApi.writer.setAttribute( 'htmlAttributesOfMyElement', viewAttributes, data.modelRange );\n\t * \t}\n\t * } );\n\t * ```\n\t *\n\t * @see module:engine/conversion/viewconsumable~ViewConsumable#consume\n\t *\n\t * @returns Object with following properties:\n\t * - attributes Set with matched attribute names.\n\t * - styles Set with matched style names.\n\t * - classes Set with matched class names.\n\t */\n\tpublic processViewAttributes( viewElement: ViewElement, conversionApi: UpcastConversionApi ): GHSViewAttributes | null {\n\t\tconst { consumable } = conversionApi;\n\n\t\t// Make sure that the disabled attributes are handled before the allowed attributes are called.\n\t\t// For example, for block images the <figure> converter triggers conversion for <img> first and then for other elements, i.e. <a>.\n\t\tmatchAndConsumeAttributes( viewElement, this._disallowedAttributes, consumable );\n\n\t\treturn prepareGHSAttribute( viewElement, matchAndConsumeAttributes( viewElement, this._allowedAttributes, consumable ) );\n\t}\n\n\t/**\n\t * Adds allowed element definition and fires registration event.\n\t */\n\tprivate _addAllowedElement( definition: HtmlSupportDataSchemaDefinition ): void {\n\t\tif ( this._allowedElements.has( definition ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._allowedElements.add( definition );\n\n\t\t// For attribute based integrations (table figure, document lists, etc.) register related element definitions.\n\t\tif ( 'appliesToBlock' in definition && typeof definition.appliesToBlock == 'string' ) {\n\t\t\tfor ( const relatedDefinition of this._dataSchema.getDefinitionsForModel( definition.appliesToBlock ) ) {\n\t\t\t\tif ( relatedDefinition.isBlock ) {\n\t\t\t\t\tthis._addAllowedElement( relatedDefinition );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// We need to wait for all features to be initialized before we can register\n\t\t// element, so we can access existing features model schemas.\n\t\t// If the data has not been initialized yet, _registerElementsAfterInit() method will take care of\n\t\t// registering elements.\n\t\tif ( this._dataInitialized ) {\n\t\t\t// Defer registration to the next data pipeline data set so any disallow rules could be applied\n\t\t\t// even if added after allow rule (disallowElement).\n\t\t\tthis.editor.data.once( 'set', () => {\n\t\t\t\tthis._fireRegisterEvent( definition );\n\t\t\t}, {\n\t\t\t\t// With the highest priority listener we are able to register elements right before\n\t\t\t\t// running data conversion.\n\t\t\t\tpriority: priorities.highest + 1\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Registers elements allowed by {@link module:html-support/datafilter~DataFilter#allowElement} method\n\t * once {@link module:engine/controller/datacontroller~DataController editor's data controller} is initialized.\n\t*/\n\tprivate _registerElementsAfterInit() {\n\t\tthis.editor.data.on( 'init', () => {\n\t\t\tthis._dataInitialized = true;\n\n\t\t\tfor ( const definition of this._allowedElements ) {\n\t\t\t\tthis._fireRegisterEvent( definition );\n\t\t\t}\n\t\t}, {\n\t\t\t// With highest priority listener we are able to register elements right before\n\t\t\t// running data conversion. Also:\n\t\t\t// * Make sure that priority is higher than the one used by `RealTimeCollaborationClient`,\n\t\t\t// as RTC is stopping event propagation.\n\t\t\t// * Make sure no other features hook into this event before GHS because otherwise the\n\t\t\t// downcast conversion (for these features) could run before GHS registered its converters\n\t\t\t// (https://github.com/ckeditor/ckeditor5/issues/11356).\n\t\t\tpriority: priorities.highest + 1\n\t\t} );\n\t}\n\n\t/**\n\t * Registers default element handlers.\n\t */\n\tprivate _registerElementHandlers() {\n\t\tthis.on<HtmlSupportDataFilterRegisterEvent>( 'register', ( evt, definition ) => {\n\t\t\tconst schema = this.editor.model.schema;\n\n\t\t\t// Object element should be only registered for new features.\n\t\t\t// If the model schema is already registered, it should be handled by\n\t\t\t// #_registerBlockElement() or #_registerObjectElement() attribute handlers.\n\t\t\tif ( definition.isObject && !schema.isRegistered( definition.model ) ) {\n\t\t\t\tthis._registerObjectElement( definition );\n\t\t\t} else if ( definition.isBlock ) {\n\t\t\t\tthis._registerBlockElement( definition as HtmlSupportDataSchemaBlockElementDefinition );\n\t\t\t} else if ( definition.isInline ) {\n\t\t\t\tthis._registerInlineElement( definition as HtmlSupportDataSchemaInlineElementDefinition );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * The definition cannot be handled by the data filter.\n\t\t\t\t *\n\t\t\t\t * Make sure that the registered definition is correct.\n\t\t\t\t *\n\t\t\t\t * @error data-filter-invalid-definition\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'data-filter-invalid-definition',\n\t\t\t\t\tnull,\n\t\t\t\t\tdefinition\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Registers a model post-fixer that is removing coupled GHS attributes of inline elements. Those attributes\n\t * are removed if a coupled feature attribute is removed.\n\t *\n\t * For example, consider following HTML:\n\t *\n\t * ```html\n\t * <a href=\"foo.html\" id=\"myId\">bar</a>\n\t * ```\n\t *\n\t * Which would be upcasted to following text node in the model:\n\t *\n\t * ```html\n\t * <$text linkHref=\"foo.html\" htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * When the user removes the link from that text (using UI), only `linkHref` attribute would be removed:\n\t *\n\t * ```html\n\t * <$text htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * The `htmlA` attribute would stay in the model and would cause GHS to generate an `<a>` element.\n\t * This is incorrect from UX point of view, as the user wanted to remove the whole link (not only `href`).\n\t */\n\tprivate _registerCoupledAttributesPostFixer() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tconst changes = model.document.differ.getChanges();\n\t\t\tlet changed = false;\n\n\t\t\tconst coupledAttributes = this._getCoupledAttributesMap();\n\n\t\t\tfor ( const change of changes ) {\n\t\t\t\t// Handle only attribute removals.\n\t\t\t\tif ( change.type != 'attribute' || change.attributeNewValue !== null ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Find a list of coupled GHS attributes.\n\t\t\t\tconst attributeKeys = coupledAttributes.get( change.attributeKey );\n\n\t\t\t\tif ( !attributeKeys ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Remove the coupled GHS attributes on the same range as the feature attribute was removed.\n\t\t\t\tfor ( const { item } of change.range.getWalker() ) {\n\t\t\t\t\tfor ( const attributeKey of attributeKeys ) {\n\t\t\t\t\t\tif ( item.hasAttribute( attributeKey ) ) {\n\t\t\t\t\t\t\twriter.removeAttribute( attributeKey, item );\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\n\t\tthis.listenTo<ModelDocumentSelectionChangeAttributeEvent>( selection, 'change:attribute', ( evt, { attributeKeys } ) => {\n\t\t\tconst removeAttributes = new Set<string>();\n\t\t\tconst coupledAttributes = this._getCoupledAttributesMap();\n\n\t\t\tfor ( const attributeKey of attributeKeys ) {\n\t\t\t\t// Handle only attribute removals.\n\t\t\t\tif ( selection.hasAttribute( attributeKey ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Find a list of coupled GHS attributes.\n\t\t\t\tconst coupledAttributeKeys = coupledAttributes.get( attributeKey );\n\n\t\t\t\tif ( !coupledAttributeKeys ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor ( const coupledAttributeKey of coupledAttributeKeys ) {\n\t\t\t\t\tif ( selection.hasAttribute( coupledAttributeKey ) ) {\n\t\t\t\t\t\tremoveAttributes.add( coupledAttributeKey );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( removeAttributes.size == 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => {\n\t\t\t\tfor ( const attributeKey of removeAttributes ) {\n\t\t\t\t\twriter.removeSelectionAttribute( attributeKey );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Removes `html*Attributes` attributes from incompatible elements.\n\t *\n\t * For example, consider the following HTML:\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar[]</heading2>\n\t * ```\n\t *\n\t * Pressing `enter` creates a new `paragraph` element that inherits\n\t * the `htmlH2Attributes` attribute from `heading2`.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph htmlH2Attributes=\"...\">[]</paragraph>\n\t * ```\n\t *\n\t * This postfixer ensures that this doesn't happen, and that elements can\n\t * only have `html*Attributes` associated with them,\n\t * e.g.: `htmlPAttributes` for `<p>`, `htmlDivAttributes` for `<div>`, etc.\n\t *\n\t * With it enabled, pressing `enter` at the end of `<heading2>` will create\n\t * a new paragraph without the `htmlH2Attributes` attribute.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph>[]</paragraph>\n\t * ```\n\t */\n\tprivate _registerAssociatedHtmlAttributesPostFixer() {\n\t\tconst model = this.editor.model;\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tconst changes = model.document.differ.getChanges();\n\t\t\tlet changed = false;\n\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type !== 'insert' || change.name === '$text' ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor ( const attr of change.attributes.keys() ) {\n\t\t\t\t\tif ( !attr.startsWith( 'html' ) || !attr.endsWith( 'Attributes' ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !model.schema.checkAttribute( change.name, attr ) ) {\n\t\t\t\t\t\twriter.removeAttribute( attr, change.position.nodeAfter! );\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\t}\n\n\t/**\n\t * Collects the map of coupled attributes. The returned map is keyed by the feature attribute name\n\t * and coupled GHS attribute names are stored in the value array.\n\t */\n\tprivate _getCoupledAttributesMap(): Map<string, Array<string>> {\n\t\tif ( this._coupledAttributes ) {\n\t\t\treturn this._coupledAttributes;\n\t\t}\n\n\t\tthis._coupledAttributes = new Map<string, Array<string>>();\n\n\t\tfor ( const definition of this._allowedElements ) {\n\t\t\tif ( definition.coupledAttribute && definition.model ) {\n\t\t\t\tconst attributeNames = this._coupledAttributes.get( definition.coupledAttribute );\n\n\t\t\t\tif ( attributeNames ) {\n\t\t\t\t\tattributeNames.push( definition.model );\n\t\t\t\t} else {\n\t\t\t\t\tthis._coupledAttributes.set( definition.coupledAttribute, [ definition.model ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._coupledAttributes;\n\t}\n\n\t/**\n\t * Fires `register` event for the given element definition.\n\t */\n\tprivate _fireRegisterEvent( definition: HtmlSupportDataSchemaDefinition ) {\n\t\tif ( definition.view && this._disallowedElements.has( definition.view ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.fire<HtmlSupportDataFilterRegisterEvent>( definition.view ? `register:${ definition.view }` : 'register', definition );\n\t}\n\n\t/**\n\t * Registers object element and attribute converters for the given data schema definition.\n\t */\n\tprivate _registerObjectElement( definition: HtmlSupportDataSchemaDefinition ) {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst { view: viewName, model: modelName } = definition;\n\n\t\tschema.register( modelName, definition.modelSchema );\n\n\t\t/* istanbul ignore next: paranoid check -- @preserve */\n\t\tif ( !viewName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tschema.extend( definition.model, {\n\t\t\tallowAttributes: [ getHtmlAttributeName( viewName ), 'htmlContent' ]\n\t\t} );\n\n\t\t// Store element content in special `$rawContent` custom property to\n\t\t// avoid editor's data filtering mechanism.\n\t\teditor.data.registerRawContentMatcher( {\n\t\t\tname: viewName\n\t\t} );\n\n\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: viewName,\n\t\t\tmodel: viewToModelObjectConverter( definition ),\n\t\t\t// With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n\t\t\t// this listener is called before it. If not, some elements will be transformed into a paragraph.\n\t\t\t// `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n\t\t\tconverterPriority: priorities.low + 2\n\t\t} );\n\t\tconversion.for( 'upcast' )\n\t\t\t.add( viewToModelBlockAttributeConverter( definition as HtmlSupportDataSchemaBlockElementDefinition, this ) );\n\n\t\tconversion.for( 'editingDowncast' ).elementToStructure( {\n\t\t\tmodel: {\n\t\t\t\tname: modelName,\n\t\t\t\tattributes: [ getHtmlAttributeName( viewName ) ]\n\t\t\t},\n\t\t\tview: toObjectWidgetConverter( editor, definition as HtmlSupportDataSchemaInlineElementDefinition )\n\t\t} );\n\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: modelName,\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\treturn createObjectView( viewName, modelElement, writer );\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'dataDowncast' )\n\t\t\t.add( modelToViewBlockAttributeConverter( definition as HtmlSupportDataSchemaBlockElementDefinition ) );\n\t}\n\n\t/**\n\t * Registers block element and attribute converters for the given data schema definition.\n\t */\n\tprivate _registerBlockElement( definition: HtmlSupportDataSchemaBlockElementDefinition ) {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst { view: viewName, model: modelName } = definition;\n\n\t\tif ( !schema.isRegistered( definition.model ) ) {\n\t\t\t// Do not register converters and empty schema for editor existing feature\n\t\t\t// as empty schema won't allow element anywhere in the model.\n\t\t\tif ( !definition.modelSchema ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tschema.register( definition.model, definition.modelSchema );\n\n\t\t\tif ( !viewName ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\t\tmodel: modelName,\n\t\t\t\tview: viewName,\n\t\t\t\t// With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n\t\t\t\t// this listener is called before it. If not, some elements will be transformed into a paragraph.\n\t\t\t\t// `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n\t\t\t\tconverterPriority: priorities.low + 2\n\t\t\t} );\n\n\t\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\t\tmodel: modelName,\n\t\t\t\tview: ( modelElement, { writer } ) => definition.isEmpty ?\n\t\t\t\t\twriter.createEmptyElement( viewName ) :\n\t\t\t\t\twriter.createContainerElement( viewName )\n\t\t\t} );\n\t\t}\n\n\t\tif ( !viewName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tschema.extend( definition.model, {\n\t\t\tallowAttributes: getHtmlAttributeName( viewName )\n\t\t} );\n\n\t\tconversion.for( 'upcast' ).add( viewToModelBlockAttributeConverter( definition, this ) );\n\t\tconversion.for( 'downcast' ).add( modelToViewBlockAttributeConverter( definition ) );\n\t}\n\n\t/**\n\t * Registers inline element and attribute converters for the given data schema definition.\n\t *\n\t * Extends `$text` model schema to allow the given definition model attribute and its properties.\n\t */\n\tprivate _registerInlineElement( definition: HtmlSupportDataSchemaInlineElementDefinition ) {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst attributeKey = definition.model;\n\n\t\t// This element is stored in the model as an attribute on a block element, for example Lists.\n\t\tif ( definition.appliesToBlock ) {\n\t\t\treturn;\n\t\t}\n\n\t\tschema.extend( '$text', {\n\t\t\tallowAttributes: attributeKey\n\t\t} );\n\n\t\tif ( definition.attributeProperties ) {\n\t\t\tschema.setAttributeProperties( attributeKey, definition.attributeProperties );\n\t\t}\n\n\t\tconversion.for( 'upcast' ).add( viewToAttributeInlineConverter( definition, this ) );\n\n\t\tconversion.for( 'downcast' ).attributeToElement( {\n\t\t\tmodel: attributeKey,\n\t\t\tview: attributeToViewInlineConverter( definition )\n\t\t} );\n\n\t\tif ( !definition.allowEmpty ) {\n\t\t\treturn;\n\t\t}\n\n\t\tschema.setAttributeProperties( attributeKey, { copyFromObject: false } );\n\n\t\tif ( !schema.isRegistered( 'htmlEmptyElement' ) ) {\n\t\t\tschema.register( 'htmlEmptyElement', {\n\t\t\t\tinheritAllFrom: '$inlineObject'\n\t\t\t} );\n\n\t\t\t// Helper function to check if an element has any HTML attributes.\n\t\t\tconst hasHtmlAttributes = ( element: ModelElement | ModelItem ): boolean =>\n\t\t\t\tArray\n\t\t\t\t\t.from( element.getAttributeKeys() )\n\t\t\t\t\t.some( key => key.startsWith( 'html' ) );\n\n\t\t\t// Register a post-fixer that removes htmlEmptyElement when its htmlXX attribute is removed.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/18089\n\t\t\teditor.model.document.registerPostFixer( writer => {\n\t\t\t\tconst changes = editor.model.document.differ.getChanges();\n\t\t\t\tconst elementsToRemove = new Set<ModelElement>();\n\n\t\t\t\tfor ( const change of changes ) {\n\t\t\t\t\tif ( change.type === 'remove' ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Look for removal of html* attributes.\n\t\t\t\t\tif ( change.type === 'attribute' && change.attributeNewValue === null ) {\n\t\t\t\t\t\t// Find htmlEmptyElement instances in the range that lost their html attribute.\n\t\t\t\t\t\tfor ( const { item } of change.range ) {\n\t\t\t\t\t\t\tif ( item.is( 'element', 'htmlEmptyElement' ) && !hasHtmlAttributes( item ) ) {\n\t\t\t\t\t\t\t\telementsToRemove.add( item );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Look for insertion of htmlEmptyElement.\n\t\t\t\t\tif ( change.type === 'insert' && change.position.nodeAfter ) {\n\t\t\t\t\t\tconst insertedElement = change.position.nodeAfter;\n\n\t\t\t\t\t\tfor ( const { item } of writer.createRangeOn( insertedElement ) ) {\n\t\t\t\t\t\t\tif ( item.is( 'element', 'htmlEmptyElement' ) && !hasHtmlAttributes( item ) ) {\n\t\t\t\t\t\t\t\telementsToRemove.add( item );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor ( const element of elementsToRemove ) {\n\t\t\t\t\twriter.remove( element );\n\t\t\t\t}\n\n\t\t\t\treturn elementsToRemove.size > 0;\n\t\t\t} );\n\t\t}\n\n\t\teditor.data.htmlProcessor.domConverter.registerInlineObjectMatcher( element => {\n\t\t\t// Element must be empty and have any attribute.\n\t\t\tif (\n\t\t\t\telement.name == definition.view &&\n\t\t\t\telement.isEmpty &&\n\t\t\t\tArray.from( element.getAttributeKeys() ).length\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tname: true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} );\n\n\t\tconversion.for( 'editingDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'htmlEmptyElement',\n\t\t\t\tview: emptyInlineModelElementToViewConverter( definition, true )\n\t\t\t} );\n\n\t\tconversion.for( 'dataDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'htmlEmptyElement',\n\t\t\t\tview: emptyInlineModelElementToViewConverter( definition )\n\t\t\t} );\n\t}\n}\n\n/**\n * Fired when {@link module:html-support/datafilter~DataFilter} is registering element and attribute\n * converters for the {@link module:html-support/dataschema~HtmlSupportDataSchemaDefinition element definition}.\n *\n * The event also accepts {@link module:html-support/dataschema~HtmlSupportDataSchemaDefinition#view} value\n * as an event namespace, e.g. `register:span`.\n *\n * ```ts\n * dataFilter.on( 'register', ( evt, definition ) => {\n * \teditor.model.schema.register( definition.model, definition.modelSchema );\n * \teditor.conversion.elementToElement( { model: definition.model, view: definition.view } );\n *\n * \tevt.stop();\n * } );\n *\n * dataFilter.on( 'register:span', ( evt, definition ) => {\n * \teditor.model.schema.extend( '$text', { allowAttributes: 'htmlSpan' } );\n *\n * \teditor.conversion.for( 'upcast' ).elementToAttribute( { view: 'span', model: 'htmlSpan' } );\n * \teditor.conversion.for( 'downcast' ).attributeToElement( { view: 'span', model: 'htmlSpan' } );\n *\n * \tevt.stop();\n * }, { priority: 'high' } )\n * ```\n *\n * @eventName ~DataFilter#register\n */\nexport interface HtmlSupportDataFilterRegisterEvent {\n\tname: 'register' | `register:${ string }`;\n\targs: [ data: HtmlSupportDataSchemaDefinition ];\n}\n\n/**\n * Matches and consumes matched attributes.\n *\n * @returns Object with following properties:\n * - attributes Array with matched attribute names.\n * - classes Array with matched class names.\n * - styles Array with matched style names.\n */\nfunction matchAndConsumeAttributes(\n\tviewElement: ViewElement,\n\tmatcher: Matcher,\n\tconsumable: ViewConsumable\n): {\n\t\tattributes: Array<string>;\n\t\tclasses: Array<string>;\n\t\tstyles: Array<string>;\n\t} {\n\tconst matches = matcher.matchAll( viewElement ) || [];\n\tconst stylesProcessor = viewElement.document.stylesProcessor;\n\n\treturn matches.reduce( ( result, { match } ) => {\n\t\tfor ( const [ key, token ] of match.attributes || [] ) {\n\t\t\t// Verify and consume styles.\n\t\t\tif ( key == 'style' ) {\n\t\t\t\tconst style = token!;\n\n\t\t\t\t// Check longer forms of the same style as those could be matched\n\t\t\t\t// but not present in the element directly.\n\t\t\t\t// Consider only longhand (or longer than current notation) so that\n\t\t\t\t// we do not include all sides of the box if only one side is allowed.\n\t\t\t\tconst sortedRelatedStyles = stylesProcessor.getRelatedStyles( style )\n\t\t\t\t\t.filter( relatedStyle => relatedStyle.split( '-' ).length > style.split( '-' ).length )\n\t\t\t\t\t.sort( ( a, b ) => b.split( '-' ).length - a.split( '-' ).length );\n\n\t\t\t\tfor ( const relatedStyle of sortedRelatedStyles ) {\n\t\t\t\t\tif ( consumable.consume( viewElement, { styles: [ relatedStyle ] } ) ) {\n\t\t\t\t\t\tresult.styles.push( relatedStyle );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Verify and consume style as specified in the matcher.\n\t\t\t\tif ( consumable.consume( viewElement, { styles: [ style ] } ) ) {\n\t\t\t\t\tresult.styles.push( style );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Verify and consume class names.\n\t\t\telse if ( key == 'class' ) {\n\t\t\t\tconst className = token!;\n\n\t\t\t\tif ( consumable.consume( viewElement, { classes: [ className ] } ) ) {\n\t\t\t\t\tresult.classes.push( className );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Verify and consume other attributes.\n\t\t\t\tif ( consumable.consume( viewElement, { attributes: [ key ] } ) ) {\n\t\t\t\t\tresult.attributes.push( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}, {\n\t\tattributes: [] as Array<string>,\n\t\tclasses: [] as Array<string>,\n\t\tstyles: [] as Array<string>\n\t} );\n}\n\n/**\n * Prepares the GHS attribute value as an object with element attributes' values.\n */\nfunction prepareGHSAttribute(\n\tviewElement: ViewElement,\n\t{ attributes, classes, styles }: {\n\t\tattributes: Array<string>;\n\t\tclasses: Array<string>;\n\t\tstyles: Array<string>;\n\t}\n): GHSViewAttributes | null {\n\tif ( !attributes.length && !classes.length && !styles.length ) {\n\t\treturn null;\n\t}\n\n\treturn {\n\t\t...( attributes.length && {\n\t\t\tattributes: getAttributes( viewElement, attributes )\n\t\t} ),\n\n\t\t...( styles.length && {\n\t\t\tstyles: getReducedStyles( viewElement, styles )\n\t\t} ),\n\n\t\t...( classes.length && {\n\t\t\tclasses\n\t\t} )\n\t};\n}\n\n/**\n * Returns attributes as an object with names and values.\n */\nfunction getAttributes( viewElement: ViewElement, attributes: Iterable<string> ): Record<string, string> {\n\tconst attributesObject: Record<string, string> = {};\n\n\tfor ( const key of attributes ) {\n\t\tconst value = viewElement.getAttribute( key );\n\n\t\tif ( value !== undefined && isValidAttributeName( key ) ) {\n\t\t\tattributesObject[ key ] = value;\n\t\t}\n\t}\n\n\treturn attributesObject;\n}\n\n/**\n * Returns styles as an object reduced to shorthand notation without redundant entries.\n */\nfunction getReducedStyles( viewElement: ViewElement, styles: Iterable<string> ): Record<string, string> {\n\t// Use StyleMap to reduce style value to the minimal form (without shorthand and long-hand notation and duplication).\n\tconst stylesMap = new StylesMap( viewElement.document.stylesProcessor );\n\n\tfor ( const key of styles ) {\n\t\tconst styleValue = viewElement.getStyle( key );\n\n\t\tif ( styleValue !== undefined ) {\n\t\t\tstylesMap.set( key, styleValue );\n\t\t}\n\t}\n\n\treturn Object.fromEntries( stylesMap.getStylesEntries() );\n}\n\n/**\n * Matcher by default has to match **all** patterns to count it as an actual match. Splitting the pattern\n * into separate patterns means that any matched pattern will be count as a match.\n *\n * @param pattern Pattern to split.\n * @param attributeName Name of the attribute to split (e.g. 'attributes', 'classes', 'styles').\n */\nfunction splitPattern( pattern: MatcherObjectPattern, attributeName: 'attributes' | 'classes' | 'styles' ): Array<MatcherObjectPattern> {\n\tconst { name } = pattern;\n\tconst attributeValue = pattern[ attributeName ];\n\n\tif ( isPlainObject( attributeValue ) ) {\n\t\treturn Object.entries( attributeValue as Record<string, unknown> )\n\t\t\t.map( ( [ key, value ] ) => ( {\n\t\t\t\tname,\n\t\t\t\t[ attributeName ]: {\n\t\t\t\t\t[ key ]: value\n\t\t\t\t}\n\t\t\t} ) );\n\t}\n\n\tif ( Array.isArray( attributeValue ) ) {\n\t\treturn attributeValue\n\t\t\t.map( value => ( {\n\t\t\t\tname,\n\t\t\t\t[ attributeName ]: [ value ]\n\t\t\t} ) );\n\t}\n\n\treturn [ pattern ];\n}\n\n/**\n * Rules are matched in conjunction (AND operation), but we want to have a match if *any* of the rules is matched (OR operation).\n * By splitting the rules we force the latter effect.\n */\nfunction splitRules( rules: MatcherObjectPattern ): Array<MatcherObjectPattern> {\n\tconst { name, attributes, classes, styles } = rules;\n\tconst splitRules = [];\n\n\tif ( attributes ) {\n\t\tsplitRules.push( ...splitPattern( { name, attributes }, 'attributes' ) );\n\t}\n\n\tif ( classes ) {\n\t\tsplitRules.push( ...splitPattern( { name, classes }, 'classes' ) );\n\t}\n\n\tif ( styles ) {\n\t\tsplitRules.push( ...splitPattern( { name, styles }, 'styles' ) );\n\t}\n\n\treturn splitRules;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/codeblock\n */\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tModelElement,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport {\n\tupdateViewAttributes,\n\ttype GHSViewAttributes\n} from '../utils.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\n\n/**\n * Provides the General HTML Support integration with {@link module:code-block/codeblock~CodeBlock Code Block} feature.\n */\nexport class CodeBlockElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlockElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tif ( !this.editor.plugins.has( 'CodeBlockEditing' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataFilter = this.editor.plugins.get( DataFilter );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:pre', ( evt, definition ) => {\n\t\t\tif ( definition.model !== 'codeBlock' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst editor = this.editor;\n\t\t\tconst schema = editor.model.schema;\n\t\t\tconst conversion = editor.conversion;\n\n\t\t\t// Extend codeBlock to allow attributes required by attribute filtration.\n\t\t\tschema.extend( 'codeBlock', {\n\t\t\t\tallowAttributes: [ 'htmlPreAttributes', 'htmlContentAttributes' ]\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelCodeBlockAttributeConverter( dataFilter ) );\n\t\t\tconversion.for( 'downcast' ).add( modelToViewCodeBlockAttributeConverter() );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n *\n * Attributes are preserved as a value of `html*Attributes` model attribute.\n * @param dataFilter\n * @returns Returns a conversion callback.\n */\nfunction viewToModelCodeBlockAttributeConverter( dataFilter: DataFilter ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:code', ( evt, data, conversionApi ) => {\n\t\t\tconst viewCodeElement = data.viewItem;\n\t\t\tconst viewPreElement = viewCodeElement.parent;\n\n\t\t\tif ( !viewPreElement || !viewPreElement.is( 'element', 'pre' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tpreserveElementAttributes( viewPreElement, 'htmlPreAttributes' );\n\t\t\tpreserveElementAttributes( viewCodeElement, 'htmlContentAttributes' );\n\n\t\t\tfunction preserveElementAttributes( viewElement: ViewElement, attributeName: string ) {\n\t\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewElement, conversionApi );\n\n\t\t\t\tif ( viewAttributes ) {\n\t\t\t\t\tconversionApi.writer.setAttribute( attributeName, viewAttributes, data.modelRange! );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Model-to-view conversion helper applying attributes from {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n * @returns Returns a conversion callback.\n */\nfunction modelToViewCodeBlockAttributeConverter() {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\tdispatcher.on<DowncastAttributeEvent>( 'attribute:htmlPreAttributes:codeBlock', ( evt, data, conversionApi ) => {\n\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\tconst viewCodeElement = conversionApi.mapper.toViewElement( data.item as ModelElement )!;\n\t\t\tconst viewPreElement = viewCodeElement.parent as ViewElement;\n\n\t\t\tupdateViewAttributes(\n\t\t\t\tconversionApi.writer,\n\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\tviewPreElement\n\t\t\t);\n\t\t} );\n\n\t\tdispatcher.on<DowncastAttributeEvent>( 'attribute:htmlContentAttributes:codeBlock', ( evt, data, conversionApi ) => {\n\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\tconst viewCodeElement = conversionApi.mapper.toViewElement( data.item as ModelElement );\n\n\t\t\tupdateViewAttributes(\n\t\t\t\tconversionApi.writer,\n\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\tviewCodeElement!\n\t\t\t);\n\t\t} );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/dualcontent\n */\n\nimport type { ViewElement } from 'ckeditor5/src/engine.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { priorities } from 'ckeditor5/src/utils.js';\n\nimport {\n\tmodelToViewBlockAttributeConverter,\n\tviewToModelBlockAttributeConverter\n} from '../converters.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport type { HtmlSupportDataSchemaBlockElementDefinition } from '../dataschema.js';\nimport { getHtmlAttributeName } from '../utils.js';\n\n/**\n * Provides the General HTML Support integration for elements which can behave like sectioning element (e.g. article) or\n * element accepting only inline content (e.g. paragraph).\n *\n * The distinction between this two content models is important for choosing correct schema model and proper content conversion.\n * As an example, it ensures that:\n *\n * * children elements paragraphing is enabled for sectioning elements only,\n * * element and its content can be correctly handled by editing view (splitting and merging elements),\n * * model element HTML is semantically correct and easier to work with.\n *\n * If element contains any block element, it will be treated as a sectioning element and registered using\n * {@link module:html-support/dataschema~HtmlSupportDataSchemaDefinition#model} and\n * {@link module:html-support/dataschema~HtmlSupportDataSchemaDefinition#modelSchema} in editor schema.\n * Otherwise, it will be registered under\n * {@link module:html-support/dataschema~HtmlSupportDataSchemaBlockElementDefinition#paragraphLikeModel} model\n * name with model schema accepting only inline content (inheriting from `$block`).\n */\nexport class DualContentModelElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'DualContentModelElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst dataFilter = this.editor.plugins.get( DataFilter );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register', ( evt, definition ) => {\n\t\t\tconst blockDefinition = definition as HtmlSupportDataSchemaBlockElementDefinition;\n\t\t\tconst editor = this.editor;\n\t\t\tconst schema = editor.model.schema;\n\t\t\tconst conversion = editor.conversion;\n\n\t\t\tif ( !blockDefinition.paragraphLikeModel ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Can only apply to newly registered features.\n\t\t\tif ( schema.isRegistered( blockDefinition.model ) || schema.isRegistered( blockDefinition.paragraphLikeModel ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst paragraphLikeModelDefinition: HtmlSupportDataSchemaBlockElementDefinition = {\n\t\t\t\tmodel: blockDefinition.paragraphLikeModel,\n\t\t\t\tview: blockDefinition.view\n\t\t\t};\n\n\t\t\tschema.register( blockDefinition.model, blockDefinition.modelSchema );\n\t\t\tschema.register( paragraphLikeModelDefinition.model, {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\t\tview: blockDefinition.view!,\n\t\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\t\tif ( this._hasBlockContent( viewElement ) ) {\n\t\t\t\t\t\treturn writer.createElement( blockDefinition.model );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn writer.createElement( paragraphLikeModelDefinition.model );\n\t\t\t\t},\n\t\t\t\t// With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n\t\t\t\t// this listener is called before it. If not, some elements will be transformed into a paragraph.\n\t\t\t\tconverterPriority: priorities.low + 0.5\n\t\t\t} );\n\n\t\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\t\tview: blockDefinition.view!,\n\t\t\t\tmodel: blockDefinition.model\n\t\t\t} );\n\t\t\tthis._addAttributeConversion( blockDefinition );\n\n\t\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\t\tview: paragraphLikeModelDefinition.view!,\n\t\t\t\tmodel: paragraphLikeModelDefinition.model\n\t\t\t} );\n\t\t\tthis._addAttributeConversion( paragraphLikeModelDefinition );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the given view element includes any other block element.\n\t */\n\tprivate _hasBlockContent( viewElement: ViewElement ): boolean {\n\t\tconst view = this.editor.editing.view;\n\t\tconst blockElements = view.domConverter.blockElements;\n\n\t\t// Traversing the viewElement subtree looking for block elements.\n\t\t// Especially for the cases like <div><a href=\"#\"><p>foo</p></a></div>.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/11513\n\t\tfor ( const viewItem of view.createRangeIn( viewElement ).getItems() ) {\n\t\t\tif ( viewItem.is( 'element' ) && blockElements.includes( viewItem.name ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Adds attribute filtering conversion for the given data schema.\n\t */\n\tprivate _addAttributeConversion( definition: HtmlSupportDataSchemaBlockElementDefinition ) {\n\t\tconst editor = this.editor;\n\t\tconst conversion = editor.conversion;\n\t\tconst dataFilter = editor.plugins.get( DataFilter );\n\n\t\teditor.model.schema.extend( definition.model, {\n\t\t\tallowAttributes: getHtmlAttributeName( definition.view! )\n\t\t} );\n\n\t\tconversion.for( 'upcast' ).add( viewToModelBlockAttributeConverter( definition, dataFilter ) );\n\t\tconversion.for( 'downcast' ).add( modelToViewBlockAttributeConverter( definition ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/heading\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport type { HeadingOption } from '@ckeditor/ckeditor5-heading';\nimport { Enter } from 'ckeditor5/src/enter.js';\n\nimport { DataSchema } from '../dataschema.js';\n\n/**\n * Provides the General HTML Support integration with {@link module:heading/heading~Heading Heading} feature.\n */\nexport class HeadingElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataSchema, Enter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'HeadingElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.plugins.has( 'HeadingEditing' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options: Array<HeadingOption> = editor.config.get( 'heading.options' )!;\n\n\t\tthis.registerHeadingElements( editor, options );\n\t}\n\n\t/**\n\t * Registers all elements supported by HeadingEditing to enable custom attributes for those elements.\n\t */\n\tprivate registerHeadingElements( editor: Editor, options: Array<HeadingOption> ) {\n\t\tconst dataSchema = editor.plugins.get( DataSchema );\n\n\t\tconst headerModels = [];\n\t\tfor ( const option of options ) {\n\t\t\tif ( 'model' in option && 'view' in option ) {\n\t\t\t\tdataSchema.registerBlockElement( {\n\t\t\t\t\tview: option.view as string,\n\t\t\t\t\tmodel: option.model\n\t\t\t\t} );\n\n\t\t\t\theaderModels.push( option.model );\n\t\t\t}\n\t\t}\n\n\t\tdataSchema.extendBlockElement( {\n\t\t\tmodel: 'htmlHgroup',\n\t\t\tmodelSchema: {\n\t\t\t\tallowChildren: headerModels\n\t\t\t}\n\t\t} );\n\n\t\tdataSchema.extendBlockElement( {\n\t\t\tmodel: 'htmlSummary',\n\t\t\tmodelSchema: {\n\t\t\t\tallowChildren: headerModels\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\nimport type { ViewDowncastWriter, ViewElement } from 'ckeditor5/src/engine.js';\n\n/**\n * @module html-support/integrations/integrationutils\n */\n\n/**\n * Returns the first view element descendant matching the given view name.\n * Includes view element itself.\n *\n * @internal\n */\nexport function getDescendantElement(\n\twriter: ViewDowncastWriter,\n\tcontainerElement: ViewElement,\n\telementName: string\n): ViewElement | undefined {\n\tconst range = writer.createRangeOn( containerElement );\n\n\tfor ( const { item } of range.getWalker() ) {\n\t\tif ( item.is( 'element', elementName ) ) {\n\t\t\treturn item;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/image\n */\n\nimport { type Editor, Plugin } from 'ckeditor5/src/core.js';\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tModelElement,\n\tModelNode,\n\tUpcastDispatcher\n} from 'ckeditor5/src/engine.js';\nimport type { ImageUtils } from '@ckeditor/ckeditor5-image';\n\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport { type GHSViewAttributes, setViewAttributes, updateViewAttributes } from '../utils.js';\nimport { getDescendantElement } from './integrationutils.js';\n\n/**\n * Provides the General HTML Support integration with the {@link module:image/image~Image Image} feature.\n */\nexport class ImageElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ImageElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// At least one image plugin should be loaded for the integration to work properly.\n\t\tif ( !editor.plugins.has( 'ImageInlineEditing' ) && !editor.plugins.has( 'ImageBlockEditing' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst dataFilter = editor.plugins.get( DataFilter );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:figure', () => {\n\t\t\tconversion.for( 'upcast' ).add( viewToModelFigureAttributeConverter( dataFilter ) );\n\t\t} );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:img', ( evt, definition ) => {\n\t\t\tif ( definition.model !== 'imageBlock' && definition.model !== 'imageInline' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( schema.isRegistered( 'imageBlock' ) ) {\n\t\t\t\tschema.extend( 'imageBlock', {\n\t\t\t\t\tallowAttributes: [\n\t\t\t\t\t\t'htmlImgAttributes',\n\t\t\t\t\t\t// Figure and Link don't have model counterpart.\n\t\t\t\t\t\t// We will preserve attributes on image model element using these attribute keys.\n\t\t\t\t\t\t'htmlFigureAttributes',\n\t\t\t\t\t\t'htmlLinkAttributes'\n\t\t\t\t\t]\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( schema.isRegistered( 'imageInline' ) ) {\n\t\t\t\tschema.extend( 'imageInline', {\n\t\t\t\t\tallowAttributes: [\n\t\t\t\t\t\t// `htmlA` is needed for standard GHS link integration.\n\t\t\t\t\t\t'htmlA',\n\t\t\t\t\t\t'htmlImgAttributes'\n\t\t\t\t\t]\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelImageAttributeConverter( dataFilter ) );\n\t\t\tconversion.for( 'downcast' ).add( modelToViewImageAttributeConverter() );\n\n\t\t\tif ( editor.plugins.has( 'LinkImage' ) ) {\n\t\t\t\tconversion.for( 'upcast' ).add( viewToModelLinkImageAttributeConverter( dataFilter, editor ) );\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on the {@link module:image/image~Image Image}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelImageAttributeConverter( dataFilter: DataFilter ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on( 'element:img', ( evt, data, conversionApi ) => {\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewImageElement = data.viewItem;\n\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewImageElement, conversionApi );\n\n\t\t\tif ( viewAttributes ) {\n\t\t\t\tconversionApi.writer.setAttribute( 'htmlImgAttributes', viewAttributes, data.modelRange );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from link view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelLinkImageAttributeConverter( dataFilter: DataFilter, editor: Editor ) {\n\tconst imageUtils: ImageUtils = editor.plugins.get( 'ImageUtils' );\n\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n\t\t\tconst viewLink = data.viewItem;\n\t\t\tconst viewImage = imageUtils.findViewImgElement( viewLink );\n\n\t\t\tif ( !viewImage ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst modelImage: ModelNode | null = data.modelCursor.parent as ModelNode;\n\n\t\t\tif ( !modelImage.is( 'element', 'imageBlock' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewLink, conversionApi );\n\n\t\t\tif ( viewAttributes ) {\n\t\t\t\tconversionApi.writer.setAttribute( 'htmlLinkAttributes', viewAttributes, modelImage );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelFigureAttributeConverter( dataFilter: DataFilter ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on( 'element:figure', ( evt, data, conversionApi ) => {\n\t\t\tconst viewFigureElement = data.viewItem;\n\n\t\t\tif ( !data.modelRange || !viewFigureElement.hasClass( 'image' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewFigureElement, conversionApi );\n\n\t\t\tif ( viewAttributes ) {\n\t\t\t\tconversionApi.writer.setAttribute( 'htmlFigureAttributes', viewAttributes, data.modelRange );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * A model-to-view conversion helper applying attributes from the {@link module:image/image~Image Image}\n * feature.\n * @returns Returns a conversion callback.\n */\nfunction modelToViewImageAttributeConverter() {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\taddInlineAttributeConversion( 'htmlImgAttributes' );\n\n\t\taddBlockAttributeConversion( 'img', 'htmlImgAttributes' );\n\t\taddBlockAttributeConversion( 'figure', 'htmlFigureAttributes' );\n\t\taddBlockAttributeConversion( 'a', 'htmlLinkAttributes' );\n\n\t\tfunction addInlineAttributeConversion( attributeName: string ) {\n\t\t\tdispatcher.on<DowncastAttributeEvent>( `attribute:${ attributeName }:imageInline`, ( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item as ModelElement )!;\n\n\t\t\t\tupdateViewAttributes(\n\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\t\tviewElement );\n\t\t\t}, { priority: 'low' } );\n\t\t}\n\n\t\tfunction addBlockAttributeConversion( elementName: string, attributeName: string ) {\n\t\t\tdispatcher.on<DowncastAttributeEvent>( `attribute:${ attributeName }:imageBlock`, ( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\t\tconst containerElement = conversionApi.mapper.toViewElement( data.item as ModelElement )!;\n\t\t\t\tconst viewElement = getDescendantElement( conversionApi.writer, containerElement, elementName );\n\n\t\t\t\tif ( viewElement ) {\n\t\t\t\t\tupdateViewAttributes(\n\t\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\t\t\tviewElement );\n\t\t\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\t\t\t\t}\n\t\t\t}, { priority: 'low' } );\n\n\t\t\tif ( elementName === 'a' ) {\n\t\t\t\t// To have a link element in the view, we need to attach a converter to the `linkHref` attribute as well.\n\t\t\t\tdispatcher.on<DowncastAttributeEvent>( 'attribute:linkHref:imageBlock', ( evt, data, conversionApi ) => {\n\t\t\t\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:htmlLinkAttributes:imageBlock' ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst containerElement = conversionApi.mapper.toViewElement( data.item as ModelElement );\n\t\t\t\t\tconst viewElement = getDescendantElement( conversionApi.writer, containerElement!, 'a' )!;\n\n\t\t\t\t\tsetViewAttributes(\n\t\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\t\tdata.item.getAttribute( 'htmlLinkAttributes' ) as GHSViewAttributes,\n\t\t\t\t\t\tviewElement );\n\t\t\t\t}, { priority: 'low' } );\n\t\t\t}\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/mediaembed\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport { DataSchema } from '../dataschema.js';\nimport { updateViewAttributes, type GHSViewAttributes, getHtmlAttributeName } from '../utils.js';\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tModelElement,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement } from 'ckeditor5/src/engine.js';\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\nimport { getDescendantElement } from './integrationutils.js';\n\n/**\n * Provides the General HTML Support integration with {@link module:media-embed/mediaembed~MediaEmbed Media Embed} feature.\n */\nexport class MediaEmbedElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'MediaEmbedElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Stop here if MediaEmbed plugin is not provided or the integrator wants to output markup with previews as\n\t\t// we do not support filtering previews.\n\t\tif ( !editor.plugins.has( 'MediaEmbed' ) || editor.config.get( 'mediaEmbed.previewsInData' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst dataFilter = this.editor.plugins.get( DataFilter );\n\t\tconst dataSchema = this.editor.plugins.get( DataSchema );\n\t\tconst mediaElementName = editor.config.get( 'mediaEmbed.elementName' ) as string;\n\n\t\t// Overwrite GHS schema definition for a given elementName.\n\t\tdataSchema.registerBlockElement( {\n\t\t\tmodel: 'media',\n\t\t\tview: mediaElementName\n\t\t} );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:figure', ( ) => {\n\t\t\tconversion.for( 'upcast' ).add( viewToModelFigureAttributesConverter( dataFilter ) );\n\t\t} );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( `register:${ mediaElementName }`, ( evt, definition ) => {\n\t\t\tif ( definition.model !== 'media' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tschema.extend( 'media', {\n\t\t\t\tallowAttributes: [\n\t\t\t\t\tgetHtmlAttributeName( mediaElementName ),\n\t\t\t\t\t'htmlFigureAttributes'\n\t\t\t\t]\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelMediaAttributesConverter( dataFilter, mediaElementName ) );\n\t\t\tconversion.for( 'dataDowncast' ).add( modelToViewMediaAttributeConverter( mediaElementName ) );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n\nfunction viewToModelMediaAttributesConverter( dataFilter: DataFilter, mediaElementName: string ) {\n\tconst upcastMedia: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\t\tconst viewMediaElement = data.viewItem;\n\n\t\tpreserveElementAttributes( viewMediaElement, getHtmlAttributeName( mediaElementName ) );\n\n\t\tfunction preserveElementAttributes( viewElement: ViewElement, attributeName: string ) {\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewElement, conversionApi );\n\n\t\t\tif ( viewAttributes ) {\n\t\t\t\tconversionApi.writer.setAttribute( attributeName, viewAttributes, data.modelRange! );\n\t\t\t}\n\t\t}\n\t};\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( `element:${ mediaElementName }`, upcastMedia, { priority: 'low' } );\n\t};\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:media-embed/mediaembed~MediaEmbed MediaEmbed}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelFigureAttributesConverter( dataFilter: DataFilter ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:figure', ( evt, data, conversionApi ) => {\n\t\t\tconst viewFigureElement = data.viewItem;\n\n\t\t\tif ( !data.modelRange || !viewFigureElement.hasClass( 'media' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewFigureElement, conversionApi );\n\n\t\t\tif ( viewAttributes ) {\n\t\t\t\tconversionApi.writer.setAttribute( 'htmlFigureAttributes', viewAttributes, data.modelRange );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\nfunction modelToViewMediaAttributeConverter( mediaElementName: string ) {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\taddAttributeConversionDispatcherHandler( mediaElementName, getHtmlAttributeName( mediaElementName ) );\n\t\taddAttributeConversionDispatcherHandler( 'figure', 'htmlFigureAttributes' );\n\n\t\tfunction addAttributeConversionDispatcherHandler( elementName: string, attributeName: string ) {\n\t\t\tdispatcher.on<DowncastAttributeEvent>( `attribute:${ attributeName }:media`, ( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\t\tconst containerElement = conversionApi.mapper.toViewElement( data.item as ModelElement );\n\t\t\t\tconst viewElement = getDescendantElement( conversionApi.writer, containerElement!, elementName );\n\n\t\t\t\tupdateViewAttributes(\n\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\t\tviewElement!\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/script\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\tcreateObjectView,\n\tmodelToViewBlockAttributeConverter,\n\tviewToModelBlockAttributeConverter,\n\tviewToModelObjectConverter\n} from '../converters.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport type { HtmlSupportDataSchemaBlockElementDefinition } from '../dataschema.js';\n\n/**\n * Provides the General HTML Support for `script` elements.\n */\nexport class ScriptElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ScriptElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst dataFilter = this.editor.plugins.get( DataFilter );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:script', ( evt, definition ) => {\n\t\t\tconst editor = this.editor;\n\t\t\tconst schema = editor.model.schema;\n\t\t\tconst conversion = editor.conversion;\n\n\t\t\tschema.register( 'htmlScript', definition.modelSchema );\n\n\t\t\tschema.extend( 'htmlScript', {\n\t\t\t\tallowAttributes: [ 'htmlScriptAttributes', 'htmlContent' ],\n\t\t\t\tisContent: true\n\t\t\t} );\n\n\t\t\teditor.data.registerRawContentMatcher( {\n\t\t\t\tname: 'script'\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\t\tview: 'script',\n\t\t\t\tmodel: viewToModelObjectConverter( definition )\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelBlockAttributeConverter(\n\t\t\t\tdefinition as HtmlSupportDataSchemaBlockElementDefinition,\n\t\t\t\tdataFilter\n\t\t\t) );\n\n\t\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\t\tmodel: 'htmlScript',\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\treturn createObjectView( 'script', modelElement, writer );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tconversion.for( 'downcast' )\n\t\t\t\t.add( modelToViewBlockAttributeConverter( definition as HtmlSupportDataSchemaBlockElementDefinition ) );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/table\n */\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tModelElement,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement,\n\tModelPostFixer,\n\tModel\n} from 'ckeditor5/src/engine.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type { TableUtils } from '@ckeditor/ckeditor5-table';\n\nimport { updateViewAttributes, type GHSViewAttributes } from '../utils.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport { getDescendantElement } from './integrationutils.js';\n\nconst STYLE_ATTRIBUTES_TO_PROPAGATE = [\n\t'width',\n\t'max-width',\n\t'min-width',\n\t'height',\n\t'min-height',\n\t'max-height'\n];\n\n/**\n * Provides the General HTML Support integration with {@link module:table/table~Table Table} feature.\n */\nexport class TableElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.plugins.has( 'TableEditing' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst dataFilter = editor.plugins.get( DataFilter );\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:figure', ( ) => {\n\t\t\tconversion.for( 'upcast' ).add( viewToModelFigureAttributeConverter( dataFilter ) );\n\t\t} );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:table', ( evt, definition ) => {\n\t\t\tif ( definition.model !== 'table' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tschema.extend( 'table', {\n\t\t\t\tallowAttributes: [\n\t\t\t\t\t'htmlTableAttributes',\n\t\t\t\t\t// Figure, thead and tbody elements don't have model counterparts.\n\t\t\t\t\t// We will be preserving attributes on table element using these attribute keys.\n\t\t\t\t\t'htmlFigureAttributes', 'htmlTheadAttributes', 'htmlTbodyAttributes'\n\t\t\t\t]\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelTableAttributeConverter( dataFilter ) );\n\t\t\tconversion.for( 'downcast' ).add( modelToViewTableAttributeConverter() );\n\n\t\t\teditor.model.document.registerPostFixer( createHeadingRowsPostFixer( editor.model, tableUtils ) );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n\n/**\n * Creates a model post-fixer for thead and tbody GHS related attributes.\n */\nfunction createHeadingRowsPostFixer( model: Model, tableUtils: TableUtils ): ModelPostFixer {\n\treturn writer => {\n\t\tconst changes = model.document.differ.getChanges();\n\t\tlet wasFixed = false;\n\n\t\tfor ( const change of changes ) {\n\t\t\tif ( change.type != 'attribute' || change.attributeKey != 'headingRows' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst table = change.range.start.nodeAfter as ModelElement;\n\t\t\tconst hasTHeadAttributes = table.getAttribute( 'htmlTheadAttributes' );\n\t\t\tconst hasTBodyAttributes = table.getAttribute( 'htmlTbodyAttributes' );\n\n\t\t\tif ( hasTHeadAttributes && !change.attributeNewValue ) {\n\t\t\t\twriter.removeAttribute( 'htmlTheadAttributes', table );\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t\telse if ( hasTBodyAttributes && change.attributeNewValue == tableUtils.getRows( table ) ) {\n\t\t\t\twriter.removeAttribute( 'htmlTbodyAttributes', table );\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t}\n\n\t\treturn wasFixed;\n\t};\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelTableAttributeConverter( dataFilter: DataFilter ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewTableElement = data.viewItem;\n\n\t\t\tpreserveElementAttributes( viewTableElement, 'htmlTableAttributes' );\n\n\t\t\tfor ( const childNode of viewTableElement.getChildren() ) {\n\t\t\t\tif ( childNode.is( 'element', 'thead' ) ) {\n\t\t\t\t\tpreserveElementAttributes( childNode, 'htmlTheadAttributes' );\n\t\t\t\t}\n\n\t\t\t\tif ( childNode.is( 'element', 'tbody' ) ) {\n\t\t\t\t\tpreserveElementAttributes( childNode, 'htmlTbodyAttributes' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction preserveElementAttributes( viewElement: ViewElement, attributeName: string ) {\n\t\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewElement, conversionApi );\n\n\t\t\t\tif ( viewAttributes ) {\n\t\t\t\t\tconversionApi.writer.setAttribute( attributeName, viewAttributes as GHSViewAttributes, data.modelRange! );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelFigureAttributeConverter( dataFilter: DataFilter ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:figure', ( evt, data, conversionApi ) => {\n\t\t\tconst viewFigureElement = data.viewItem;\n\n\t\t\tif ( !data.modelRange || !viewFigureElement.hasClass( 'table' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewAttributes = dataFilter.processViewAttributes( viewFigureElement, conversionApi );\n\n\t\t\tif ( viewAttributes ) {\n\t\t\t\tconversionApi.writer.setAttribute( 'htmlFigureAttributes', viewAttributes, data.modelRange );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Model-to-view conversion helper applying attributes from {@link module:table/table~Table Table}\n * feature.\n *\n * @returns Returns a conversion callback.\n */\nfunction modelToViewTableAttributeConverter() {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\taddAttributeConversionDispatcherHandler( 'table', 'htmlTableAttributes' );\n\t\taddAttributeConversionDispatcherHandler( 'figure', 'htmlFigureAttributes' );\n\t\taddAttributeConversionDispatcherHandler( 'thead', 'htmlTheadAttributes' );\n\t\taddAttributeConversionDispatcherHandler( 'tbody', 'htmlTbodyAttributes' );\n\n\t\tfunction addAttributeConversionDispatcherHandler( elementName: string, attributeName: string ) {\n\t\t\tdispatcher.on<DowncastAttributeEvent>( `attribute:${ attributeName }:table`, ( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst containerElement = conversionApi.mapper.toViewElement( data.item as ModelElement );\n\t\t\t\tconst viewElement = getDescendantElement( conversionApi.writer, containerElement!, elementName );\n\n\t\t\t\tif ( !viewElement ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t\t// Downcast selected styles to a figure element instead of a table element.\n\t\t\t\tif ( attributeName === 'htmlTableAttributes' && containerElement !== viewElement ) {\n\t\t\t\t\tconst oldAttributes = splitAttributesForFigureAndTable( data.attributeOldValue as GHSViewAttributes );\n\t\t\t\t\tconst newAttributes = splitAttributesForFigureAndTable( data.attributeNewValue as GHSViewAttributes );\n\n\t\t\t\t\tupdateViewAttributes(\n\t\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\t\toldAttributes.tableAttributes,\n\t\t\t\t\t\tnewAttributes.tableAttributes,\n\t\t\t\t\t\tviewElement!\n\t\t\t\t\t);\n\n\t\t\t\t\tupdateViewAttributes(\n\t\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\t\toldAttributes.figureAttributes,\n\t\t\t\t\t\tnewAttributes.figureAttributes,\n\t\t\t\t\t\tcontainerElement!\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tupdateViewAttributes(\n\t\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\t\tdata.attributeOldValue as GHSViewAttributes,\n\t\t\t\t\t\tdata.attributeNewValue as GHSViewAttributes,\n\t\t\t\t\t\tviewElement!\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t};\n}\n\n/**\n * Splits styles based on the `STYLE_ATTRIBUTES_TO_PROPAGATE` pattern that should be moved to the parent element\n * and those that should remain on element.\n */\nfunction splitAttributesForFigureAndTable( data: GHSViewAttributes ): {\n\tfigureAttributes: GHSViewAttributes;\n\ttableAttributes: GHSViewAttributes;\n} {\n\tconst figureAttributes: GHSViewAttributes = {};\n\tconst tableAttributes: GHSViewAttributes = { ...data };\n\n\tif ( !data || !( 'styles' in data ) ) {\n\t\treturn { figureAttributes, tableAttributes };\n\t}\n\n\ttableAttributes.styles = {};\n\n\tfor ( const [ key, value ] of Object.entries( data.styles! ) ) {\n\t\tif ( STYLE_ATTRIBUTES_TO_PROPAGATE.includes( key ) ) {\n\t\t\tfigureAttributes.styles = { ...figureAttributes.styles, [ key ]: value };\n\t\t} else {\n\t\t\ttableAttributes.styles = { ...tableAttributes.styles, [ key ]: value };\n\t\t}\n\t}\n\n\treturn { figureAttributes, tableAttributes };\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/style\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport {\n\tcreateObjectView,\n\tmodelToViewBlockAttributeConverter,\n\tviewToModelBlockAttributeConverter,\n\tviewToModelObjectConverter\n} from '../converters.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport type { HtmlSupportDataSchemaBlockElementDefinition } from '../dataschema.js';\n\n/**\n * Provides the General HTML Support for `style` elements.\n */\nexport class StyleElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'StyleElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst dataFilter = this.editor.plugins.get( DataFilter );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:style', ( evt, definition ) => {\n\t\t\tconst editor = this.editor;\n\t\t\tconst schema = editor.model.schema;\n\t\t\tconst conversion = editor.conversion;\n\n\t\t\tschema.register( 'htmlStyle', definition.modelSchema );\n\n\t\t\tschema.extend( 'htmlStyle', {\n\t\t\t\tallowAttributes: [ 'htmlStyleAttributes', 'htmlContent' ],\n\t\t\t\tisContent: true\n\t\t\t} );\n\n\t\t\teditor.data.registerRawContentMatcher( {\n\t\t\t\tname: 'style'\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\t\tview: 'style',\n\t\t\t\tmodel: viewToModelObjectConverter( definition )\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelBlockAttributeConverter(\n\t\t\t\tdefinition as HtmlSupportDataSchemaBlockElementDefinition, dataFilter\n\t\t\t) );\n\n\t\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\t\tmodel: 'htmlStyle',\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\treturn createObjectView( 'style', modelElement, writer );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tconversion.for( 'downcast' )\n\t\t\t\t.add( modelToViewBlockAttributeConverter( definition as HtmlSupportDataSchemaBlockElementDefinition ) );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/list\n */\n\nimport { isEqual } from 'es-toolkit/compat';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type { UpcastElementEvent } from 'ckeditor5/src/engine.js';\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\nimport type {\n\tListEditing,\n\tListEditingPostFixerEvent,\n\tLegacyIndentCommand,\n\tListIndentCommand,\n\tListType,\n\tListUtils\n} from '@ckeditor/ckeditor5-list';\n\nimport { getHtmlAttributeName, setViewAttributes } from '../utils.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\n\n/**\n * Provides the General HTML Support integration with the {@link module:list/list~List List} feature.\n */\nexport class ListElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.plugins.has( 'ListEditing' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst dataFilter = editor.plugins.get( DataFilter );\n\t\tconst listEditing: ListEditing = editor.plugins.get( 'ListEditing' );\n\t\tconst listUtils: ListUtils = editor.plugins.get( 'ListUtils' );\n\t\tconst viewElements = [ 'ul', 'ol', 'li' ];\n\n\t\t// Register downcast strategy.\n\t\t// Note that this must be done before document list editing registers conversion in afterInit.\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'htmlLiAttributes',\n\t\t\tsetAttributeOnDowncast: setViewAttributes\n\t\t} );\n\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'list',\n\t\t\tattributeName: 'htmlUlAttributes',\n\t\t\tsetAttributeOnDowncast: setViewAttributes\n\t\t} );\n\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'list',\n\t\t\tattributeName: 'htmlOlAttributes',\n\t\t\tsetAttributeOnDowncast: setViewAttributes\n\t\t} );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register', ( evt, definition ) => {\n\t\t\tif ( !viewElements.includes( definition.view! ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevt.stop();\n\n\t\t\t// Do not register same converters twice.\n\t\t\tif ( schema.checkAttribute( '$block', 'htmlLiAttributes' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst allowAttributes = viewElements.map( element => getHtmlAttributeName( element ) );\n\n\t\t\tschema.extend( '$listItem', { allowAttributes } );\n\n\t\t\tconversion.for( 'upcast' ).add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>(\n\t\t\t\t\t'element:ul', viewToModelListAttributeConverter( 'htmlUlAttributes', dataFilter ), { priority: 'low' }\n\t\t\t\t);\n\t\t\t\tdispatcher.on<UpcastElementEvent>(\n\t\t\t\t\t'element:ol', viewToModelListAttributeConverter( 'htmlOlAttributes', dataFilter ), { priority: 'low' }\n\t\t\t\t);\n\t\t\t\tdispatcher.on<UpcastElementEvent>(\n\t\t\t\t\t'element:li', viewToModelListAttributeConverter( 'htmlLiAttributes', dataFilter ), { priority: 'low' }\n\t\t\t\t);\n\t\t\t} );\n\t\t} );\n\n\t\t// Make sure that all items in a single list (items at the same level & listType) have the same properties.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node, previousNodeInList } of listNodes ) {\n\t\t\t\t// This is a first item of a nested list.\n\t\t\t\tif ( !previousNodeInList ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( previousNodeInList.getAttribute( 'listType' ) == node.getAttribute( 'listType' ) ) {\n\t\t\t\t\tconst attribute = getAttributeFromListType( previousNodeInList.getAttribute( 'listType' ) );\n\t\t\t\t\tconst value = previousNodeInList.getAttribute( attribute );\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isEqual( node.getAttribute( attribute ), value ) &&\n\t\t\t\t\t\twriter.model.schema.checkAttribute( node, attribute )\n\t\t\t\t\t) {\n\t\t\t\t\t\twriter.setAttribute( attribute, value, node );\n\t\t\t\t\t\tevt.return = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( previousNodeInList.getAttribute( 'listItemId' ) == node.getAttribute( 'listItemId' ) ) {\n\t\t\t\t\tconst value = previousNodeInList.getAttribute( 'htmlLiAttributes' );\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isEqual( node.getAttribute( 'htmlLiAttributes' ), value ) &&\n\t\t\t\t\t\twriter.model.schema.checkAttribute( node, 'htmlLiAttributes' )\n\t\t\t\t\t) {\n\t\t\t\t\t\twriter.setAttribute( 'htmlLiAttributes', value, node );\n\t\t\t\t\t\tevt.return = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Remove `ol` attributes from `ul` elements and vice versa.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node } of listNodes ) {\n\t\t\t\tconst listType = node.getAttribute( 'listType' );\n\n\t\t\t\tif ( !listUtils.isNumberedListType( listType ) && node.getAttribute( 'htmlOlAttributes' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'htmlOlAttributes', node );\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\n\t\t\t\tif ( listUtils.isNumberedListType( listType ) && node.getAttribute( 'htmlUlAttributes' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'htmlUlAttributes', node );\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.commands.get( 'indentList' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Reset list attributes after indenting list items.\n\t\tconst indentList: LegacyIndentCommand | ListIndentCommand = editor.commands.get( 'indentList' )!;\n\n\t\tthis.listenTo( indentList, 'afterExecute', ( evt, changedBlocks ) => {\n\t\t\teditor.model.change( writer => {\n\t\t\t\tfor ( const node of changedBlocks ) {\n\t\t\t\t\tconst attribute = getAttributeFromListType( node.getAttribute( 'listType' ) );\n\n\t\t\t\t\tif ( !editor.model.schema.checkAttribute( node, attribute ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Just reset the attribute.\n\t\t\t\t\t// If there is a previous indented list that this node should be merged into,\n\t\t\t\t\t// the postfixer will unify all the attributes of both sub-lists.\n\t\t\t\t\twriter.setAttribute( attribute, {}, node );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link TODO}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelListAttributeConverter( attributeName: string, dataFilter: DataFilter ): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = data.viewItem;\n\n\t\tif ( !data.modelRange ) {\n\t\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\tconst viewAttributes = dataFilter.processViewAttributes( viewElement, conversionApi );\n\n\t\tfor ( const item of data.modelRange!.getItems( { shallow: true } ) ) {\n\t\t\t// Apply only to list item blocks.\n\t\t\tif ( !item.hasAttribute( 'listItemId' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Set list attributes only on same level items, those nested deeper are already handled\n\t\t\t// by the recursive conversion.\n\t\t\tif ( item.hasAttribute( 'htmlUlAttributes' ) || item.hasAttribute( 'htmlOlAttributes' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( conversionApi.writer.model.schema.checkAttribute( item, attributeName ) ) {\n\t\t\t\tconversionApi.writer.setAttribute( attributeName, viewAttributes || {}, item );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Returns HTML attribute name based on provided list type.\n */\nfunction getAttributeFromListType( listType: ListType ) {\n\treturn listType === 'numbered' || listType == 'customNumbered' ?\n\t\t'htmlOlAttributes' :\n\t\t'htmlUlAttributes';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/horizontalline\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tModelElement\n} from 'ckeditor5/src/engine.js';\n\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport { type GHSViewAttributes, updateViewAttributes } from '../utils.js';\nimport { getDescendantElement } from './integrationutils.js';\nimport { viewToModelBlockAttributeConverter } from '../converters.js';\n\n/**\n * Provides the General HTML Support integration with the {@link module:horizontal-line/horizontalline~HorizontalLine} feature.\n */\nexport class HorizontalLineElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'HorizontalLineElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.plugins.has( 'HorizontalLineEditing' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst dataFilter = editor.plugins.get( DataFilter );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:hr', ( evt, definition ) => {\n\t\t\tif ( definition.model !== 'horizontalLine' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tschema.extend( 'horizontalLine', {\n\t\t\t\tallowAttributes: [ 'htmlHrAttributes' ]\n\t\t\t} );\n\n\t\t\tconversion.for( 'upcast' ).add( viewToModelBlockAttributeConverter( definition, dataFilter ) );\n\t\t\tconversion.for( 'downcast' ).add( modelToViewHorizontalLineAttributeConverter() );\n\n\t\t\tevt.stop();\n\t\t} );\n\t}\n}\n\n/**\n * A model-to-view conversion helper applying attributes from the\n * {@link module:horizontal-line/horizontalline~HorizontalLine HorizontalLine} feature.\n *\n * @returns Returns a conversion callback.\n */\nfunction modelToViewHorizontalLineAttributeConverter() {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\tdispatcher.on<DowncastAttributeEvent>( 'attribute:htmlHrAttributes:horizontalLine', ( evt, data, conversionApi ) => {\n\t\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { attributeOldValue, attributeNewValue } = data;\n\t\t\tconst containerElement = conversionApi.mapper.toViewElement( data.item as ModelElement )!;\n\t\t\tconst viewElement = getDescendantElement( conversionApi.writer, containerElement, 'hr' );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tupdateViewAttributes(\n\t\t\t\t\tconversionApi.writer,\n\t\t\t\t\tattributeOldValue as GHSViewAttributes,\n\t\t\t\t\tattributeNewValue as GHSViewAttributes,\n\t\t\t\t\tviewElement );\n\t\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/integrations/customelement\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ViewUpcastWriter, type ViewDocumentFragment, type ViewNode } from 'ckeditor5/src/engine.js';\n\nimport { DataSchema } from '../dataschema.js';\nimport { DataFilter, type HtmlSupportDataFilterRegisterEvent } from '../datafilter.js';\nimport { type GHSViewAttributes, setViewAttributes } from '../utils.js';\n\n/**\n * Provides the General HTML Support for custom elements (not registered in the {@link module:html-support/dataschema~DataSchema}).\n */\nexport class CustomElementSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ DataFilter, DataSchema ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CustomElementSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst dataFilter = this.editor.plugins.get( DataFilter );\n\t\tconst dataSchema = this.editor.plugins.get( DataSchema );\n\n\t\tdataFilter.on<HtmlSupportDataFilterRegisterEvent>( 'register:$customElement', ( evt, definition ) => {\n\t\t\tevt.stop();\n\n\t\t\tconst editor = this.editor;\n\t\t\tconst schema = editor.model.schema;\n\t\t\tconst conversion = editor.conversion;\n\t\t\tconst unsafeElements = editor.editing.view.domConverter.unsafeElements;\n\t\t\tconst preLikeElements = editor.data.htmlProcessor.domConverter.preElements;\n\n\t\t\tschema.register( definition.model, definition.modelSchema );\n\t\t\tschema.extend( definition.model, {\n\t\t\t\tallowAttributes: [ 'htmlElementName', 'htmlCustomElementAttributes', 'htmlContent' ],\n\t\t\t\tisContent: true\n\t\t\t} );\n\n\t\t\t// For the `<template>` element we use only raw-content because DOM API exposes its content\n\t\t\t// only as a document fragment in the `content` property (or innerHTML).\n\t\t\teditor.data.htmlProcessor.domConverter.registerRawContentMatcher( { name: 'template' } );\n\n\t\t\t// Being executed on the low priority, it will catch all elements that were not caught by other converters.\n\t\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\t\tview: /.*/,\n\t\t\t\tmodel: ( viewElement, conversionApi ) => {\n\t\t\t\t\t// Do not try to convert $comment fake element.\n\t\t\t\t\tif ( viewElement.name == '$comment' ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !isValidElementName( viewElement.name ) ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Allow for fallback only if this element is not defined in data schema to make sure\n\t\t\t\t\t// that this will handle only custom elements not registered in the data schema.\n\t\t\t\t\tif ( dataSchema.getDefinitionsForView( viewElement.name ).size ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure that this element will not render in the editing view.\n\t\t\t\t\tif ( !unsafeElements.includes( viewElement.name ) ) {\n\t\t\t\t\t\tunsafeElements.push( viewElement.name );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure that whitespaces will not be trimmed or replaced by nbsps while stringify content.\n\t\t\t\t\tif ( !preLikeElements.includes( viewElement.name ) ) {\n\t\t\t\t\t\tpreLikeElements.push( viewElement.name );\n\t\t\t\t\t}\n\n\t\t\t\t\tconst modelElement = conversionApi.writer.createElement( definition.model, {\n\t\t\t\t\t\thtmlElementName: viewElement.name\n\t\t\t\t\t} );\n\n\t\t\t\t\tconst htmlAttributes = dataFilter.processViewAttributes( viewElement, conversionApi );\n\n\t\t\t\t\tif ( htmlAttributes ) {\n\t\t\t\t\t\tconversionApi.writer.setAttribute( 'htmlCustomElementAttributes', htmlAttributes, modelElement );\n\t\t\t\t\t}\n\n\t\t\t\t\tlet htmlContent;\n\n\t\t\t\t\t// For the `<template>` element we use only raw-content because DOM API exposes its content\n\t\t\t\t\t// only as a document fragment in the `content` property.\n\t\t\t\t\tif ( viewElement.is( 'element', 'template' ) && viewElement.getCustomProperty( '$rawContent' ) ) {\n\t\t\t\t\t\thtmlContent = viewElement.getCustomProperty( '$rawContent' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Store the whole element in the attribute so that ViewDomConverter\n\t\t\t\t\t\t// will be able to use the pre like element context.\n\t\t\t\t\t\tconst viewWriter = new ViewUpcastWriter( viewElement.document );\n\t\t\t\t\t\tconst documentFragment = viewWriter.createDocumentFragment( viewElement );\n\t\t\t\t\t\tconst domFragment = editor.data.htmlProcessor.domConverter.viewToDom( documentFragment );\n\t\t\t\t\t\tconst domElement = domFragment.firstChild!;\n\n\t\t\t\t\t\twhile ( domElement.firstChild ) {\n\t\t\t\t\t\t\tdomFragment.appendChild( domElement.firstChild );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdomElement.remove();\n\n\t\t\t\t\t\thtmlContent = editor.data.htmlProcessor.htmlWriter.getHtml( domFragment );\n\t\t\t\t\t}\n\n\t\t\t\t\tconversionApi.writer.setAttribute( 'htmlContent', htmlContent, modelElement );\n\n\t\t\t\t\t// Consume the content of the element.\n\t\t\t\t\tfor ( const { item } of editor.editing.view.createRangeIn( viewElement ) ) {\n\t\t\t\t\t\tconversionApi.consumable.consume( item as ViewNode | ViewDocumentFragment, { name: true } );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn modelElement;\n\t\t\t\t},\n\t\t\t\tconverterPriority: 'low'\n\t\t\t} );\n\n\t\t\t// Because this element is unsafe (DomConverter#unsafeElements), it will render as a transparent <span> but it must\n\t\t\t// be rendered anyway for the mapping between the model and the view to exist.\n\t\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\t\tmodel: {\n\t\t\t\t\tname: definition.model,\n\t\t\t\t\tattributes: [ 'htmlElementName', 'htmlCustomElementAttributes', 'htmlContent' ]\n\t\t\t\t},\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\tconst viewName = modelElement.getAttribute( 'htmlElementName' ) as string;\n\t\t\t\t\tconst viewElement = writer.createRawElement( viewName );\n\n\t\t\t\t\tif ( modelElement.hasAttribute( 'htmlCustomElementAttributes' ) ) {\n\t\t\t\t\t\tsetViewAttributes(\n\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\tmodelElement.getAttribute( 'htmlCustomElementAttributes' ) as GHSViewAttributes,\n\t\t\t\t\t\t\tviewElement\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewElement;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\t\tmodel: {\n\t\t\t\t\tname: definition.model,\n\t\t\t\t\tattributes: [ 'htmlElementName', 'htmlCustomElementAttributes', 'htmlContent' ]\n\t\t\t\t},\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\tconst viewName = modelElement.getAttribute( 'htmlElementName' ) as string;\n\t\t\t\t\tconst htmlContent = modelElement.getAttribute( 'htmlContent' ) as string;\n\n\t\t\t\t\tconst viewElement = writer.createRawElement( viewName, null, ( domElement, domConverter ) => {\n\t\t\t\t\t\tdomConverter.setContentOf( domElement, htmlContent );\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( modelElement.hasAttribute( 'htmlCustomElementAttributes' ) ) {\n\t\t\t\t\t\tsetViewAttributes(\n\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\tmodelElement.getAttribute( 'htmlCustomElementAttributes' ) as GHSViewAttributes,\n\t\t\t\t\t\t\tviewElement\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewElement;\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n/**\n * Returns true if name is valid for a DOM element name.\n */\nfunction isValidElementName( name: string ): boolean {\n\ttry {\n\t\tdocument.createElement( name );\n\t} catch {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/generalhtmlsupport\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { toArray, type ArrayOrItem } from 'ckeditor5/src/utils.js';\nimport type { RemoveFormatCommand } from '@ckeditor/ckeditor5-remove-format';\n\nimport { DataFilter } from './datafilter.js';\nimport { CodeBlockElementSupport } from './integrations/codeblock.js';\nimport { DualContentModelElementSupport } from './integrations/dualcontent.js';\nimport { HeadingElementSupport } from './integrations/heading.js';\nimport { ImageElementSupport } from './integrations/image.js';\nimport { MediaEmbedElementSupport } from './integrations/mediaembed.js';\nimport { ScriptElementSupport } from './integrations/script.js';\nimport { TableElementSupport } from './integrations/table.js';\nimport { StyleElementSupport } from './integrations/style.js';\nimport { ListElementSupport } from './integrations/list.js';\nimport { HorizontalLineElementSupport } from './integrations/horizontalline.js';\nimport { CustomElementSupport } from './integrations/customelement.js';\nimport type { HtmlSupportDataSchemaInlineElementDefinition } from './dataschema.js';\nimport type { ModelDocumentSelection, ModelItem, Model, ModelRange, ModelSelectable } from 'ckeditor5/src/engine.js';\nimport { getHtmlAttributeName, modifyGhsAttribute, removeFormatting } from './utils.js';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { GeneralHtmlSupportConfig } from './generalhtmlsupportconfig.js';\n\n/**\n * The General HTML Support feature.\n *\n * This is a \"glue\" plugin which initializes the {@link module:html-support/datafilter~DataFilter data filter} configuration\n * and features integration with the General HTML Support.\n */\nexport class GeneralHtmlSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'GeneralHtmlSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [\n\t\t\tDataFilter,\n\t\t\tCodeBlockElementSupport,\n\t\t\tDualContentModelElementSupport,\n\t\t\tHeadingElementSupport,\n\t\t\tImageElementSupport,\n\t\t\tMediaEmbedElementSupport,\n\t\t\tScriptElementSupport,\n\t\t\tTableElementSupport,\n\t\t\tStyleElementSupport,\n\t\t\tListElementSupport,\n\t\t\tHorizontalLineElementSupport,\n\t\t\tCustomElementSupport\n\t\t] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst dataFilter = editor.plugins.get( DataFilter );\n\n\t\t// Load the allowed empty inline elements' configuration.\n\t\t// Note that this modifies DataSchema so must be loaded before registering filtering rules.\n\t\tdataFilter.loadAllowedEmptyElementsConfig( editor.config.get( 'htmlSupport.allowEmpty' ) || [] );\n\n\t\t// Load the filtering configuration.\n\t\tdataFilter.loadAllowedConfig( editor.config.get( 'htmlSupport.allow' ) || [] );\n\t\tdataFilter.loadDisallowedConfig( editor.config.get( 'htmlSupport.disallow' ) || [] );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst removeFormatCommand: RemoveFormatCommand | undefined = this.editor.commands.get( 'removeFormat' );\n\n\t\tremoveFormatCommand?.registerCustomAttribute(\n\t\t\tattributeName => attributeName.startsWith( 'html' ) && attributeName.endsWith( 'Attributes' ),\n\t\t\tremoveFormatting\n\t\t);\n\t}\n\n\t/**\n\t * Returns a GHS model attribute name related to a given view element name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t */\n\tpublic getGhsAttributeNameForElement( viewElementName: string ): string {\n\t\tconst dataSchema = this.editor.plugins.get( 'DataSchema' );\n\t\tconst definitions = Array.from( dataSchema.getDefinitionsForView( viewElementName, false ) );\n\n\t\tconst inlineDefinition = definitions.find( definition => (\n\t\t\t( definition as HtmlSupportDataSchemaInlineElementDefinition ).isInline && !definitions[ 0 ].isObject\n\t\t) );\n\n\t\tif ( inlineDefinition ) {\n\t\t\treturn inlineDefinition.model;\n\t\t}\n\n\t\treturn getHtmlAttributeName( viewElementName );\n\t}\n\n\t/**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to add.\n\t * @param selectable The selection or element to update.\n\t */\n\tpublic addModelHtmlClass( viewElementName: string, className: ArrayOrItem<string>, selectable: ModelSelectable ): void {\n\t\tconst model = this.editor.model;\n\t\tconst ghsAttributeName = this.getGhsAttributeNameForElement( viewElementName );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of getItemsToUpdateGhsAttribute( model, selectable, ghsAttributeName ) ) {\n\t\t\t\tmodifyGhsAttribute( writer, item, ghsAttributeName, 'classes', classes => {\n\t\t\t\t\tfor ( const value of toArray( className ) ) {\n\t\t\t\t\t\tclasses.add( value );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to remove.\n\t * @param selectable The selection or element to update.\n\t */\n\tpublic removeModelHtmlClass( viewElementName: string, className: ArrayOrItem<string>, selectable: ModelSelectable ): void {\n\t\tconst model = this.editor.model;\n\t\tconst ghsAttributeName = this.getGhsAttributeNameForElement( viewElementName );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of getItemsToUpdateGhsAttribute( model, selectable, ghsAttributeName ) ) {\n\t\t\t\tmodifyGhsAttribute( writer, item, ghsAttributeName, 'classes', classes => {\n\t\t\t\t\tfor ( const value of toArray( className ) ) {\n\t\t\t\t\t\tclasses.delete( value );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributes The object with attributes to set.\n\t * @param selectable The selection or element to update.\n\t */\n\tprivate setModelHtmlAttributes( viewElementName: string, attributes: Record<string, unknown>, selectable: ModelSelectable ) {\n\t\tconst model = this.editor.model;\n\t\tconst ghsAttributeName = this.getGhsAttributeNameForElement( viewElementName );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of getItemsToUpdateGhsAttribute( model, selectable, ghsAttributeName ) ) {\n\t\t\t\tmodifyGhsAttribute( writer, item, ghsAttributeName, 'attributes', attributesMap => {\n\t\t\t\t\tfor ( const [ key, value ] of Object.entries( attributes ) ) {\n\t\t\t\t\t\tattributesMap.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributeName The attribute name (or names) to remove.\n\t * @param selectable The selection or element to update.\n\t */\n\tprivate removeModelHtmlAttributes( viewElementName: string, attributeName: ArrayOrItem<string>, selectable: ModelSelectable ) {\n\t\tconst model = this.editor.model;\n\t\tconst ghsAttributeName = this.getGhsAttributeNameForElement( viewElementName );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of getItemsToUpdateGhsAttribute( model, selectable, ghsAttributeName ) ) {\n\t\t\t\tmodifyGhsAttribute( writer, item, ghsAttributeName, 'attributes', attributesMap => {\n\t\t\t\t\tfor ( const key of toArray( attributeName ) ) {\n\t\t\t\t\t\tattributesMap.delete( key );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Updates GHS model attribute for a specified view element name, so it includes a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param styles The object with styles to set.\n\t * @param selectable The selection or element to update.\n\t */\n\tprivate setModelHtmlStyles( viewElementName: string, styles: Record<string, string>, selectable: ModelSelectable ) {\n\t\tconst model = this.editor.model;\n\t\tconst ghsAttributeName = this.getGhsAttributeNameForElement( viewElementName );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of getItemsToUpdateGhsAttribute( model, selectable, ghsAttributeName ) ) {\n\t\t\t\tmodifyGhsAttribute( writer, item, ghsAttributeName, 'styles', stylesMap => {\n\t\t\t\t\tfor ( const [ key, value ] of Object.entries( styles ) ) {\n\t\t\t\t\t\tstylesMap.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Updates GHS model attribute for a specified view element name, so it does not include a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param properties The style (or styles list) to remove.\n\t * @param selectable The selection or element to update.\n\t */\n\tprivate removeModelHtmlStyles( viewElementName: string, properties: ArrayOrItem<string>, selectable: ModelSelectable ) {\n\t\tconst model = this.editor.model;\n\t\tconst ghsAttributeName = this.getGhsAttributeNameForElement( viewElementName );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of getItemsToUpdateGhsAttribute( model, selectable, ghsAttributeName ) ) {\n\t\t\t\tmodifyGhsAttribute( writer, item, ghsAttributeName, 'styles', stylesMap => {\n\t\t\t\t\tfor ( const key of toArray( properties ) ) {\n\t\t\t\t\t\tstylesMap.delete( key );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Returns an iterator over an items in the selectable that accept given GHS attribute.\n */\nfunction* getItemsToUpdateGhsAttribute(\n\tmodel: Model,\n\tselectable: ModelSelectable,\n\tghsAttributeName: string\n): IterableIterator<ModelItem | ModelDocumentSelection> {\n\tif ( !selectable ) {\n\t\treturn;\n\t}\n\n\tif ( !( Symbol.iterator in selectable ) && selectable.is( 'documentSelection' ) && selectable.isCollapsed ) {\n\t\tif ( model.schema.checkAttributeInSelection( selectable, ghsAttributeName ) ) {\n\t\t\tyield selectable;\n\t\t}\n\t} else {\n\t\tfor ( const range of getValidRangesForSelectable( model, selectable, ghsAttributeName ) ) {\n\t\t\tyield* range.getItems( { shallow: true } );\n\t\t}\n\t}\n}\n\n/**\n * Translates a given selectable to an iterable of ranges.\n */\nfunction getValidRangesForSelectable(\n\tmodel: Model,\n\tselectable: NonNullable<ModelSelectable>,\n\tghsAttributeName: string\n): Iterable<ModelRange> {\n\tif (\n\t\t!( Symbol.iterator in selectable ) &&\n\t\t(\n\t\t\tselectable.is( 'node' ) ||\n\t\t\tselectable.is( '$text' ) ||\n\t\t\tselectable.is( '$textProxy' )\n\t\t)\n\t) {\n\t\tif ( model.schema.checkAttribute( selectable, ghsAttributeName ) ) {\n\t\t\treturn [ model.createRangeOn( selectable ) ];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t} else {\n\t\treturn model.schema.getValidRanges( model.createSelection( selectable ).getRanges(), ghsAttributeName );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/htmlcomment\n */\n\nimport type { Marker, ModelPosition, ModelRange, ModelElement } from 'ckeditor5/src/engine.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { uid } from 'ckeditor5/src/utils.js';\n\n/**\n * The HTML comment feature. It preserves the HTML comments (`<!-- -->`) in the editor data.\n *\n * For a detailed overview, check the {@glink features/html/html-comments HTML comment feature documentation}.\n */\nexport class HtmlComment extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'HtmlComment' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst loadedCommentsContent = new Map<string, string>();\n\n\t\teditor.data.processor.skipComments = false;\n\n\t\t// Allow storing comment's content as the $root attribute with the name `$comment:<unique id>`.\n\t\teditor.model.schema.addAttributeCheck( ( context, attributeName ) => {\n\t\t\tif ( context.endsWith( '$root' ) && attributeName.startsWith( '$comment' ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} );\n\n\t\t// Convert the `$comment` view element to `$comment:<unique id>` marker and store its content (the comment itself) as a $root\n\t\t// attribute. The comment content is needed in the `dataDowncast` pipeline to re-create the comment node.\n\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t\t\tview: '$comment',\n\t\t\tmodel: viewElement => {\n\t\t\t\tconst markerUid = uid();\n\t\t\t\tconst markerName = `$comment:${ markerUid }`;\n\t\t\t\tconst commentContent = viewElement.getCustomProperty( '$rawContent' ) as string;\n\n\t\t\t\tloadedCommentsContent.set( markerName, commentContent );\n\n\t\t\t\treturn markerName;\n\t\t\t}\n\t\t} );\n\n\t\t// Convert the `$comment` marker to `$comment` UI element with `$rawContent` custom property containing the comment content.\n\t\teditor.conversion.for( 'dataDowncast' ).markerToElement( {\n\t\t\tmodel: '$comment',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tlet root = undefined;\n\n\t\t\t\tfor ( const rootName of this.editor.model.document.getRootNames() ) {\n\t\t\t\t\troot = this.editor.model.document.getRoot( rootName )!;\n\n\t\t\t\t\tif ( root.hasAttribute( modelElement.markerName ) ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst markerName = modelElement.markerName;\n\t\t\t\tconst commentContent = root!.getAttribute( markerName );\n\t\t\t\tconst comment = writer.createUIElement( '$comment' );\n\n\t\t\t\twriter.setCustomProperty( '$rawContent', commentContent, comment );\n\n\t\t\t\treturn comment;\n\t\t\t}\n\t\t} );\n\n\t\t// Remove comments' markers and their corresponding $root attributes, which are moved to the graveyard.\n\t\teditor.model.document.registerPostFixer( writer => {\n\t\t\tlet changed = false;\n\t\t\tconst markers = editor.model.document.differ.getChangedMarkers().filter( marker => marker.name.startsWith( '$comment:' ) );\n\n\t\t\tfor ( const marker of markers ) {\n\t\t\t\tconst { oldRange, newRange } = marker.data;\n\n\t\t\t\tif ( oldRange && newRange && oldRange.root == newRange.root ) {\n\t\t\t\t\t// The marker was moved in the same root. Don't do anything.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( oldRange ) {\n\t\t\t\t\t// The comment marker was moved from one root to another (most probably to the graveyard).\n\t\t\t\t\t// Remove the related attribute from the previous root.\n\t\t\t\t\tconst oldRoot = oldRange.root as ModelElement;\n\n\t\t\t\t\tif ( oldRoot.hasAttribute( marker.name ) ) {\n\t\t\t\t\t\twriter.removeAttribute( marker.name, oldRoot );\n\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( newRange ) {\n\t\t\t\t\tconst newRoot = newRange.root as ModelElement;\n\n\t\t\t\t\tif ( newRoot.rootName == '$graveyard' ) {\n\t\t\t\t\t\t// Comment marker was moved to the graveyard -- remove it entirely.\n\t\t\t\t\t\twriter.removeMarker( marker.name );\n\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t} else if ( !newRoot.hasAttribute( marker.name ) ) {\n\t\t\t\t\t\t// Comment marker was just added or was moved to another root - updated roots attributes.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Added fallback to `''` for the comment content in case if someone incorrectly added just the marker \"by hand\"\n\t\t\t\t\t\t// and forgot to add the root attribute or add them in different change blocks.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// It caused an infinite loop in one of the unit tests.\n\t\t\t\t\t\twriter.setAttribute( marker.name, loadedCommentsContent.get( marker.name ) || '', newRoot );\n\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\n\t\t// Delete all comment markers from the document before setting new data.\n\t\teditor.data.on( 'set', () => {\n\t\t\tfor ( const commentMarker of editor.model.markers.getMarkersGroup( '$comment' ) ) {\n\t\t\t\tthis.removeHtmlComment( commentMarker.name );\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// Delete all comment markers that are within a removed range.\n\t\t// Delete all comment markers at the limit element boundaries if the whole content of the limit element is removed.\n\t\teditor.model.on( 'deleteContent', ( evt, [ selection ] ) => {\n\t\t\tfor ( const range of selection.getRanges() ) {\n\t\t\t\tconst limitElement = editor.model.schema.getLimitElement( range );\n\t\t\t\tconst firstPosition = editor.model.createPositionAt( limitElement, 0 );\n\t\t\t\tconst lastPosition = editor.model.createPositionAt( limitElement, 'end' );\n\n\t\t\t\tlet affectedCommentIDs;\n\n\t\t\t\tif ( firstPosition.isTouching( range.start ) && lastPosition.isTouching( range.end ) ) {\n\t\t\t\t\taffectedCommentIDs = this.getHtmlCommentsInRange( editor.model.createRange( firstPosition, lastPosition ) );\n\t\t\t\t} else {\n\t\t\t\t\taffectedCommentIDs = this.getHtmlCommentsInRange( range, { skipBoundaries: true } );\n\t\t\t\t}\n\n\t\t\t\tfor ( const commentMarkerID of affectedCommentIDs ) {\n\t\t\t\t\tthis.removeHtmlComment( commentMarkerID );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Creates an HTML comment on the specified position and returns its ID.\n\t *\n\t * *Note*: If two comments are created at the same position, the second comment will be inserted before the first one.\n\t *\n\t * @returns Comment ID. This ID can be later used to e.g. remove the comment from the content.\n\t */\n\tpublic createHtmlComment( position: ModelPosition, content: string ): string {\n\t\tconst id = uid();\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst root = model.document.getRoot( position.root.rootName )!;\n\t\tconst markerName = `$comment:${ id }`;\n\n\t\treturn model.change( writer => {\n\t\t\tconst range = writer.createRange( position );\n\n\t\t\twriter.addMarker( markerName, {\n\t\t\t\tusingOperation: true,\n\t\t\t\taffectsData: true,\n\t\t\t\trange\n\t\t\t} );\n\n\t\t\twriter.setAttribute( markerName, content, root );\n\n\t\t\treturn markerName;\n\t\t} );\n\t}\n\n\t/**\n\t * Removes an HTML comment with the given comment ID.\n\t *\n\t * It does nothing and returns `false` if the comment with the given ID does not exist.\n\t * Otherwise it removes the comment and returns `true`.\n\t *\n\t * Note that a comment can be removed also by removing the content around the comment.\n\t *\n\t * @param commentID The ID of the comment to be removed.\n\t * @returns `true` when the comment with the given ID was removed, `false` otherwise.\n\t */\n\tpublic removeHtmlComment( commentID: string ): boolean {\n\t\tconst editor = this.editor;\n\t\tconst marker = editor.model.markers.get( commentID );\n\n\t\tif ( !marker ) {\n\t\t\treturn false;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.removeMarker( marker );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the HTML comment data for the comment with a given ID.\n\t *\n\t * Returns `null` if the comment does not exist.\n\t */\n\tpublic getHtmlCommentData( commentID: string ): HtmlCommentData | null {\n\t\tconst editor = this.editor;\n\t\tconst marker = editor.model.markers.get( commentID );\n\n\t\tif ( !marker ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet content = '';\n\n\t\tfor ( const root of this.editor.model.document.getRoots() ) {\n\t\t\tif ( root.hasAttribute( commentID ) ) {\n\t\t\t\tcontent = root.getAttribute( commentID ) as string;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tcontent,\n\t\t\tposition: marker.getStart()\n\t\t};\n\t}\n\n\t/**\n\t * Gets all HTML comments in the given range.\n\t *\n\t * By default, it includes comments at the range boundaries.\n\t *\n\t * @param range The range to search for HTML comments.\n\t * @param options Additional options.\n\t * @param options.skipBoundaries When set to `true` the range boundaries will be skipped.\n\t * @returns HTML comment IDs\n\t */\n\tpublic getHtmlCommentsInRange( range: ModelRange, { skipBoundaries = false } = {} ): Array<string> {\n\t\tconst includeBoundaries = !skipBoundaries;\n\n\t\t// Unfortunately, MarkerCollection#getMarkersAtPosition() filters out collapsed markers.\n\t\treturn Array.from( this.editor.model.markers.getMarkersGroup( '$comment' ) )\n\t\t\t.filter( marker => isCommentMarkerInRange( marker, range ) )\n\t\t\t.map( marker => marker.name );\n\n\t\tfunction isCommentMarkerInRange( commentMarker: Marker, range: ModelRange ) {\n\t\t\tconst position = commentMarker.getRange().start;\n\n\t\t\treturn (\n\t\t\t\t( position.isAfter( range.start ) || ( includeBoundaries && position.isEqual( range.start ) ) ) &&\n\t\t\t\t( position.isBefore( range.end ) || ( includeBoundaries && position.isEqual( range.end ) ) )\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * An interface for the HTML comments data.\n *\n * It consists of the {@link module:engine/model/position~ModelPosition `position`} and `content`.\n */\nexport interface HtmlCommentData {\n\tposition: ModelPosition;\n\tcontent: string;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/htmlpagedataprocessor\n */\n\nimport { HtmlDataProcessor, ViewUpcastWriter, type ViewDocumentFragment } from 'ckeditor5/src/engine.js';\n\n/**\n * The full page HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */\nexport class HtmlPageDataProcessor extends HtmlDataProcessor {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override toView( data: string ): ViewDocumentFragment {\n\t\t// Ignore content that is not a full page source.\n\t\tif ( !/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i.test( data.trim().slice( 0, 10_000 ) ) ) {\n\t\t\treturn super.toView( data );\n\t\t}\n\n\t\t// Store doctype and xml declaration in a separate properties as they can't be stringified later.\n\t\tlet docType = '';\n\t\tlet xmlDeclaration = '';\n\n\t\tdata = data.trim().replace( /<\\?xml\\s[^?]*\\?>/i, match => {\n\t\t\txmlDeclaration = match;\n\n\t\t\treturn '';\n\t\t} );\n\n\t\tdata = data.trim().replace( /^<!DOCTYPE\\s[^>]*?>/i, match => {\n\t\t\tdocType = match;\n\n\t\t\treturn '';\n\t\t} );\n\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\tconst viewFragment = this.domConverter.domToView(\n\t\t\tdomFragment,\n\t\t\t{ skipComments: this.skipComments }\n\t\t) as ViewDocumentFragment;\n\n\t\tconst writer = new ViewUpcastWriter( viewFragment.document );\n\n\t\t// Using the DOM document with body content extracted as a skeleton of the page.\n\t\twriter.setCustomProperty( '$fullPageDocument', domFragment.ownerDocument.documentElement.outerHTML, viewFragment );\n\n\t\t// List of `<style>` elements extracted from document's `<head>` element.\n\t\tconst headStylesElements = Array.from( domFragment.ownerDocument.querySelectorAll( 'head style' ) );\n\n\t\twriter.setCustomProperty( '$fullPageHeadStyles', headStylesElements, viewFragment );\n\n\t\tif ( docType ) {\n\t\t\twriter.setCustomProperty( '$fullPageDocType', docType, viewFragment );\n\t\t}\n\n\t\tif ( xmlDeclaration ) {\n\t\t\twriter.setCustomProperty( '$fullPageXmlDeclaration', xmlDeclaration, viewFragment );\n\t\t}\n\n\t\treturn viewFragment;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override toData( viewFragment: ViewDocumentFragment ): string {\n\t\tlet data = super.toData( viewFragment );\n\n\t\tconst page = viewFragment.getCustomProperty( '$fullPageDocument' ) as string | undefined;\n\t\tconst docType = viewFragment.getCustomProperty( '$fullPageDocType' );\n\t\tconst xmlDeclaration = viewFragment.getCustomProperty( '$fullPageXmlDeclaration' );\n\n\t\tif ( page ) {\n\t\t\tdata = page.replace( /<\\/body\\s*>/, data + '$&' );\n\n\t\t\tif ( docType ) {\n\t\t\t\tdata = docType + '\\n' + data;\n\t\t\t}\n\n\t\t\tif ( xmlDeclaration ) {\n\t\t\t\tdata = xmlDeclaration + '\\n' + data;\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/fullpage\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { logWarning, global } from 'ckeditor5/src/utils.js';\nimport {\n\tViewUpcastWriter,\n\ttype DataControllerToModelEvent,\n\ttype DataControllerToViewEvent,\n\ttype ModelRootElement\n} from 'ckeditor5/src/engine.js';\n\nimport { HtmlPageDataProcessor } from './htmlpagedataprocessor.js';\n\n/**\n * The full page editing feature. It preserves the whole HTML page in the editor data.\n */\nexport class FullPage extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'FullPage' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'htmlSupport.fullPage', {\n\t\t\tallowRenderStylesFromHead: false,\n\t\t\tsanitizeCss: rawCss => {\n\t\t\t\t/**\n\t\t\t\t * When using the Full page with the `config.htmlSupport.fullPage.allowRenderStylesFromHead` set to `true`,\n\t\t\t\t * it is strongly recommended to define a sanitize function that will clean up the CSS\n\t\t\t\t * which is present in the `<head>` in editors content in order to avoid XSS vulnerability.\n\t\t\t\t *\n\t\t\t\t * For a detailed overview, check the {@glink features/html/full-page-html Full page HTML feature} documentation.\n\t\t\t\t *\n\t\t\t\t * @error css-full-page-provide-sanitize-function\n\t\t\t\t */\n\t\t\t\tlogWarning( 'css-full-page-provide-sanitize-function' );\n\n\t\t\t\treturn {\n\t\t\t\t\tcss: rawCss,\n\t\t\t\t\thasChanged: false\n\t\t\t\t};\n\t\t\t}\n\t\t} );\n\n\t\teditor.data.processor = new HtmlPageDataProcessor( editor.data.viewDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst properties = [ '$fullPageDocument', '$fullPageDocType', '$fullPageXmlDeclaration', '$fullPageHeadStyles' ];\n\n\t\teditor.model.schema.extend( '$root', {\n\t\t\tallowAttributes: properties\n\t\t} );\n\n\t\t// Apply custom properties from view document fragment to the model root attributes.\n\t\teditor.data.on<DataControllerToModelEvent>( 'toModel', ( evt, [ viewElementOrFragment ] ) => {\n\t\t\tconst root = editor.model.document.getRoot()!;\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\tfor ( const name of properties ) {\n\t\t\t\t\tconst value = viewElementOrFragment.getCustomProperty( name );\n\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( name, value, root );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( isAllowedRenderStylesFromHead( editor ) ) {\n\t\t\t\tthis._renderStylesFromHead( root );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Apply root attributes to the view document fragment.\n\t\teditor.data.on<DataControllerToViewEvent>( 'toView', ( evt, [ modelElementOrFragment ] ) => {\n\t\t\tif ( !modelElementOrFragment.is( 'rootElement' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst root = modelElementOrFragment;\n\t\t\tconst viewFragment = evt.return!;\n\n\t\t\tif ( !root.hasAttribute( '$fullPageDocument' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst writer = new ViewUpcastWriter( viewFragment.document );\n\n\t\t\tfor ( const name of properties ) {\n\t\t\t\tconst value = root.getAttribute( name );\n\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setCustomProperty( name, value, viewFragment );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Clear root attributes related to full page editing on editor content reset.\n\t\teditor.data.on( 'set', () => {\n\t\t\tconst root = editor.model.document.getRoot()!;\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\tfor ( const name of properties ) {\n\t\t\t\t\tif ( root.hasAttribute( name ) ) {\n\t\t\t\t\t\twriter.removeAttribute( name, root );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}, { priority: 'high' } );\n\n\t\t// Make sure that document is returned even if there is no content in the page body.\n\t\teditor.data.on( 'get', ( evt, args ) => {\n\t\t\tif ( !args[ 0 ] ) {\n\t\t\t\targs[ 0 ] = {};\n\t\t\t}\n\n\t\t\targs[ 0 ].trim = false;\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tif ( isAllowedRenderStylesFromHead( this.editor ) ) {\n\t\t\tthis._removeStyleElementsFromDom();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if in the document exists any `<style>` elements injected by the plugin and removes them,\n\t * so these could be re-rendered later.\n\t * There is used `data-full-page-style-id` attribute to recognize styles injected by the feature.\n\t */\n\tprivate _removeStyleElementsFromDom(): void {\n\t\tconst existingStyleElements = Array.from(\n\t\t\tglobal.document.querySelectorAll( `[data-full-page-style-id=\"${ this.editor.id }\"]` )\n\t\t);\n\n\t\tfor ( const style of existingStyleElements ) {\n\t\t\tstyle.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Extracts `<style>` elements from the full page data and renders them in the main document `<head>`.\n\t * CSS content is sanitized before rendering.\n\t */\n\tprivate _renderStyleElementsInDom( root: ModelRootElement ): void {\n\t\tconst editor = this.editor;\n\n\t\t// Get `<style>` elements list from the `<head>` from the full page data.\n\t\tconst styleElements = root.getAttribute( '$fullPageHeadStyles' ) as Array<HTMLStyleElement> | undefined;\n\n\t\tif ( !styleElements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sanitizeCss = editor.config.get( 'htmlSupport.fullPage.sanitizeCss' )!;\n\n\t\t// Add `data-full-page-style-id` attribute to the `<style>` element and render it in `<head>` in the main document.\n\t\tfor ( const style of styleElements ) {\n\t\t\tstyle.setAttribute( 'data-full-page-style-id', editor.id );\n\n\t\t\t// Sanitize the CSS content before rendering it in the editor.\n\t\t\tconst sanitizedCss = sanitizeCss( style.innerText );\n\n\t\t\tif ( sanitizedCss.hasChanged ) {\n\t\t\t\tstyle.innerText = sanitizedCss.css;\n\t\t\t}\n\n\t\t\tglobal.document.head.append( style );\n\t\t}\n\t}\n\n\t/**\n\t * Removes existing `<style>` elements injected by the plugin and renders new ones from the full page data.\n\t */\n\tprivate _renderStylesFromHead( root: ModelRootElement ): void {\n\t\tthis._removeStyleElementsFromDom();\n\t\tthis._renderStyleElementsInDom( root );\n\t}\n}\n\n/**\n * Normalize the Full page configuration option `allowRenderStylesFromHead`.\n */\nfunction isAllowedRenderStylesFromHead( editor: Editor ): boolean {\n\treturn editor.config.get( 'htmlSupport.fullPage.allowRenderStylesFromHead' )!;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module html-support/emptyblock\n */\n\nimport type { ClipboardContentInsertionEvent, ClipboardPipeline } from 'ckeditor5/src/clipboard.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type {\n\tUpcastElementEvent,\n\tModelElement,\n\tModelSchema,\n\tDowncastDispatcher,\n\tUpcastDispatcher,\n\tDowncastAttributeEvent\n} from 'ckeditor5/src/engine.js';\n\nconst EMPTY_BLOCK_MODEL_ATTRIBUTE = 'htmlEmptyBlock';\n\n/**\n * This plugin allows for preserving empty block elements in the editor content\n * instead of automatically filling them with block fillers (`&nbsp;`).\n *\n * This is useful when you want to:\n *\n * * Preserve empty block elements exactly as they were in the source HTML.\n * * Allow for styling empty blocks with CSS (block fillers can interfere with height/margin).\n * * Maintain compatibility with external systems that expect empty blocks to remain empty.\n *\n * Known limitations:\n *\n * * Empty blocks may not work correctly with revision history features.\n * * Keyboard navigation through the document might behave unexpectedly, especially when\n *   navigating through structures like lists and tables.\n *\n * For example, this allows for HTML like:\n *\n * ```html\n * <p></p>\n * <p class=\"spacer\"></p>\n * <td></td>\n * ```\n * to remain empty instead of being converted to:\n *\n * ```html\n * <p>&nbsp;</p>\n * <p class=\"spacer\">&nbsp;</p>\n * <td>&nbsp;</td>\n * ```\n */\nexport class EmptyBlock extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'EmptyBlock' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst { model, conversion, plugins, config } = this.editor;\n\t\tconst schema = model.schema;\n\t\tconst preserveEmptyBlocksInEditingView = config.get( 'htmlSupport.preserveEmptyBlocksInEditingView' );\n\n\t\tschema.extend( '$block', { allowAttributes: [ EMPTY_BLOCK_MODEL_ATTRIBUTE ] } );\n\t\tschema.extend( '$container', { allowAttributes: [ EMPTY_BLOCK_MODEL_ATTRIBUTE ] } );\n\n\t\tif ( schema.isRegistered( 'tableCell' ) ) {\n\t\t\tschema.extend( 'tableCell', { allowAttributes: [ EMPTY_BLOCK_MODEL_ATTRIBUTE ] } );\n\t\t}\n\n\t\tif ( preserveEmptyBlocksInEditingView ) {\n\t\t\tconversion.for( 'downcast' ).add( createEmptyBlockDowncastConverter() );\n\t\t} else {\n\t\t\tconversion.for( 'dataDowncast' ).add( createEmptyBlockDowncastConverter() );\n\t\t}\n\n\t\tconversion.for( 'upcast' ).add( createEmptyBlockUpcastConverter( schema ) );\n\n\t\tif ( plugins.has( 'ClipboardPipeline' ) ) {\n\t\t\tthis._registerClipboardPastingHandler();\n\t\t}\n\t}\n\n\t/**\n\t * Handle clipboard paste events:\n\t *\n\t * * It does not affect *copying* content from the editor, only *pasting*.\n\t * * When content is pasted from another editor instance with `<p></p>`,\n\t *   the `&nbsp;` filler is added, so the getData result is `<p>&nbsp;</p>`.\n\t * * When content is pasted from the same editor instance with `<p></p>`,\n\t *   the `&nbsp;` filler is not added, so the getData result is `<p></p>`.\n\t */\n\tprivate _registerClipboardPastingHandler() {\n\t\tconst clipboardPipeline: ClipboardPipeline = this.editor.plugins.get( 'ClipboardPipeline' );\n\n\t\tthis.listenTo<ClipboardContentInsertionEvent>( clipboardPipeline, 'contentInsertion', ( evt, data ) => {\n\t\t\tif ( data.sourceEditorId === this.editor.id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tfor ( const { item } of writer.createRangeIn( data.content ) ) {\n\t\t\t\t\tif ( item.is( 'element' ) && item.hasAttribute( EMPTY_BLOCK_MODEL_ATTRIBUTE ) ) {\n\t\t\t\t\t\twriter.removeAttribute( EMPTY_BLOCK_MODEL_ATTRIBUTE, item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n/**\n * Creates a downcast converter for handling empty blocks.\n * This converter prevents filler elements from being added to elements marked as empty blocks.\n */\nfunction createEmptyBlockDowncastConverter() {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\tdispatcher.on<DowncastAttributeEvent<ModelElement>>( `attribute:${ EMPTY_BLOCK_MODEL_ATTRIBUTE }`, ( evt, data, conversionApi ) => {\n\t\t\tconst { mapper, consumable } = conversionApi;\n\t\t\tconst { item } = data;\n\n\t\t\tif ( !consumable.consume( item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewElement = mapper.toViewElement( item as ModelElement );\n\n\t\t\tif ( viewElement && data.attributeNewValue ) {\n\t\t\t\tviewElement.getFillerOffset = () => null;\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Creates an upcast converter for handling empty blocks.\n * The converter detects empty elements and marks them with the empty block attribute.\n */\nfunction createEmptyBlockUpcastConverter( schema: ModelSchema ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element', ( evt, data, conversionApi ) => {\n\t\t\tconst { viewItem, modelRange } = data;\n\n\t\t\tif ( !viewItem.is( 'element' ) || !viewItem.isEmpty || viewItem.getCustomProperty( '$hasBlockFiller' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Handle element itself.\n\t\t\tconst modelElement = modelRange && modelRange.start.nodeAfter as ModelElement;\n\n\t\t\tif ( !modelElement || !schema.checkAttribute( modelElement, EMPTY_BLOCK_MODEL_ATTRIBUTE ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.setAttribute( EMPTY_BLOCK_MODEL_ATTRIBUTE, true, modelElement );\n\n\t\t\t// Handle an auto-paragraphed bogus paragraph inside empty element.\n\t\t\tif ( modelElement.childCount != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstModelChild = modelElement.getChild( 0 )!;\n\n\t\t\tif (\n\t\t\t\tfirstModelChild.is( 'element', 'paragraph' ) &&\n\t\t\t\tschema.checkAttribute( firstModelChild, EMPTY_BLOCK_MODEL_ATTRIBUTE )\n\t\t\t) {\n\t\t\t\tconversionApi.writer.setAttribute( EMPTY_BLOCK_MODEL_ATTRIBUTE, true, firstModelChild );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t};\n}\n"],"names":["updateViewAttributes","writer","oldViewAttributes","newViewAttributes","viewElement","removeViewAttributes","setViewAttributes","viewAttributes","attributes","key","value","Object","entries","setAttribute","styles","setStyle","classes","addClass","removeAttribute","style","keys","removeStyle","removeClass","mergeViewElementAttributes","target","source","result","cloneDeep","Array","from","Set","modifyGhsAttribute","item","ghsAttributeName","subject","callback","oldValue","getAttribute","newValue","kind","values","size","Map","fromEntries","length","is","setSelectionAttribute","removeSelectionAttribute","removeFormatting","itemRange","getItems","shallow","toPascalCase","data","startCase","replace","getHtmlAttributeName","viewElementName","viewToModelObjectConverter","model","modelName","conversionApi","createElement","htmlContent","getCustomProperty","toObjectWidgetConverter","editor","view","viewName","isInline","t","modelElement","widgetLabel","createObjectView","viewContainer","createContainerElement","class","toWidget","label","createRawElement","domElement","domConverter","setContentOf","viewToAttributeInlineConverter","attributeKey","allowEmpty","dataFilter","dispatcher","on","evt","processViewAttributes","viewItem","consumable","test","name","consume","modelRange","assign","convertChildren","modelCursor","isCollapsed","safeInsert","parts","getSplitParts","createRange","start","createPositionAfter","updateConversionResult","setAttributeOnItem","node","priority","schema","checkAttribute","nodeAttributes","attributesToAdd","emptyInlineModelElementToViewConverter","asWidget","hasAttribute","attributeValue","getFillerOffset","attributeToViewInlineConverter","createAttributeElement","viewToModelBlockAttributeConverter","modelToViewBlockAttributeConverter","attributeOldValue","attributeNewValue","viewWriter","mapper","toViewElement","defaultConfig","block","modelSchema","inheritAllFrom","allowWhere","isBlock","allowIn","allowChildren","isLimit","allowContentOf","paragraphLikeModel","isEmpty","inline","appliesToBlock","coupledAttribute","attributeProperties","copyOnEnter","isFormatting","isObject","allowAttributesOf","DataSchema","Plugin","_definitions","pluginName","isOfficialPlugin","init","definition","registerBlockElement","registerInlineElement","push","extendBlockElement","_extendDefinition","extendInlineElement","getDefinitionsForView","includeReferences","definitions","_getMatchingViewDefinitions","reference","_getReferences","add","getDefinitionsForModel","filter","def","testViewName","inheritProperties","property","referenceName","toArray","currentDefinitions","currentDefinition","idx","mergeWith","isArray","concat","undefined","pattern","RegExp","DataFilter","_dataSchema","_allowedAttributes","_disallowedAttributes","_allowedElements","_disallowedElements","_dataInitialized","_coupledAttributes","plugins","get","Matcher","_registerElementsAfterInit","_registerElementHandlers","_registerCoupledAttributesPostFixer","_registerAssociatedHtmlAttributesPostFixer","requires","Widget","loadAllowedConfig","config","elementName","rules","splitRules","allowElement","forEach","allowAttributes","loadDisallowedConfig","disallowElement","disallowAttributes","loadAllowedEmptyElementsConfig","allowEmptyElement","_addAllowedElement","matchAndConsumeAttributes","prepareGHSAttribute","has","relatedDefinition","once","_fireRegisterEvent","priorities","highest","isRegistered","_registerObjectElement","_registerBlockElement","_registerInlineElement","CKEditorError","stop","selection","document","registerPostFixer","changes","differ","getChanges","changed","coupledAttributes","_getCoupledAttributesMap","change","type","attributeKeys","range","getWalker","listenTo","removeAttributes","coupledAttributeKeys","coupledAttributeKey","attr","startsWith","endsWith","position","nodeAfter","attributeNames","set","fire","conversion","register","extend","registerRawContentMatcher","for","elementToElement","converterPriority","low","elementToStructure","createEmptyElement","setAttributeProperties","attributeToElement","copyFromObject","hasHtmlAttributes","element","getAttributeKeys","some","elementsToRemove","insertedElement","createRangeOn","remove","htmlProcessor","registerInlineObjectMatcher","matcher","matches","matchAll","stylesProcessor","reduce","match","token","sortedRelatedStyles","getRelatedStyles","relatedStyle","split","sort","a","b","className","getAttributes","getReducedStyles","attributesObject","isValidAttributeName","stylesMap","StylesMap","styleValue","getStyle","getStylesEntries","splitPattern","attributeName","isPlainObject","map","CodeBlockElementSupport","viewToModelCodeBlockAttributeConverter","modelToViewCodeBlockAttributeConverter","viewCodeElement","viewPreElement","parent","preserveElementAttributes","DualContentModelElementSupport","blockDefinition","paragraphLikeModelDefinition","_hasBlockContent","_addAttributeConversion","editing","blockElements","createRangeIn","includes","HeadingElementSupport","Enter","options","registerHeadingElements","dataSchema","headerModels","option","getDescendantElement","containerElement","ImageElementSupport","viewToModelFigureAttributeConverter","viewToModelImageAttributeConverter","modelToViewImageAttributeConverter","viewToModelLinkImageAttributeConverter","viewImageElement","imageUtils","viewLink","viewImage","findViewImgElement","modelImage","viewFigureElement","hasClass","addInlineAttributeConversion","addBlockAttributeConversion","MediaEmbedElementSupport","mediaElementName","viewToModelFigureAttributesConverter","viewToModelMediaAttributesConverter","modelToViewMediaAttributeConverter","upcastMedia","viewMediaElement","addAttributeConversionDispatcherHandler","ScriptElementSupport","isContent","STYLE_ATTRIBUTES_TO_PROPAGATE","TableElementSupport","tableUtils","viewToModelTableAttributeConverter","modelToViewTableAttributeConverter","createHeadingRowsPostFixer","wasFixed","table","hasTHeadAttributes","hasTBodyAttributes","getRows","viewTableElement","childNode","getChildren","oldAttributes","splitAttributesForFigureAndTable","newAttributes","tableAttributes","figureAttributes","StyleElementSupport","ListElementSupport","listEditing","listUtils","viewElements","registerDowncastStrategy","scope","setAttributeOnDowncast","viewToModelListAttributeConverter","listNodes","previousNodeInList","attribute","getAttributeFromListType","isEqual","return","listType","isNumberedListType","afterInit","commands","indentList","changedBlocks","HorizontalLineElementSupport","modelToViewHorizontalLineAttributeConverter","CustomElementSupport","unsafeElements","preLikeElements","preElements","isValidElementName","htmlElementName","htmlAttributes","ViewUpcastWriter","documentFragment","createDocumentFragment","domFragment","viewToDom","firstChild","appendChild","htmlWriter","getHtml","GeneralHtmlSupport","removeFormatCommand","registerCustomAttribute","getGhsAttributeNameForElement","inlineDefinition","find","addModelHtmlClass","selectable","getItemsToUpdateGhsAttribute","removeModelHtmlClass","delete","setModelHtmlAttributes","attributesMap","removeModelHtmlAttributes","setModelHtmlStyles","removeModelHtmlStyles","properties","Symbol","iterator","checkAttributeInSelection","getValidRangesForSelectable","getValidRanges","createSelection","getRanges","HtmlComment","loadedCommentsContent","processor","skipComments","addAttributeCheck","context","elementToMarker","markerUid","uid","markerName","commentContent","markerToElement","root","rootName","getRootNames","getRoot","comment","createUIElement","setCustomProperty","markers","getChangedMarkers","marker","oldRange","newRange","oldRoot","newRoot","removeMarker","commentMarker","getMarkersGroup","removeHtmlComment","limitElement","getLimitElement","firstPosition","createPositionAt","lastPosition","affectedCommentIDs","isTouching","end","getHtmlCommentsInRange","skipBoundaries","commentMarkerID","createHtmlComment","content","id","addMarker","usingOperation","affectsData","commentID","getHtmlCommentData","getRoots","getStart","includeBoundaries","isCommentMarkerInRange","getRange","isAfter","isBefore","HtmlPageDataProcessor","HtmlDataProcessor","toView","trim","slice","docType","xmlDeclaration","_toDom","viewFragment","domToView","ownerDocument","documentElement","outerHTML","headStylesElements","querySelectorAll","toData","page","FullPage","define","allowRenderStylesFromHead","sanitizeCss","rawCss","logWarning","css","hasChanged","viewDocument","viewElementOrFragment","isAllowedRenderStylesFromHead","_renderStylesFromHead","modelElementOrFragment","args","destroy","_removeStyleElementsFromDom","existingStyleElements","global","_renderStyleElementsInDom","styleElements","sanitizedCss","innerText","head","append","EMPTY_BLOCK_MODEL_ATTRIBUTE","EmptyBlock","preserveEmptyBlocksInEditingView","createEmptyBlockDowncastConverter","createEmptyBlockUpcastConverter","_registerClipboardPastingHandler","clipboardPipeline","sourceEditorId","childCount","firstModelChild","getChild"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"debugId":null}}]
}