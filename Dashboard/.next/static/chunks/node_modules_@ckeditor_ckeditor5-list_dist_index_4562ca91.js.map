{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/dist/index.js","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/listwalker.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/model.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listindentcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listmergecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listsplitcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listformatting/listitemboldintegration.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listformatting/listitemitalicintegration.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listformatting/listitemfontsizeintegration.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listformatting/listitemfontcolorintegration.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listformatting/listitemfontfamilyintegration.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listformatting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listutils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/view.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/postfixers.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/converters.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/utils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/listui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/liststartcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/utils/style.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/liststylecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listreversedcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/converters.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listpropertiesutils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/utils/config.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listpropertiesediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/ui/listpropertiesview.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listpropertiesui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/listproperties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/todolist/checktodolistcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/todolist/todocheckboxchangeobserver.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/todolist/todolistediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/todolist/todolistui.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/todolist.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacylistcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacyindentcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacyutils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacylistutils.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacyconverters.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacylistediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylist.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacyliststylecommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacylistreversedcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacyliststartcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacylistpropertiesediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist/legacychecktodolistcommand.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist/legacytodolistconverters.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist/legacytodolistediting.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist.ts","file:///home/matei/NovelPedia/App/frontend/node_modules/%40ckeditor/ckeditor5-list/src/list/adjacentlistssupport.ts"],"sourcesContent":["import { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { toArray, first, uid, env, CKEditorError, FocusTracker, KeystrokeHandler, global, getCode, parseKeystroke, getLocalizedArrowKeyCodeDirection, createElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { _normalizeFontSizeOptions } from '@ckeditor/ckeditor5-font/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView, View, ViewCollection, FocusCycler, addKeyboardHandlingForGrid, CollapsibleView, LabeledFieldView, createLabeledInputNumber, SwitchButtonView, createDropdown, SplitButtonView, MenuBarMenuView, focusChildOnDropdownOpen } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { IconNumberedList, IconBulletedList, IconListStyleDisc, IconListStyleCircle, IconListStyleSquare, IconListStyleDecimal, IconListStyleDecimalLeadingZero, IconListStyleLowerRoman, IconListStyleUpperRoman, IconListStyleLowerLatin, IconListStyleUpperLatin, IconTodoList } from '@ckeditor/ckeditor5-icons/dist/index.js';\nimport { DomEventObserver, Matcher, ModelTreeWalker, getViewFillerOffset } from '@ckeditor/ckeditor5-engine/dist/index.js';\n\n/**\n * Document list blocks iterator.\n *\n * @internal\n */ class ListWalker {\n    /**\n\t * The start list item block element.\n\t */ _startElement;\n    /**\n\t * The reference indent. Initialized by the indent of the start block.\n\t */ _referenceIndent;\n    /**\n\t * The iterating direction.\n\t */ _isForward;\n    /**\n\t * Whether start block should be included in the result (if it's matching other criteria).\n\t */ _includeSelf;\n    /**\n\t * Additional attributes that must be the same for each block.\n\t */ _sameAttributes;\n    /**\n\t * Whether blocks with the same indent level as the start block should be included in the result.\n\t */ _sameIndent;\n    /**\n\t * Whether blocks with a lower indent level than the start block should be included in the result.\n\t */ _lowerIndent;\n    /**\n\t * Whether blocks with a higher indent level than the start block should be included in the result.\n\t */ _higherIndent;\n    /**\n\t * Creates a document list iterator.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */ constructor(startElement, options){\n        this._startElement = startElement;\n        this._referenceIndent = startElement.getAttribute('listIndent');\n        this._isForward = options.direction == 'forward';\n        this._includeSelf = !!options.includeSelf;\n        this._sameAttributes = toArray(options.sameAttributes || []);\n        this._sameIndent = !!options.sameIndent;\n        this._lowerIndent = !!options.lowerIndent;\n        this._higherIndent = !!options.higherIndent;\n    }\n    /**\n\t * Performs only first step of iteration and returns the result.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */ static first(startElement, options) {\n        const walker = new this(startElement, options);\n        const iterator = walker[Symbol.iterator]();\n        return first(iterator);\n    }\n    /**\n\t * Iterable interface.\n\t */ *[Symbol.iterator]() {\n        const nestedItems = [];\n        for (const { node } of new SiblingListBlocksIterator(this._getStartNode(), this._isForward ? 'forward' : 'backward')){\n            const indent = node.getAttribute('listIndent');\n            // Leaving a nested list.\n            if (indent < this._referenceIndent) {\n                // Abort searching blocks.\n                if (!this._lowerIndent) {\n                    break;\n                }\n                // While searching for lower indents, update the reference indent to find another parent in the next step.\n                this._referenceIndent = indent;\n            } else if (indent > this._referenceIndent) {\n                // Ignore nested blocks.\n                if (!this._higherIndent) {\n                    continue;\n                }\n                // Collect nested blocks to verify if they are really nested, or it's a different item.\n                if (!this._isForward) {\n                    nestedItems.push(node);\n                    continue;\n                }\n            } else {\n                // Ignore same indent block.\n                if (!this._sameIndent) {\n                    // While looking for nested blocks, stop iterating while encountering first same indent block.\n                    if (this._higherIndent) {\n                        // No more nested blocks so yield nested items.\n                        if (nestedItems.length) {\n                            yield* nestedItems;\n                            nestedItems.length = 0;\n                        }\n                        break;\n                    }\n                    continue;\n                }\n                // Abort if item has any additionally specified attribute different.\n                if (this._sameAttributes.some((attr)=>node.getAttribute(attr) !== this._startElement.getAttribute(attr))) {\n                    break;\n                }\n            }\n            // There is another block for the same list item so the nested items were in the same list item.\n            if (nestedItems.length) {\n                yield* nestedItems;\n                nestedItems.length = 0;\n            }\n            yield node;\n        }\n    }\n    /**\n\t * Returns the model element to start iterating.\n\t */ _getStartNode() {\n        if (this._includeSelf) {\n            return this._startElement;\n        }\n        return this._isForward ? this._startElement.nextSibling : this._startElement.previousSibling;\n    }\n}\n/**\n * Iterates sibling list blocks starting from the given node.\n *\n * @internal\n */ class SiblingListBlocksIterator {\n    _node;\n    _isForward;\n    _previousNodesByIndent = [];\n    _previous = null;\n    _previousNodeIndent = null;\n    /**\n\t * @param node The model node.\n\t * @param direction Iteration direction.\n\t */ constructor(node, direction = 'forward'){\n        this._node = node;\n        this._isForward = direction === 'forward';\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        if (!isListItemBlock(this._node)) {\n            return {\n                done: true,\n                value: undefined\n            };\n        }\n        const nodeIndent = this._node.getAttribute('listIndent');\n        let previousNodeInList = null;\n        if (this._previous) {\n            const previousNodeIndent = this._previousNodeIndent;\n            // Let's find previous node for the same indent.\n            // We're going to need that when we get back to previous indent.\n            if (nodeIndent > previousNodeIndent) {\n                this._previousNodesByIndent[previousNodeIndent] = this._previous;\n            } else if (nodeIndent < previousNodeIndent) {\n                previousNodeInList = this._previousNodesByIndent[nodeIndent] || null;\n                this._previousNodesByIndent.length = nodeIndent;\n            } else {\n                previousNodeInList = this._previous;\n            }\n        }\n        const value = {\n            node: this._node,\n            previous: this._previous,\n            previousNodeInList\n        };\n        this._previous = this._node;\n        this._previousNodeIndent = nodeIndent;\n        this._node = this._isForward ? this._node.nextSibling : this._node.previousSibling;\n        return {\n            value,\n            done: false\n        };\n    }\n}\n/**\n * The iterable protocol over the list elements.\n *\n * @internal\n */ class ListBlocksIterable {\n    _listHead;\n    /**\n\t * @param listHead The head element of a list.\n\t */ constructor(listHead){\n        this._listHead = listHead;\n    }\n    /**\n\t * List blocks iterator.\n\t *\n\t * Iterates over all blocks of a list.\n\t */ [Symbol.iterator]() {\n        return new SiblingListBlocksIterator(this._listHead);\n    }\n}\n\n/**\n * The list item ID generator.\n *\n * @internal\n */ class ListItemUid {\n    /**\n\t * Returns the next ID.\n\t *\n\t * @internal\n\t */ /* istanbul ignore next: static function definition -- @preserve */ static next() {\n        return uid();\n    }\n}\n/**\n * Returns true if the given model node is a list item block.\n *\n * @internal\n */ function isListItemBlock(node) {\n    return !!node && node.is('element') && node.hasAttribute('listItemId');\n}\n/**\n * Returns an array with all elements that represents the same list item.\n *\n * It means that values for `listIndent`, and `listItemId` for all items are equal.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n * in the result.\n */ function getAllListItemBlocks(listItem, options = {}) {\n    return [\n        ...getListItemBlocks(listItem, {\n            ...options,\n            direction: 'backward'\n        }),\n        ...getListItemBlocks(listItem, {\n            ...options,\n            direction: 'forward'\n        })\n    ];\n}\n/**\n * Returns an array with elements that represents the same list item in the specified direction.\n *\n * It means that values for `listIndent` and `listItemId` for all items are equal.\n *\n * **Note**: For backward search the provided item is not included, but for forward search it is included in the result.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.direction Walking direction.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included in the result.\n */ function getListItemBlocks(listItem, options = {}) {\n    const isForward = options.direction == 'forward';\n    const items = Array.from(new ListWalker(listItem, {\n        ...options,\n        includeSelf: isForward,\n        sameIndent: true,\n        sameAttributes: 'listItemId'\n    }));\n    return isForward ? items : items.reverse();\n}\n/**\n * Returns a list items nested inside the given list item.\n *\n * @internal\n */ function getNestedListBlocks(listItem) {\n    return Array.from(new ListWalker(listItem, {\n        direction: 'forward',\n        higherIndent: true\n    }));\n}\n/**\n * Returns array of all blocks/items of the same list as given block (same indent, same type and properties).\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options Additional list walker options to modify the range of returned list items.\n */ function getListItems(listItem, options) {\n    const backwardBlocks = new ListWalker(listItem, {\n        sameIndent: true,\n        sameAttributes: 'listType',\n        ...options\n    });\n    const forwardBlocks = new ListWalker(listItem, {\n        sameIndent: true,\n        sameAttributes: 'listType',\n        includeSelf: true,\n        direction: 'forward',\n        ...options\n    });\n    return [\n        ...Array.from(backwardBlocks).reverse(),\n        ...forwardBlocks\n    ];\n}\n/**\n * Check if the given block is the first in the list item.\n *\n * @internal\n * @param listBlock The list block element.\n */ function isFirstBlockOfListItem(listBlock) {\n    const previousSibling = ListWalker.first(listBlock, {\n        sameIndent: true,\n        sameAttributes: 'listItemId'\n    });\n    if (!previousSibling) {\n        return true;\n    }\n    return false;\n}\n/**\n * Check if the given block is the last in the list item.\n *\n * @internal\n */ function isLastBlockOfListItem(listBlock) {\n    const nextSibling = ListWalker.first(listBlock, {\n        direction: 'forward',\n        sameIndent: true,\n        sameAttributes: 'listItemId'\n    });\n    if (!nextSibling) {\n        return true;\n    }\n    return false;\n}\n/**\n * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n *\n * @internal\n * @param blocks The list of selected blocks.\n * @param options.withNested Whether should include nested list items.\n */ function expandListBlocksToCompleteItems(blocks, options = {}) {\n    blocks = toArray(blocks);\n    const higherIndent = options.withNested !== false;\n    const allBlocks = new Set();\n    for (const block of blocks){\n        for (const itemBlock of getAllListItemBlocks(block, {\n            higherIndent\n        })){\n            allBlocks.add(itemBlock);\n        }\n    }\n    return sortBlocks(allBlocks);\n}\n/**\n * Expands the given list of selected blocks to include all the items of the lists they're in.\n *\n * @internal\n * @param blocks The list of selected blocks.\n */ function expandListBlocksToCompleteList(blocks) {\n    blocks = toArray(blocks);\n    const allBlocks = new Set();\n    for (const block of blocks){\n        for (const itemBlock of getListItems(block)){\n            allBlocks.add(itemBlock);\n        }\n    }\n    return sortBlocks(allBlocks);\n}\n/**\n * Splits the list item just before the provided list block.\n *\n * @internal\n * @param listBlock The list block element.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */ function splitListItemBefore(listBlock, writer) {\n    const blocks = getListItemBlocks(listBlock, {\n        direction: 'forward'\n    });\n    const id = ListItemUid.next();\n    for (const block of blocks){\n        writer.setAttribute('listItemId', id, block);\n    }\n    return blocks;\n}\n/**\n * Merges the list item with the parent list item.\n *\n * @internal\n * @param listBlock The list block element.\n * @param parentBlock The list block element to merge with.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */ function mergeListItemBefore(listBlock, parentBlock, writer) {\n    const attributes = {};\n    for (const [key, value] of parentBlock.getAttributes()){\n        if (key.startsWith('list')) {\n            attributes[key] = value;\n        }\n    }\n    const blocks = getListItemBlocks(listBlock, {\n        direction: 'forward'\n    });\n    for (const block of blocks){\n        writer.setAttributes(attributes, block);\n    }\n    return blocks;\n}\n/**\n * Increases indentation of given list blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @param options Additional options.\n * @param options.expand Whether should expand the list of blocks to include complete list items.\n * @param options.indentBy The number of levels the indentation should change (could be negative).\n */ function indentBlocks(blocks, writer, { expand, indentBy = 1 } = {}) {\n    blocks = toArray(blocks);\n    // Expand the selected blocks to contain the whole list items.\n    const allBlocks = expand ? expandListBlocksToCompleteItems(blocks) : blocks;\n    for (const block of allBlocks){\n        const blockIndent = block.getAttribute('listIndent') + indentBy;\n        if (blockIndent < 0) {\n            removeListAttributes(block, writer);\n        } else {\n            writer.setAttribute('listIndent', blockIndent, block);\n        }\n    }\n    return allBlocks;\n}\n/**\n * Decreases indentation of given list of blocks. If the indentation of some blocks matches the indentation\n * of surrounding blocks, they get merged together.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n */ function outdentBlocksWithMerge(blocks, writer) {\n    blocks = toArray(blocks);\n    // Expand the selected blocks to contain the whole list items.\n    const allBlocks = expandListBlocksToCompleteItems(blocks);\n    const visited = new Set();\n    const referenceIndent = Math.min(...allBlocks.map((block)=>block.getAttribute('listIndent')));\n    const parentBlocks = new Map();\n    // Collect parent blocks before the list structure gets altered.\n    for (const block of allBlocks){\n        parentBlocks.set(block, ListWalker.first(block, {\n            lowerIndent: true\n        }));\n    }\n    for (const block of allBlocks){\n        if (visited.has(block)) {\n            continue;\n        }\n        visited.add(block);\n        const blockIndent = block.getAttribute('listIndent') - 1;\n        if (blockIndent < 0) {\n            removeListAttributes(block, writer);\n            continue;\n        }\n        // Merge with parent list item while outdenting and indent matches reference indent.\n        if (block.getAttribute('listIndent') == referenceIndent) {\n            const mergedBlocks = mergeListItemIfNotLast(block, parentBlocks.get(block), writer);\n            // All list item blocks are updated while merging so add those to visited set.\n            for (const mergedBlock of mergedBlocks){\n                visited.add(mergedBlock);\n            }\n            // The indent level was updated while merging so continue to next block.\n            if (mergedBlocks.length) {\n                continue;\n            }\n        }\n        writer.setAttribute('listIndent', blockIndent, block);\n    }\n    return sortBlocks(visited);\n}\n/**\n * Removes all list attributes from the given blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */ function removeListAttributes(blocks, writer) {\n    blocks = toArray(blocks);\n    // Convert simple list items to plain paragraphs.\n    for (const block of blocks){\n        if (block.is('element', 'listItem')) {\n            writer.rename(block, 'paragraph');\n        }\n    }\n    // Remove list attributes.\n    for (const block of blocks){\n        for (const attributeKey of block.getAttributeKeys()){\n            if (attributeKey.startsWith('list')) {\n                writer.removeAttribute(attributeKey, block);\n            }\n        }\n    }\n    return blocks;\n}\n/**\n * Checks whether the given blocks are related to a single list item.\n *\n * @internal\n * @param blocks The list block elements.\n */ function isSingleListItem(blocks) {\n    if (!blocks.length) {\n        return false;\n    }\n    const firstItemId = blocks[0].getAttribute('listItemId');\n    if (!firstItemId) {\n        return false;\n    }\n    return !blocks.some((item)=>item.getAttribute('listItemId') != firstItemId);\n}\n/**\n * Modifies the indents of list blocks following the given list block so the indentation is valid after\n * the given block is no longer a list item.\n *\n * @internal\n * @param lastBlock The last list block that has become a non-list element.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */ function outdentFollowingItems(lastBlock, writer) {\n    const changedBlocks = [];\n    // Start from the model item that is just after the last turned-off item.\n    let currentIndent = Number.POSITIVE_INFINITY;\n    // Correct indent of all items after the last turned off item.\n    // Rules that should be followed:\n    // 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n    //    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n    // 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n    //    should not end up as a child of any of list items that they were not children of before.\n    // 3. All other items should have their indent changed relatively to it's parent.\n    //\n    // For example:\n    // 1  * --------\n    // 2     * --------\n    // 3        * --------\t\t\t<-- this is turned off.\n    // 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n    // 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n    // 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n    // 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n    // 8     * --------\t\t\t\t<-- this has to become indent = 0.\n    // 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n    // 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n    // 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n    // 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n    // 13    * --------\n    // 14       * --------\n    //\n    // After turning off 3 the list becomes:\n    //\n    // 1  * --------\n    // 2     * --------\n    //\n    // 3  --------\n    //\n    // 4  * --------\n    // 5     * --------\n    // 6  * --------\n    // 7     * --------\n    // 8  * --------\n    // 9     * --------\n    // 10       * --------\n    // 11       * --------\n    // 12 * --------\n    // 13    * --------\n    // 14       * --------\n    //\n    // Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n    // those parent-child connection which are possible to maintain are still maintained. It's worth noting\n    // that this is the same effect that we would be get by multiple use of outdent command. However doing\n    // it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n    // less conversion (faster).\n    for (const { node } of new SiblingListBlocksIterator(lastBlock.nextSibling)){\n        // Check each next list item, as long as its indent is higher than 0.\n        const indent = node.getAttribute('listIndent');\n        // If the indent is 0 we are not going to change anything anyway.\n        if (indent == 0) {\n            break;\n        }\n        // We check if that's item indent is lower than current relative indent.\n        if (indent < currentIndent) {\n            // If it is, current relative indent becomes that indent.\n            currentIndent = indent;\n        }\n        // Fix indent relatively to current relative indent.\n        // Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n        const newIndent = indent - currentIndent;\n        writer.setAttribute('listIndent', newIndent, node);\n        changedBlocks.push(node);\n    }\n    return changedBlocks;\n}\n/**\n * Returns the array of given blocks sorted by model indexes (document order).\n *\n * @internal\n */ function sortBlocks(blocks) {\n    return Array.from(blocks).filter((block)=>block.root.rootName !== '$graveyard').sort((a, b)=>a.index - b.index);\n}\n/**\n * Returns a selected block object. If a selected object is inline or when there is no selected\n * object, `null` is returned.\n *\n * @internal\n * @param model The instance of editor model.\n * @returns Selected block object or `null`.\n */ function getSelectedBlockObject(model) {\n    const selectedElement = model.document.selection.getSelectedElement();\n    if (!selectedElement) {\n        return null;\n    }\n    if (model.schema.isObject(selectedElement) && model.schema.isBlock(selectedElement)) {\n        return selectedElement;\n    }\n    return null;\n}\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * Note that this is possible only when multiBlock = false option is set in feature config.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n * @internal\n */ function canBecomeSimpleListItem(block, schema) {\n    return schema.checkChild(block.parent, 'listItem') && schema.checkChild(block, '$text') && !schema.isObject(block);\n}\n/**\n * Returns true if listType is of type `numbered` or `customNumbered`.\n *\n * @internal\n */ function isNumberedListType(listType) {\n    return listType == 'numbered' || listType == 'customNumbered';\n}\n/**\n * Merges a given block to the given parent block if parent is a list item and there is no more blocks in the same item.\n */ function mergeListItemIfNotLast(block, parentBlock, writer) {\n    const parentItemBlocks = getListItemBlocks(parentBlock, {\n        direction: 'forward'\n    });\n    // Merge with parent only if outdented item wasn't the last one in its parent.\n    // Merge:\n    // * a\t\t\t->\t\t* a\n    //   * [b]\t\t->\t\t  b\n    //   c\t\t\t->\t\t  c\n    // Don't merge:\n    // * a\t\t\t->\t\t* a\n    //   * [b]\t\t-> \t\t* b\n    // * c\t\t\t->\t\t* c\n    if (parentItemBlocks.pop().index > block.index) {\n        return mergeListItemBefore(block, parentBlock, writer);\n    }\n    return [];\n}\n\n/**\n * The document list indent command. It is used by the {@link module:list/list~List list feature}.\n */ class ListIndentCommand extends Command {\n    /**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */ constructor(editor, indentDirection){\n        super(editor);\n        this._direction = indentDirection;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */ execute() {\n        const model = this.editor.model;\n        const blocks = getSelectedListBlocks(model.document.selection);\n        model.change((writer)=>{\n            const changedBlocks = [];\n            // Handle selection contained in the single list item and starting in the following blocks.\n            if (isSingleListItem(blocks) && !isFirstBlockOfListItem(blocks[0])) {\n                // Allow increasing indent of following list item blocks.\n                if (this._direction == 'forward') {\n                    changedBlocks.push(...indentBlocks(blocks, writer));\n                }\n                // For indent make sure that indented blocks have a new ID.\n                // For outdent just split blocks from the list item (give them a new IDs).\n                changedBlocks.push(...splitListItemBefore(blocks[0], writer));\n            } else {\n                // Now just update the attributes of blocks.\n                if (this._direction == 'forward') {\n                    changedBlocks.push(...indentBlocks(blocks, writer, {\n                        expand: true\n                    }));\n                } else {\n                    changedBlocks.push(...outdentBlocksWithMerge(blocks, writer));\n                }\n            }\n            // Align the list item type to match the previous list item (from the same list).\n            for (const block of changedBlocks){\n                // This block become a plain block (for example a paragraph).\n                if (!block.hasAttribute('listType')) {\n                    continue;\n                }\n                const previousItemBlock = ListWalker.first(block, {\n                    sameIndent: true\n                });\n                if (previousItemBlock) {\n                    writer.setAttribute('listType', previousItemBlock.getAttribute('listType'), block);\n                }\n            }\n            this._fireAfterExecute(changedBlocks);\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        // Check whether any of position's ancestor is a list item.\n        let blocks = getSelectedListBlocks(this.editor.model.document.selection);\n        let firstBlock = blocks[0];\n        // If selection is not in a list item, the command is disabled.\n        if (!firstBlock) {\n            return false;\n        }\n        // If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n        if (this._direction == 'backward') {\n            return true;\n        }\n        // A single block of a list item is selected, so it could be indented as a sublist.\n        if (isSingleListItem(blocks) && !isFirstBlockOfListItem(blocks[0])) {\n            return true;\n        }\n        blocks = expandListBlocksToCompleteItems(blocks);\n        firstBlock = blocks[0];\n        // Check if there is any list item before selected items that could become a parent of selected items.\n        const siblingItem = ListWalker.first(firstBlock, {\n            sameIndent: true\n        });\n        if (!siblingItem) {\n            return false;\n        }\n        if (siblingItem.getAttribute('listType') == firstBlock.getAttribute('listType')) {\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Returns an array of selected blocks truncated to the first non list block element.\n */ function getSelectedListBlocks(selection) {\n    const blocks = Array.from(selection.getSelectedBlocks());\n    const firstNonListBlockIndex = blocks.findIndex((block)=>!isListItemBlock(block));\n    if (firstNonListBlockIndex != -1) {\n        blocks.length = firstNonListBlockIndex;\n    }\n    return blocks;\n}\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n */ class ListCommand extends Command {\n    /**\n\t * The type of the list created by the command.\n\t */ type;\n    /**\n\t * List Walker options that change the range of the list items to be changed when the selection is collapsed within a list item.\n\t *\n\t * In a multi-level list, when the selection is collapsed within a list item, instead of changing only the list items of the same list\n\t * type and current indent level, the entire list structure is changed (all list items at all indent levels of any list type).\n\t */ _listWalkerOptions;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */ constructor(editor, type, options = {}){\n        super(editor);\n        this.type = type;\n        this._listWalkerOptions = options.multiLevel ? {\n            higherIndent: true,\n            lowerIndent: true,\n            sameAttributes: []\n        } : undefined;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false` it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t * @param options.additionalAttributes Additional attributes that are set for list items when the command is executed.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selectedBlockObject = getSelectedBlockObject(model);\n        const blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>model.schema.checkAttribute(block, 'listType') || canBecomeSimpleListItem(block, model.schema));\n        // Whether we are turning off some items.\n        const turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n        model.change((writer)=>{\n            if (turnOff) {\n                const lastBlock = blocks[blocks.length - 1];\n                // Split the first block from the list item.\n                const itemBlocks = getListItemBlocks(lastBlock, {\n                    direction: 'forward'\n                });\n                const changedBlocks = [];\n                if (itemBlocks.length > 1) {\n                    changedBlocks.push(...splitListItemBefore(itemBlocks[1], writer));\n                }\n                // Strip list attributes.\n                changedBlocks.push(...removeListAttributes(blocks, writer));\n                // Outdent items following the selected list item.\n                changedBlocks.push(...outdentFollowingItems(lastBlock, writer));\n                this._fireAfterExecute(changedBlocks);\n            } else if ((selectedBlockObject || document.selection.isCollapsed) && isListItemBlock(blocks[0])) {\n                const changedBlocks = getListItems(selectedBlockObject || blocks[0], this._listWalkerOptions);\n                for (const block of changedBlocks){\n                    writer.setAttributes({\n                        ...options.additionalAttributes,\n                        listType: this.type\n                    }, block);\n                }\n                this._fireAfterExecute(changedBlocks);\n            } else {\n                const changedBlocks = [];\n                for (const block of blocks){\n                    // Promote the given block to the list item.\n                    if (!block.hasAttribute('listType')) {\n                        // Rename block to a simple list item if this option is enabled.\n                        if (!block.is('element', 'listItem') && canBecomeSimpleListItem(block, model.schema)) {\n                            writer.rename(block, 'listItem');\n                        }\n                        writer.setAttributes({\n                            ...options.additionalAttributes,\n                            listIndent: 0,\n                            listItemId: ListItemUid.next(),\n                            listType: this.type\n                        }, block);\n                        changedBlocks.push(block);\n                    } else {\n                        for (const node of expandListBlocksToCompleteItems(block, {\n                            withNested: false\n                        })){\n                            if (node.getAttribute('listType') != this.type) {\n                                writer.setAttributes({\n                                    ...options.additionalAttributes,\n                                    listType: this.type\n                                }, node);\n                                changedBlocks.push(node);\n                            }\n                        }\n                    }\n                }\n                this._fireAfterExecute(changedBlocks);\n            }\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const selection = this.editor.model.document.selection;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        if (!blocks.length) {\n            return false;\n        }\n        for (const block of blocks){\n            if (block.getAttribute('listType') != this.type) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        if (!blocks.length) {\n            return false;\n        }\n        // If command value is true it means that we are in list item, so the command should be enabled.\n        if (this.value) {\n            return true;\n        }\n        for (const block of blocks){\n            if (schema.checkAttribute(block, 'listType') || canBecomeSimpleListItem(block, schema)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * The document list merge command. It is used by the {@link module:list/list~List list feature}.\n */ class ListMergeCommand extends Command {\n    /**\n\t * Whether list item should be merged before or after the selected block.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be merged before or after the selected block.\n\t */ constructor(editor, direction){\n        super(editor);\n        this._direction = direction;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Merges list blocks together (depending on the {@link #constructor}'s `direction` parameter).\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.shouldMergeOnBlocksContentLevel When set `true`, merging will be performed together\n\t * with {@link module:engine/model/model~Model#deleteContent} to get rid of the inline content in the selection or take advantage\n\t * of the heuristics in `deleteContent()` that helps convert lists into paragraphs in certain cases.\n\t */ execute({ shouldMergeOnBlocksContentLevel = false } = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const changedBlocks = [];\n        model.change((writer)=>{\n            const { firstElement, lastElement } = this._getMergeSubjectElements(selection, shouldMergeOnBlocksContentLevel);\n            const firstIndent = firstElement.getAttribute('listIndent') || 0;\n            const lastIndent = lastElement.getAttribute('listIndent');\n            const lastElementId = lastElement.getAttribute('listItemId');\n            if (firstIndent != lastIndent) {\n                const nestedLastElementBlocks = getNestedListBlocks(lastElement);\n                changedBlocks.push(...indentBlocks([\n                    lastElement,\n                    ...nestedLastElementBlocks\n                ], writer, {\n                    indentBy: firstIndent - lastIndent,\n                    // If outdenting, the entire sub-tree that follows must be included.\n                    expand: firstIndent < lastIndent\n                }));\n            }\n            if (shouldMergeOnBlocksContentLevel) {\n                let sel = selection;\n                if (selection.isCollapsed) {\n                    sel = writer.createSelection(writer.createRange(writer.createPositionAt(firstElement, 'end'), writer.createPositionAt(lastElement, 0)));\n                }\n                // Delete selected content. Replace entire content only for non-collapsed selection.\n                model.deleteContent(sel, {\n                    doNotResetEntireContent: selection.isCollapsed\n                });\n                // Get the last \"touched\" element after deleteContent call (can't use the lastElement because\n                // it could get merged into the firstElement while deleting content).\n                const lastElementAfterDelete = sel.getLastPosition().parent;\n                // Check if the element after it was in the same list item and adjust it if needed.\n                const nextSibling = lastElementAfterDelete.nextSibling;\n                changedBlocks.push(lastElementAfterDelete);\n                if (nextSibling && nextSibling !== lastElement && nextSibling.getAttribute('listItemId') == lastElementId) {\n                    changedBlocks.push(...mergeListItemBefore(nextSibling, lastElementAfterDelete, writer));\n                }\n            } else {\n                changedBlocks.push(...mergeListItemBefore(lastElement, firstElement, writer));\n            }\n            this._fireAfterExecute(changedBlocks);\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedBlockObject = getSelectedBlockObject(model);\n        if (selection.isCollapsed || selectedBlockObject) {\n            const positionParent = selectedBlockObject || selection.getFirstPosition().parent;\n            if (!isListItemBlock(positionParent)) {\n                return false;\n            }\n            const siblingNode = this._direction == 'backward' ? positionParent.previousSibling : positionParent.nextSibling;\n            if (!siblingNode) {\n                return false;\n            }\n            if (isSingleListItem([\n                positionParent,\n                siblingNode\n            ])) {\n                return false;\n            }\n        } else {\n            const lastPosition = selection.getLastPosition();\n            const firstPosition = selection.getFirstPosition();\n            // If deleting within a single block of a list item, there's no need to merge anything.\n            // The default delete should be executed instead.\n            if (lastPosition.parent === firstPosition.parent) {\n                return false;\n            }\n            if (!isListItemBlock(lastPosition.parent)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Returns the boundary elements the merge should be executed for. These are not necessarily selection's first\n\t * and last position parents but sometimes sibling or even further blocks depending on the context.\n\t *\n\t * @param selection The selection the merge is executed for.\n\t * @param shouldMergeOnBlocksContentLevel When `true`, merge is performed together with\n\t * {@link module:engine/model/model~Model#deleteContent} to remove the inline content within the selection.\n\t */ _getMergeSubjectElements(selection, shouldMergeOnBlocksContentLevel) {\n        const model = this.editor.model;\n        const selectedBlockObject = getSelectedBlockObject(model);\n        let firstElement, lastElement;\n        if (selection.isCollapsed || selectedBlockObject) {\n            const positionParent = selectedBlockObject || selection.getFirstPosition().parent;\n            const isFirstBlock = isFirstBlockOfListItem(positionParent);\n            if (this._direction == 'backward') {\n                lastElement = positionParent;\n                if (isFirstBlock && !shouldMergeOnBlocksContentLevel) {\n                    // For the \"c\" as an anchorElement:\n                    //  * a\n                    //    * b\n                    //  * [c]  <-- this block should be merged with \"a\"\n                    // It should find \"a\" element to merge with:\n                    //  * a\n                    //    * b\n                    //    c\n                    firstElement = ListWalker.first(positionParent, {\n                        sameIndent: true,\n                        lowerIndent: true\n                    });\n                } else {\n                    firstElement = positionParent.previousSibling;\n                }\n            } else {\n                // In case of the forward merge there is no case as above, just merge with next sibling.\n                firstElement = positionParent;\n                lastElement = positionParent.nextSibling;\n            }\n        } else {\n            firstElement = selection.getFirstPosition().parent;\n            lastElement = selection.getLastPosition().parent;\n        }\n        return {\n            firstElement: firstElement,\n            lastElement: lastElement\n        };\n    }\n}\n\n/**\n * The document list split command that splits the list item at the selection.\n *\n * It is used by the {@link module:list/list~List list feature}.\n */ class ListSplitCommand extends Command {\n    /**\n\t * Whether list item should be split before or after the selected block.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be split before or after the selected block.\n\t */ constructor(editor, direction){\n        super(editor);\n        this._direction = direction;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Splits the list item at the selection.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */ execute() {\n        const editor = this.editor;\n        editor.model.change((writer)=>{\n            const changedBlocks = splitListItemBefore(this._getStartBlock(), writer);\n            this._fireAfterExecute(changedBlocks);\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const selection = this.editor.model.document.selection;\n        const block = this._getStartBlock();\n        return selection.isCollapsed && isListItemBlock(block) && !isFirstBlockOfListItem(block);\n    }\n    /**\n\t * Returns the model element that is the main focus of the command (according to the current selection and command direction).\n\t */ _getStartBlock() {\n        const doc = this.editor.model.document;\n        const positionParent = doc.selection.getFirstPosition().parent;\n        return this._direction == 'before' ? positionParent : positionParent.nextSibling;\n    }\n}\n\n/**\n * The list item bold integration plugin.\n */ class ListItemBoldIntegration extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListItemBoldIntegration';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const ListFormatting = editor.plugins.get('ListFormatting');\n        const listEditing = editor.plugins.get(ListEditing);\n        if (!editor.plugins.has('BoldEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        ListFormatting.registerFormatAttribute('bold', 'listItemBold');\n        // Register the downcast strategy in init() so that the attribute name is registered before the list editing\n        // registers its converters.\n        // This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'listItemBold',\n            setAttributeOnDowncast (writer, value, viewElement, options) {\n                if (value) {\n                    writer.addClass('ck-list-marker-bold', viewElement);\n                    // See: https://github.com/ckeditor/ckeditor5/issues/18790.\n                    if (env.isSafari && !(options && options.dataPipeline)) {\n                        writer.setStyle('--ck-content-list-marker-dummy-bold', '0', viewElement);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const model = editor.model;\n        if (!editor.plugins.has('BoldEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        model.schema.extend('$listItem', {\n            allowAttributes: 'listItemBold'\n        });\n        model.schema.setAttributeProperties('listItemBold', {\n            isFormatting: true\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            if (!item.getAttribute('listItemId')) {\n                return false;\n            }\n        }, 'listItemBold');\n        editor.conversion.for('upcast').attributeToAttribute({\n            model: 'listItemBold',\n            view: {\n                name: 'li',\n                classes: 'ck-list-marker-bold'\n            }\n        });\n    }\n}\n\n/**\n * The list item italic integration plugin.\n */ class ListItemItalicIntegration extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListItemItalicIntegration';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const ListFormatting = editor.plugins.get('ListFormatting');\n        const listEditing = editor.plugins.get(ListEditing);\n        if (!editor.plugins.has('ItalicEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        ListFormatting.registerFormatAttribute('italic', 'listItemItalic');\n        // Register the downcast strategy in init() so that the attribute name is registered before the list editing\n        // registers its converters.\n        // This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'listItemItalic',\n            setAttributeOnDowncast (writer, value, viewElement, options) {\n                if (value) {\n                    writer.addClass('ck-list-marker-italic', viewElement);\n                    // See: https://github.com/ckeditor/ckeditor5/issues/18790.\n                    if (env.isSafari && !(options && options.dataPipeline)) {\n                        writer.setStyle('--ck-content-list-marker-dummy-italic', '0', viewElement);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const model = editor.model;\n        if (!editor.plugins.has('ItalicEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        model.schema.extend('$listItem', {\n            allowAttributes: 'listItemItalic'\n        });\n        model.schema.setAttributeProperties('listItemItalic', {\n            isFormatting: true\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            if (!item.getAttribute('listItemId')) {\n                return false;\n            }\n        }, 'listItemItalic');\n        editor.conversion.for('upcast').attributeToAttribute({\n            model: 'listItemItalic',\n            view: {\n                name: 'li',\n                classes: 'ck-list-marker-italic'\n            }\n        });\n    }\n}\n\n/**\n * The list item font size integration plugin.\n */ class ListItemFontSizeIntegration extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListItemFontSizeIntegration';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const ListFormatting = editor.plugins.get('ListFormatting');\n        const listEditing = editor.plugins.get(ListEditing);\n        if (!editor.plugins.has('FontSizeEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        const normalizedFontSizeOptions = _normalizeFontSizeOptions(editor.config.get('fontSize.options'));\n        ListFormatting.registerFormatAttribute('fontSize', 'listItemFontSize');\n        // Register the downcast strategy in init() so that the attribute name is registered before the list editing\n        // registers its converters.\n        // This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'listItemFontSize',\n            setAttributeOnDowncast (writer, value, viewElement, options) {\n                if (value) {\n                    const fontSizeOption = normalizedFontSizeOptions.find((option)=>option.model == value);\n                    if (fontSizeOption && fontSizeOption.view && typeof fontSizeOption.view != 'string') {\n                        if (fontSizeOption.view.styles) {\n                            writer.addClass('ck-list-marker-font-size', viewElement);\n                            writer.setStyle('--ck-content-list-marker-font-size', fontSizeOption.view.styles['font-size'], viewElement);\n                        } else if (fontSizeOption.view.classes) {\n                            writer.addClass(`ck-list-marker-font-size-${value}`, viewElement);\n                            // See: https://github.com/ckeditor/ckeditor5/issues/18790.\n                            if (env.isSafari && !(options && options.dataPipeline)) {\n                                writer.setStyle('--ck-content-list-marker-dummy-font-size', '0', viewElement);\n                            }\n                        }\n                    } else {\n                        writer.addClass('ck-list-marker-font-size', viewElement);\n                        writer.setStyle('--ck-content-list-marker-font-size', value, viewElement);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const model = editor.model;\n        if (!editor.plugins.has('FontSizeEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        model.schema.extend('$listItem', {\n            allowAttributes: 'listItemFontSize'\n        });\n        model.schema.setAttributeProperties('listItemFontSize', {\n            isFormatting: true\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            if (!item.getAttribute('listItemId')) {\n                return false;\n            }\n        }, 'listItemFontSize');\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: 'listItemFontSize',\n                value: (viewElement)=>viewElement.getStyle('--ck-content-list-marker-font-size')\n            },\n            view: {\n                name: 'li',\n                classes: 'ck-list-marker-font-size',\n                styles: {\n                    '--ck-content-list-marker-font-size': /.*/\n                }\n            }\n        });\n        const fontSizeOptions = _normalizeFontSizeOptions(editor.config.get('fontSize.options'));\n        for (const option of fontSizeOptions){\n            if (option.model && option.view) {\n                editor.conversion.for('upcast').elementToAttribute({\n                    model: {\n                        key: 'listItemFontSize',\n                        value: option.model\n                    },\n                    view: {\n                        name: 'li',\n                        classes: `ck-list-marker-font-size-${option.model}`\n                    }\n                });\n            }\n        }\n    }\n}\n\n/**\n * The list item font color integration plugin.\n */ class ListItemFontColorIntegration extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListItemFontColorIntegration';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const ListFormatting = editor.plugins.get('ListFormatting');\n        const listEditing = editor.plugins.get(ListEditing);\n        if (!editor.plugins.has('FontColorEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        ListFormatting.registerFormatAttribute('fontColor', 'listItemFontColor');\n        // Register the downcast strategy in init() so that the attribute name is registered before the list editing\n        // registers its converters.\n        // This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'listItemFontColor',\n            setAttributeOnDowncast (writer, value, viewElement) {\n                if (value) {\n                    writer.addClass('ck-list-marker-color', viewElement);\n                    writer.setStyle('--ck-content-list-marker-color', value, viewElement);\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const model = editor.model;\n        if (!editor.plugins.has('FontColorEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        model.schema.extend('$listItem', {\n            allowAttributes: 'listItemFontColor'\n        });\n        model.schema.setAttributeProperties('listItemFontColor', {\n            isFormatting: true\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            if (!item.getAttribute('listItemId')) {\n                return false;\n            }\n        }, 'listItemFontColor');\n        editor.conversion.for('upcast').attributeToAttribute({\n            model: {\n                key: 'listItemFontColor',\n                value: (viewElement)=>{\n                    return viewElement.getStyle('--ck-content-list-marker-color');\n                }\n            },\n            view: {\n                name: 'li',\n                classes: 'ck-list-marker-color',\n                styles: {\n                    '--ck-content-list-marker-color': /.*/\n                }\n            }\n        });\n    }\n}\n\n/**\n * The list item font family integration plugin.\n */ class ListItemFontFamilyIntegration extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListItemFontFamilyIntegration';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const ListFormatting = editor.plugins.get('ListFormatting');\n        const listEditing = editor.plugins.get(ListEditing);\n        if (!editor.plugins.has('FontFamilyEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        ListFormatting.registerFormatAttribute('fontFamily', 'listItemFontFamily');\n        // Register the downcast strategy in init() so that the attribute name is registered before the list editing\n        // registers its converters.\n        // This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'listItemFontFamily',\n            setAttributeOnDowncast (writer, value, viewElement) {\n                // There is no need of removing the style because downcast strategies handles it automatically.\n                if (value) {\n                    writer.addClass('ck-list-marker-font-family', viewElement);\n                    writer.setStyle('--ck-content-list-marker-font-family', value, viewElement);\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const model = editor.model;\n        if (!editor.plugins.has('FontFamilyEditing') || !this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        model.schema.extend('$listItem', {\n            allowAttributes: 'listItemFontFamily'\n        });\n        model.schema.setAttributeProperties('listItemFontFamily', {\n            isFormatting: true\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            if (!item.getAttribute('listItemId')) {\n                return false;\n            }\n        }, 'listItemFontFamily');\n        editor.conversion.for('upcast').attributeToAttribute({\n            model: {\n                key: 'listItemFontFamily',\n                value: (viewElement)=>{\n                    return viewElement.getStyle('--ck-content-list-marker-font-family');\n                }\n            },\n            view: {\n                name: 'li',\n                classes: 'ck-list-marker-font-family',\n                styles: {\n                    '--ck-content-list-marker-font-family': /.*/\n                }\n            }\n        });\n    }\n}\n\n/**\n * The list formatting plugin.\n *\n * It enables integration with formatting plugins to style the list marker.\n * The list marker is styled based on the consistent formatting applied to the content of the list item.\n *\n * The list of supported formatting plugins includes:\n * * Font color.\n * * Font size.\n * * Font family.\n * * Bold.\n * * Italic.\n */ class ListFormatting extends Plugin {\n    /**\n\t * The list of loaded formatting.\n\t */ _loadedFormatting = {};\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListFormatting';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListItemBoldIntegration,\n            ListItemItalicIntegration,\n            ListItemFontSizeIntegration,\n            ListItemFontColorIntegration,\n            ListItemFontFamilyIntegration\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list.enableListItemMarkerFormatting', true);\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        if (!this.editor.config.get('list.enableListItemMarkerFormatting')) {\n            return;\n        }\n        this._registerPostfixerForListItemFormatting();\n    }\n    /**\n\t * Registers a postfixer that ensures that the list item formatting attribute is consistent with the formatting\n\t * applied to the content of the list item.\n\t */ _registerPostfixerForListItemFormatting() {\n        const model = this.editor.model;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            const modifiedListItems = new Set();\n            let returnValue = false;\n            for (const entry of changes){\n                if (entry.type === 'attribute') {\n                    if (entry.attributeKey == 'listItemId' || entry.attributeKey == 'listType' || this._isInlineOrSelectionFormatting(entry.attributeKey) || Object.values(this._loadedFormatting).includes(entry.attributeKey)) {\n                        if (isListItemBlock(entry.range.start.nodeAfter)) {\n                            modifiedListItems.add(entry.range.start.nodeAfter);\n                        } else if (isListItemBlock(entry.range.start.parent)) {\n                            modifiedListItems.add(entry.range.start.parent);\n                        }\n                    }\n                } else {\n                    if (isListItemBlock(entry.position.nodeAfter)) {\n                        modifiedListItems.add(entry.position.nodeAfter);\n                    }\n                    if (isListItemBlock(entry.position.nodeBefore)) {\n                        modifiedListItems.add(entry.position.nodeBefore);\n                    }\n                    if (isListItemBlock(entry.position.parent)) {\n                        modifiedListItems.add(entry.position.parent);\n                    }\n                    if (entry.type == 'insert' && entry.name != '$text') {\n                        const range = writer.createRangeIn(entry.position.nodeAfter);\n                        for (const item of range.getItems()){\n                            if (isListItemBlock(item)) {\n                                modifiedListItems.add(item);\n                            }\n                        }\n                    }\n                }\n            }\n            for (const listItem of modifiedListItems){\n                const formats = getListItemConsistentFormat(model, listItem, Object.keys(this._loadedFormatting));\n                for (const [formatAttributeName, formatValue] of Object.entries(formats)){\n                    const listItemFormatAttributeName = this._loadedFormatting[formatAttributeName];\n                    if (formatValue && setFormattingToListItem(writer, listItem, listItemFormatAttributeName, formatValue)) {\n                        returnValue = true;\n                    } else if (!formatValue && removeFormattingFromListItem(writer, listItem, listItemFormatAttributeName)) {\n                        returnValue = true;\n                    }\n                }\n            }\n            return returnValue;\n        });\n    }\n    /**\n\t * Registers an integration between a default attribute (e.g., `fontFamily`) and a new attribute\n\t * intended specifically for list item elements (e.g., `listItemFontFamily`).\n\t *\n\t * These attributes are later used by the postfixer logic to determine whether to add the new attribute\n\t * to the list item element, based on whether there is a consistent default formatting attribute\n\t * applied within its content.\n\t */ registerFormatAttribute(formatAttribute, listItemFormatAttribute) {\n        this._loadedFormatting[formatAttribute] = listItemFormatAttribute;\n    }\n    /**\n\t * Returns true if the given model attribute name is a supported inline formatting attribute.\n\t */ _isInlineOrSelectionFormatting(attributeKey) {\n        return attributeKey.replace(/^selection:/, '') in this._loadedFormatting;\n    }\n}\n/**\n * Returns the consistent format of the list item element.\n * If the list item contains multiple blocks, it checks only the first block.\n */ function getListItemConsistentFormat(model, listItem, attributeKeys) {\n    if (isFirstBlockOfListItem(listItem)) {\n        return getSingleListItemConsistentFormat(model, listItem, attributeKeys);\n    }\n    // Always the first block of the list item should be checked for consistent formatting.\n    const listItemBlocks = getAllListItemBlocks(listItem);\n    return getSingleListItemConsistentFormat(model, listItemBlocks[0], attributeKeys);\n}\n/**\n * Returns the consistent format of a single list item element.\n */ function getSingleListItemConsistentFormat(model, listItem, attributeKeys) {\n    // Only bulleted and numbered lists can have formatting (to-do lists are not supported).\n    // Do not check internals of limit elements (for example, do not check table cells).\n    if (!isNumberedOrBulletedList(listItem) || model.schema.isLimit(listItem)) {\n        return Object.fromEntries(attributeKeys.map((attributeKey)=>[\n                attributeKey\n            ]));\n    }\n    if (listItem.isEmpty) {\n        return Object.fromEntries(attributeKeys.map((attributeKey)=>[\n                attributeKey,\n                listItem.getAttribute(`selection:${attributeKey}`)\n            ]));\n    }\n    const attributesToCheck = new Set(attributeKeys);\n    const valuesMap = {};\n    const range = model.createRangeIn(listItem);\n    const walker = range.getWalker({\n        ignoreElementEnd: true\n    });\n    for (const { item } of walker){\n        for (const attributeKey of attributesToCheck){\n            if (model.schema.checkAttribute(item, attributeKey)) {\n                const formatAttribute = item.getAttribute(attributeKey);\n                if (formatAttribute === undefined) {\n                    attributesToCheck.delete(attributeKey);\n                    valuesMap[attributeKey] = undefined;\n                } else if (valuesMap[attributeKey] === undefined) {\n                    // First item inside a list item block.\n                    valuesMap[attributeKey] = formatAttribute;\n                } else if (valuesMap[attributeKey] !== formatAttribute) {\n                    // Following items in the same block of a list item.\n                    attributesToCheck.delete(attributeKey);\n                    valuesMap[attributeKey] = undefined;\n                }\n            } else if (!(attributeKey in valuesMap)) {\n                // Store it so a format would be removed when all items in the given list item does not allow that formatting.\n                valuesMap[attributeKey] = undefined;\n            }\n        }\n        // End early if all attributes have been checked and are inconsistent.\n        if (!attributesToCheck.size) {\n            break;\n        }\n        // Jump over inline limit elements as we expect only outside them to be the same formatting.\n        if (model.schema.isLimit(item)) {\n            walker.jumpTo(model.createPositionAfter(item));\n        }\n    }\n    return valuesMap;\n}\n/**\n * Adds the specified formatting attribute to the list item element.\n */ function setFormattingToListItem(writer, listItem, attributeKey, attributeValue) {\n    // Multi-block items should have consistent formatting.\n    const listItemBlocks = getAllListItemBlocks(listItem);\n    let wasChanged = false;\n    for (const listItem of listItemBlocks){\n        if (!listItem.hasAttribute(attributeKey) || listItem.getAttribute(attributeKey) !== attributeValue) {\n            writer.setAttribute(attributeKey, attributeValue, listItem);\n            wasChanged = true;\n        }\n    }\n    return wasChanged;\n}\n/**\n * Removes the specified formatting attribute from the list item element.\n */ function removeFormattingFromListItem(writer, listItem, attributeKey) {\n    // Multi-block items should have consistent formatting.\n    const listItemBlocks = getAllListItemBlocks(listItem);\n    let wasChanged = false;\n    for (const listItem of listItemBlocks){\n        if (listItem.hasAttribute(attributeKey)) {\n            writer.removeAttribute(attributeKey, listItem);\n            wasChanged = true;\n        }\n    }\n    return wasChanged;\n}\n/**\n * Checks if the given list type is a numbered or bulleted list.\n */ function isNumberedOrBulletedList(listItem) {\n    return [\n        'numbered',\n        'bulleted',\n        'customNumbered',\n        'customBulleted'\n    ].includes(listItem.getAttribute('listType'));\n}\n\n/**\n * A set of helpers related to document lists.\n */ class ListUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Expands the given list of selected blocks to include all the items of the lists they're in.\n\t *\n\t * @param blocks The list of selected blocks.\n\t */ expandListBlocksToCompleteList(blocks) {\n        return expandListBlocksToCompleteList(blocks);\n    }\n    /**\n\t * Check if the given block is the first in the list item.\n\t *\n\t * @param listBlock The list block element.\n\t */ isFirstBlockOfListItem(listBlock) {\n        return isFirstBlockOfListItem(listBlock);\n    }\n    /**\n\t * Returns true if the given model node is a list item block.\n\t *\n\t * @param node A model node.\n\t */ isListItemBlock(node) {\n        return isListItemBlock(node);\n    }\n    /**\n\t * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n\t *\n\t * @param blocks The list of selected blocks.\n\t * @param options.withNested Whether should include nested list items.\n\t */ expandListBlocksToCompleteItems(blocks, options = {}) {\n        return expandListBlocksToCompleteItems(blocks, options);\n    }\n    /**\n\t * Returns true if listType is of type `numbered` or `customNumbered`.\n\t */ isNumberedListType(listType) {\n        return isNumberedListType(listType);\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module list/list/utils/view\n */ /**\n * Checks if view element is a list type (ul or ol).\n *\n * @internal\n */ function isListView(viewElement) {\n    return viewElement.is('element', 'ol') || viewElement.is('element', 'ul');\n}\n/**\n * Checks if view element is a list item (li).\n *\n * @internal\n */ function isListItemView(viewElement) {\n    return viewElement.is('element', 'li');\n}\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n *\n * @internal\n */ function getIndent$1(listItem) {\n    let indent = 0;\n    let parent = listItem.parent;\n    while(parent){\n        // Each LI in the tree will result in an increased indent for HTML compliant lists.\n        if (isListItemView(parent)) {\n            indent++;\n        } else {\n            // If however the list is nested in other list we should check previous sibling of any of the list elements...\n            const previousSibling = parent.previousSibling;\n            // ...because the we might need increase its indent:\n            //\t\tbefore:                           fixed list:\n            //\t\tOL                                OL\n            //\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n            //\t\t|-> OL                                |-> OL\n            //\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n            if (previousSibling && isListItemView(previousSibling)) {\n                indent++;\n            }\n        }\n        parent = parent.parent;\n    }\n    return indent;\n}\n/**\n * Creates a list attribute element (ol or ul).\n *\n * @internal\n */ function createListElement(writer, indent, type, id = getViewElementIdForListType(type, indent)) {\n    // Negative priorities so that restricted editing attribute won't wrap lists.\n    return writer.createAttributeElement(getViewElementNameForListType(type), null, {\n        priority: 2 * indent / 100 - 100,\n        id\n    });\n}\n/**\n * Creates a list item attribute element (li).\n *\n * @internal\n */ function createListItemElement(writer, indent, id) {\n    // Negative priorities so that restricted editing attribute won't wrap list items.\n    return writer.createAttributeElement('li', null, {\n        priority: (2 * indent + 1) / 100 - 100,\n        id\n    });\n}\n/**\n * Returns a view element name for the given list type.\n *\n * @internal\n */ function getViewElementNameForListType(type) {\n    return type == 'numbered' || type == 'customNumbered' ? 'ol' : 'ul';\n}\n/**\n * Returns a view element ID for the given list type and indent.\n *\n * @internal\n */ function getViewElementIdForListType(type, indent) {\n    return `list-${type}-${indent}`;\n}\n\n/**\n * Based on the provided positions looks for the list head and stores it in the provided map.\n *\n * @internal\n * @param position The search starting position.\n * @param itemToListHead The map from list item element to the list head element.\n * @param visited A set of elements that were already visited.\n */ function findAndAddListHeadToMap(position, itemToListHead, visited) {\n    const previousNode = position.nodeBefore;\n    if (!isListItemBlock(previousNode)) {\n        const item = position.nodeAfter;\n        if (isListItemBlock(item)) {\n            itemToListHead.add(item);\n        }\n    } else {\n        let listHead = previousNode;\n        // Previously, the loop below was defined like this:\n        //\n        // \t\tfor ( { node: listHead } of new SiblingListBlocksIterator( listHead, 'backward' ) )\n        //\n        // Unfortunately, such a destructuring is incorrectly transpiled by Babel and the loop never ends.\n        // See: https://github.com/ckeditor/ckeditor5-react/issues/345.\n        for (const { node } of new SiblingListBlocksIterator(listHead, 'backward')){\n            listHead = node;\n            if (visited.has(listHead)) {\n                return;\n            }\n            visited.add(listHead);\n            if (itemToListHead.has(previousNode)) {\n                return;\n            }\n        }\n        itemToListHead.add(listHead);\n    }\n}\n/**\n * Scans the list starting from the given list head element and fixes items' indentation.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */ function fixListIndents(listNodes, writer) {\n    let maxIndent = 0; // Guards local sublist max indents that need fixing.\n    let prevIndent = -1; // Previous item indent.\n    let fixBy = null;\n    let applied = false;\n    for (const { node } of listNodes){\n        const itemIndent = node.getAttribute('listIndent');\n        if (itemIndent > maxIndent) {\n            let newIndent;\n            if (fixBy === null) {\n                fixBy = itemIndent - maxIndent;\n                newIndent = maxIndent;\n            } else {\n                if (fixBy > itemIndent) {\n                    fixBy = itemIndent;\n                }\n                newIndent = itemIndent - fixBy;\n            }\n            if (newIndent > prevIndent + 1) {\n                newIndent = prevIndent + 1;\n            }\n            writer.setAttribute('listIndent', newIndent, node);\n            applied = true;\n            prevIndent = newIndent;\n        } else {\n            fixBy = null;\n            maxIndent = itemIndent + 1;\n            prevIndent = itemIndent;\n        }\n    }\n    return applied;\n}\n/**\n * Scans the list starting from the given list head element and fixes items' types.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param seenIds The set of already known IDs.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */ function fixListItemIds(listNodes, seenIds, writer) {\n    const visited = new Set();\n    let applied = false;\n    for (const { node } of listNodes){\n        if (visited.has(node)) {\n            continue;\n        }\n        let listType = node.getAttribute('listType');\n        let listItemId = node.getAttribute('listItemId');\n        // Use a new ID if this one was spot earlier (even in other list).\n        if (seenIds.has(listItemId)) {\n            listItemId = ListItemUid.next();\n        }\n        seenIds.add(listItemId);\n        // Make sure that all items in a simple list have unique IDs.\n        if (node.is('element', 'listItem')) {\n            if (node.getAttribute('listItemId') != listItemId) {\n                writer.setAttribute('listItemId', listItemId, node);\n                applied = true;\n            }\n            continue;\n        }\n        for (const block of getListItemBlocks(node, {\n            direction: 'forward'\n        })){\n            visited.add(block);\n            // Use a new ID if a block of a bigger list item has different type.\n            if (block.getAttribute('listType') != listType) {\n                listItemId = ListItemUid.next();\n                listType = block.getAttribute('listType');\n            }\n            if (block.getAttribute('listItemId') != listItemId) {\n                writer.setAttribute('listItemId', listItemId, block);\n                applied = true;\n            }\n        }\n    }\n    return applied;\n}\n\n/**\n * Returns the upcast converter for list items. It's supposed to work after the block converters (content inside list items) are converted.\n *\n * @internal\n */ function listItemUpcastConverter() {\n    return (evt, data, conversionApi)=>{\n        const { writer, schema } = conversionApi;\n        if (!data.modelRange) {\n            return;\n        }\n        const items = Array.from(data.modelRange.getItems({\n            shallow: true\n        })).filter((item)=>schema.checkAttribute(item, 'listItemId'));\n        if (!items.length) {\n            return;\n        }\n        const listItemId = data.viewItem.getAttribute('data-list-item-id') || ListItemUid.next();\n        conversionApi.consumable.consume(data.viewItem, {\n            attributes: 'data-list-item-id'\n        });\n        const listIndent = getIndent$1(data.viewItem);\n        let listType = data.viewItem.parent && data.viewItem.parent.is('element', 'ol') ? 'numbered' : 'bulleted';\n        // Preserve list type if was already set (for example by to-do list feature).\n        const firstItemListType = items[0].getAttribute('listType');\n        if (firstItemListType) {\n            listType = firstItemListType;\n        }\n        const attributes = {\n            listItemId,\n            listIndent,\n            listType\n        };\n        for (const item of items){\n            // Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n            if (!item.hasAttribute('listItemId')) {\n                writer.setAttributes(attributes, item);\n            }\n        }\n        if (items.length > 1) {\n            // Make sure that list item that contain only nested list will preserve paragraph for itself:\n            //\t<ul>\n            //\t\t<li>\n            //\t\t\t<p></p>  <-- this one must be kept\n            //\t\t\t<ul>\n            //\t\t\t\t<li></li>\n            //\t\t\t</ul>\n            //\t\t</li>\n            //\t</ul>\n            if (items[1].getAttribute('listItemId') != attributes.listItemId) {\n                conversionApi.keepEmptyElement(items[0]);\n            }\n        }\n    };\n}\n/**\n * Returns a model document change:data event listener that triggers conversion of related items if needed.\n *\n * @internal\n * @param model The editor model.\n * @param editing The editing controller.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param listEditing The document list editing plugin.\n */ function reconvertItemsOnDataChange(model, editing, attributeNames, listEditing) {\n    return ()=>{\n        const changes = model.document.differ.getChanges();\n        const itemsToRefresh = [];\n        const itemToListHead = new Set();\n        const changedItems = new Set();\n        const visited = new Set();\n        for (const entry of changes){\n            if (entry.type == 'insert' && entry.name != '$text') {\n                findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n                // Insert of a non-list item.\n                if (!entry.attributes.has('listItemId')) {\n                    findAndAddListHeadToMap(entry.position.getShiftedBy(entry.length), itemToListHead, visited);\n                } else {\n                    changedItems.add(entry.position.nodeAfter);\n                }\n            } else if (entry.type == 'remove' && entry.attributes.has('listItemId')) {\n                findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n            } else if (entry.type == 'attribute') {\n                const item = entry.range.start.nodeAfter;\n                if (attributeNames.includes(entry.attributeKey)) {\n                    findAndAddListHeadToMap(entry.range.start, itemToListHead, visited);\n                    if (entry.attributeNewValue === null) {\n                        findAndAddListHeadToMap(entry.range.start.getShiftedBy(1), itemToListHead, visited);\n                        // Check if paragraph should be converted from bogus to plain paragraph.\n                        if (doesItemBlockRequiresRefresh(item)) {\n                            itemsToRefresh.push(item);\n                        }\n                    } else {\n                        changedItems.add(item);\n                    }\n                } else if (isListItemBlock(item)) {\n                    // Some other attribute was changed on the list item,\n                    // check if paragraph does not need to be converted to bogus or back.\n                    if (doesItemBlockRequiresRefresh(item)) {\n                        itemsToRefresh.push(item);\n                    }\n                }\n            }\n        }\n        for (const listHead of itemToListHead.values()){\n            itemsToRefresh.push(...collectListItemsToRefresh(listHead, changedItems));\n        }\n        for (const item of new Set(itemsToRefresh)){\n            editing.reconvertItem(item);\n        }\n    };\n    function collectListItemsToRefresh(listHead, changedItems) {\n        const itemsToRefresh = [];\n        const visited = new Set();\n        const stack = [];\n        for (const { node, previous } of new SiblingListBlocksIterator(listHead)){\n            if (visited.has(node)) {\n                continue;\n            }\n            const itemIndent = node.getAttribute('listIndent');\n            // Current node is at the lower indent so trim the stack.\n            if (previous && itemIndent < previous.getAttribute('listIndent')) {\n                stack.length = itemIndent + 1;\n            }\n            // Update the stack for the current indent level.\n            stack[itemIndent] = {\n                modelAttributes: Object.fromEntries(Array.from(node.getAttributes()).filter(([key])=>attributeNames.includes(key))),\n                modelElement: node\n            };\n            // Find all blocks of the current node.\n            const blocks = getListItemBlocks(node, {\n                direction: 'forward'\n            });\n            for (const block of blocks){\n                visited.add(block);\n                // Check if bogus vs plain paragraph needs refresh.\n                if (doesItemBlockRequiresRefresh(block, blocks)) {\n                    itemsToRefresh.push(block);\n                } else if (doesItemWrappingRequiresRefresh(block, stack, changedItems)) {\n                    itemsToRefresh.push(block);\n                }\n            }\n        }\n        return itemsToRefresh;\n    }\n    function doesItemBlockRequiresRefresh(item, blocks) {\n        const viewElement = editing.mapper.toViewElement(item);\n        if (!viewElement) {\n            return false;\n        }\n        const needsRefresh = listEditing.fire('checkElement', {\n            modelElement: item,\n            viewElement\n        });\n        if (needsRefresh) {\n            return true;\n        }\n        if (!item.is('element', 'paragraph') && !item.is('element', 'listItem')) {\n            return false;\n        }\n        const useBogus = shouldUseBogusParagraph(item, attributeNames, blocks);\n        if (useBogus && viewElement.is('element', 'p')) {\n            return true;\n        } else if (!useBogus && viewElement.is('element', 'span')) {\n            return true;\n        }\n        return false;\n    }\n    function doesItemWrappingRequiresRefresh(item, stack, changedItems) {\n        // Items directly affected by some \"change\" don't need a refresh, they will be converted by their own changes.\n        if (changedItems.has(item)) {\n            return false;\n        }\n        const viewElement = editing.mapper.toViewElement(item);\n        let indent = stack.length - 1;\n        // Traverse down the stack to the root to verify if all ULs, OLs, and LIs are as expected.\n        for(let element = viewElement.parent; !element.is('editableElement'); element = element.parent){\n            const isListItemElement = isListItemView(element);\n            const isListElement = isListView(element);\n            if (!isListElement && !isListItemElement) {\n                continue;\n            }\n            const eventName = `checkAttributes:${isListItemElement ? 'item' : 'list'}`;\n            const needsRefresh = listEditing.fire(eventName, {\n                viewElement: element,\n                modelAttributes: stack[indent].modelAttributes,\n                modelReferenceElement: stack[indent].modelElement\n            });\n            if (needsRefresh) {\n                break;\n            }\n            if (isListElement) {\n                indent--;\n                // Don't need to iterate further if we already know that the item is wrapped appropriately.\n                if (indent < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n/**\n * Returns the list item downcast converter.\n *\n * @internal\n * @param attributeNames A list of attribute names that should be converted if they are set.\n * @param strategies The strategies.\n * @param model The model.\n */ function listItemDowncastConverter(attributeNames, strategies, model, { dataPipeline } = {}) {\n    const consumer = createAttributesConsumer(attributeNames);\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper, consumable } = conversionApi;\n        const listItem = data.item;\n        if (!attributeNames.includes(data.attributeKey)) {\n            return;\n        }\n        // Test if attributes on the converted items are not consumed.\n        if (!consumer(listItem, consumable)) {\n            return;\n        }\n        const options = {\n            ...conversionApi.options,\n            dataPipeline\n        };\n        // Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n        // This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n        const viewElement = findMappedViewElement(listItem, mapper, model);\n        // Remove custom item marker.\n        removeCustomMarkerElements(viewElement, writer, mapper);\n        // Unwrap element from current list wrappers.\n        unwrapListItemBlock(viewElement, writer);\n        // Insert custom item marker.\n        const viewRange = insertCustomMarkerElements(listItem, viewElement, strategies, writer, options);\n        // Then wrap them with the new list wrappers (UL, OL, LI).\n        wrapListItemBlock(listItem, viewRange, strategies, writer, options);\n    };\n}\n/**\n * The 'remove' downcast converter for custom markers.\n *\n * @internal\n */ function listItemDowncastRemoveConverter(schema) {\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper } = conversionApi;\n        const elementName = evt.name.split(':')[1];\n        // Do not remove marker if the deleted element is some inline object inside paragraph.\n        // See https://github.com/ckeditor/ckeditor5-internal/issues/3680.\n        if (!schema.checkAttribute(elementName, 'listItemId')) {\n            return;\n        }\n        // Find the view range start position by mapping the model position at which the remove happened.\n        const viewStart = mapper.toViewPosition(data.position);\n        const modelEnd = data.position.getShiftedBy(data.length);\n        const viewEnd = mapper.toViewPosition(modelEnd, {\n            isPhantom: true\n        });\n        // Trim the range to remove in case some UI elements are on the view range boundaries.\n        const viewRange = writer.createRange(viewStart, viewEnd).getTrimmed();\n        // Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n        // This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n        const viewElement = viewRange.end.nodeBefore;\n        /* istanbul ignore next -- @preserve */ if (!viewElement) {\n            return;\n        }\n        // Remove custom item marker.\n        removeCustomMarkerElements(viewElement, writer, mapper);\n    };\n}\n/**\n * Returns the bogus paragraph view element creator. A bogus paragraph is used if a list item contains only a single block or nested list.\n *\n * @internal\n * @param attributeNames The list of all model list attributes (including registered strategies).\n */ function bogusParagraphCreator(attributeNames, { dataPipeline } = {}) {\n    return (modelElement, { writer })=>{\n        // Convert only if a bogus paragraph should be used.\n        if (!shouldUseBogusParagraph(modelElement, attributeNames)) {\n            return null;\n        }\n        if (!dataPipeline) {\n            return writer.createContainerElement('span', {\n                class: 'ck-list-bogus-paragraph'\n            });\n        }\n        // Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n        const viewElement = writer.createContainerElement('p');\n        writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n        return viewElement;\n    };\n}\n/**\n * Helper for mapping mode to view elements. It's using positions mapping instead of mapper.toViewElement( element )\n * to find outermost view element. This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n *\n * @internal\n * @param element The model element.\n * @param mapper The mapper instance.\n * @param model The model.\n */ function findMappedViewElement(element, mapper, model) {\n    const modelRange = model.createRangeOn(element);\n    const viewRange = mapper.toViewRange(modelRange).getTrimmed();\n    return viewRange.end.nodeBefore;\n}\n/**\n * The model to view custom position mapping for cases when marker is injected at the beginning of a block.\n *\n * @internal\n */ function createModelToViewPositionMapper(strategies, view) {\n    return (evt, data)=>{\n        if (data.modelPosition.offset > 0) {\n            return;\n        }\n        const positionParent = data.modelPosition.parent;\n        if (!isListItemBlock(positionParent)) {\n            return;\n        }\n        if (!strategies.some((strategy)=>strategy.scope == 'itemMarker' && strategy.canInjectMarkerIntoElement && strategy.canInjectMarkerIntoElement(positionParent))) {\n            return;\n        }\n        const viewElement = data.mapper.toViewElement(positionParent);\n        const viewRange = view.createRangeIn(viewElement);\n        const viewWalker = viewRange.getWalker();\n        let positionAfterLastMarker = viewRange.start;\n        for (const { item } of viewWalker){\n            // Walk only over the non-mapped elements (UIElements, ViewAttributeElements, $text, or any other element without mapping).\n            if (item.is('element') && data.mapper.toModelElement(item) || item.is('$textProxy')) {\n                break;\n            }\n            if (item.is('element') && item.getCustomProperty('listItemMarker')) {\n                positionAfterLastMarker = view.createPositionAfter(item);\n                // Jump over the content of the marker (this is not needed for UIElement but required for other element types).\n                viewWalker.skip(({ previousPosition })=>!previousPosition.isEqual(positionAfterLastMarker));\n            }\n        }\n        data.viewPosition = positionAfterLastMarker;\n    };\n}\n/**\n * Removes a custom marker elements and item wrappers related to that marker.\n */ function removeCustomMarkerElements(viewElement, viewWriter, mapper) {\n    // Remove item wrapper.\n    while(viewElement.parent.is('attributeElement') && viewElement.parent.getCustomProperty('listItemWrapper')){\n        viewWriter.unwrap(viewWriter.createRangeOn(viewElement), viewElement.parent);\n    }\n    // Remove custom item markers.\n    const markersToRemove = [];\n    // Markers before a block.\n    collectMarkersToRemove(viewWriter.createPositionBefore(viewElement).getWalker({\n        direction: 'backward'\n    }));\n    // Markers inside a block.\n    collectMarkersToRemove(viewWriter.createRangeIn(viewElement).getWalker());\n    for (const marker of markersToRemove){\n        viewWriter.remove(marker);\n    }\n    function collectMarkersToRemove(viewWalker) {\n        for (const { item } of viewWalker){\n            // Walk only over the non-mapped elements (UIElements, ViewAttributeElements, $text, or any other element without mapping).\n            if (item.is('element') && mapper.toModelElement(item)) {\n                break;\n            }\n            if (item.is('element') && item.getCustomProperty('listItemMarker')) {\n                markersToRemove.push(item);\n            }\n        }\n    }\n}\n/**\n * Inserts a custom marker elements and wraps first block of a list item if marker requires it.\n */ function insertCustomMarkerElements(listItem, viewElement, strategies, writer, { dataPipeline }) {\n    let viewRange = writer.createRangeOn(viewElement);\n    // Marker can be inserted only before the first block of a list item.\n    if (!isFirstBlockOfListItem(listItem)) {\n        return viewRange;\n    }\n    for (const strategy of strategies){\n        if (strategy.scope != 'itemMarker') {\n            continue;\n        }\n        // Create the custom marker element and inject it before the first block of the list item.\n        const markerElement = strategy.createElement(writer, listItem, {\n            dataPipeline\n        });\n        if (!markerElement) {\n            continue;\n        }\n        writer.setCustomProperty('listItemMarker', true, markerElement);\n        if (strategy.canInjectMarkerIntoElement && strategy.canInjectMarkerIntoElement(listItem)) {\n            writer.insert(writer.createPositionAt(viewElement, 0), markerElement);\n        } else {\n            writer.insert(viewRange.start, markerElement);\n            viewRange = writer.createRange(writer.createPositionBefore(markerElement), writer.createPositionAfter(viewElement));\n        }\n        // Wrap the marker and optionally the first block with an attribute element (label for to-do lists).\n        if (!strategy.createWrapperElement || !strategy.canWrapElement) {\n            continue;\n        }\n        const wrapper = strategy.createWrapperElement(writer, listItem, {\n            dataPipeline\n        });\n        writer.setCustomProperty('listItemWrapper', true, wrapper);\n        // The whole block can be wrapped...\n        if (strategy.canWrapElement(listItem)) {\n            viewRange = writer.wrap(viewRange, wrapper);\n        } else {\n            // ... or only the marker element (if the block is downcasted to heading or block widget).\n            viewRange = writer.wrap(writer.createRangeOn(markerElement), wrapper);\n            viewRange = writer.createRange(viewRange.start, writer.createPositionAfter(viewElement));\n        }\n    }\n    return viewRange;\n}\n/**\n * Unwraps all ol, ul, and li attribute elements that are wrapping the provided view element.\n */ function unwrapListItemBlock(viewElement, viewWriter) {\n    let attributeElement = viewElement.parent;\n    while(attributeElement.is('attributeElement') && [\n        'ul',\n        'ol',\n        'li'\n    ].includes(attributeElement.name)){\n        const parentElement = attributeElement.parent;\n        viewWriter.unwrap(viewWriter.createRangeOn(viewElement), attributeElement);\n        attributeElement = parentElement;\n    }\n}\n/**\n * Wraps the given list item with appropriate attribute elements for ul, ol, and li.\n */ function wrapListItemBlock(listItem, viewRange, strategies, writer, options) {\n    if (!listItem.hasAttribute('listIndent')) {\n        return;\n    }\n    const listItemIndent = listItem.getAttribute('listIndent');\n    let currentListItem = listItem;\n    for(let indent = listItemIndent; indent >= 0; indent--){\n        const listItemViewElement = createListItemElement(writer, indent, currentListItem.getAttribute('listItemId'));\n        const listViewElement = createListElement(writer, indent, currentListItem.getAttribute('listType'));\n        for (const strategy of strategies){\n            if ((strategy.scope == 'list' || strategy.scope == 'item') && currentListItem.hasAttribute(strategy.attributeName)) {\n                strategy.setAttributeOnDowncast(writer, currentListItem.getAttribute(strategy.attributeName), strategy.scope == 'list' ? listViewElement : listItemViewElement, options);\n            }\n        }\n        viewRange = writer.wrap(viewRange, listItemViewElement);\n        viewRange = writer.wrap(viewRange, listViewElement);\n        if (indent == 0) {\n            break;\n        }\n        currentListItem = ListWalker.first(currentListItem, {\n            lowerIndent: true\n        });\n        // There is no list item with lower indent, this means this is a document fragment containing\n        // only a part of nested list (like copy to clipboard) so we don't need to try to wrap it further.\n        if (!currentListItem) {\n            break;\n        }\n    }\n}\n// Returns the function that is responsible for consuming attributes that are set on the model node.\nfunction createAttributesConsumer(attributeNames) {\n    return (node, consumable)=>{\n        const events = [];\n        // Collect all set attributes that are triggering conversion.\n        for (const attributeName of attributeNames){\n            if (node.hasAttribute(attributeName)) {\n                events.push(`attribute:${attributeName}`);\n            }\n        }\n        if (!events.every((event)=>consumable.test(node, event) !== false)) {\n            return false;\n        }\n        events.forEach((event)=>consumable.consume(node, event));\n        return true;\n    };\n}\n// Whether the given item should be rendered as a bogus paragraph.\nfunction shouldUseBogusParagraph(item, attributeNames, blocks = getAllListItemBlocks(item)) {\n    if (!isListItemBlock(item)) {\n        return false;\n    }\n    for (const attributeKey of item.getAttributeKeys()){\n        // Ignore selection attributes stored on block elements.\n        if (attributeKey.startsWith('selection:') || attributeKey == 'htmlEmptyBlock') {\n            continue;\n        }\n        // Don't use bogus paragraph if there are attributes from other features.\n        if (!attributeNames.includes(attributeKey)) {\n            return false;\n        }\n    }\n    return blocks.length < 2;\n}\n\n/**\n * A list of base list model attributes.\n */ const LIST_BASE_ATTRIBUTES = [\n    'listType',\n    'listIndent',\n    'listItemId'\n];\n/**\n * The editing part of the document-list feature. It handles creating, editing and removing lists and list items.\n */ class ListEditing extends Plugin {\n    /**\n\t * The list of registered downcast strategies.\n\t */ _downcastStrategies = [];\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete,\n            ListUtils,\n            ClipboardPipeline,\n            ListFormatting\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list.multiBlock', true);\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const multiBlock = editor.config.get('list.multiBlock');\n        if (editor.plugins.has('LegacyListEditing')) {\n            /**\n\t\t\t * The `List` feature cannot be loaded together with the `LegacyList` plugin.\n\t\t\t *\n\t\t\t * @error list-feature-conflict\n\t\t\t * @param {string} conflictPlugin Name of the plugin.\n\t\t\t */ throw new CKEditorError('list-feature-conflict', this, {\n                conflictPlugin: 'LegacyListEditing'\n            });\n        }\n        model.schema.register('$listItem', {\n            allowAttributes: LIST_BASE_ATTRIBUTES\n        });\n        if (multiBlock) {\n            model.schema.extend('$container', {\n                allowAttributesOf: '$listItem'\n            });\n            model.schema.extend('$block', {\n                allowAttributesOf: '$listItem'\n            });\n            model.schema.extend('$blockObject', {\n                allowAttributesOf: '$listItem'\n            });\n        } else {\n            model.schema.register('listItem', {\n                inheritAllFrom: '$block',\n                allowAttributesOf: '$listItem'\n            });\n        }\n        for (const attribute of LIST_BASE_ATTRIBUTES){\n            model.schema.setAttributeProperties(attribute, {\n                copyOnReplace: true\n            });\n        }\n        // Register commands.\n        editor.commands.add('numberedList', new ListCommand(editor, 'numbered'));\n        editor.commands.add('bulletedList', new ListCommand(editor, 'bulleted'));\n        editor.commands.add('customNumberedList', new ListCommand(editor, 'customNumbered', {\n            multiLevel: true\n        }));\n        editor.commands.add('customBulletedList', new ListCommand(editor, 'customBulleted', {\n            multiLevel: true\n        }));\n        editor.commands.add('indentList', new ListIndentCommand(editor, 'forward'));\n        editor.commands.add('outdentList', new ListIndentCommand(editor, 'backward'));\n        editor.commands.add('splitListItemBefore', new ListSplitCommand(editor, 'before'));\n        editor.commands.add('splitListItemAfter', new ListSplitCommand(editor, 'after'));\n        if (multiBlock) {\n            editor.commands.add('mergeListItemBackward', new ListMergeCommand(editor, 'backward'));\n            editor.commands.add('mergeListItemForward', new ListMergeCommand(editor, 'forward'));\n        }\n        this._setupDeleteIntegration();\n        this._setupEnterIntegration();\n        this._setupTabIntegration();\n        this._setupClipboardIntegration();\n        this._setupAccessibilityIntegration();\n        this._setupListItemIdConversionStrategy();\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const commands = editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            // Priority is high due to integration with `IndentBlock` plugin. We want to indent list first and if it's not possible\n            // user can indent content with `IndentBlock` plugin.\n            indent.registerChildCommand(commands.get('indentList'), {\n                priority: 'high'\n            });\n        }\n        if (outdent) {\n            // Priority is lowest due to integration with `IndentBlock` and `IndentCode` plugins.\n            // First we want to allow user to outdent all indendations from other features then he can oudent list item.\n            outdent.registerChildCommand(commands.get('outdentList'), {\n                priority: 'lowest'\n            });\n        }\n        // Register conversion and model post-fixer after other plugins had a chance to register their attribute strategies.\n        this._setupModelPostFixing();\n        this._setupConversion();\n    }\n    /**\n\t * Registers a downcast strategy.\n\t *\n\t * **Note**: Strategies must be registered in the `Plugin#init()` phase so that it can be applied\n\t * in the `ListEditing#afterInit()`.\n\t *\n\t * @param strategy The downcast strategy to register.\n\t */ registerDowncastStrategy(strategy) {\n        this._downcastStrategies.push(strategy);\n    }\n    /**\n\t * Returns list of model attribute names that should affect downcast conversion.\n\t */ getListAttributeNames() {\n        return [\n            ...LIST_BASE_ATTRIBUTES,\n            ...this._downcastStrategies.map((strategy)=>strategy.attributeName)\n        ];\n    }\n    /**\n\t * Attaches the listener to the {@link module:engine/view/document~ViewDocument#event:delete} event and handles backspace/delete\n\t * keys in and around document lists.\n\t */ _setupDeleteIntegration() {\n        const editor = this.editor;\n        const mergeBackwardCommand = editor.commands.get('mergeListItemBackward');\n        const mergeForwardCommand = editor.commands.get('mergeListItemForward');\n        this.listenTo(editor.editing.view.document, 'delete', (evt, data)=>{\n            const selection = editor.model.document.selection;\n            // Let the Widget plugin take care of block widgets while deleting (https://github.com/ckeditor/ckeditor5/issues/11346).\n            if (getSelectedBlockObject(editor.model)) {\n                return;\n            }\n            editor.model.change(()=>{\n                const firstPosition = selection.getFirstPosition();\n                if (selection.isCollapsed && data.direction == 'backward') {\n                    if (!firstPosition.isAtStart) {\n                        return;\n                    }\n                    const positionParent = firstPosition.parent;\n                    if (!isListItemBlock(positionParent)) {\n                        return;\n                    }\n                    const previousBlock = ListWalker.first(positionParent, {\n                        sameAttributes: 'listType',\n                        sameIndent: true\n                    });\n                    // Outdent the first block of a first list item.\n                    if (!previousBlock && positionParent.getAttribute('listIndent') === 0) {\n                        if (!isLastBlockOfListItem(positionParent)) {\n                            editor.execute('splitListItemAfter');\n                        }\n                        editor.execute('outdentList');\n                    } else {\n                        if (!mergeBackwardCommand || !mergeBackwardCommand.isEnabled) {\n                            return;\n                        }\n                        mergeBackwardCommand.execute({\n                            shouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel(editor.model, 'backward')\n                        });\n                    }\n                    data.preventDefault();\n                    evt.stop();\n                } else {\n                    // Collapsed selection should trigger forward merging only if at the end of a block.\n                    if (selection.isCollapsed && !selection.getLastPosition().isAtEnd) {\n                        return;\n                    }\n                    if (!mergeForwardCommand || !mergeForwardCommand.isEnabled) {\n                        return;\n                    }\n                    mergeForwardCommand.execute({\n                        shouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel(editor.model, 'forward')\n                    });\n                    data.preventDefault();\n                    evt.stop();\n                }\n            });\n        }, {\n            context: 'li'\n        });\n    }\n    /**\n\t * Attaches a listener to the {@link module:engine/view/document~ViewDocument#event:enter} event and handles enter key press\n\t * in document lists.\n\t */ _setupEnterIntegration() {\n        const editor = this.editor;\n        const model = editor.model;\n        const commands = editor.commands;\n        const enterCommand = commands.get('enter');\n        // Overwrite the default Enter key behavior: outdent or split the list in certain cases.\n        this.listenTo(editor.editing.view.document, 'enter', (evt, data)=>{\n            const doc = model.document;\n            const positionParent = doc.selection.getFirstPosition().parent;\n            if (doc.selection.isCollapsed && isListItemBlock(positionParent) && positionParent.isEmpty && !data.isSoft) {\n                const isFirstBlock = isFirstBlockOfListItem(positionParent);\n                const isLastBlock = isLastBlockOfListItem(positionParent);\n                // * a      →      * a\n                // * []     →      []\n                if (isFirstBlock && isLastBlock) {\n                    editor.execute('outdentList');\n                    data.preventDefault();\n                    evt.stop();\n                } else if (isFirstBlock && !isLastBlock) {\n                    editor.execute('splitListItemAfter');\n                    data.preventDefault();\n                    evt.stop();\n                } else if (isLastBlock) {\n                    editor.execute('splitListItemBefore');\n                    data.preventDefault();\n                    evt.stop();\n                }\n            }\n        }, {\n            context: 'li'\n        });\n        // In some cases, after the default block splitting, we want to modify the new block to become a new list item\n        // instead of an additional block in the same list item.\n        this.listenTo(enterCommand, 'afterExecute', ()=>{\n            const splitCommand = commands.get('splitListItemBefore');\n            // The command has not refreshed because the change block related to EnterCommand#execute() is not over yet.\n            // Let's keep it up to date and take advantage of ListSplitCommand#isEnabled.\n            splitCommand.refresh();\n            if (!splitCommand.isEnabled) {\n                return;\n            }\n            const doc = editor.model.document;\n            const positionParent = doc.selection.getLastPosition().parent;\n            const listItemBlocks = getAllListItemBlocks(positionParent);\n            // Keep in mind this split happens after the default enter handler was executed. For instance:\n            //\n            // │       Initial state       │    After default enter    │   Here in #afterExecute   │\n            // ├───────────────────────────┼───────────────────────────┼───────────────────────────┤\n            // │          * a[]            │           * a             │           * a             │\n            // │                           │             []            │           * []            │\n            if (listItemBlocks.length === 2) {\n                splitCommand.execute();\n            }\n        });\n    }\n    /**\n\t * Attaches a listener to the {@link module:engine/view/document~ViewDocument#event:tab} event and handles tab key and tab+shift keys\n\t * presses in document lists.\n\t */ _setupTabIntegration() {\n        const editor = this.editor;\n        this.listenTo(editor.editing.view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentList' : 'indentList';\n            const command = this.editor.commands.get(commandName);\n            if (command.isEnabled) {\n                editor.execute(commandName);\n                data.stopPropagation();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'li'\n        });\n    }\n    /**\n\t * Registers the conversion helpers for the document-list feature.\n\t */ _setupConversion() {\n        const editor = this.editor;\n        const model = editor.model;\n        const attributeNames = this.getListAttributeNames();\n        const multiBlock = editor.config.get('list.multiBlock');\n        const elementName = multiBlock ? 'paragraph' : 'listItem';\n        editor.conversion.for('upcast')// Convert <li> to a generic paragraph (or listItem element) so the content of <li> is always inside a block.\n        // Setting the listType attribute to let other features (to-do list) know that this is part of a list item.\n        // This is also important to properly handle simple lists so that paragraphs inside a list item won't break the list item.\n        // <li>  <-- converted to listItem\n        //   <p></p> <-- should be also converted to listItem, so it won't split and replace the listItem generated from the above li.\n        .elementToElement({\n            view: 'li',\n            model: (viewElement, { writer })=>writer.createElement(elementName, {\n                    listType: ''\n                })\n        })// Convert paragraph to the list block (without list type defined yet).\n        // This is important to properly handle bogus paragraph and to-do lists.\n        // Most of the time the bogus paragraph should not appear in the data of to-do list,\n        // but if there is any marker or an attribute on the paragraph then the bogus paragraph\n        // is preserved in the data, and we need to be able to detect this case.\n        .elementToElement({\n            view: 'p',\n            model: (viewElement, { writer })=>{\n                if (viewElement.parent && viewElement.parent.is('element', 'li')) {\n                    return writer.createElement(elementName, {\n                        listType: ''\n                    });\n                }\n                return null;\n            },\n            converterPriority: 'high'\n        }).add((dispatcher)=>{\n            dispatcher.on('element:li', listItemUpcastConverter());\n        });\n        if (!multiBlock) {\n            editor.conversion.for('downcast').elementToElement({\n                model: 'listItem',\n                view: 'p'\n            });\n        }\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: elementName,\n            view: bogusParagraphCreator(attributeNames),\n            converterPriority: 'high'\n        }).add((dispatcher)=>{\n            dispatcher.on('attribute', listItemDowncastConverter(attributeNames, this._downcastStrategies, model));\n            dispatcher.on('remove', listItemDowncastRemoveConverter(model.schema));\n        });\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: elementName,\n            view: bogusParagraphCreator(attributeNames, {\n                dataPipeline: true\n            }),\n            converterPriority: 'high'\n        }).add((dispatcher)=>{\n            dispatcher.on('attribute', listItemDowncastConverter(attributeNames, this._downcastStrategies, model, {\n                dataPipeline: true\n            }));\n        });\n        const modelToViewPositionMapper = createModelToViewPositionMapper(this._downcastStrategies, editor.editing.view);\n        editor.editing.mapper.on('modelToViewPosition', modelToViewPositionMapper);\n        editor.data.mapper.on('modelToViewPosition', modelToViewPositionMapper);\n        this.listenTo(model.document, 'change:data', reconvertItemsOnDataChange(model, editor.editing, attributeNames, this), {\n            priority: 'high'\n        });\n        // For LI verify if an ID of the attribute element is correct.\n        this.on('checkAttributes:item', (evt, { viewElement, modelAttributes })=>{\n            if (viewElement.id != modelAttributes.listItemId) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n        // For UL and OL check if the name and ID of element is correct.\n        this.on('checkAttributes:list', (evt, { viewElement, modelAttributes })=>{\n            if (viewElement.name != getViewElementNameForListType(modelAttributes.listType) || viewElement.id != getViewElementIdForListType(modelAttributes.listType, modelAttributes.listIndent)) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n    }\n    /**\n\t * Registers model post-fixers.\n\t */ _setupModelPostFixing() {\n        const model = this.editor.model;\n        const attributeNames = this.getListAttributeNames();\n        // Register list fixing.\n        // First the low level handler.\n        model.document.registerPostFixer((writer)=>modelChangePostFixer$1(model, writer, attributeNames, this));\n        // Then the callbacks for the specific lists.\n        // The indentation fixing must be the first one...\n        this.on('postFixer', (evt, { listNodes, writer })=>{\n            evt.return = fixListIndents(listNodes, writer) || evt.return;\n        }, {\n            priority: 'high'\n        });\n        // ...then the item ids... and after that other fixers that rely on the correct indentation and ids.\n        this.on('postFixer', (evt, { listNodes, writer, seenIds })=>{\n            evt.return = fixListItemIds(listNodes, seenIds, writer) || evt.return;\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Integrates the feature with the clipboard via {@link module:engine/model/model~Model#insertContent} and\n\t * {@link module:engine/model/model~Model#getSelectedContent}.\n\t */ _setupClipboardIntegration() {\n        const model = this.editor.model;\n        const clipboardPipeline = this.editor.plugins.get('ClipboardPipeline');\n        this.listenTo(model, 'insertContent', createModelIndentPasteFixer(model), {\n            priority: 'high'\n        });\n        // To enhance the UX, the editor should not copy list attributes to the clipboard if the selection\n        // started and ended in the same list item.\n        //\n        // If the selection was enclosed in a single list item, there is a good chance the user did not want it\n        // copied as a list item but plain blocks.\n        //\n        // This avoids pasting orphaned list items instead of paragraphs, for instance, straight into the root.\n        //\n        //\t                       ┌─────────────────────┬───────────────────┐\n        //\t                       │ Selection           │ Clipboard content │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ [* <Widget />]      │ <Widget />        │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ [* Foo]             │ Foo               │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ * Foo [bar] baz     │ bar               │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ * Fo[o              │ o                 │\n        //\t                       │   ba]r              │ ba                │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ * Fo[o              │ * o               │\n        //\t                       │ * ba]r              │ * ba              │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ [* Foo              │ * Foo             │\n        //\t                       │  * bar]             │ * bar             │\n        //\t                       └─────────────────────┴───────────────────┘\n        //\n        // See https://github.com/ckeditor/ckeditor5/issues/11608, https://github.com/ckeditor/ckeditor5/issues/14969\n        this.listenTo(clipboardPipeline, 'outputTransformation', (evt, data)=>{\n            model.change((writer)=>{\n                // Remove last block if it's empty.\n                const allContentChildren = Array.from(data.content.getChildren());\n                const lastItem = allContentChildren[allContentChildren.length - 1];\n                if (allContentChildren.length > 1 && lastItem.is('element') && lastItem.isEmpty) {\n                    const contentChildrenExceptLastItem = allContentChildren.slice(0, -1);\n                    if (contentChildrenExceptLastItem.every(isListItemBlock)) {\n                        writer.remove(lastItem);\n                    }\n                }\n                // Copy/cut only content of a list item (for drag-drop move the whole list item).\n                if (data.method == 'copy' || data.method == 'cut') {\n                    const allChildren = Array.from(data.content.getChildren());\n                    const isSingleListItemSelected = isSingleListItem(allChildren);\n                    if (isSingleListItemSelected) {\n                        removeListAttributes(allChildren, writer);\n                    }\n                }\n            });\n        });\n    }\n    /**\n\t * Informs editor accessibility features about keystrokes brought by the plugin.\n\t */ _setupAccessibilityIntegration() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'list',\n            label: t('Keystrokes that can be used in a list'),\n            keystrokes: [\n                {\n                    label: t('Increase list item indent'),\n                    keystroke: 'Tab'\n                },\n                {\n                    label: t('Decrease list item indent'),\n                    keystroke: 'Shift+Tab'\n                }\n            ]\n        });\n    }\n    /**\n\t * Convert `listItemId` attribute to `data-list-item-id` attribute on the view element in both downcast pipelines.\n\t */ _setupListItemIdConversionStrategy() {\n        this.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'listItemId',\n            setAttributeOnDowncast (writer, attributeValue, viewElement, options) {\n                if (options && (options.skipListItemIds || options.isClipboardPipeline)) {\n                    return;\n                }\n                writer.setAttribute('data-list-item-id', attributeValue, viewElement);\n            }\n        });\n    }\n}\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states (invalid `listItemId` and `listIndent` values).\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=1>Item 2</paragraph>   <--- this is removed.\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=1>Item 3</paragraph>   <--- note that indent got post-fixed.\n * ```\n *\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param ListEditing The document list editing plugin.\n * @returns `true` if any change has been applied, `false` otherwise.\n */ function modelChangePostFixer$1(model, writer, attributeNames, listEditing) {\n    const changes = model.document.differ.getChanges();\n    const visited = new Set();\n    const itemToListHead = new Set();\n    const multiBlock = listEditing.editor.config.get('list.multiBlock');\n    let applied = false;\n    for (const entry of changes){\n        if (entry.type == 'insert' && entry.name != '$text') {\n            const item = entry.position.nodeAfter;\n            // Remove attributes in case of renamed element.\n            if (!model.schema.checkAttribute(item, 'listItemId')) {\n                for (const attributeName of Array.from(item.getAttributeKeys())){\n                    if (attributeNames.includes(attributeName)) {\n                        writer.removeAttribute(attributeName, item);\n                        applied = true;\n                    }\n                }\n            }\n            findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n            // Insert of a non-list item - check if there is a list after it.\n            if (!entry.attributes.has('listItemId')) {\n                findAndAddListHeadToMap(entry.position.getShiftedBy(entry.length), itemToListHead, visited);\n            }\n            // Check if there is no nested list.\n            for (const { item: innerItem, previousPosition } of model.createRangeIn(item)){\n                if (isListItemBlock(innerItem)) {\n                    findAndAddListHeadToMap(previousPosition, itemToListHead, visited);\n                }\n            }\n        } else if (entry.type == 'remove') {\n            findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n        } else if (entry.type == 'attribute' && attributeNames.includes(entry.attributeKey)) {\n            findAndAddListHeadToMap(entry.range.start, itemToListHead, visited);\n            if (entry.attributeNewValue === null) {\n                findAndAddListHeadToMap(entry.range.start.getShiftedBy(1), itemToListHead, visited);\n            }\n        }\n        // Make sure that there is no left over listItem element without attributes or a block with list attributes that is not a listItem.\n        if (!multiBlock && entry.type == 'attribute' && LIST_BASE_ATTRIBUTES.includes(entry.attributeKey)) {\n            const element = entry.range.start.nodeAfter;\n            if (entry.attributeNewValue === null && element && element.is('element', 'listItem')) {\n                writer.rename(element, 'paragraph');\n                applied = true;\n            } else if (entry.attributeOldValue === null && element && element.is('element') && element.name != 'listItem') {\n                writer.rename(element, 'listItem');\n                applied = true;\n            }\n        }\n    }\n    // Make sure that IDs are not shared by split list.\n    const seenIds = new Set();\n    for (const listHead of itemToListHead.values()){\n        applied = listEditing.fire('postFixer', {\n            listNodes: new ListBlocksIterable(listHead),\n            listHead,\n            writer,\n            seenIds\n        }) || applied;\n    }\n    return applied;\n}\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">B^</paragraph>\n * // At ^ paste:  <paragraph listType=\"numbered\" listItemId=\"x\" listIndent=\"0\">X</paragraph>\n * //              <paragraph listType=\"numbered\" listItemId=\"y\" listIndent=\"1\">Y</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">BX</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"y\" listIndent=\"2\">Y/paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n */ function createModelIndentPasteFixer(model) {\n    return (evt, [content, selectable])=>{\n        const items = content.is('documentFragment') ? Array.from(content.getChildren()) : [\n            content\n        ];\n        if (!items.length) {\n            return;\n        }\n        const selection = selectable ? model.createSelection(selectable) : model.document.selection;\n        const position = selection.getFirstPosition();\n        // Get a reference list item. Attributes of the inserted list items will be fixed according to that item.\n        let refItem;\n        if (isListItemBlock(position.parent)) {\n            refItem = position.parent;\n        } else if (isListItemBlock(position.nodeBefore) && isListItemBlock(position.nodeAfter)) {\n            refItem = position.nodeBefore;\n        } else {\n            return; // Content is not copied into a list.\n        }\n        model.change((writer)=>{\n            const refType = refItem.getAttribute('listType');\n            const refIndent = refItem.getAttribute('listIndent');\n            const firstElementIndent = items[0].getAttribute('listIndent') || 0;\n            const indentDiff = Math.max(refIndent - firstElementIndent, 0);\n            for (const item of items){\n                const isListItem = isListItemBlock(item);\n                if (refItem.is('element', 'listItem') && item.is('element', 'paragraph')) {\n                    /**\n\t\t\t\t\t * When paragraphs or a plain text list is pasted into a simple list, convert\n\t\t\t\t\t * the `<paragraphs>' to `<listItem>' to avoid breaking the target list.\n\t\t\t\t\t *\n\t\t\t\t\t * See https://github.com/ckeditor/ckeditor5/issues/13826.\n\t\t\t\t\t */ writer.rename(item, 'listItem');\n                }\n                writer.setAttributes({\n                    listIndent: (isListItem ? item.getAttribute('listIndent') : 0) + indentDiff,\n                    listItemId: isListItem ? item.getAttribute('listItemId') : ListItemUid.next(),\n                    listType: refType\n                }, item);\n            }\n        });\n    };\n}\n/**\n * Decides whether the merge should be accompanied by the model's `deleteContent()`, for instance, to get rid of the inline\n * content in the selection or take advantage of the heuristics in `deleteContent()` that helps convert lists into paragraphs\n * in certain cases.\n */ function shouldMergeOnBlocksContentLevel(model, direction) {\n    const selection = model.document.selection;\n    if (!selection.isCollapsed) {\n        return !getSelectedBlockObject(model);\n    }\n    if (direction === 'forward') {\n        return true;\n    }\n    const firstPosition = selection.getFirstPosition();\n    const positionParent = firstPosition.parent;\n    const previousSibling = positionParent.previousSibling;\n    if (model.schema.isObject(previousSibling)) {\n        return false;\n    }\n    if (previousSibling.isEmpty) {\n        return true;\n    }\n    return isSingleListItem([\n        positionParent,\n        previousSibling\n    ]);\n}\n\n/**\n * Helper method for creating toolbar and menu buttons and linking them with an appropriate command.\n *\n * @internal\n * @param editor The editor instance to which the UI component will be added.\n * @param commandName The name of the command.\n * @param label The button label.\n * @param icon The source of the icon.\n */ function createUIComponents(editor, commandName, label, icon) {\n    editor.ui.componentFactory.add(commandName, ()=>{\n        const buttonView = _createButton(ButtonView, editor, commandName, label, icon);\n        buttonView.set({\n            tooltip: true,\n            isToggleable: true\n        });\n        return buttonView;\n    });\n    editor.ui.componentFactory.add(`menuBar:${commandName}`, ()=>{\n        const buttonView = _createButton(MenuBarMenuListItemButtonView, editor, commandName, label, icon);\n        buttonView.set({\n            role: 'menuitemcheckbox',\n            isToggleable: true\n        });\n        return buttonView;\n    });\n}\n/**\n * Creates a button to use either in toolbar or in menu bar.\n */ function _createButton(ButtonClass, editor, commandName, label, icon) {\n    const command = editor.commands.get(commandName);\n    const view = new ButtonClass(editor.locale);\n    view.set({\n        label,\n        icon\n    });\n    // Bind button model to command.\n    view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n    // Execute the command.\n    view.on('execute', ()=>{\n        editor.execute(commandName);\n        editor.editing.view.focus();\n    });\n    return view;\n}\n\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n */ class ListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const t = this.editor.t;\n        // Create button numberedList.\n        if (!this.editor.ui.componentFactory.has('numberedList')) {\n            createUIComponents(this.editor, 'numberedList', t('Numbered List'), IconNumberedList);\n        }\n        // Create button bulletedList.\n        if (!this.editor.ui.componentFactory.has('bulletedList')) {\n            createUIComponents(this.editor, 'bulletedList', t('Bulleted List'), IconBulletedList);\n        }\n    }\n}\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/list/listediting~ListEditing  list\n * editing feature} and {@link module:list/list/listui~ListUI list UI feature}.\n */ class List extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing,\n            ListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'List';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items,\n * letting the user to choose the starting point of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */ class ListStartCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options Execute options.\n\t * @param options.startIndex The list start index.\n\t */ execute({ startIndex = 1 } = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        let blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>isListItemBlock(block) && isNumberedListType(block.getAttribute('listType')));\n        blocks = expandListBlocksToCompleteList(blocks);\n        model.change((writer)=>{\n            for (const block of blocks){\n                writer.setAttribute('listStart', startIndex >= 0 ? startIndex : 1, block);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        if (block && isListItemBlock(block) && isNumberedListType(block.getAttribute('listType'))) {\n            return block.getAttribute('listStart');\n        }\n        return null;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n* @module list/listproperties/utils/style\n*/ const LIST_STYLE_TO_LIST_TYPE = {};\nconst LIST_STYLE_TO_TYPE_ATTRIBUTE = {};\nconst TYPE_ATTRIBUTE_TO_LIST_STYLE = {};\nconst LIST_STYLE_TYPES = [\n    {\n        listStyle: 'disc',\n        typeAttribute: 'disc',\n        listType: 'bulleted'\n    },\n    {\n        listStyle: 'circle',\n        typeAttribute: 'circle',\n        listType: 'bulleted'\n    },\n    {\n        listStyle: 'square',\n        typeAttribute: 'square',\n        listType: 'bulleted'\n    },\n    {\n        listStyle: 'decimal',\n        typeAttribute: '1',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'decimal-leading-zero',\n        typeAttribute: null,\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'lower-roman',\n        typeAttribute: 'i',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'upper-roman',\n        typeAttribute: 'I',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'lower-alpha',\n        typeAttribute: 'a',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'upper-alpha',\n        typeAttribute: 'A',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'lower-latin',\n        typeAttribute: 'a',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'upper-latin',\n        typeAttribute: 'A',\n        listType: 'numbered'\n    }\n];\nfor (const { listStyle, typeAttribute, listType } of LIST_STYLE_TYPES){\n    LIST_STYLE_TO_LIST_TYPE[listStyle] = listType;\n    LIST_STYLE_TO_TYPE_ATTRIBUTE[listStyle] = typeAttribute;\n    if (typeAttribute) {\n        TYPE_ATTRIBUTE_TO_LIST_STYLE[typeAttribute] = listStyle;\n    }\n}\n/**\n * Gets all the style types supported by given list type.\n *\n * @internal\n */ function getAllSupportedStyleTypes() {\n    return LIST_STYLE_TYPES.map((x)=>x.listStyle);\n}\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n *\n * @internal\n */ function getListTypeFromListStyleType$1(listStyleType) {\n    return LIST_STYLE_TO_LIST_TYPE[listStyleType] || null;\n}\n/**\n * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n *\n * @internal\n */ function getListStyleTypeFromTypeAttribute(value) {\n    return TYPE_ATTRIBUTE_TO_LIST_STYLE[value] || null;\n}\n/**\n * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n *\n * @internal\n */ function getTypeAttributeFromListStyleType(value) {\n    return LIST_STYLE_TO_TYPE_ATTRIBUTE[value] || null;\n}\n/**\n * Normalizes list style by converting aliases to their canonical form.\n *\n * @internal\n * @param listStyle The list style value to normalize.\n * @returns The canonical form of the list style.\n *\n * @example\n * normalizeListStyle( 'lower-alpha' ); // Returns 'lower-latin'\n * normalizeListStyle( 'upper-alpha' ); // Returns 'upper-latin'\n * normalizeListStyle( 'disc' ); // Returns 'disc'\n */ function normalizeListStyle(listStyle) {\n    switch(listStyle){\n        case 'lower-alpha':\n            return 'lower-latin';\n        case 'upper-alpha':\n            return 'upper-latin';\n        default:\n            return listStyle;\n    }\n}\n\n/**\n * The list style command. It changes `listStyle` attribute of the selected list items,\n * letting the user choose styles for the list item markers.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */ class ListStyleCommand extends Command {\n    /**\n\t * The default type of the list style.\n\t */ defaultType;\n    /**\n\t * The list of supported style types by this command.\n\t */ _supportedTypes;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t * @param supportedTypes The list of supported style types by this command.\n\t */ constructor(editor, defaultType, supportedTypes){\n        super(editor);\n        this.defaultType = defaultType;\n        this._supportedTypes = supportedTypes;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        model.change((writer)=>{\n            this._tryToConvertItemsToList(options);\n            let blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>block.hasAttribute('listType'));\n            if (!blocks.length) {\n                return;\n            }\n            blocks = expandListBlocksToCompleteList(blocks);\n            for (const block of blocks){\n                writer.setAttribute('listStyle', options.type || this.defaultType, block);\n            }\n        });\n    }\n    /**\n\t * Checks if the given style type is supported by this plugin.\n\t */ isStyleTypeSupported(value) {\n        if (!this._supportedTypes) {\n            return true;\n        }\n        return this._supportedTypes.includes(value);\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n        if (isListItemBlock(listItem)) {\n            return listItem.getAttribute('listStyle');\n        }\n        return null;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const editor = this.editor;\n        const numberedList = editor.commands.get('numberedList');\n        const bulletedList = editor.commands.get('bulletedList');\n        return numberedList.isEnabled || bulletedList.isEnabled;\n    }\n    /**\n\t * Check if the provided list style is valid. Also change the selection to a list if it's not set yet.\n\t *\n\t * @param options.type The type of the list style. If `null` is specified, the function does nothing.\n\t*/ _tryToConvertItemsToList(options) {\n        if (!options.type) {\n            return;\n        }\n        const listType = getListTypeFromListStyleType$1(options.type);\n        if (!listType) {\n            return;\n        }\n        const editor = this.editor;\n        const commandName = `${listType}List`;\n        const command = editor.commands.get(commandName);\n        if (!command.value) {\n            editor.execute(commandName);\n        }\n    }\n}\n\n/**\n * The list reversed command. It changes the `listReversed` attribute of the selected list items,\n * letting the user to choose the order of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */ class ListReversedCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        let blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>isListItemBlock(block) && block.getAttribute('listType') == 'numbered');\n        blocks = expandListBlocksToCompleteList(blocks);\n        model.change((writer)=>{\n            for (const block of blocks){\n                writer.setAttribute('listReversed', !!options.reversed, block);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t */ _getValue() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        if (isListItemBlock(block) && block.getAttribute('listType') == 'numbered') {\n            return block.getAttribute('listReversed');\n        }\n        return null;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module list/listproperties/converters\n */ /**\n * Returns a converter that consumes the `style`, `reversed`, and `start` attributes.\n * In `style`, it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n *\n * @internal\n * @param strategy\n */ function listPropertiesUpcastConverter(strategy) {\n    return (evt, data, conversionApi)=>{\n        const { writer, schema, consumable } = conversionApi;\n        // If there is no view consumable to consume, set the default attribute value to be able to reconvert nested lists on parent change.\n        // So abort converting if attribute was directly consumed.\n        if (consumable.test(data.viewItem, strategy.viewConsumables) === false) {\n            return;\n        }\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        let applied = false;\n        for (const item of data.modelRange.getItems({\n            shallow: true\n        })){\n            if (!schema.checkAttribute(item, strategy.attributeName)) {\n                continue;\n            }\n            if (!strategy.appliesToListItem(item)) {\n                continue;\n            }\n            // Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n            if (item.hasAttribute(strategy.attributeName)) {\n                continue;\n            }\n            writer.setAttribute(strategy.attributeName, strategy.getAttributeOnUpcast(data.viewItem), item);\n            applied = true;\n        }\n        if (applied) {\n            consumable.consume(data.viewItem, strategy.viewConsumables);\n        }\n    };\n}\n\n/**\n * A set of helpers related to document lists.\n */ class ListPropertiesUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListPropertiesUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Gets all the style types supported by given list type.\n\t */ getAllSupportedStyleTypes() {\n        return getAllSupportedStyleTypes();\n    }\n    /**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */ getListTypeFromListStyleType(listStyleType) {\n        return getListTypeFromListStyleType$1(listStyleType);\n    }\n    /**\n\t * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n\t */ getListStyleTypeFromTypeAttribute(value) {\n        return getListStyleTypeFromTypeAttribute(value);\n    }\n    /**\n\t * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n\t */ getTypeAttributeFromListStyleType(value) {\n        return getTypeAttributeFromListStyleType(value);\n    }\n}\n\n/**\n * Normalizes {@link module:list/listconfig~ListPropertiesConfig} in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tstyles: {\n * \t\tlistTypes: [ 'bulleted', 'numbered' ],\n * \t\tuseAttribute: false\n * \t},\n * \tstartIndex: true,\n * \treversed: true\n * }\n * ```\n *\n * @internal\n * @param config The list properties {@link module:list/listconfig~ListPropertiesConfig config}.\n * @returns An object with normalized list properties options.\n */ function getNormalizedConfig(config) {\n    const { startIndex, reversed, styles } = config;\n    return {\n        styles: getNormalizedStylesConfig(styles),\n        startIndex: startIndex || false,\n        reversed: reversed || false\n    };\n}\n/**\n * Normalizes styles in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tlistTypes: [ 'bulleted', 'numbered' ],\n * \tuseAttribute: false\n * }\n * ```\n *\n * @param styles The list properties styles.\n * @returns An object with normalized list properties styles.\n */ function getNormalizedStylesConfig(styles) {\n    const normalizedConfig = {\n        listTypes: [\n            'bulleted',\n            'numbered'\n        ],\n        useAttribute: false\n    };\n    if (styles === true) {\n        return normalizedConfig;\n    }\n    if (!styles) {\n        normalizedConfig.listTypes = [];\n    } else if (Array.isArray(styles) || typeof styles == 'string') {\n        normalizedConfig.listTypes = toArray(styles);\n    } else {\n        normalizedConfig.listTypes = styles.listTypes ? toArray(styles.listTypes) : normalizedConfig.listTypes;\n        normalizedConfig.useAttribute = !!styles.useAttribute;\n        if (styles.listStyleTypes) {\n            normalizedConfig.listStyleTypes = styles.listStyleTypes;\n        }\n    }\n    return normalizedConfig;\n}\n\nconst DEFAULT_LIST_TYPE$1 = 'default';\n/**\n * The document list properties engine feature.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */ class ListPropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing,\n            ListPropertiesUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListPropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list.properties', {\n            styles: true,\n            startIndex: false,\n            reversed: false\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const listEditing = editor.plugins.get(ListEditing);\n        const enabledProperties = editor.config.get('list.properties');\n        const strategies = createAttributeStrategies$1(enabledProperties);\n        for (const strategy of strategies){\n            strategy.addCommand(editor);\n            model.schema.extend('$listItem', {\n                allowAttributes: strategy.attributeName\n            });\n            // Register downcast strategy.\n            listEditing.registerDowncastStrategy({\n                scope: 'list',\n                attributeName: strategy.attributeName,\n                setAttributeOnDowncast (writer, attributeValue, viewElement) {\n                    strategy.setAttributeOnDowncast(writer, attributeValue, viewElement);\n                }\n            });\n        }\n        // Set up conversion.\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            for (const strategy of strategies){\n                dispatcher.on('element:ol', listPropertiesUpcastConverter(strategy));\n                dispatcher.on('element:ul', listPropertiesUpcastConverter(strategy));\n            }\n        });\n        // Verify if the list view element (ul or ol) requires refreshing.\n        listEditing.on('checkAttributes:list', (evt, { viewElement, modelAttributes, modelReferenceElement })=>{\n            for (const strategy of strategies){\n                if (!strategy.appliesToListItem(modelReferenceElement)) {\n                    continue;\n                }\n                if (strategy.getAttributeOnUpcast(viewElement) != modelAttributes[strategy.attributeName]) {\n                    evt.return = true;\n                    evt.stop();\n                }\n            }\n        });\n        // Reset list properties after indenting list items.\n        this.listenTo(editor.commands.get('indentList'), 'afterExecute', (evt, changedBlocks)=>{\n            model.change((writer)=>{\n                for (const node of changedBlocks){\n                    for (const strategy of strategies){\n                        if (strategy.appliesToListItem(node)) {\n                            // Just reset the attribute.\n                            // If there is a previous indented list that this node should be merged into,\n                            // the postfixer will unify all the attributes of both sub-lists.\n                            writer.setAttribute(strategy.attributeName, strategy.defaultValue, node);\n                        }\n                    }\n                }\n            });\n        });\n        // Add or remove list properties attributes depending on the list type.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node } of listNodes){\n                for (const strategy of strategies){\n                    // Check if attribute is valid.\n                    if (strategy.hasValidAttribute(node)) {\n                        continue;\n                    }\n                    // Add missing default property attributes...\n                    if (strategy.appliesToListItem(node)) {\n                        writer.setAttribute(strategy.attributeName, strategy.defaultValue, node);\n                    } else {\n                        writer.removeAttribute(strategy.attributeName, node);\n                    }\n                    evt.return = true;\n                }\n            }\n        });\n        // Make sure that all items in a single list (items at the same level & listType) have the same properties.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                // This is a first block of a list of a different type.\n                if (previousNodeInList.getAttribute('listType') != node.getAttribute('listType')) {\n                    continue;\n                }\n                // Copy properties from the previous one.\n                for (const strategy of strategies){\n                    const { attributeName } = strategy;\n                    if (!strategy.appliesToListItem(node)) {\n                        continue;\n                    }\n                    const value = previousNodeInList.getAttribute(attributeName);\n                    if (node.getAttribute(attributeName) != value) {\n                        writer.setAttribute(attributeName, value, node);\n                        evt.return = true;\n                    }\n                }\n            }\n        });\n    }\n}\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */ function createAttributeStrategies$1(enabledProperties) {\n    const strategies = [];\n    const normalizedConfig = getNormalizedConfig(enabledProperties);\n    if (enabledProperties.styles) {\n        const useAttribute = normalizedConfig.styles.useAttribute;\n        strategies.push({\n            attributeName: 'listStyle',\n            defaultValue: DEFAULT_LIST_TYPE$1,\n            viewConsumables: {\n                styles: 'list-style-type'\n            },\n            addCommand (editor) {\n                let supportedTypes = getAllSupportedStyleTypes();\n                if (useAttribute) {\n                    supportedTypes = supportedTypes.filter((styleType)=>!!getTypeAttributeFromListStyleType(styleType));\n                }\n                editor.commands.add('listStyle', new ListStyleCommand(editor, DEFAULT_LIST_TYPE$1, supportedTypes));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered' || item.getAttribute('listType') == 'bulleted';\n            },\n            hasValidAttribute (item) {\n                if (!this.appliesToListItem(item)) {\n                    return !item.hasAttribute('listStyle');\n                }\n                if (!item.hasAttribute('listStyle')) {\n                    return false;\n                }\n                const value = item.getAttribute('listStyle');\n                if (value == DEFAULT_LIST_TYPE$1) {\n                    return true;\n                }\n                return getListTypeFromListStyleType$1(value) == item.getAttribute('listType');\n            },\n            setAttributeOnDowncast (writer, listStyle, element) {\n                if (listStyle && listStyle !== DEFAULT_LIST_TYPE$1) {\n                    if (useAttribute) {\n                        const value = getTypeAttributeFromListStyleType(listStyle);\n                        if (value) {\n                            writer.setAttribute('type', value, element);\n                            return;\n                        }\n                    } else {\n                        writer.setStyle('list-style-type', listStyle, element);\n                        return;\n                    }\n                }\n                writer.removeStyle('list-style-type', element);\n                writer.removeAttribute('type', element);\n            },\n            getAttributeOnUpcast (listParent) {\n                const style = listParent.getStyle('list-style-type');\n                if (style) {\n                    return normalizeListStyle(style);\n                }\n                const attribute = listParent.getAttribute('type');\n                if (attribute) {\n                    return getListStyleTypeFromTypeAttribute(attribute);\n                }\n                return DEFAULT_LIST_TYPE$1;\n            }\n        });\n    }\n    if (enabledProperties.reversed) {\n        strategies.push({\n            attributeName: 'listReversed',\n            defaultValue: false,\n            viewConsumables: {\n                attributes: 'reversed'\n            },\n            addCommand (editor) {\n                editor.commands.add('listReversed', new ListReversedCommand(editor));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered';\n            },\n            hasValidAttribute (item) {\n                return this.appliesToListItem(item) == item.hasAttribute('listReversed');\n            },\n            setAttributeOnDowncast (writer, listReversed, element) {\n                if (listReversed) {\n                    writer.setAttribute('reversed', 'reversed', element);\n                } else {\n                    writer.removeAttribute('reversed', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                return listParent.hasAttribute('reversed');\n            }\n        });\n    }\n    if (enabledProperties.startIndex) {\n        strategies.push({\n            attributeName: 'listStart',\n            defaultValue: 1,\n            viewConsumables: {\n                attributes: 'start'\n            },\n            addCommand (editor) {\n                editor.commands.add('listStart', new ListStartCommand(editor));\n            },\n            appliesToListItem (item) {\n                return isNumberedListType(item.getAttribute('listType'));\n            },\n            hasValidAttribute (item) {\n                return this.appliesToListItem(item) == item.hasAttribute('listStart');\n            },\n            setAttributeOnDowncast (writer, listStart, element) {\n                if (listStart == 0 || listStart > 1) {\n                    writer.setAttribute('start', listStart, element);\n                } else {\n                    writer.removeAttribute('start', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                const startAttributeValue = listParent.getAttribute('start');\n                return startAttributeValue >= 0 ? startAttributeValue : 1;\n            }\n        });\n    }\n    return strategies;\n}\n\n/**\n * The list properties view to be displayed in the list dropdown.\n *\n * Contains a grid of available list styles and, for numbered list, also the list start index and reversed fields.\n *\n * @internal\n */ class ListPropertiesView extends View {\n    /**\n\t * A collection of the child views.\n\t */ children;\n    /**\n\t * A view that renders the grid of list styles.\n\t */ stylesView = null;\n    /**\n\t * A collapsible view that hosts additional list property fields ({@link #startIndexFieldView} and\n\t * {@link #reversedSwitchButtonView}) to visually separate them from the {@link #stylesView grid of styles}.\n\t *\n\t * **Note**: Only present when:\n\t * * the view represents **numbered** list properties,\n\t * * and the {@link #stylesView} is rendered,\n\t * * and either {@link #startIndexFieldView} or {@link #reversedSwitchButtonView} is rendered.\n\t *\n\t * @readonly\n\t */ additionalPropertiesCollapsibleView = null;\n    /**\n\t * A labeled number field allowing the user to set the start index of the list.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */ startIndexFieldView = null;\n    /**\n\t * A switch button allowing the user to make the edited list reversed.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */ reversedSwitchButtonView = null;\n    /**\n\t * Tracks information about the DOM focus in the view.\n\t */ focusTracker = new FocusTracker();\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes = new KeystrokeHandler();\n    /**\n\t * A collection of views that can be focused in the properties view.\n\t */ focusables = new ViewCollection();\n    /**\n\t * Helps cycling over {@link #focusables} in the view.\n\t */ focusCycler;\n    /**\n\t * Creates an instance of the list properties view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Options of the view.\n\t * @param options.enabledProperties An object containing the configuration of enabled list property names.\n\t * Allows conditional rendering the sub-components of the properties view.\n\t * @param options.styleButtonViews A list of style buttons to be rendered\n\t * inside the styles grid. The grid will not be rendered when `enabledProperties` does not include the `'styles'` key.\n\t * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n\t */ constructor(locale, { enabledProperties, styleButtonViews, styleGridAriaLabel }){\n        super(locale);\n        const elementCssClasses = [\n            'ck',\n            'ck-list-properties'\n        ];\n        this.children = this.createCollection();\n        this.focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate #children backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate #children forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        // The rendering of the styles grid is conditional. When there is no styles grid, the view will render without collapsible\n        // for numbered list properties, hence simplifying the layout.\n        if (styleButtonViews && styleButtonViews.length) {\n            this.stylesView = this._createStylesView(styleButtonViews, styleGridAriaLabel);\n            this.children.add(this.stylesView);\n        } else {\n            elementCssClasses.push('ck-list-properties_without-styles');\n        }\n        // The rendering of the numbered list property views is also conditional. It only makes sense for the numbered list\n        // dropdown. The unordered list does not have such properties.\n        if (enabledProperties.startIndex || enabledProperties.reversed) {\n            this._addNumberedListPropertyViews(enabledProperties);\n            elementCssClasses.push('ck-list-properties_with-numbered-properties');\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: elementCssClasses\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        if (this.stylesView) {\n            this.focusables.add(this.stylesView);\n            this.focusTracker.add(this.stylesView.element);\n            // Register the collapsible toggle button to the focus system.\n            if (this.startIndexFieldView || this.reversedSwitchButtonView) {\n                this.focusables.add(this.children.last.buttonView);\n                this.focusTracker.add(this.children.last.buttonView.element);\n            }\n            for (const item of this.stylesView.children){\n                this.stylesView.focusTracker.add(item.element);\n            }\n            addKeyboardHandlingForGrid({\n                keystrokeHandler: this.stylesView.keystrokes,\n                focusTracker: this.stylesView.focusTracker,\n                gridItems: this.stylesView.children,\n                // Note: The styles view has a different number of columns depending on whether the other properties\n                // are enabled in the dropdown or not (https://github.com/ckeditor/ckeditor5/issues/12340)\n                numberOfColumns: ()=>global.window.getComputedStyle(this.stylesView.element).getPropertyValue('grid-template-columns').split(' ').length,\n                uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n            });\n        }\n        if (this.startIndexFieldView) {\n            this.focusables.add(this.startIndexFieldView);\n            this.focusTracker.add(this.startIndexFieldView.element);\n            const stopPropagation = (data)=>data.stopPropagation();\n            // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n            // keystroke handler would take over the key management in the input. We need to prevent\n            // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n            this.keystrokes.set('arrowright', stopPropagation);\n            this.keystrokes.set('arrowleft', stopPropagation);\n            this.keystrokes.set('arrowup', stopPropagation);\n            this.keystrokes.set('arrowdown', stopPropagation);\n        }\n        if (this.reversedSwitchButtonView) {\n            this.focusables.add(this.reversedSwitchButtonView);\n            this.focusTracker.add(this.reversedSwitchButtonView.element);\n        }\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ focus() {\n        this.focusCycler.focusFirst();\n    }\n    /**\n\t * @inheritDoc\n\t */ focusLast() {\n        this.focusCycler.focusLast();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Creates the list styles grid.\n\t *\n\t * @param styleButtons Buttons to be placed in the grid.\n\t * @param styleGridAriaLabel The assistive technology label of the grid.\n\t */ _createStylesView(styleButtons, styleGridAriaLabel) {\n        const stylesView = new View(this.locale);\n        stylesView.children = stylesView.createCollection();\n        stylesView.children.addMany(styleButtons);\n        stylesView.setTemplate({\n            tag: 'div',\n            attributes: {\n                'aria-label': styleGridAriaLabel,\n                class: [\n                    'ck',\n                    'ck-list-styles-list'\n                ]\n            },\n            children: stylesView.children\n        });\n        stylesView.children.delegate('execute').to(this);\n        stylesView.focus = function() {\n            // If there is a button that is already on, focus it.\n            // It's counterintuitive to focus the first button when there is already a button on.\n            for (const child of this.children){\n                if (child instanceof ButtonView && child.isOn) {\n                    child.focus();\n                    return;\n                }\n            }\n            // ... otherwise focus the first button.\n            this.children.first.focus();\n        };\n        stylesView.focusTracker = new FocusTracker();\n        stylesView.keystrokes = new KeystrokeHandler();\n        stylesView.render();\n        stylesView.keystrokes.listenTo(stylesView.element);\n        return stylesView;\n    }\n    /**\n\t * Renders {@link #startIndexFieldView} and/or {@link #reversedSwitchButtonView} depending on the configuration of the properties view.\n\t *\n\t * @param enabledProperties An object containing the configuration of enabled list property names\n\t * (see {@link #constructor}).\n\t */ _addNumberedListPropertyViews(enabledProperties) {\n        const t = this.locale.t;\n        const numberedPropertyViews = [];\n        if (enabledProperties.startIndex) {\n            this.startIndexFieldView = this._createStartIndexField();\n            numberedPropertyViews.push(this.startIndexFieldView);\n        }\n        if (enabledProperties.reversed) {\n            this.reversedSwitchButtonView = this._createReversedSwitchButton();\n            numberedPropertyViews.push(this.reversedSwitchButtonView);\n        }\n        // When there are some style buttons, pack the numbered list properties into a collapsible to separate them.\n        if (this.stylesView) {\n            this.additionalPropertiesCollapsibleView = new CollapsibleView(this.locale, numberedPropertyViews);\n            this.additionalPropertiesCollapsibleView.set({\n                label: t('List properties'),\n                isCollapsed: true\n            });\n            // Don't enable the collapsible view unless either start index or reversed field is enabled (e.g. when no list is selected).\n            this.additionalPropertiesCollapsibleView.buttonView.bind('isEnabled').toMany(numberedPropertyViews, 'isEnabled', (...areEnabled)=>areEnabled.some((isEnabled)=>isEnabled));\n            // Automatically collapse the additional properties collapsible when either start index or reversed field gets disabled.\n            this.additionalPropertiesCollapsibleView.buttonView.on('change:isEnabled', (evt, data, isEnabled)=>{\n                if (!isEnabled) {\n                    this.additionalPropertiesCollapsibleView.isCollapsed = true;\n                }\n            });\n            this.children.add(this.additionalPropertiesCollapsibleView);\n        } else {\n            this.children.addMany(numberedPropertyViews);\n        }\n    }\n    /**\n\t * Creates the list start index labeled field.\n\t */ _createStartIndexField() {\n        const t = this.locale.t;\n        const startIndexFieldView = new LabeledFieldView(this.locale, createLabeledInputNumber);\n        startIndexFieldView.set({\n            label: t('Start at'),\n            class: 'ck-numbered-list-properties__start-index'\n        });\n        startIndexFieldView.fieldView.set({\n            min: 0,\n            step: 1,\n            value: 1,\n            inputMode: 'numeric'\n        });\n        startIndexFieldView.fieldView.on('input', ()=>{\n            const inputElement = startIndexFieldView.fieldView.element;\n            const startIndex = inputElement.valueAsNumber;\n            if (Number.isNaN(startIndex)) {\n                // Number inputs allow for the entry of characters that may result in NaN,\n                // such as 'e', '+', '123e', '2-'.\n                startIndexFieldView.errorText = t('Invalid start index value.');\n                return;\n            }\n            if (!inputElement.checkValidity()) {\n                startIndexFieldView.errorText = t('Start index must be greater than 0.');\n            } else {\n                this.fire('listStart', {\n                    startIndex\n                });\n            }\n        });\n        return startIndexFieldView;\n    }\n    /**\n\t * Creates the reversed list switch button.\n\t */ _createReversedSwitchButton() {\n        const t = this.locale.t;\n        const reversedButtonView = new SwitchButtonView(this.locale);\n        reversedButtonView.set({\n            withText: true,\n            label: t('Reversed order'),\n            class: 'ck-numbered-list-properties__reversed-order'\n        });\n        reversedButtonView.delegate('execute').to(this, 'listReversed');\n        return reversedButtonView;\n    }\n}\n\n/**\n * The list properties UI plugin. It introduces the extended `'bulletedList'` and `'numberedList'` toolbar\n * buttons that allow users to control such aspects of list as the marker, start index or order.\n *\n * **Note**: Buttons introduced by this plugin override implementations from the {@link module:list/list/listui~ListUI}\n * (because they share the same names).\n */ class ListPropertiesUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListPropertiesUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const propertiesConfig = editor.config.get('list.properties');\n        const normalizedConfig = getNormalizedConfig(propertiesConfig);\n        const stylesListTypes = normalizedConfig.styles.listTypes;\n        // Note: When this plugin does not register the \"bulletedList\" dropdown due to properties configuration,\n        // a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n        // in most editor configuration because the List plugin automatically requires ListUI.\n        if (stylesListTypes.includes('bulleted')) {\n            const styleDefinitions = [\n                {\n                    label: t('Toggle the disc list style'),\n                    tooltip: t('Disc'),\n                    type: 'disc',\n                    icon: IconListStyleDisc\n                },\n                {\n                    label: t('Toggle the circle list style'),\n                    tooltip: t('Circle'),\n                    type: 'circle',\n                    icon: IconListStyleCircle\n                },\n                {\n                    label: t('Toggle the square list style'),\n                    tooltip: t('Square'),\n                    type: 'square',\n                    icon: IconListStyleSquare\n                }\n            ];\n            const buttonLabel = t('Bulleted List');\n            const styleGridAriaLabel = t('Bulleted list styles toolbar');\n            const commandName = 'bulletedList';\n            editor.ui.componentFactory.add(commandName, getDropdownViewCreator({\n                editor,\n                normalizedConfig,\n                parentCommandName: commandName,\n                buttonLabel,\n                buttonIcon: IconBulletedList,\n                styleGridAriaLabel,\n                styleDefinitions\n            }));\n            // Add the menu bar item for bulleted list.\n            editor.ui.componentFactory.add(`menuBar:${commandName}`, getMenuBarStylesMenuCreator({\n                editor,\n                normalizedConfig,\n                parentCommandName: commandName,\n                buttonLabel,\n                styleGridAriaLabel,\n                styleDefinitions\n            }));\n        }\n        // Note: When this plugin does not register the \"numberedList\" dropdown due to properties configuration,\n        // a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n        // in most editor configuration because the List plugin automatically requires ListUI.\n        if (stylesListTypes.includes('numbered') || propertiesConfig.startIndex || propertiesConfig.reversed) {\n            const styleDefinitions = [\n                {\n                    label: t('Toggle the decimal list style'),\n                    tooltip: t('Decimal'),\n                    type: 'decimal',\n                    icon: IconListStyleDecimal\n                },\n                {\n                    label: t('Toggle the decimal with leading zero list style'),\n                    tooltip: t('Decimal with leading zero'),\n                    type: 'decimal-leading-zero',\n                    icon: IconListStyleDecimalLeadingZero\n                },\n                {\n                    label: t('Toggle the lower–roman list style'),\n                    tooltip: t('Lower–roman'),\n                    type: 'lower-roman',\n                    icon: IconListStyleLowerRoman\n                },\n                {\n                    label: t('Toggle the upper–roman list style'),\n                    tooltip: t('Upper-roman'),\n                    type: 'upper-roman',\n                    icon: IconListStyleUpperRoman\n                },\n                {\n                    label: t('Toggle the lower–latin list style'),\n                    tooltip: t('Lower-latin'),\n                    type: 'lower-latin',\n                    icon: IconListStyleLowerLatin\n                },\n                {\n                    label: t('Toggle the upper–latin list style'),\n                    tooltip: t('Upper-latin'),\n                    type: 'upper-latin',\n                    icon: IconListStyleUpperLatin\n                }\n            ];\n            const buttonLabel = t('Numbered List');\n            const styleGridAriaLabel = t('Numbered list styles toolbar');\n            const commandName = 'numberedList';\n            editor.ui.componentFactory.add(commandName, getDropdownViewCreator({\n                editor,\n                normalizedConfig,\n                parentCommandName: commandName,\n                buttonLabel,\n                buttonIcon: IconNumberedList,\n                styleGridAriaLabel,\n                styleDefinitions\n            }));\n            // Menu bar menu does not display list start index or reverse UI. If there are no styles enabled,\n            // the menu makes no sense and should be omitted.\n            if (stylesListTypes.includes('numbered')) {\n                editor.ui.componentFactory.add(`menuBar:${commandName}`, getMenuBarStylesMenuCreator({\n                    editor,\n                    normalizedConfig,\n                    parentCommandName: commandName,\n                    buttonLabel,\n                    styleGridAriaLabel,\n                    styleDefinitions\n                }));\n            }\n        }\n    }\n}\n/**\n * A helper that returns a function that creates a split button with a toolbar in the dropdown,\n * which in turn contains buttons allowing users to change list styles in the context of the current selection.\n *\n * @param options.editor\n * @param options.normalizedConfig List properties configuration.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.buttonLabel Label of the main part of the split button.\n * @param options.buttonIcon The SVG string of an icon for the main part of the split button.\n * @param options.styleGridAriaLabel The ARIA label for the styles grid in the split button dropdown.\n * @param options.styleDefinitions Definitions of the style buttons.\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */ function getDropdownViewCreator({ editor, normalizedConfig, parentCommandName, buttonLabel, buttonIcon, styleGridAriaLabel, styleDefinitions }) {\n    const parentCommand = editor.commands.get(parentCommandName);\n    return (locale)=>{\n        const dropdownView = createDropdown(locale, SplitButtonView);\n        const mainButtonView = dropdownView.buttonView;\n        dropdownView.bind('isEnabled').to(parentCommand);\n        dropdownView.class = 'ck-list-styles-dropdown';\n        // Main button was clicked.\n        mainButtonView.on('execute', ()=>{\n            editor.execute(parentCommandName);\n            editor.editing.view.focus();\n        });\n        mainButtonView.set({\n            label: buttonLabel,\n            icon: buttonIcon,\n            tooltip: true,\n            isToggleable: true\n        });\n        mainButtonView.bind('isOn').to(parentCommand, 'value', (value)=>!!value);\n        dropdownView.once('change:isOpen', ()=>{\n            const listPropertiesView = createListPropertiesView({\n                editor,\n                normalizedConfig,\n                dropdownView,\n                parentCommandName,\n                styleGridAriaLabel,\n                styleDefinitions\n            });\n            dropdownView.panelView.children.add(listPropertiesView);\n        });\n        // Focus the editable after executing the command.\n        // Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n        dropdownView.on('execute', ()=>{\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    };\n}\n/**\n * A helper that returns a function (factory) that creates individual buttons used by users to change styles\n * of lists.\n *\n * @param options.editor\n * @param options.listStyleCommand The instance of the `ListStylesCommand` class.\n * @param options.parentCommandName The name of the higher-order command associated with a\n * particular list style (e.g. \"bulletedList\" is associated with \"square\" and \"numberedList\" is associated with \"roman\").\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */ function getStyleButtonCreator({ editor, listStyleCommand, parentCommandName }) {\n    const locale = editor.locale;\n    const parentCommand = editor.commands.get(parentCommandName);\n    return ({ label, type, icon, tooltip })=>{\n        const button = new ButtonView(locale);\n        button.set({\n            label,\n            icon,\n            tooltip\n        });\n        button.bind('isOn').to(listStyleCommand, 'value', (value)=>value === type);\n        button.on('execute', ()=>{\n            // If the content the selection is anchored to is a list, let's change its style.\n            if (parentCommand.value) {\n                // Remove the list when the current list style is the same as the one that would normally be applied.\n                if (listStyleCommand.value === type) {\n                    editor.execute(parentCommandName);\n                } else if (listStyleCommand.value !== type) {\n                    editor.execute('listStyle', {\n                        type\n                    });\n                }\n            } else {\n                editor.model.change(()=>{\n                    editor.execute('listStyle', {\n                        type\n                    });\n                });\n            }\n        });\n        return button;\n    };\n}\n/**\n * A helper that creates the properties view for the individual style dropdown.\n *\n * @param options.editor Editor instance.\n * @param options.normalizedConfig List properties configuration.\n * @param options.dropdownView Styles dropdown view that hosts the properties view.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.styleDefinitions Definitions of the style buttons.\n * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n */ function createListPropertiesView({ editor, normalizedConfig, dropdownView, parentCommandName, styleDefinitions, styleGridAriaLabel }) {\n    const locale = editor.locale;\n    const enabledProperties = {\n        ...normalizedConfig,\n        ...parentCommandName != 'numberedList' ? {\n            startIndex: false,\n            reversed: false\n        } : null\n    };\n    const listType = parentCommandName.replace('List', '');\n    let styleButtonViews = null;\n    if (normalizedConfig.styles.listTypes.includes(listType)) {\n        const listStyleCommand = editor.commands.get('listStyle');\n        const styleButtonCreator = getStyleButtonCreator({\n            editor,\n            parentCommandName,\n            listStyleCommand\n        });\n        const configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n        let filteredDefinitions = styleDefinitions;\n        if (configuredListStylesTypes) {\n            const allowedTypes = configuredListStylesTypes[listType];\n            if (allowedTypes) {\n                filteredDefinitions = styleDefinitions.filter((def)=>allowedTypes.includes(def.type));\n            }\n        }\n        const isStyleTypeSupported = getStyleTypeSupportChecker(listStyleCommand);\n        styleButtonViews = filteredDefinitions.filter(isStyleTypeSupported).map(styleButtonCreator);\n    }\n    const listPropertiesView = new ListPropertiesView(locale, {\n        styleGridAriaLabel,\n        enabledProperties,\n        styleButtonViews\n    });\n    if (normalizedConfig.styles.listTypes.includes(listType)) {\n        // Accessibility: focus the first active style when opening the dropdown.\n        focusChildOnDropdownOpen(dropdownView, ()=>{\n            return listPropertiesView.stylesView.children.find((child)=>child.isOn);\n        });\n    }\n    if (enabledProperties.startIndex) {\n        const listStartCommand = editor.commands.get('listStart');\n        listPropertiesView.startIndexFieldView.bind('isEnabled').to(listStartCommand);\n        listPropertiesView.startIndexFieldView.fieldView.bind('value').to(listStartCommand);\n        listPropertiesView.on('listStart', (evt, data)=>editor.execute('listStart', data));\n    }\n    if (enabledProperties.reversed) {\n        const listReversedCommand = editor.commands.get('listReversed');\n        listPropertiesView.reversedSwitchButtonView.bind('isEnabled').to(listReversedCommand);\n        listPropertiesView.reversedSwitchButtonView.bind('isOn').to(listReversedCommand, 'value', (value)=>!!value);\n        listPropertiesView.on('listReversed', ()=>{\n            const isReversed = listReversedCommand.value;\n            editor.execute('listReversed', {\n                reversed: !isReversed\n            });\n        });\n    }\n    // Make sure applying styles closes the dropdown.\n    listPropertiesView.delegate('execute').to(dropdownView);\n    return listPropertiesView;\n}\n/**\n * A helper that creates the list style submenu for menu bar.\n *\n * @param editor Editor instance.\n * @param normalizedConfig List properties configuration.\n * @param parentCommandName Name of the list command.\n * @param buttonLabel Label of the menu button.\n * @param styleGridAriaLabel ARIA label of the styles grid.\n */ function getMenuBarStylesMenuCreator({ editor, normalizedConfig, parentCommandName, buttonLabel, styleGridAriaLabel, styleDefinitions }) {\n    return (locale)=>{\n        const menuView = new MenuBarMenuView(locale);\n        const listCommand = editor.commands.get(parentCommandName);\n        const listStyleCommand = editor.commands.get('listStyle');\n        const isStyleTypeSupported = getStyleTypeSupportChecker(listStyleCommand);\n        const styleButtonCreator = getStyleButtonCreator({\n            editor,\n            parentCommandName,\n            listStyleCommand\n        });\n        const configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n        let filteredDefinitions = styleDefinitions;\n        if (configuredListStylesTypes) {\n            const listType = listCommand.type;\n            const allowedTypes = configuredListStylesTypes[listType];\n            if (allowedTypes) {\n                filteredDefinitions = styleDefinitions.filter((def)=>allowedTypes.includes(def.type));\n            }\n        }\n        const styleButtonViews = filteredDefinitions.filter(isStyleTypeSupported).map(styleButtonCreator);\n        const listPropertiesView = new ListPropertiesView(locale, {\n            styleGridAriaLabel,\n            enabledProperties: {\n                ...normalizedConfig,\n                // Disable list start index and reversed in the menu bar.\n                startIndex: false,\n                reversed: false\n            },\n            styleButtonViews\n        });\n        listPropertiesView.delegate('execute').to(menuView);\n        menuView.buttonView.set({\n            label: buttonLabel,\n            icon: parentCommandName === 'bulletedList' ? IconBulletedList : IconNumberedList\n        });\n        menuView.panelView.children.add(listPropertiesView);\n        menuView.bind('isEnabled').to(listCommand, 'isEnabled');\n        menuView.on('execute', ()=>{\n            editor.editing.view.focus();\n        });\n        return menuView;\n    };\n}\nfunction getStyleTypeSupportChecker(listStyleCommand) {\n    if (typeof listStyleCommand.isStyleTypeSupported == 'function') {\n        return (styleDefinition)=>listStyleCommand.isStyleTypeSupported(styleDefinition.type);\n    } else {\n        return ()=>true;\n    }\n}\n\n/**\n * The list properties feature.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:list/listproperties/listpropertiesediting~ListPropertiesEditing list properties\n * editing feature} and the {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */ class ListProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListPropertiesEditing,\n            ListPropertiesUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/todolist/todolistediting~TodoListEditing} as\n * the `checkTodoList` editor command.\n */ class CheckTodoListCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Refresh command before executing to be sure all values are up to date.\n        // It is needed when selection has changed before command execution, in the same change block.\n        this.on('execute', ()=>{\n            this.refresh();\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */ refresh() {\n        const selectedElements = this._getSelectedItems();\n        this.value = this._getValue(selectedElements);\n        this.isEnabled = !!selectedElements.length;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */ execute(options = {}) {\n        this.editor.model.change((writer)=>{\n            const selectedElements = this._getSelectedItems();\n            const value = options.forceValue === undefined ? !this._getValue(selectedElements) : options.forceValue;\n            for (const element of selectedElements){\n                if (value) {\n                    writer.setAttribute('todoListChecked', true, element);\n                } else {\n                    writer.removeAttribute('todoListChecked', element);\n                }\n            }\n        });\n    }\n    /**\n\t * Returns a value for the command.\n\t */ _getValue(selectedElements) {\n        return selectedElements.every((element)=>element.getAttribute('todoListChecked'));\n    }\n    /**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t */ _getSelectedItems() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selectionRange = model.document.selection.getFirstRange();\n        const startElement = selectionRange.start.parent;\n        const elements = [];\n        if (schema.checkAttribute(startElement, 'todoListChecked')) {\n            elements.push(...getAllListItemBlocks(startElement));\n        }\n        for (const item of selectionRange.getItems({\n            shallow: true\n        })){\n            if (schema.checkAttribute(item, 'todoListChecked') && !elements.includes(item)) {\n                elements.push(...getAllListItemBlocks(item));\n            }\n        }\n        return elements;\n    }\n}\n\n/**\n * Observes all to-do list checkboxes state changes.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~EditingView} by {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * @internal\n */ class TodoCheckboxChangeObserver extends DomEventObserver {\n    /**\n\t * @inheritDoc\n\t */ domEventType = [\n        'change'\n    ];\n    /**\n\t * @inheritDoc\n\t */ onDomEvent(domEvent) {\n        if (domEvent.target) {\n            const viewTarget = this.view.domConverter.mapDomToView(domEvent.target);\n            if (viewTarget && viewTarget.is('element', 'input') && viewTarget.getAttribute('type') == 'checkbox' && viewTarget.findAncestor({\n                classes: 'todo-list__label'\n            })) {\n                this.fire('todoCheckboxChange', domEvent);\n            }\n        }\n    }\n}\n\nconst ITEM_TOGGLE_KEYSTROKE$1 = /* #__PURE__ */ parseKeystroke('Ctrl+Enter');\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/list/listediting~ListEditing list editing plugin}\n * and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n */ class TodoListEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const editing = editor.editing;\n        const listEditing = editor.plugins.get(ListEditing);\n        const multiBlock = editor.config.get('list.multiBlock');\n        const elementName = multiBlock ? 'paragraph' : 'listItem';\n        editor.commands.add('todoList', new ListCommand(editor, 'todo'));\n        editor.commands.add('checkTodoList', new CheckTodoListCommand(editor));\n        editing.view.addObserver(TodoCheckboxChangeObserver);\n        model.schema.extend('$listItem', {\n            allowAttributes: 'todoListChecked'\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            // Don't allow `todoListChecked` attribute on elements which are not todo list items.\n            if (!item.getAttribute('listItemId') || item.getAttribute('listType') != 'todo') {\n                return false;\n            }\n        }, 'todoListChecked');\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            // Upcast of to-do list item is based on a checkbox at the beginning of a <li> to keep compatibility with markdown input.\n            dispatcher.on('element:input', todoItemInputConverter());\n            // Priority is set to low to allow generic list item converter to run first.\n            dispatcher.on('element:li', todoListItemUpcastConverter(), {\n                priority: 'low'\n            });\n            // Consume other elements that are normally generated in data downcast, so they won't get captured by GHS.\n            dispatcher.on('element:label', elementUpcastConsumingConverter({\n                name: 'label',\n                classes: 'todo-list__label'\n            }));\n            dispatcher.on('element:label', elementUpcastConsumingConverter({\n                name: 'label',\n                classes: [\n                    'todo-list__label',\n                    'todo-list__label_without-description'\n                ]\n            }));\n            dispatcher.on('element:span', elementUpcastConsumingConverter({\n                name: 'span',\n                classes: 'todo-list__label__description'\n            }));\n            dispatcher.on('element:ul', attributeUpcastConsumingConverter({\n                name: 'ul',\n                classes: 'todo-list'\n            }));\n        });\n        editor.conversion.for('downcast').elementToElement({\n            model: elementName,\n            view: (element, { writer })=>{\n                if (isDescriptionBlock(element, listEditing.getListAttributeNames())) {\n                    return writer.createContainerElement('span', {\n                        class: 'todo-list__label__description'\n                    });\n                }\n            },\n            converterPriority: 'highest'\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'listType',\n            setAttributeOnDowncast (writer, value, element) {\n                if (value == 'todo') {\n                    writer.addClass('todo-list', element);\n                } else {\n                    writer.removeClass('todo-list', element);\n                }\n            }\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'itemMarker',\n            attributeName: 'todoListChecked',\n            createElement (writer, modelElement, { dataPipeline }) {\n                if (modelElement.getAttribute('listType') != 'todo') {\n                    return null;\n                }\n                const viewElement = writer.createUIElement('input', {\n                    type: 'checkbox',\n                    ...modelElement.getAttribute('todoListChecked') ? {\n                        checked: 'checked'\n                    } : null,\n                    ...dataPipeline ? {\n                        disabled: 'disabled'\n                    } : {\n                        tabindex: '-1'\n                    }\n                });\n                if (dataPipeline) {\n                    return viewElement;\n                }\n                const wrapper = writer.createContainerElement('span', {\n                    contenteditable: 'false'\n                }, viewElement);\n                wrapper.getFillerOffset = ()=>null;\n                return wrapper;\n            },\n            canWrapElement (modelElement) {\n                return isDescriptionBlock(modelElement, listEditing.getListAttributeNames());\n            },\n            createWrapperElement (writer, modelElement, { dataPipeline }) {\n                const classes = [\n                    'todo-list__label'\n                ];\n                if (!isDescriptionBlock(modelElement, listEditing.getListAttributeNames())) {\n                    classes.push('todo-list__label_without-description');\n                }\n                return writer.createAttributeElement(dataPipeline ? 'label' : 'span', {\n                    class: classes.join(' ')\n                });\n            }\n        });\n        // Verifies if a to-do list block requires reconversion of a first item downcasted as an item description.\n        listEditing.on('checkElement', (evt, { modelElement, viewElement })=>{\n            const isFirstTodoModelParagraphBlock = isDescriptionBlock(modelElement, listEditing.getListAttributeNames());\n            const hasViewClass = viewElement.hasClass('todo-list__label__description');\n            if (hasViewClass != isFirstTodoModelParagraphBlock) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n        // Verifies if a to-do list block requires reconversion of a checkbox element\n        // (for example there is a new paragraph inserted as a first block of a list item).\n        listEditing.on('checkElement', (evt, { modelElement, viewElement })=>{\n            const isFirstTodoModelItemBlock = modelElement.getAttribute('listType') == 'todo' && isFirstBlockOfListItem(modelElement);\n            let hasViewItemMarker = false;\n            const viewWalker = editor.editing.view.createPositionBefore(viewElement).getWalker({\n                direction: 'backward'\n            });\n            for (const { item } of viewWalker){\n                if (item.is('element') && editor.editing.mapper.toModelElement(item)) {\n                    break;\n                }\n                if (item.is('element', 'input') && item.getAttribute('type') == 'checkbox') {\n                    hasViewItemMarker = true;\n                }\n            }\n            if (hasViewItemMarker != isFirstTodoModelItemBlock) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n        // Make sure that all blocks of the same list item have the same todoListChecked attribute.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                if (previousNodeInList.getAttribute('listItemId') != node.getAttribute('listItemId')) {\n                    continue;\n                }\n                const previousHasAttribute = previousNodeInList.hasAttribute('todoListChecked');\n                const nodeHasAttribute = node.hasAttribute('todoListChecked');\n                if (nodeHasAttribute && !previousHasAttribute) {\n                    writer.removeAttribute('todoListChecked', node);\n                    evt.return = true;\n                } else if (!nodeHasAttribute && previousHasAttribute) {\n                    writer.setAttribute('todoListChecked', true, node);\n                    evt.return = true;\n                }\n            }\n        });\n        // Make sure that todoListChecked attribute is only present for to-do list items.\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let wasFixed = false;\n            for (const change of changes){\n                if (change.type == 'attribute' && change.attributeKey == 'listType') {\n                    const element = change.range.start.nodeAfter;\n                    if (change.attributeOldValue == 'todo' && element.hasAttribute('todoListChecked')) {\n                        writer.removeAttribute('todoListChecked', element);\n                        wasFixed = true;\n                    }\n                } else if (change.type == 'insert' && change.name != '$text') {\n                    for (const { item } of writer.createRangeOn(change.position.nodeAfter)){\n                        if (item.is('element') && item.getAttribute('listType') != 'todo' && item.hasAttribute('todoListChecked')) {\n                            writer.removeAttribute('todoListChecked', item);\n                            wasFixed = true;\n                        }\n                    }\n                }\n            }\n            return wasFixed;\n        });\n        // Toggle check state of selected to-do list items on keystroke.\n        this.listenTo(editing.view.document, 'keydown', (evt, data)=>{\n            if (getCode(data) === ITEM_TOGGLE_KEYSTROKE$1) {\n                editor.execute('checkTodoList');\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        // Toggle check state of a to-do list item clicked on the checkbox.\n        this.listenTo(editing.view.document, 'todoCheckboxChange', (evt, data)=>{\n            const viewTarget = data.target;\n            if (!viewTarget || !viewTarget.is('element', 'input')) {\n                return;\n            }\n            const viewPositionAfter = editing.view.createPositionAfter(viewTarget);\n            const modelPositionAfter = editing.mapper.toModelPosition(viewPositionAfter);\n            const modelElement = modelPositionAfter.parent;\n            if (modelElement && isListItemBlock(modelElement) && modelElement.getAttribute('listType') == 'todo') {\n                this._handleCheckmarkChange(modelElement);\n            }\n        });\n        // Jump at the start/end of the next node on right arrow key press, when selection is before the checkbox.\n        //\n        // <blockquote><p>Foo{}</p></blockquote>\n        // <ul><li><checkbox/>Bar</li></ul>\n        //\n        // press: `->`\n        //\n        // <blockquote><p>Foo</p></blockquote>\n        // <ul><li><checkbox/>{}Bar</li></ul>\n        //\n        this.listenTo(editing.view.document, 'arrowKey', jumpOverCheckmarkOnSideArrowKeyPress$1(model, editor.locale), {\n            context: '$text'\n        });\n        // Map view positions inside the checkbox and wrappers to the position in the first block of the list item.\n        this.listenTo(editing.mapper, 'viewToModelPosition', (evt, data)=>{\n            const viewParent = data.viewPosition.parent;\n            const isStartOfListItem = viewParent.is('attributeElement', 'li') && data.viewPosition.offset == 0;\n            const isStartOfListLabel = isLabelElement(viewParent) && data.viewPosition.offset <= 1;\n            const isInInputWrapper = viewParent.is('element', 'span') && viewParent.getAttribute('contenteditable') == 'false' && isLabelElement(viewParent.parent);\n            if (!isStartOfListItem && !isStartOfListLabel && !isInInputWrapper) {\n                return;\n            }\n            const nodeAfter = data.modelPosition.nodeAfter;\n            if (nodeAfter && nodeAfter.getAttribute('listType') == 'todo') {\n                data.modelPosition = model.createPositionAt(nodeAfter, 0);\n            }\n        }, {\n            priority: 'low'\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */ _handleCheckmarkChange(listItem) {\n        const editor = this.editor;\n        const model = editor.model;\n        const previousSelectionRanges = Array.from(model.document.selection.getRanges());\n        model.change((writer)=>{\n            writer.setSelection(listItem, 'end');\n            editor.execute('checkTodoList');\n            writer.setSelection(previousSelectionRanges);\n        });\n    }\n    /**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        let lastFocusedCodeBlock = null;\n        if (!ui) {\n            return;\n        }\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            const lastElementIsTodoList = isTodoListItemElement(lastFocusedCodeBlock);\n            const currentElementIsTodoList = isTodoListItemElement(focusParent);\n            if (lastElementIsTodoList && !currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Leaving a to-do list'));\n            } else if (!lastElementIsTodoList && currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Entering a to-do list'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Returns an upcast converter for to-do list items.\n */ function todoListItemUpcastConverter() {\n    return (evt, data, conversionApi)=>{\n        const { writer, schema } = conversionApi;\n        if (!data.modelRange) {\n            return;\n        }\n        // Group to-do list items by their listItemId attribute to ensure that all items of the same list item have the same checked state.\n        const groupedItems = Array.from(data.modelRange.getItems({\n            shallow: true\n        })).filter((item)=>item.getAttribute('listType') === 'todo' && schema.checkAttribute(item, 'listItemId')).reduce((acc, item)=>{\n            const listItemId = item.getAttribute('listItemId');\n            if (!acc.has(listItemId)) {\n                acc.set(listItemId, getAllListItemBlocks(item));\n            }\n            return acc;\n        }, new Map());\n        // During the upcast, we need to ensure that all items of the same list have the same checked state. From time to time\n        // the checked state of the items can be different when the user pastes content from the clipboard with <input type=\"checkbox\">\n        // that has checked state set to true. In such cases, we need to ensure that all items of the same list have the same checked state.\n        // See more: https://github.com/ckeditor/ckeditor5/issues/15602\n        for (const [, items] of groupedItems.entries()){\n            if (items.some((item)=>item.getAttribute('todoListChecked'))) {\n                for (const item of items){\n                    writer.setAttribute('todoListChecked', true, item);\n                }\n            }\n        }\n    };\n}\n/**\n * Returns an upcast converter that detects a to-do list checkbox and marks the list item as a to-do list.\n */ function todoItemInputConverter() {\n    return (evt, data, conversionApi)=>{\n        const modelCursor = data.modelCursor;\n        const modelItem = modelCursor.parent;\n        const viewItem = data.viewItem;\n        if (!conversionApi.consumable.test(viewItem, {\n            name: true\n        })) {\n            return;\n        }\n        if (viewItem.getAttribute('type') != 'checkbox' || !modelCursor.isAtStart || !modelItem.hasAttribute('listType')) {\n            return;\n        }\n        conversionApi.consumable.consume(viewItem, {\n            name: true\n        });\n        const writer = conversionApi.writer;\n        writer.setAttribute('listType', 'todo', modelItem);\n        if (data.viewItem.hasAttribute('checked')) {\n            writer.setAttribute('todoListChecked', true, modelItem);\n        }\n        data.modelRange = writer.createRange(modelCursor);\n    };\n}\n/**\n * Returns an upcast converter that consumes element matching the given matcher pattern.\n */ function elementUpcastConsumingConverter(matcherPattern) {\n    const matcher = new Matcher(matcherPattern);\n    return (evt, data, conversionApi)=>{\n        const matcherResult = matcher.match(data.viewItem);\n        if (!matcherResult) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(data.viewItem, matcherResult.match)) {\n            return;\n        }\n        Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n    };\n}\n/**\n * Returns an upcast converter that consumes attributes matching the given matcher pattern.\n */ function attributeUpcastConsumingConverter(matcherPattern) {\n    const matcher = new Matcher(matcherPattern);\n    return (evt, data, conversionApi)=>{\n        const matcherResult = matcher.match(data.viewItem);\n        if (!matcherResult) {\n            return;\n        }\n        const match = matcherResult.match;\n        match.name = false;\n        conversionApi.consumable.consume(data.viewItem, match);\n    };\n}\n/**\n * Returns true if the given list item block should be converted as a description block of a to-do list item.\n */ function isDescriptionBlock(modelElement, listAttributeNames) {\n    return (modelElement.is('element', 'paragraph') || modelElement.is('element', 'listItem')) && modelElement.getAttribute('listType') == 'todo' && isFirstBlockOfListItem(modelElement) && hasOnlyListAttributes(modelElement, listAttributeNames);\n}\n/**\n * Returns true if only attributes from the given list are present on the model element.\n */ function hasOnlyListAttributes(modelElement, attributeNames) {\n    for (const attributeKey of modelElement.getAttributeKeys()){\n        // Ignore selection attributes stored on block elements.\n        if (attributeKey.startsWith('selection:')) {\n            continue;\n        }\n        if (!attributeNames.includes(attributeKey)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Jump at the start and end of a to-do list item.\n */ function jumpOverCheckmarkOnSideArrowKeyPress$1(model, locale) {\n    return (eventInfo, domEventData)=>{\n        const direction = getLocalizedArrowKeyCodeDirection(domEventData.keyCode, locale.contentLanguageDirection);\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (!selection.isCollapsed) {\n            return;\n        }\n        const position = selection.getFirstPosition();\n        const parent = position.parent;\n        // Right arrow before a to-do list item.\n        if (direction == 'right' && position.isAtEnd) {\n            const newRange = schema.getNearestSelectionRange(model.createPositionAfter(parent), 'forward');\n            if (!newRange) {\n                return;\n            }\n            const newRangeParent = newRange.start.parent;\n            if (newRangeParent && isListItemBlock(newRangeParent) && newRangeParent.getAttribute('listType') == 'todo') {\n                model.change((writer)=>writer.setSelection(newRange));\n                domEventData.preventDefault();\n                domEventData.stopPropagation();\n                eventInfo.stop();\n            }\n        } else if (direction == 'left' && position.isAtStart && isListItemBlock(parent) && parent.getAttribute('listType') == 'todo') {\n            const newRange = schema.getNearestSelectionRange(model.createPositionBefore(parent), 'backward');\n            if (!newRange) {\n                return;\n            }\n            model.change((writer)=>writer.setSelection(newRange));\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    };\n}\n/**\n * Returns true if the given element is a label element of a to-do list item.\n */ function isLabelElement(viewElement) {\n    return !!viewElement && viewElement.is('attributeElement') && viewElement.hasClass('todo-list__label');\n}\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */ function isTodoListItemElement(element) {\n    if (!element) {\n        return false;\n    }\n    if (!element.is('element', 'paragraph') && !element.is('element', 'listItem')) {\n        return false;\n    }\n    return element.getAttribute('listType') == 'todo';\n}\n\n/**\n * The to-do list UI feature. It introduces the `'todoList'` button that\n * allows to convert elements to and from to-do list items and to indent or outdent them.\n */ class TodoListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoListUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const t = this.editor.t;\n        createUIComponents(this.editor, 'todoList', t('To-do List'), IconTodoList);\n    }\n}\n\n/**\n * The to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/todolist/todolistediting~TodoListEditing to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */ class TodoList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TodoListEditing,\n            TodoListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The list command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */ class LegacyListCommand extends Command {\n    /**\n\t * The type of the list created by the command.\n\t */ type;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */ constructor(editor, type){\n        super(editor);\n        this.type = type;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false`, it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>checkCanBecomeListItem(block, model.schema));\n        // Whether we are turning off some items.\n        const turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n        // If we are turning off items, we are going to rename them to paragraphs.\n        model.change((writer)=>{\n            // If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n            // To be sure that model is all the time in a good state, we first fix items below turned-off item.\n            if (turnOff) {\n                // Start from the model item that is just after the last turned-off item.\n                let next = blocks[blocks.length - 1].nextSibling;\n                let currentIndent = Number.POSITIVE_INFINITY;\n                let changes = [];\n                // Correct indent of all items after the last turned off item.\n                // Rules that should be followed:\n                // 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n                //    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n                // 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n                //    should not end up as a child of any of list items that they were not children of before.\n                // 3. All other items should have their indent changed relatively to it's parent.\n                //\n                // For example:\n                // 1  * --------\n                // 2     * --------\n                // 3        * --------\t\t\t<-- this is turned off.\n                // 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n                // 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n                // 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n                // 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n                // 8     * --------\t\t\t\t<-- this has to become indent = 0.\n                // 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n                // 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n                // 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n                // 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n                // 13    * --------\n                // 14       * --------\n                //\n                // After turning off 3 the list becomes:\n                //\n                // 1  * --------\n                // 2     * --------\n                //\n                // 3  --------\n                //\n                // 4  * --------\n                // 5     * --------\n                // 6  * --------\n                // 7     * --------\n                // 8  * --------\n                // 9     * --------\n                // 10       * --------\n                // 11       * --------\n                // 12 * --------\n                // 13    * --------\n                // 14       * --------\n                //\n                // Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n                // those parent-child connection which are possible to maintain are still maintained. It's worth noting\n                // that this is the same effect that we would be get by multiple use of outdent command. However doing\n                // it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n                // less conversion (faster).\n                while(next && next.name == 'listItem' && next.getAttribute('listIndent') !== 0){\n                    // Check each next list item, as long as its indent is bigger than 0.\n                    // If the indent is 0 we are not going to change anything anyway.\n                    const indent = next.getAttribute('listIndent');\n                    // We check if that's item indent is lower as current relative indent.\n                    if (indent < currentIndent) {\n                        // If it is, current relative indent becomes that indent.\n                        currentIndent = indent;\n                    }\n                    // Fix indent relatively to current relative indent.\n                    // Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n                    const newIndent = indent - currentIndent;\n                    // Save the entry in changes array. We do not apply it at the moment, because we will need to\n                    // reverse the changes so the last item is changed first.\n                    // This is to keep model in correct state all the time.\n                    changes.push({\n                        element: next,\n                        listIndent: newIndent\n                    });\n                    // Find next item.\n                    next = next.nextSibling;\n                }\n                changes = changes.reverse();\n                for (const item of changes){\n                    writer.setAttribute('listIndent', item.listIndent, item.element);\n                }\n            }\n            // If we are turning on, we might change some items that are already `listItem`s but with different type.\n            // Changing one nested list item to other type should also trigger changing all its siblings so the\n            // whole nested list is of the same type.\n            // Example (assume changing to numbered list):\n            // * ------\t\t\t\t<-- do not fix, top level item\n            //   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n            //      * ------\t\t<-- do not fix, item is not affected (different list)\n            //   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n            //      * ------\t\t<-- fix, because latter list item of this item's list is changed\n            //      * ---[--\t\t<-- already in selection\n            //   * ------\t\t\t<-- already in selection\n            //   * ------\t\t\t<-- already in selection\n            // * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n            //   * ---]--\t\t\t<-- already in selection\n            //   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n            //      * ------\t\t<-- do not fix, item is not affected (different list)\n            // * ------\t\t\t\t<-- do not fix, top level item\n            if (!turnOff) {\n                // Find lowest indent among selected items. This will be indicator what is the indent of\n                // top-most list affected by the command.\n                let lowestIndent = Number.POSITIVE_INFINITY;\n                for (const item of blocks){\n                    if (item.is('element', 'listItem') && item.getAttribute('listIndent') < lowestIndent) {\n                        lowestIndent = item.getAttribute('listIndent');\n                    }\n                }\n                // Do not execute the fix for top-level lists.\n                lowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n                // Fix types of list items that are \"before\" the selected blocks.\n                _fixType(blocks, true, lowestIndent);\n                // Fix types of list items that are \"after\" the selected blocks.\n                _fixType(blocks, false, lowestIndent);\n            }\n            // Phew! Now it will be easier :).\n            // For each block element that was in the selection, we will either: turn it to list item,\n            // turn it to paragraph, or change it's type. Or leave it as it is.\n            // Do it in reverse as there might be multiple blocks (same as with changing indents).\n            for (const element of blocks.reverse()){\n                if (turnOff && element.name == 'listItem') {\n                    // We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n                    // List item specific attributes are removed by post fixer.\n                    writer.rename(element, 'paragraph');\n                } else if (!turnOff && element.name != 'listItem') {\n                    // We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n                    // The order of operations is important to keep model in correct state.\n                    writer.setAttributes({\n                        listType: this.type,\n                        listIndent: 0\n                    }, element);\n                    writer.rename(element, 'listItem');\n                } else if (!turnOff && element.name == 'listItem' && element.getAttribute('listType') != this.type) {\n                    // We are turning on and the element is a `listItem` but has different type - change it's type and\n                    // type of it's all siblings that have same indent.\n                    writer.setAttribute('listType', this.type, element);\n                }\n            }\n            /**\n\t\t\t * Event fired by the {@link #execute} method.\n\t\t\t *\n\t\t\t * It allows to execute an action after executing the {@link ~ListCommand#execute} method, for example adjusting\n\t\t\t * attributes of changed blocks.\n\t\t\t *\n\t\t\t * @protected\n\t\t\t * @event _executeCleanup\n\t\t\t */ this.fire('_executeCleanup', blocks);\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        // Check whether closest `listItem` ancestor of the position has a correct type.\n        const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n        return !!listItem && listItem.is('element', 'listItem') && listItem.getAttribute('listType') == this.type;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        // If command value is true it means that we are in list item, so the command should be enabled.\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        // Otherwise, check if list item can be inserted at the position start.\n        return checkCanBecomeListItem(firstBlock, schema);\n    }\n}\n/**\n * Helper function used when one or more list item have their type changed. Fixes type of other list items\n * that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n * not to duplicated code, as same fix has to be performed before and after selection.\n *\n * @param blocks Blocks that are in selection.\n * @param isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n * or blocks after last selected block (`false`).\n * @param lowestIndent Lowest indent among selected blocks.\n */ function _fixType(blocks, isBackward, lowestIndent) {\n    // We need to check previous sibling of first changed item and next siblings of last changed item.\n    const startingItem = isBackward ? blocks[0] : blocks[blocks.length - 1];\n    if (startingItem.is('element', 'listItem')) {\n        let item = startingItem[isBackward ? 'previousSibling' : 'nextSibling'];\n        // During processing items, keeps the lowest indent of already processed items.\n        // This saves us from changing too many items.\n        // Following example is for going forward as it is easier to read, however same applies to going backward.\n        // * ------\n        //   * ------\n        //     * --[---\n        //   * ------\t\t<-- `lowestIndent` should be 1\n        //     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n        //     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n        //   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n        //     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n        //   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n        // * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n        let currentIndent = startingItem.getAttribute('listIndent');\n        // Look back until a list item with indent lower than reference `lowestIndent`.\n        // That would be the parent of nested sublist which contains item having `lowestIndent`.\n        while(item && item.is('element', 'listItem') && item.getAttribute('listIndent') >= lowestIndent){\n            if (currentIndent > item.getAttribute('listIndent')) {\n                currentIndent = item.getAttribute('listIndent');\n            }\n            // Found an item that is in the same nested sublist.\n            if (item.getAttribute('listIndent') == currentIndent) {\n                // Just add the item to selected blocks like it was selected by the user.\n                blocks[isBackward ? 'unshift' : 'push'](item);\n            }\n            item = item[isBackward ? 'previousSibling' : 'nextSibling'];\n        }\n    }\n}\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */ function checkCanBecomeListItem(block, schema) {\n    return schema.checkChild(block.parent, 'listItem') && !schema.isObject(block);\n}\n\n/**\n * The list indent command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */ class LegacyIndentCommand extends Command {\n    /**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */ _indentBy;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command will outdent a list item.\n\t */ constructor(editor, indentDirection){\n        super(editor);\n        this._indentBy = indentDirection == 'forward' ? 1 : -1;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        let itemsToChange = Array.from(doc.selection.getSelectedBlocks());\n        model.change((writer)=>{\n            const lastItem = itemsToChange[itemsToChange.length - 1];\n            // Indenting a list item should also indent all the items that are already sub-items of indented item.\n            let next = lastItem.nextSibling;\n            // Check all items after last indented item, as long as their indent is bigger than indent of that item.\n            while(next && next.name == 'listItem' && next.getAttribute('listIndent') > lastItem.getAttribute('listIndent')){\n                itemsToChange.push(next);\n                next = next.nextSibling;\n            }\n            // We need to be sure to keep model in correct state after each small change, because converters\n            // bases on that state and assumes that model is correct.\n            // Because of that, if the command outdents items, we will outdent them starting from the last item, as\n            // it is safer.\n            if (this._indentBy < 0) {\n                itemsToChange = itemsToChange.reverse();\n            }\n            for (const item of itemsToChange){\n                const indent = item.getAttribute('listIndent') + this._indentBy;\n                // If indent is lower than 0, it means that the item got outdented when it was not indented.\n                // This means that we need to convert that list item to paragraph.\n                if (indent < 0) {\n                    // To keep the model as correct as possible, first rename listItem, then remove attributes,\n                    // as listItem without attributes is very incorrect and will cause problems in converters.\n                    // No need to remove attributes, will be removed by post fixer.\n                    writer.rename(item, 'paragraph');\n                } else {\n                    writer.setAttribute('listIndent', indent, item);\n                }\n            }\n            // It allows to execute an action after executing the `~IndentCommand#execute` method, for example adjusting\n            // attributes of changed list items.\n            this.fire('_executeCleanup', itemsToChange);\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        // Check whether any of position's ancestor is a list item.\n        const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n        // If selection is not in a list item, the command is disabled.\n        if (!listItem || !listItem.is('element', 'listItem')) {\n            return false;\n        }\n        if (this._indentBy > 0) {\n            // Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n            // To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n            const indent = listItem.getAttribute('listIndent');\n            const type = listItem.getAttribute('listType');\n            let prev = listItem.previousSibling;\n            while(prev && prev.is('element', 'listItem') && prev.getAttribute('listIndent') >= indent){\n                if (prev.getAttribute('listIndent') == indent) {\n                    // The item is on the same level.\n                    // If it has same type, it means that we found a preceding sibling from the same list.\n                    // If it does not have same type, it means that `listItem` is on different list (this can happen only\n                    // on top level lists, though).\n                    return prev.getAttribute('listType') == type;\n                }\n                prev = prev.previousSibling;\n            }\n            // Could not find similar list item, this means that `listItem` is first in its list.\n            return false;\n        }\n        // If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n        return true;\n    }\n}\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ViewContainerElement}.\n *\n * @internal\n * @param writer The writer instance.\n */ function createViewListItemElement(writer) {\n    const viewItem = writer.createContainerElement('li');\n    viewItem.getFillerOffset = getListItemFillerOffset;\n    return viewItem;\n}\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (`<li>`) with the model `listItem` element.\n * The function then returns the created view list item (`<li>`).\n *\n * @internal\n * @param modelItem Model list item.\n * @param conversionApi Conversion interface.\n * @returns View list element.\n */ function generateLiInUl(modelItem, conversionApi) {\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer;\n    const listType = modelItem.getAttribute('listType') == 'numbered' ? 'ol' : 'ul';\n    const viewItem = createViewListItemElement(viewWriter);\n    const viewList = viewWriter.createContainerElement(listType, null);\n    viewWriter.insert(viewWriter.createPositionAt(viewList, 0), viewItem);\n    mapper.bindElements(modelItem, viewItem);\n    return viewItem;\n}\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @internal\n * @param modelItem Model list item.\n * @param injectedItem\n * @param conversionApi Conversion interface.\n * @param model The model instance.\n */ function injectViewList(modelItem, injectedItem, conversionApi, model) {\n    const injectedList = injectedItem.parent;\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer;\n    // The position where the view list will be inserted.\n    let insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem));\n    // 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n    // that is a \"parent\" or \"sibling\" of the injected model item.\n    // If there is no such list item, it means that the injected list item is the first item in \"its list\".\n    const refItem = getSiblingListItem(modelItem.previousSibling, {\n        sameIndent: true,\n        smallerIndent: true,\n        listIndent: modelItem.getAttribute('listIndent')\n    });\n    const prevItem = modelItem.previousSibling;\n    if (refItem && refItem.getAttribute('listIndent') == modelItem.getAttribute('listIndent')) {\n        // There is a list item with the same indent - we found the same-level sibling.\n        // Break the list after it. The inserted view item will be added in the broken space.\n        const viewItem = mapper.toViewElement(refItem);\n        insertPosition = viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n    } else {\n        // There is no list item with the same indent. Check the previous model item.\n        if (prevItem && prevItem.name == 'listItem') {\n            // If it is a list item, it has to have a lower indent.\n            // It means that the inserted item should be added to it as its nested item.\n            insertPosition = mapper.toViewPosition(model.createPositionAt(prevItem, 'end'));\n            // There could be some not mapped elements (eg. span in to-do list) but we need to insert\n            // a nested list directly inside the li element.\n            const mappedViewAncestor = mapper.findMappedViewAncestor(insertPosition);\n            const nestedList = findNestedList(mappedViewAncestor);\n            // If there already is some nested list, then use it's position.\n            if (nestedList) {\n                insertPosition = viewWriter.createPositionBefore(nestedList);\n            } else {\n                // Else just put new list on the end of list item content.\n                insertPosition = viewWriter.createPositionAt(mappedViewAncestor, 'end');\n            }\n        } else {\n            // The previous item is not a list item (or does not exist at all).\n            // Just map the position and insert the view item at the mapped position.\n            insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem));\n        }\n    }\n    insertPosition = positionAfterUiElements(insertPosition);\n    // Insert the view item.\n    viewWriter.insert(insertPosition, injectedList);\n    // 2. Handle possible children of the injected model item.\n    if (prevItem && prevItem.name == 'listItem') {\n        const prevView = mapper.toViewElement(prevItem);\n        const walkerBoundaries = viewWriter.createRange(viewWriter.createPositionAt(prevView, 0), insertPosition);\n        const walker = walkerBoundaries.getWalker({\n            ignoreElementEnd: true\n        });\n        for (const value of walker){\n            if (value.item.is('element', 'li')) {\n                const breakPosition = viewWriter.breakContainer(viewWriter.createPositionBefore(value.item));\n                const viewList = value.item.parent;\n                const targetPosition = viewWriter.createPositionAt(injectedItem, 'end');\n                mergeViewLists(viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter);\n                viewWriter.move(viewWriter.createRangeOn(viewList), targetPosition);\n                // This is bad, but those lists will be removed soon anyway.\n                walker._position = breakPosition;\n            }\n        }\n    } else {\n        const nextViewList = injectedList.nextSibling;\n        if (nextViewList && (nextViewList.is('element', 'ul') || nextViewList.is('element', 'ol'))) {\n            let lastSubChild = null;\n            for (const child of nextViewList.getChildren()){\n                const modelChild = mapper.toModelElement(child);\n                if (modelChild && modelChild.getAttribute('listIndent') > modelItem.getAttribute('listIndent')) {\n                    lastSubChild = child;\n                } else {\n                    break;\n                }\n            }\n            if (lastSubChild) {\n                viewWriter.breakContainer(viewWriter.createPositionAfter(lastSubChild));\n                viewWriter.move(viewWriter.createRangeOn(lastSubChild.parent), viewWriter.createPositionAt(injectedItem, 'end'));\n            }\n        }\n    }\n    // Merge the inserted view list with its possible neighbor lists.\n    mergeViewLists(viewWriter, injectedList, injectedList.nextSibling);\n    mergeViewLists(viewWriter, injectedList.previousSibling, injectedList);\n}\nfunction mergeViewLists(viewWriter, firstList, secondList) {\n    // Check if two lists are going to be merged.\n    if (!firstList || !secondList || firstList.name != 'ul' && firstList.name != 'ol') {\n        return null;\n    }\n    // Both parameters are list elements, so compare types now.\n    if (firstList.name != secondList.name || firstList.getAttribute('class') !== secondList.getAttribute('class')) {\n        return null;\n    }\n    return viewWriter.mergeContainers(viewWriter.createPositionAfter(firstList));\n}\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @internal\n */ function positionAfterUiElements(viewPosition) {\n    return viewPosition.getLastMatchingPosition((value)=>value.item.is('uiElement'));\n}\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @internal\n * @param options Search criteria.\n * @param options.sameIndent Whether the sought sibling should have the same indentation.\n * @param options.smallerIndent Whether the sought sibling should have a smaller indentation.\n * @param options.listIndent The reference indentation.\n * @param options.direction Walking direction.\n */ function getSiblingListItem(modelItem, options) {\n    const sameIndent = !!options.sameIndent;\n    const smallerIndent = !!options.smallerIndent;\n    const indent = options.listIndent;\n    let item = modelItem;\n    while(item && item.name == 'listItem'){\n        const itemIndent = item.getAttribute('listIndent');\n        if (sameIndent && indent == itemIndent || smallerIndent && indent > itemIndent) {\n            return item;\n        }\n        if (options.direction === 'forward') {\n            item = item.nextSibling;\n        } else {\n            item = item.previousSibling;\n        }\n    }\n    return null;\n}\n/**\n * Returns a first list view element that is direct child of the given view element.\n *\n * @internal\n */ function findNestedList(viewElement) {\n    for (const node of viewElement.getChildren()){\n        if (node.name == 'ul' || node.name == 'ol') {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Returns an array with all `listItem` elements that represent the same list.\n *\n * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n *\n * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n *\n * @internal\n * @param position Starting position.\n * @param direction Walking direction.\n */ function getSiblingNodes(position, direction) {\n    const items = [];\n    const listItem = position.parent;\n    const walkerOptions = {\n        ignoreElementEnd: false,\n        startPosition: position,\n        shallow: true,\n        direction\n    };\n    const limitIndent = listItem.getAttribute('listIndent');\n    const nodes = [\n        ...new ModelTreeWalker(walkerOptions)\n    ].filter((value)=>value.item.is('element')).map((value)=>value.item);\n    for (const element of nodes){\n        // If found something else than `listItem`, we're out of the list scope.\n        if (!element.is('element', 'listItem')) {\n            break;\n        }\n        // If current parsed item has lower indent that element that the element that was a starting point,\n        // it means we left a nested list. Abort searching items.\n        //\n        // ■ List item 1.       [listIndent=0]\n        //     ○ List item 2.[] [listIndent=1], limitIndent = 1,\n        //     ○ List item 3.   [listIndent=1]\n        // ■ List item 4.       [listIndent=0]\n        //\n        // Abort searching when leave nested list.\n        if (element.getAttribute('listIndent') < limitIndent) {\n            break;\n        }\n        // ■ List item 1.[]     [listIndent=0] limitIndent = 0,\n        //     ○ List item 2.   [listIndent=1]\n        //     ○ List item 3.   [listIndent=1]\n        // ■ List item 4.       [listIndent=0]\n        //\n        // Ignore nested lists.\n        if (element.getAttribute('listIndent') > limitIndent) {\n            continue;\n        }\n        // ■ List item 1.[]  [listType=bulleted]\n        // 1. List item 2.   [listType=numbered]\n        // 2.List item 3.    [listType=numbered]\n        //\n        // Abort searching when found a different kind of a list.\n        if (element.getAttribute('listType') !== listItem.getAttribute('listType')) {\n            break;\n        }\n        // ■ List item 1.[]  [listType=bulleted]\n        // ■ List item 2.    [listType=bulleted]\n        // ○ List item 3.    [listType=bulleted]\n        // ○ List item 4.    [listType=bulleted]\n        //\n        // Abort searching when found a different list style,\n        if (element.getAttribute('listStyle') !== listItem.getAttribute('listStyle')) {\n            break;\n        }\n        // ... different direction\n        if (element.getAttribute('listReversed') !== listItem.getAttribute('listReversed')) {\n            break;\n        }\n        // ... and different start index\n        if (element.getAttribute('listStart') !== listItem.getAttribute('listStart')) {\n            break;\n        }\n        if (direction === 'backward') {\n            items.unshift(element);\n        } else {\n            items.push(element);\n        }\n    }\n    return items;\n}\n/**\n * Returns an array with all `listItem` elements in the model selection.\n *\n * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n * If no list is selected, it returns an empty array.\n * The order of the elements is not specified.\n *\n * @internal\n */ function getSelectedListItems(model) {\n    const document = model.document;\n    // For all selected blocks find all list items that are being selected\n    // and update the `listStyle` attribute in those lists.\n    let listItems = [\n        ...document.selection.getSelectedBlocks()\n    ].filter((element)=>element.is('element', 'listItem')).map((element)=>{\n        const position = model.change((writer)=>writer.createPositionAt(element, 0));\n        return [\n            ...getSiblingNodes(position, 'backward'),\n            ...getSiblingNodes(position, 'forward')\n        ];\n    }).flat();\n    // Since `getSelectedBlocks()` can return items that belong to the same list, and\n    // `getSiblingNodes()` returns the entire list, we need to remove duplicated items.\n    listItems = [\n        ...new Set(listItems)\n    ];\n    return listItems;\n}\nconst BULLETED_LIST_STYLE_TYPES = [\n    'disc',\n    'circle',\n    'square'\n];\n// There's a lot of them (https://www.w3.org/TR/css-counter-styles-3/#typedef-counter-style).\n// Let's support only those that can be selected by ListPropertiesUI.\nconst NUMBERED_LIST_STYLE_TYPES = [\n    'decimal',\n    'decimal-leading-zero',\n    'lower-roman',\n    'upper-roman',\n    'lower-latin',\n    'upper-latin'\n];\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n *\n * @internal\n */ function getListTypeFromListStyleType(listStyleType) {\n    if (BULLETED_LIST_STYLE_TYPES.includes(listStyleType)) {\n        return 'bulleted';\n    }\n    if (NUMBERED_LIST_STYLE_TYPES.includes(listStyleType)) {\n        return 'numbered';\n    }\n    return null;\n}\n/**\n * Implementation of getFillerOffset for view list item element.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */ function getListItemFillerOffset() {\n    const hasOnlyLists = !this.isEmpty && (this.getChild(0).name == 'ul' || this.getChild(0).name == 'ol');\n    if (this.isEmpty || hasOnlyLists) {\n        return 0;\n    }\n    return getViewFillerOffset.call(this);\n}\n\n/**\n * A set of helpers related to legacy lists.\n */ class LegacyListUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */ getListTypeFromListStyleType(listStyleType) {\n        return getListTypeFromListStyleType(listStyleType);\n    }\n    /**\n\t * Returns an array with all `listItem` elements in the model selection.\n\t *\n\t * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n\t * If no list is selected, it returns an empty array.\n\t * The order of the elements is not specified.\n\t */ getSelectedListItems(model) {\n        return getSelectedListItems(model);\n    }\n    /**\n\t * Returns an array with all `listItem` elements that represent the same list.\n\t *\n\t * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n\t *\n\t * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n\t *\n\t * @param position Starting position.\n\t * @param direction Walking direction.\n\t */ getSiblingNodes(position, direction) {\n        return getSiblingNodes(position, direction);\n    }\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n */ function modelViewInsertion$1(model) {\n    return (evt, data, conversionApi)=>{\n        const consumable = conversionApi.consumable;\n        if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        consumable.consume(data.item, 'insert');\n        consumable.consume(data.item, 'attribute:listType');\n        consumable.consume(data.item, 'attribute:listIndent');\n        const modelItem = data.item;\n        const viewItem = generateLiInUl(modelItem, conversionApi);\n        injectViewList(modelItem, viewItem, conversionApi, model);\n    };\n}\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function modelViewRemove(model) {\n    return (evt, data, conversionApi)=>{\n        const viewPosition = conversionApi.mapper.toViewPosition(data.position);\n        const viewStart = viewPosition.getLastMatchingPosition((value)=>!value.item.is('element', 'li'));\n        const viewItem = viewStart.nodeAfter;\n        const viewWriter = conversionApi.writer;\n        // 1. Break the container after and before the list item.\n        // This will create a view list with one view list item - the one to remove.\n        viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n        viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n        // 2. Remove the list with the item to remove.\n        const viewList = viewItem.parent;\n        const viewListPrev = viewList.previousSibling;\n        const removeRange = viewWriter.createRangeOn(viewList);\n        const removed = viewWriter.remove(removeRange);\n        // 3. Merge the whole created by breaking and removing the list.\n        if (viewListPrev && viewListPrev.nextSibling) {\n            mergeViewLists(viewWriter, viewListPrev, viewListPrev.nextSibling);\n        }\n        // 4. Bring back nested list that was in the removed <li>.\n        const modelItem = conversionApi.mapper.toModelElement(viewItem);\n        hoistNestedLists(modelItem.getAttribute('listIndent') + 1, data.position, removeRange.start, viewItem, conversionApi, model);\n        // 5. Unbind removed view item and all children.\n        for (const child of viewWriter.createRangeIn(removed).getItems()){\n            conversionApi.mapper.unbindViewElement(child);\n        }\n        evt.stop();\n    };\n}\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/legacytodolist/legacytodolistconverters~modelViewChangeType} to see an example of it.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */ const modelViewChangeType$1 = (evt, data, conversionApi)=>{\n    if (!conversionApi.consumable.test(data.item, evt.name)) {\n        return;\n    }\n    const viewItem = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer;\n    // Break the container after and before the list item.\n    // This will create a view list with one view list item -- the one that changed type.\n    viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n    viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n    // Change name of the view list that holds the changed view item.\n    // We cannot just change name property, because that would not render properly.\n    const viewList = viewItem.parent;\n    const listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n    viewWriter.rename(listName, viewList);\n};\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/legacylist/legacyconverters~modelViewChangeType}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */ const modelViewMergeAfterChangeType = (evt, data, conversionApi)=>{\n    conversionApi.consumable.consume(data.item, evt.name);\n    const viewItem = conversionApi.mapper.toViewElement(data.item);\n    const viewList = viewItem.parent;\n    const viewWriter = conversionApi.writer;\n    // Merge the changed view list with other lists, if possible.\n    mergeViewLists(viewWriter, viewList, viewList.nextSibling);\n    mergeViewLists(viewWriter, viewList.previousSibling, viewList);\n};\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function modelViewChangeIndent(model) {\n    return (evt, data, conversionApi)=>{\n        if (!conversionApi.consumable.consume(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        const viewItem = conversionApi.mapper.toViewElement(data.item);\n        const viewWriter = conversionApi.writer;\n        // 1. Break the container after and before the list item.\n        // This will create a view list with one view list item -- the one that changed type.\n        viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n        viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n        // 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n        const viewList = viewItem.parent;\n        const viewListPrev = viewList.previousSibling;\n        const removeRange = viewWriter.createRangeOn(viewList);\n        viewWriter.remove(removeRange);\n        if (viewListPrev && viewListPrev.nextSibling) {\n            mergeViewLists(viewWriter, viewListPrev, viewListPrev.nextSibling);\n        }\n        // 3. Bring back nested list that was in the removed <li>.\n        hoistNestedLists(data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi, model);\n        // 4. Inject view list like it is newly inserted.\n        injectViewList(data.item, viewItem, conversionApi, model);\n        // 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n        for (const child of data.item.getChildren()){\n            conversionApi.consumable.consume(child, 'insert');\n        }\n    };\n}\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n * <paragraph>xxx</paragraph>       // Instead of this wrong view state:\n * <listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n * ```\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n */ const modelViewSplitOnInsert = (evt, data, conversionApi)=>{\n    if (!conversionApi.consumable.test(data.item, evt.name)) {\n        return;\n    }\n    if (data.item.name != 'listItem') {\n        let viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        const viewWriter = conversionApi.writer;\n        const lists = [];\n        // Break multiple ULs/OLs if there are.\n        //\n        // Imagine following list:\n        //\n        // 1 --------\n        //   1.1 --------\n        //     1.1.1 --------\n        //     1.1.2 --------\n        //     1.1.3 --------\n        //       1.1.3.1 --------\n        //   1.2 --------\n        //     1.2.1 --------\n        // 2 --------\n        //\n        // Insert paragraph after item 1.1.1:\n        //\n        // 1 --------\n        //   1.1 --------\n        //     1.1.1 --------\n        //\n        // Lorem ipsum.\n        //\n        //     1.1.2 --------\n        //     1.1.3 --------\n        //       1.1.3.1 --------\n        //   1.2 --------\n        //     1.2.1 --------\n        // 2 --------\n        //\n        // In this case 1.1.2 has to become beginning of a new list.\n        // We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n        // Then we need to move those broken pieces one after another and merge:\n        //\n        // 1 --------\n        //   1.1 --------\n        //     1.1.1 --------\n        //\n        // Lorem ipsum.\n        //\n        // 1.1.2 --------\n        //   1.1.3 --------\n        //     1.1.3.1 --------\n        // 1.2 --------\n        //   1.2.1 --------\n        // 2 --------\n        //\n        while(viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol'){\n            viewPosition = viewWriter.breakContainer(viewPosition);\n            if (viewPosition.parent.name != 'li') {\n                break;\n            }\n            // Remove lists that are after inserted element.\n            // They will be brought back later, below the inserted element.\n            const removeStart = viewPosition;\n            const removeEnd = viewWriter.createPositionAt(viewPosition.parent, 'end');\n            // Don't remove if there is nothing to remove.\n            if (!removeStart.isEqual(removeEnd)) {\n                const removed = viewWriter.remove(viewWriter.createRange(removeStart, removeEnd));\n                lists.push(removed);\n            }\n            viewPosition = viewWriter.createPositionAfter(viewPosition.parent);\n        }\n        // Bring back removed lists.\n        if (lists.length > 0) {\n            for(let i = 0; i < lists.length; i++){\n                const previousList = viewPosition.nodeBefore;\n                const insertedRange = viewWriter.insert(viewPosition, lists[i]);\n                viewPosition = insertedRange.end;\n                // Don't merge first list! We want a split in that place (this is why this converter is introduced).\n                if (i > 0) {\n                    const mergePos = mergeViewLists(viewWriter, previousList, previousList.nextSibling);\n                    // If `mergePos` is in `previousList` it means that the lists got merged.\n                    // In this case, we need to fix insert position.\n                    if (mergePos && mergePos.parent == previousList) {\n                        viewPosition.offset--;\n                    }\n                }\n            }\n            // Merge last inserted list with element after it.\n            mergeViewLists(viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter);\n        }\n    }\n};\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul>\n * <paragraph>xxx</paragraph>       <p>xxx</p>\n * <listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n * ```\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n */ const modelViewMergeAfter = (evt, data, conversionApi)=>{\n    const viewPosition = conversionApi.mapper.toViewPosition(data.position);\n    const viewItemPrev = viewPosition.nodeBefore;\n    const viewItemNext = viewPosition.nodeAfter;\n    // Merge lists if something (remove, move) was done from inside of list.\n    // Merging will be done only if both items are view lists of the same type.\n    // The check is done inside the helper function.\n    mergeViewLists(conversionApi.writer, viewItemPrev, viewItemNext);\n};\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const viewModelConverter = (evt, data, conversionApi)=>{\n    if (conversionApi.consumable.consume(data.viewItem, {\n        name: true\n    })) {\n        const writer = conversionApi.writer;\n        // 1. Create `listItem` model element.\n        const listItem = writer.createElement('listItem');\n        // 2. Handle `listItem` model element attributes.\n        const indent = getIndent(data.viewItem);\n        writer.setAttribute('listIndent', indent, listItem);\n        // Set 'bulleted' as default. If this item is pasted into a context,\n        const type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n        writer.setAttribute('listType', type, listItem);\n        if (!conversionApi.safeInsert(listItem, data.modelCursor)) {\n            return;\n        }\n        const nextPosition = viewToModelListItemChildrenConverter(listItem, data.viewItem.getChildren(), conversionApi);\n        // Result range starts before the first item and ends after the last.\n        data.modelRange = writer.createRange(data.modelCursor, nextPosition);\n        conversionApi.updateConversionResult(listItem, data);\n    }\n};\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const cleanList = (evt, data, conversionApi)=>{\n    if (conversionApi.consumable.test(data.viewItem, {\n        name: true\n    })) {\n        // Caching children because when we start removing them iterating fails.\n        const children = Array.from(data.viewItem.getChildren());\n        for (const child of children){\n            const isWrongElement = !(child.is('element', 'li') || isList(child));\n            if (isWrongElement) {\n                child._remove();\n            }\n        }\n    }\n};\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const cleanListItem = (evt, data, conversionApi)=>{\n    if (conversionApi.consumable.test(data.viewItem, {\n        name: true\n    })) {\n        if (data.viewItem.childCount === 0) {\n            return;\n        }\n        const children = [\n            ...data.viewItem.getChildren()\n        ];\n        let foundList = false;\n        for (const child of children){\n            if (foundList && !isList(child)) {\n                child._remove();\n            }\n            if (isList(child)) {\n                // If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n                foundList = true;\n            }\n        }\n    }\n};\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @internal\n */ function modelToViewPosition(view) {\n    return (evt, data)=>{\n        if (data.isPhantom) {\n            return;\n        }\n        const modelItem = data.modelPosition.nodeBefore;\n        if (modelItem && modelItem.is('element', 'listItem')) {\n            const viewItem = data.mapper.toViewElement(modelItem);\n            const topmostViewList = viewItem.getAncestors().find(isList);\n            const walker = view.createPositionAt(viewItem, 0).getWalker();\n            for (const value of walker){\n                if (value.type == 'elementStart' && value.item.is('element', 'li')) {\n                    data.viewPosition = value.previousPosition;\n                    break;\n                } else if (value.type == 'elementEnd' && value.item == topmostViewList) {\n                    data.viewPosition = value.nextPosition;\n                    break;\n                }\n            }\n        }\n    };\n}\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @internal\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function viewToModelPosition(model) {\n    return (evt, data)=>{\n        const viewPos = data.viewPosition;\n        const viewParent = viewPos.parent;\n        const mapper = data.mapper;\n        if (viewParent.name == 'ul' || viewParent.name == 'ol') {\n            // Position is directly in <ul> or <ol>.\n            if (!viewPos.isAtEnd) {\n                // If position is not at the end, it must be before <li>.\n                // Get that <li>, map it to `listItem` and set model position before that `listItem`.\n                const modelNode = mapper.toModelElement(viewPos.nodeAfter);\n                data.modelPosition = model.createPositionBefore(modelNode);\n            } else {\n                // Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n                // There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n                // because that <li> may contain nested items.\n                // We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n                const modelNode = mapper.toModelElement(viewPos.nodeBefore);\n                const modelLength = mapper.getModelLength(viewPos.nodeBefore);\n                // Then we get model position before mapped `listItem` and shift it accordingly.\n                data.modelPosition = model.createPositionBefore(modelNode).getShiftedBy(modelLength);\n            }\n            evt.stop();\n        } else if (viewParent.name == 'li' && viewPos.nodeBefore && (viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol')) {\n            // In most cases when view position is in <li> it is in text and this is a correct position.\n            // However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n            const modelNode = mapper.toModelElement(viewParent);\n            // Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n            // Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n            let modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n            let viewList = viewPos.nodeBefore;\n            while(viewList && isList(viewList)){\n                modelLength += mapper.getModelLength(viewList);\n                viewList = viewList.previousSibling;\n            }\n            data.modelPosition = model.createPositionBefore(modelNode).getShiftedBy(modelLength);\n            evt.stop();\n        }\n    };\n}\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n * ```\n *\n * @internal\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @returns `true` if any change has been applied, `false` otherwise.\n */ function modelChangePostFixer(model, writer) {\n    const changes = model.document.differ.getChanges();\n    const itemToListHead = new Map();\n    let applied = false;\n    for (const entry of changes){\n        if (entry.type == 'insert' && entry.name == 'listItem') {\n            _addListToFix(entry.position);\n        } else if (entry.type == 'insert' && entry.name != 'listItem') {\n            if (entry.name != '$text') {\n                // In case of renamed element.\n                const item = entry.position.nodeAfter;\n                if (item.hasAttribute('listIndent')) {\n                    writer.removeAttribute('listIndent', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listType')) {\n                    writer.removeAttribute('listType', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listStyle')) {\n                    writer.removeAttribute('listStyle', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listReversed')) {\n                    writer.removeAttribute('listReversed', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listStart')) {\n                    writer.removeAttribute('listStart', item);\n                    applied = true;\n                }\n                for (const innerItem of Array.from(model.createRangeIn(item)).filter((e)=>e.item.is('element', 'listItem'))){\n                    _addListToFix(innerItem.previousPosition);\n                }\n            }\n            const posAfter = entry.position.getShiftedBy(entry.length);\n            _addListToFix(posAfter);\n        } else if (entry.type == 'remove' && entry.name == 'listItem') {\n            _addListToFix(entry.position);\n        } else if (entry.type == 'attribute' && entry.attributeKey == 'listIndent') {\n            _addListToFix(entry.range.start);\n        } else if (entry.type == 'attribute' && entry.attributeKey == 'listType') {\n            _addListToFix(entry.range.start);\n        }\n    }\n    for (const listHead of itemToListHead.values()){\n        _fixListIndents(listHead);\n        _fixListTypes(listHead);\n    }\n    return applied;\n    function _addListToFix(position) {\n        const previousNode = position.nodeBefore;\n        if (!previousNode || !previousNode.is('element', 'listItem')) {\n            const item = position.nodeAfter;\n            if (item && item.is('element', 'listItem')) {\n                itemToListHead.set(item, item);\n            }\n        } else {\n            let listHead = previousNode;\n            if (itemToListHead.has(listHead)) {\n                return;\n            }\n            for(// Cache previousSibling and reuse for performance reasons. See #6581.\n            let previousSibling = listHead.previousSibling; previousSibling && previousSibling.is('element', 'listItem'); previousSibling = listHead.previousSibling){\n                listHead = previousSibling;\n                if (itemToListHead.has(listHead)) {\n                    return;\n                }\n            }\n            itemToListHead.set(previousNode, listHead);\n        }\n    }\n    function _fixListIndents(item) {\n        let maxIndent = 0;\n        let fixBy = null;\n        while(item && item.is('element', 'listItem')){\n            const itemIndent = item.getAttribute('listIndent');\n            if (itemIndent > maxIndent) {\n                let newIndent;\n                if (fixBy === null) {\n                    fixBy = itemIndent - maxIndent;\n                    newIndent = maxIndent;\n                } else {\n                    if (fixBy > itemIndent) {\n                        fixBy = itemIndent;\n                    }\n                    newIndent = itemIndent - fixBy;\n                }\n                writer.setAttribute('listIndent', newIndent, item);\n                applied = true;\n            } else {\n                fixBy = null;\n                maxIndent = item.getAttribute('listIndent') + 1;\n            }\n            item = item.nextSibling;\n        }\n    }\n    function _fixListTypes(item) {\n        let typesStack = [];\n        let prev = null;\n        while(item && item.is('element', 'listItem')){\n            const itemIndent = item.getAttribute('listIndent');\n            if (prev && prev.getAttribute('listIndent') > itemIndent) {\n                typesStack = typesStack.slice(0, itemIndent + 1);\n            }\n            if (itemIndent != 0) {\n                if (typesStack[itemIndent]) {\n                    const type = typesStack[itemIndent];\n                    if (item.getAttribute('listType') != type) {\n                        writer.setAttribute('listType', type, item);\n                        applied = true;\n                    }\n                } else {\n                    typesStack[itemIndent] = item.getAttribute('listType');\n                }\n            }\n            prev = item;\n            item = item.nextSibling;\n        }\n    }\n}\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n * // At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n * //              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n *\n * @internal\n */ const modelIndentPasteFixer = function(evt, [content, selectable]) {\n    const model = this;\n    // Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n    // elements before it and there is no need to fix indents, because even if we insert that content into a list,\n    // that list will be broken.\n    // Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n    // would create incorrect model.\n    let item = content.is('documentFragment') ? content.getChild(0) : content;\n    let selection;\n    if (!selectable) {\n        selection = model.document.selection;\n    } else {\n        selection = model.createSelection(selectable);\n    }\n    if (item && item.is('element', 'listItem')) {\n        // Get a reference list item. Inserted list items will be fixed according to that item.\n        const pos = selection.getFirstPosition();\n        let refItem = null;\n        if (pos.parent.is('element', 'listItem')) {\n            refItem = pos.parent;\n        } else if (pos.nodeBefore && pos.nodeBefore.is('element', 'listItem')) {\n            refItem = pos.nodeBefore;\n        }\n        // If there is `refItem` it means that we do insert list items into an existing list.\n        if (refItem) {\n            // First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n            // to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n            // Indent of all those items has to be adjusted to reference item.\n            const indentChange = refItem.getAttribute('listIndent');\n            // Fix only if there is anything to fix.\n            if (indentChange > 0) {\n                // Adjust indent of all \"first\" list items in inserted data.\n                while(item && item.is('element', 'listItem')){\n                    item._setAttribute('listIndent', item.getAttribute('listIndent') + indentChange);\n                    item = item.nextSibling;\n                }\n            }\n        }\n    }\n};\n/**\n * Helper function that converts children of a given `<li>` view element into corresponding model elements.\n * The function maintains proper order of elements if model `listItem` is split during the conversion\n * due to block children conversion.\n *\n * @param listItemModel List item model element to which converted children will be inserted.\n * @param viewChildren View elements which will be converted.\n * @param conversionApi Conversion interface to be used by the callback.\n * @returns Position on which next elements should be inserted after children conversion.\n */ function viewToModelListItemChildrenConverter(listItemModel, viewChildren, conversionApi) {\n    const { writer, schema } = conversionApi;\n    // A position after the last inserted `listItem`.\n    let nextPosition = writer.createPositionAfter(listItemModel);\n    // Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n    // in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n    for (const child of viewChildren){\n        if (child.name == 'ul' || child.name == 'ol') {\n            // If the children is a list, we will insert its conversion result after currently handled `listItem`.\n            // Then, next insertion position will be set after all the new list items (and maybe other elements if\n            // something split list item).\n            //\n            // If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n            // should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n            nextPosition = conversionApi.convertItem(child, nextPosition).modelCursor;\n        } else {\n            // If this is not a list, try inserting content at the end of the currently handled `listItem`.\n            const result = conversionApi.convertItem(child, writer.createPositionAt(listItemModel, 'end'));\n            // It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n            //\n            // <li><p>Foo</p></li>\n            //\n            // will be converted to:\n            //\n            // <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n            //\n            const convertedChild = result.modelRange.start.nodeAfter;\n            const wasSplit = convertedChild && convertedChild.is('element') && !schema.checkChild(listItemModel, convertedChild.name);\n            if (wasSplit) {\n                // As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n                //\n                // `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n                // that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n                //\n                //\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n                //\n                // However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n                //\n                //\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n                //\n                // or after an element if another element broken auto-paragraphed element:\n                //\n                //\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n                //\n                // We need to check for such cases and use proper list item and position based on it.\n                //\n                if (result.modelCursor.parent.is('element', 'listItem')) {\n                    // (1).\n                    listItemModel = result.modelCursor.parent;\n                } else {\n                    // (2), (3).\n                    listItemModel = findNextListItem(result.modelCursor);\n                }\n                nextPosition = writer.createPositionAfter(listItemModel);\n            }\n        }\n    }\n    return nextPosition;\n}\n/**\n * Helper function that seeks for a next list item starting from given `startPosition`.\n */ function findNextListItem(startPosition) {\n    const treeWalker = new ModelTreeWalker({\n        startPosition\n    });\n    let value;\n    do {\n        value = treeWalker.next();\n    }while (!value.value.item.is('element', 'listItem'))\n    return value.value.item;\n}\n/**\n * Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n * to other given parameters.\n */ function hoistNestedLists(nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi, model) {\n    // Find correct previous model list item element.\n    // The element has to have either same or smaller indent than given reference indent.\n    // This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n    // Keep in mind that such element might not be found, if removed item was the first item.\n    const prevModelItem = getSiblingListItem(modelRemoveStartPosition.nodeBefore, {\n        sameIndent: true,\n        smallerIndent: true,\n        listIndent: nextIndent\n    });\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer;\n    // Indent of found element or `null` if the element has not been found.\n    const prevIndent = prevModelItem ? prevModelItem.getAttribute('listIndent') : null;\n    let insertPosition;\n    if (!prevModelItem) {\n        // If element has not been found, simply insert lists at the position where the removed item was:\n        //\n        // Lorem ipsum.\n        // 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n        //   1.1 --------       <--- this is reference indent.\n        //     1.1.1 --------\n        //     1.1.2 --------\n        //   1.2 --------\n        //\n        // Becomes:\n        //\n        // Lorem ipsum.\n        // 1.1 --------\n        //   1.1.1 --------\n        //   1.1.2 --------\n        // 1.2 --------\n        insertPosition = viewRemoveStartPosition;\n    } else if (prevIndent == nextIndent) {\n        // If element has been found and has same indent as reference indent it means that nested items should\n        // become siblings of found element:\n        //\n        // 1 --------\n        //   1.1 --------\n        //   1.2 --------       <--- this is `prevModelItem`.\n        // 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n        //   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n        //   2.2 --------\n        //\n        // Becomes:\n        //\n        // 1 --------\n        //   1.1 --------\n        //   1.2 --------\n        //   2.1 --------\n        //   2.2 --------\n        const prevViewList = mapper.toViewElement(prevModelItem).parent;\n        insertPosition = viewWriter.createPositionAfter(prevViewList);\n    } else {\n        // If element has been found and has smaller indent as reference indent it means that nested items\n        // should become nested items of found item:\n        //\n        // 1 --------           <--- this is `prevModelItem`.\n        //   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n        //     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n        //     1.1.2 --------\n        //   1.2 --------\n        //\n        // Becomes:\n        //\n        // 1 --------\n        //   1.1.1 --------\n        //   1.1.2 --------\n        //   1.2 --------\n        //\n        // Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n        // because following item may have indent bigger only by one. But this is fixed by postfixer.\n        const modelPosition = model.createPositionAt(prevModelItem, 'end');\n        insertPosition = mapper.toViewPosition(modelPosition);\n    }\n    insertPosition = positionAfterUiElements(insertPosition);\n    // Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n    // are inserted after the first list (no need to recalculate insertion position for them).\n    for (const child of [\n        ...viewRemovedItem.getChildren()\n    ]){\n        if (isList(child)) {\n            insertPosition = viewWriter.move(viewWriter.createRangeOn(child), insertPosition).end;\n            mergeViewLists(viewWriter, child, child.nextSibling);\n            mergeViewLists(viewWriter, child.previousSibling, child);\n        }\n    }\n}\n/**\n * Checks if view element is a list type (ul or ol).\n */ function isList(viewElement) {\n    return viewElement.is('element', 'ol') || viewElement.is('element', 'ul');\n}\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n */ function getIndent(listItem) {\n    let indent = 0;\n    let parent = listItem.parent;\n    while(parent){\n        // Each LI in the tree will result in an increased indent for HTML compliant lists.\n        if (parent.is('element', 'li')) {\n            indent++;\n        } else {\n            // If however the list is nested in other list we should check previous sibling of any of the list elements...\n            const previousSibling = parent.previousSibling;\n            // ...because the we might need increase its indent:\n            //\t\tbefore:                           fixed list:\n            //\t\tOL                                OL\n            //\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n            //\t\t|-> OL                                |-> OL\n            //\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n            if (previousSibling && previousSibling.is('element', 'li')) {\n                indent++;\n            }\n        }\n        parent = parent.parent;\n    }\n    return indent;\n}\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n */ class LegacyListEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete,\n            LegacyListUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Schema.\n        // Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n        // uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n        // If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n        editor.model.schema.register('listItem', {\n            inheritAllFrom: '$block',\n            allowAttributes: [\n                'listType',\n                'listIndent'\n            ]\n        });\n        // Converters.\n        const data = editor.data;\n        const editing = editor.editing;\n        editor.model.document.registerPostFixer((writer)=>modelChangePostFixer(editor.model, writer));\n        editing.mapper.registerViewToModelLength('li', getViewListItemLength);\n        data.mapper.registerViewToModelLength('li', getViewListItemLength);\n        editing.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n        editing.mapper.on('viewToModelPosition', viewToModelPosition(editor.model));\n        data.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n        editor.conversion.for('editingDowncast').add((dispatcher)=>{\n            dispatcher.on('insert', modelViewSplitOnInsert, {\n                priority: 'high'\n            });\n            dispatcher.on('insert:listItem', modelViewInsertion$1(editor.model));\n            dispatcher.on('attribute:listType:listItem', modelViewChangeType$1, {\n                priority: 'high'\n            });\n            dispatcher.on('attribute:listType:listItem', modelViewMergeAfterChangeType, {\n                priority: 'low'\n            });\n            dispatcher.on('attribute:listIndent:listItem', modelViewChangeIndent(editor.model));\n            dispatcher.on('remove:listItem', modelViewRemove(editor.model));\n            dispatcher.on('remove', modelViewMergeAfter, {\n                priority: 'low'\n            });\n        });\n        editor.conversion.for('dataDowncast').add((dispatcher)=>{\n            dispatcher.on('insert', modelViewSplitOnInsert, {\n                priority: 'high'\n            });\n            dispatcher.on('insert:listItem', modelViewInsertion$1(editor.model));\n        });\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            dispatcher.on('element:ul', cleanList, {\n                priority: 'high'\n            });\n            dispatcher.on('element:ol', cleanList, {\n                priority: 'high'\n            });\n            dispatcher.on('element:li', cleanListItem, {\n                priority: 'high'\n            });\n            dispatcher.on('element:li', viewModelConverter);\n        });\n        // Fix indentation of pasted items.\n        editor.model.on('insertContent', modelIndentPasteFixer, {\n            priority: 'high'\n        });\n        // Register commands for numbered and bulleted list.\n        editor.commands.add('numberedList', new LegacyListCommand(editor, 'numbered'));\n        editor.commands.add('bulletedList', new LegacyListCommand(editor, 'bulleted'));\n        // Register commands for indenting.\n        editor.commands.add('indentList', new LegacyIndentCommand(editor, 'forward'));\n        editor.commands.add('outdentList', new LegacyIndentCommand(editor, 'backward'));\n        const viewDocument = editing.view.document;\n        // Overwrite default Enter key behavior.\n        // If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n        this.listenTo(viewDocument, 'enter', (evt, data)=>{\n            const doc = this.editor.model.document;\n            const positionParent = doc.selection.getLastPosition().parent;\n            if (doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty) {\n                this.editor.execute('outdentList');\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'li'\n        });\n        // Overwrite default Backspace key behavior.\n        // If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            // Check conditions from those that require less computations like those immediately available.\n            if (data.direction !== 'backward') {\n                return;\n            }\n            const selection = this.editor.model.document.selection;\n            if (!selection.isCollapsed) {\n                return;\n            }\n            const firstPosition = selection.getFirstPosition();\n            if (!firstPosition.isAtStart) {\n                return;\n            }\n            const positionParent = firstPosition.parent;\n            if (positionParent.name !== 'listItem') {\n                return;\n            }\n            const previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n            if (previousIsAListItem) {\n                return;\n            }\n            this.editor.execute('outdentList');\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'li'\n        });\n        this.listenTo(editor.editing.view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentList' : 'indentList';\n            const command = this.editor.commands.get(commandName);\n            if (command.isEnabled) {\n                editor.execute(commandName);\n                data.stopPropagation();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'li'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const commands = this.editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            indent.registerChildCommand(commands.get('indentList'));\n        }\n        if (outdent) {\n            outdent.registerChildCommand(commands.get('outdentList'));\n        }\n    }\n}\nfunction getViewListItemLength(element) {\n    let length = 1;\n    for (const child of element.getChildren()){\n        if (child.name == 'ul' || child.name == 'ol') {\n            for (const item of child.getChildren()){\n                length += getViewListItemLength(item);\n            }\n        }\n    }\n    return length;\n}\n\n/**\n * The legacy list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing feature}\n * and {@link module:list/list/listui~ListUI list UI feature}.\n */ class LegacyList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListEditing,\n            ListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The list style command. It changes the `listStyle` attribute of the selected list items.\n *\n * If the list type (numbered or bulleted) can be inferred from the passed style type,\n * the command tries to convert selected items to a list of that type.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */ class LegacyListStyleCommand extends Command {\n    /**\n\t * The default type of the list style.\n\t */ defaultType;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t */ constructor(editor, defaultType){\n        super(editor);\n        this.defaultType = defaultType;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */ execute(options = {}) {\n        this._tryToConvertItemsToList(options);\n        const model = this.editor.model;\n        const listItems = getSelectedListItems(model);\n        if (!listItems.length) {\n            return;\n        }\n        model.change((writer)=>{\n            for (const item of listItems){\n                writer.setAttribute('listStyle', options.type || this.defaultType, item);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n        if (listItem && listItem.is('element', 'listItem')) {\n            return listItem.getAttribute('listStyle');\n        }\n        return null;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const editor = this.editor;\n        const numberedList = editor.commands.get('numberedList');\n        const bulletedList = editor.commands.get('bulletedList');\n        return numberedList.isEnabled || bulletedList.isEnabled;\n    }\n    /**\n\t * Checks if the provided list style is valid. Also changes the selection to a list if it's not set yet.\n\t *\n\t * @param options Additional options.\n\t * @param options.type The type of the list style. If `null` is specified, the function does nothing.\n\t*/ _tryToConvertItemsToList(options) {\n        if (!options.type) {\n            return;\n        }\n        const listType = getListTypeFromListStyleType(options.type);\n        /* istanbul ignore next -- @preserve */ if (!listType) {\n            return;\n        }\n        const editor = this.editor;\n        const commandName = `${listType}List`;\n        const command = editor.commands.get(commandName);\n        if (!command.value) {\n            editor.execute(commandName);\n        }\n    }\n}\n\n/**\n * The reversed list command. It changes the `listReversed` attribute of the selected list items. As a result, the list order will be\n * reversed.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */ class LegacyListReversedCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const listItems = getSelectedListItems(model).filter((item)=>item.getAttribute('listType') == 'numbered');\n        model.change((writer)=>{\n            for (const item of listItems){\n                writer.setAttribute('listReversed', !!options.reversed, item);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n        if (listItem && listItem.is('element', 'listItem') && listItem.getAttribute('listType') == 'numbered') {\n            return listItem.getAttribute('listReversed');\n        }\n        return null;\n    }\n}\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */ class LegacyListStartCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options Execute options.\n\t * @param options.startIndex The list start index.\n\t */ execute({ startIndex = 1 } = {}) {\n        const model = this.editor.model;\n        const listItems = getSelectedListItems(model).filter((item)=>item.getAttribute('listType') == 'numbered');\n        model.change((writer)=>{\n            for (const item of listItems){\n                writer.setAttribute('listStart', startIndex >= 0 ? startIndex : 1, item);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n        if (listItem && listItem.is('element', 'listItem') && listItem.getAttribute('listType') == 'numbered') {\n            return listItem.getAttribute('listStart');\n        }\n        return null;\n    }\n}\n\nconst DEFAULT_LIST_TYPE = 'default';\n/**\n * The engine of the list properties feature.\n *\n * It sets the value for the `listItem` attribute of the {@link module:list/legacylist~LegacyList `<listItem>`} element that\n * allows modifying the list style type.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */ class LegacyListPropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListPropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list', {\n            properties: {\n                styles: true,\n                startIndex: false,\n                reversed: false\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const enabledProperties = editor.config.get('list.properties');\n        const strategies = createAttributeStrategies(enabledProperties);\n        // Extend schema.\n        model.schema.extend('listItem', {\n            allowAttributes: strategies.map((s)=>s.attributeName)\n        });\n        for (const strategy of strategies){\n            strategy.addCommand(editor);\n        }\n        // Fix list attributes when modifying their nesting levels (the `listIndent` attribute).\n        this.listenTo(editor.commands.get('indentList'), '_executeCleanup', fixListAfterIndentListCommand(editor, strategies));\n        this.listenTo(editor.commands.get('outdentList'), '_executeCleanup', fixListAfterOutdentListCommand(editor, strategies));\n        this.listenTo(editor.commands.get('bulletedList'), '_executeCleanup', restoreDefaultListStyle(editor));\n        this.listenTo(editor.commands.get('numberedList'), '_executeCleanup', restoreDefaultListStyle(editor));\n        // Register a post-fixer that ensures that the attributes is specified in each `listItem` element.\n        model.document.registerPostFixer(fixListAttributesOnListItemElements(editor, strategies));\n        // Set up conversion.\n        editor.conversion.for('upcast').add(upcastListItemAttributes(strategies));\n        editor.conversion.for('downcast').add(downcastListItemAttributes(strategies));\n        // Handle merging two separated lists into the single one.\n        this._mergeListAttributesWhileMergingLists(strategies);\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        // Enable post-fixer that removes the attributes from to-do list items only if the \"TodoList\" plugin is on.\n        // We need to registry the hook here since the `TodoList` plugin can be added after the `ListPropertiesEditing`.\n        if (editor.commands.get('todoList')) {\n            editor.model.document.registerPostFixer(removeListItemAttributesFromTodoList(editor));\n        }\n    }\n    /**\n\t * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether two lists will be merged into a single\n\t * one after deleting the content.\n\t *\n\t * The purpose of this action is to adjust the `listStyle`, `listReversed` and `listStart` values\n\t * for the list that was merged.\n\t *\n\t * Consider the following model's content:\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <paragraph>[A paragraph.]</paragraph>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * After removing the paragraph element, the second list will be merged into the first one.\n\t * We want to inherit the `listStyle` attribute for the second list from the first one.\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/7879.\n\t *\n\t * @param attributeStrategies Strategies for the enabled attributes.\n\t */ _mergeListAttributesWhileMergingLists(attributeStrategies) {\n        const editor = this.editor;\n        const model = editor.model;\n        // First the outer-most`listItem` in the first list reference.\n        // If found, the lists should be merged and this `listItem` provides the attributes\n        // and it is also a starting point when searching for items in the second list.\n        let firstMostOuterItem;\n        // Check whether the removed content is between two lists.\n        this.listenTo(model, 'deleteContent', (evt, [selection])=>{\n            const firstPosition = selection.getFirstPosition();\n            const lastPosition = selection.getLastPosition();\n            // Typing or removing content in a single item. Aborting.\n            if (firstPosition.parent === lastPosition.parent) {\n                return;\n            }\n            // An element before the content that will be removed is not a list.\n            if (!firstPosition.parent.is('element', 'listItem')) {\n                return;\n            }\n            const nextSibling = lastPosition.parent.nextSibling;\n            // An element after the content that will be removed is not a list.\n            if (!nextSibling || !nextSibling.is('element', 'listItem')) {\n                return;\n            }\n            // Find the outermost list item based on the `listIndent` attribute. We can't assume that `listIndent=0`\n            // because the selection can be hooked in nested lists.\n            //\n            // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n            // <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List [item 1.1</listItem>\n            // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1.</listItem>\n            // <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"circle\">UL List ]item 1.1</listItem>\n            //\n            // After deleting the content, we would like to inherit the \"square\" attribute for the last element:\n            //\n            // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n            // <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List []item 1.1</listItem>\n            const mostOuterItemList = getSiblingListItem(firstPosition.parent, {\n                sameIndent: true,\n                listIndent: nextSibling.getAttribute('listIndent')\n            });\n            // The outermost list item may not exist while removing elements between lists with different value\n            // of the `listIndent` attribute. In such a case we don't want to update anything. See: #8073.\n            if (!mostOuterItemList) {\n                return;\n            }\n            if (mostOuterItemList.getAttribute('listType') === nextSibling.getAttribute('listType')) {\n                firstMostOuterItem = mostOuterItemList;\n            }\n        }, {\n            priority: 'high'\n        });\n        // If so, update the `listStyle` attribute for the second list.\n        this.listenTo(model, 'deleteContent', ()=>{\n            if (!firstMostOuterItem) {\n                return;\n            }\n            model.change((writer)=>{\n                // Find the first most-outer item list in the merged list.\n                // A case when the first list item in the second list was merged into the last item in the first list.\n                //\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1</listItem>\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n                const secondListMostOuterItem = getSiblingListItem(firstMostOuterItem.nextSibling, {\n                    sameIndent: true,\n                    listIndent: firstMostOuterItem.getAttribute('listIndent'),\n                    direction: 'forward'\n                });\n                // If the selection ends in a non-list element, there are no <listItem>s that would require adjustments.\n                // See: #8642.\n                if (!secondListMostOuterItem) {\n                    firstMostOuterItem = null;\n                    return;\n                }\n                const items = [\n                    secondListMostOuterItem,\n                    ...getSiblingNodes(writer.createPositionAt(secondListMostOuterItem, 0), 'forward')\n                ];\n                for (const listItem of items){\n                    for (const strategy of attributeStrategies){\n                        if (strategy.appliesToListItem(listItem)) {\n                            const attributeName = strategy.attributeName;\n                            const value = firstMostOuterItem.getAttribute(attributeName);\n                            writer.setAttribute(attributeName, value, listItem);\n                        }\n                    }\n                }\n            });\n            firstMostOuterItem = null;\n        }, {\n            priority: 'low'\n        });\n    }\n}\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */ function createAttributeStrategies(enabledProperties) {\n    const strategies = [];\n    if (enabledProperties.styles) {\n        strategies.push({\n            attributeName: 'listStyle',\n            defaultValue: DEFAULT_LIST_TYPE,\n            addCommand (editor) {\n                editor.commands.add('listStyle', new LegacyListStyleCommand(editor, DEFAULT_LIST_TYPE));\n            },\n            appliesToListItem () {\n                return true;\n            },\n            setAttributeOnDowncast (writer, listStyle, element) {\n                if (listStyle && listStyle !== DEFAULT_LIST_TYPE) {\n                    writer.setStyle('list-style-type', listStyle, element);\n                } else {\n                    writer.removeStyle('list-style-type', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                return normalizeListStyle(listParent.getStyle('list-style-type')) || DEFAULT_LIST_TYPE;\n            }\n        });\n    }\n    if (enabledProperties.reversed) {\n        strategies.push({\n            attributeName: 'listReversed',\n            defaultValue: false,\n            addCommand (editor) {\n                editor.commands.add('listReversed', new LegacyListReversedCommand(editor));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered';\n            },\n            setAttributeOnDowncast (writer, listReversed, element) {\n                if (listReversed) {\n                    writer.setAttribute('reversed', 'reversed', element);\n                } else {\n                    writer.removeAttribute('reversed', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                return listParent.hasAttribute('reversed');\n            }\n        });\n    }\n    if (enabledProperties.startIndex) {\n        strategies.push({\n            attributeName: 'listStart',\n            defaultValue: 1,\n            addCommand (editor) {\n                editor.commands.add('listStart', new LegacyListStartCommand(editor));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered';\n            },\n            setAttributeOnDowncast (writer, listStart, element) {\n                if (listStart == 0 || listStart > 1) {\n                    writer.setAttribute('start', listStart, element);\n                } else {\n                    writer.removeAttribute('start', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                const startAttributeValue = listParent.getAttribute('start');\n                return startAttributeValue >= 0 ? startAttributeValue : 1;\n            }\n        });\n    }\n    return strategies;\n}\n/**\n * Returns a converter consumes the `style`, `reversed` and `start` attribute.\n * In `style` it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n */ function upcastListItemAttributes(attributeStrategies) {\n    return (dispatcher)=>{\n        dispatcher.on('element:li', (evt, data, conversionApi)=>{\n            // https://github.com/ckeditor/ckeditor5/issues/13858\n            if (!data.modelRange) {\n                return;\n            }\n            const listParent = data.viewItem.parent;\n            const listItem = data.modelRange.start.nodeAfter || data.modelRange.end.nodeBefore;\n            for (const strategy of attributeStrategies){\n                if (strategy.appliesToListItem(listItem)) {\n                    const listStyle = strategy.getAttributeOnUpcast(listParent);\n                    conversionApi.writer.setAttribute(strategy.attributeName, listStyle, listItem);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Returns a converter that adds `reversed`, `start` attributes and adds `list-style-type` definition as a value for the `style` attribute.\n * The `\"default\"` values are removed and not present in the view/data.\n */ function downcastListItemAttributes(attributeStrategies) {\n    return (dispatcher)=>{\n        for (const strategy of attributeStrategies){\n            dispatcher.on(`attribute:${strategy.attributeName}:listItem`, (evt, data, conversionApi)=>{\n                const viewWriter = conversionApi.writer;\n                const currentElement = data.item;\n                const previousElement = getSiblingListItem(currentElement.previousSibling, {\n                    sameIndent: true,\n                    listIndent: currentElement.getAttribute('listIndent'),\n                    direction: 'backward'\n                });\n                const viewItem = conversionApi.mapper.toViewElement(currentElement);\n                // A case when elements represent different lists. We need to separate their container.\n                if (!areRepresentingSameList(currentElement, previousElement)) {\n                    viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n                }\n                strategy.setAttributeOnDowncast(viewWriter, data.attributeNewValue, viewItem.parent);\n            }, {\n                priority: 'low'\n            });\n        }\n    };\n    /**\n\t * Checks whether specified list items belong to the same list.\n\t */ function areRepresentingSameList(listItem1, listItem2) {\n        return listItem2 && listItem1.getAttribute('listType') === listItem2.getAttribute('listType') && listItem1.getAttribute('listIndent') === listItem2.getAttribute('listIndent') && listItem1.getAttribute('listStyle') === listItem2.getAttribute('listStyle') && listItem1.getAttribute('listReversed') === listItem2.getAttribute('listReversed') && listItem1.getAttribute('listStart') === listItem2.getAttribute('listStart');\n    }\n}\n/**\n * When indenting list, nested list should clear its value for the attributes or inherit from nested lists.\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n * editor.execute( 'indentList' );\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n */ function fixListAfterIndentListCommand(editor, attributeStrategies) {\n    return (evt, changedItems)=>{\n        const root = changedItems[0];\n        const rootIndent = root.getAttribute('listIndent');\n        const itemsToUpdate = changedItems.filter((item)=>item.getAttribute('listIndent') === rootIndent);\n        // A case where a few list items are indented must be checked separately\n        // since `getSiblingListItem()` returns the first changed element.\n        // ■ List item 1.\n        //     ○ [List item 2.\n        //     ○ List item 3.]\n        // ■ List item 4.\n        //\n        // List items: `2` and `3` should be adjusted.\n        let previousSibling = null;\n        if (root.previousSibling.getAttribute('listIndent') + 1 !== rootIndent) {\n            previousSibling = getSiblingListItem(root.previousSibling, {\n                sameIndent: true,\n                direction: 'backward',\n                listIndent: rootIndent\n            });\n        }\n        editor.model.change((writer)=>{\n            for (const item of itemsToUpdate){\n                for (const strategy of attributeStrategies){\n                    if (strategy.appliesToListItem(item)) {\n                        const valueToSet = previousSibling == null ? strategy.defaultValue : previousSibling.getAttribute(strategy.attributeName);\n                        writer.setAttribute(strategy.attributeName, valueToSet, item);\n                    }\n                }\n            }\n        });\n    };\n}\n/**\n * When outdenting a list, a nested list should copy attribute values\n * from the previous sibling list item including the same value for the `listIndent` value.\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n *\n * editor.execute( 'outdentList' );\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n */ function fixListAfterOutdentListCommand(editor, attributeStrategies) {\n    return (evt, changedItems)=>{\n        changedItems = changedItems.reverse().filter((item)=>item.is('element', 'listItem'));\n        if (!changedItems.length) {\n            return;\n        }\n        const indent = changedItems[0].getAttribute('listIndent');\n        const listType = changedItems[0].getAttribute('listType');\n        let listItem = changedItems[0].previousSibling;\n        // ■ List item 1.\n        //     ○ List item 2.\n        //     ○ List item 3.[]\n        // ■ List item 4.\n        //\n        // After outdenting a list, `List item 3` should inherit the `listStyle` attribute from `List item 1`.\n        //\n        // ■ List item 1.\n        //     ○ List item 2.\n        // ■ List item 3.[]\n        // ■ List item 4.\n        if (listItem.is('element', 'listItem')) {\n            while(listItem.getAttribute('listIndent') !== indent){\n                listItem = listItem.previousSibling;\n            }\n        } else {\n            listItem = null;\n        }\n        // Outdenting such a list should restore values based on `List item 4`.\n        // ■ List item 1.[]\n        //     ○ List item 2.\n        //     ○ List item 3.\n        // ■ List item 4.\n        if (!listItem) {\n            listItem = changedItems[changedItems.length - 1].nextSibling;\n        }\n        // And such a list should not modify anything.\n        // However, `listItem` can indicate a node below the list. Be sure that we have the `listItem` element.\n        // ■ List item 1.[]\n        //     ○ List item 2.\n        //     ○ List item 3.\n        // <paragraph>The later if check.</paragraph>\n        if (!listItem || !listItem.is('element', 'listItem')) {\n            return;\n        }\n        // Do not modify the list if found `listItem` represents other type of list than outdented list items.\n        if (listItem.getAttribute('listType') !== listType) {\n            return;\n        }\n        editor.model.change((writer)=>{\n            const itemsToUpdate = changedItems.filter((item)=>item.getAttribute('listIndent') === indent);\n            for (const item of itemsToUpdate){\n                for (const strategy of attributeStrategies){\n                    if (strategy.appliesToListItem(item)) {\n                        const attributeName = strategy.attributeName;\n                        const valueToSet = listItem.getAttribute(attributeName);\n                        writer.setAttribute(attributeName, valueToSet, item);\n                    }\n                }\n            }\n        });\n    };\n}\n/**\n * Each `listItem` element must have specified the `listStyle`, `listReversed` and `listStart` attributes\n * if they are enabled and supported by its `listType`.\n * This post-fixer checks whether inserted elements `listItem` elements should inherit the attribute values from\n * their sibling nodes or should use the default values.\n *\n * Paragraph[]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'bulletedList' )\n *\n * ■ Paragraph[]  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.\n * ■ List item 3.\n *\n * It also covers a such change:\n *\n * [Paragraph 1\n * Paragraph 2]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'numberedList' )\n *\n * 1. [Paragraph 1 // [listStyle=\"default\", listType=\"numbered\"]\n * 2. Paragraph 2] // [listStyle=\"default\", listType=\"numbered\"]\n * ■ List item 1.  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.  // ...\n * ■ List item 3.  // ...\n */ function fixListAttributesOnListItemElements(editor, attributeStrategies) {\n    return (writer)=>{\n        let wasFixed = false;\n        const insertedListItems = getChangedListItems(editor.model.document.differ.getChanges()).filter((item)=>{\n            // Don't touch todo lists. They are handled in another post-fixer.\n            return item.getAttribute('listType') !== 'todo';\n        });\n        if (!insertedListItems.length) {\n            return wasFixed;\n        }\n        // Check whether the last inserted element is next to the `listItem` element.\n        //\n        // ■ Paragraph[]  // <-- The inserted item.\n        // ■ List item 1.\n        let existingListItem = insertedListItems[insertedListItems.length - 1].nextSibling;\n        // If it doesn't, maybe the `listItem` was inserted at the end of the list.\n        //\n        // ■ List item 1.\n        // ■ Paragraph[]  // <-- The inserted item.\n        if (!existingListItem || !existingListItem.is('element', 'listItem')) {\n            existingListItem = insertedListItems[0].previousSibling;\n            if (existingListItem) {\n                const indent = insertedListItems[0].getAttribute('listIndent');\n                // But we need to find a `listItem` with the `listIndent=0` attribute.\n                // If doesn't, maybe the `listItem` was inserted at the end of the list.\n                //\n                // ■ List item 1.\n                //     ○ List item 2.\n                // ■ Paragraph[]  // <-- The inserted item.\n                while(existingListItem.is('element', 'listItem') && existingListItem.getAttribute('listIndent') !== indent){\n                    existingListItem = existingListItem.previousSibling;\n                    // If the item does not exist, most probably there is no other content in the editor. See: #8072.\n                    if (!existingListItem) {\n                        break;\n                    }\n                }\n            }\n        }\n        for (const strategy of attributeStrategies){\n            const attributeName = strategy.attributeName;\n            for (const item of insertedListItems){\n                if (!strategy.appliesToListItem(item)) {\n                    writer.removeAttribute(attributeName, item);\n                    continue;\n                }\n                if (!item.hasAttribute(attributeName)) {\n                    if (shouldInheritListType(existingListItem, item, strategy)) {\n                        writer.setAttribute(attributeName, existingListItem.getAttribute(attributeName), item);\n                    } else {\n                        writer.setAttribute(attributeName, strategy.defaultValue, item);\n                    }\n                    wasFixed = true;\n                } else {\n                    // Adjust the `listStyle`, `listReversed` and `listStart`\n                    // attributes for inserted (pasted) items. See #8160.\n                    //\n                    // ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n                    //     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n                    //     ○ [] (selection is here)\n                    //\n                    // Then, pasting a list with different attributes (listStyle, listType):\n                    //\n                    // 1. First. // [listStyle=\"decimal\", listType=\"numbered\"]\n                    // 2. Second // [listStyle=\"decimal\", listType=\"numbered\"]\n                    //\n                    // The `listType` attribute will be corrected by the `ListEditing` converters.\n                    // We need to adjust the `listStyle` attribute. Expected structure:\n                    //\n                    // ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n                    //     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n                    //     ○ First. // [listStyle=\"circle\", listType=\"bulleted\"]\n                    //     ○ Second // [listStyle=\"circle\", listType=\"bulleted\"]\n                    const previousSibling = item.previousSibling;\n                    if (shouldInheritListTypeFromPreviousItem(previousSibling, item, strategy.attributeName)) {\n                        writer.setAttribute(attributeName, previousSibling.getAttribute(attributeName), item);\n                        wasFixed = true;\n                    }\n                }\n            }\n        }\n        return wasFixed;\n    };\n}\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from the `baseItem` element.\n *\n * The attribute should be copied if the inserted element does not have defined it and\n * the value for the element is other than default in the base element.\n */ function shouldInheritListType(baseItem, itemToChange, attributeStrategy) {\n    if (!baseItem) {\n        return false;\n    }\n    const baseListAttribute = baseItem.getAttribute(attributeStrategy.attributeName);\n    if (!baseListAttribute) {\n        return false;\n    }\n    if (baseListAttribute == attributeStrategy.defaultValue) {\n        return false;\n    }\n    if (baseItem.getAttribute('listType') !== itemToChange.getAttribute('listType')) {\n        return false;\n    }\n    return true;\n}\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from previous list item.\n *\n * The attribute should be copied if there's a mismatch of styles of the pasted list into a nested list.\n * Top-level lists are not normalized as we allow side-by-side list of different types.\n */ function shouldInheritListTypeFromPreviousItem(previousItem, itemToChange, attributeName) {\n    if (!previousItem || !previousItem.is('element', 'listItem')) {\n        return false;\n    }\n    if (itemToChange.getAttribute('listType') !== previousItem.getAttribute('listType')) {\n        return false;\n    }\n    const previousItemIndent = previousItem.getAttribute('listIndent');\n    if (previousItemIndent < 1 || previousItemIndent !== itemToChange.getAttribute('listIndent')) {\n        return false;\n    }\n    const previousItemListAttribute = previousItem.getAttribute(attributeName);\n    if (!previousItemListAttribute || previousItemListAttribute === itemToChange.getAttribute(attributeName)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Removes the `listStyle`, `listReversed` and `listStart` attributes from \"todo\" list items.\n */ function removeListItemAttributesFromTodoList(editor) {\n    return (writer)=>{\n        const todoListItems = getChangedListItems(editor.model.document.differ.getChanges()).filter((item)=>{\n            // Handle the todo lists only. The rest is handled in another post-fixer.\n            return item.getAttribute('listType') === 'todo' && (item.hasAttribute('listStyle') || item.hasAttribute('listReversed') || item.hasAttribute('listStart'));\n        });\n        if (!todoListItems.length) {\n            return false;\n        }\n        for (const item of todoListItems){\n            writer.removeAttribute('listStyle', item);\n            writer.removeAttribute('listReversed', item);\n            writer.removeAttribute('listStart', item);\n        }\n        return true;\n    };\n}\n/**\n * Restores the `listStyle` attribute after changing the list type.\n */ function restoreDefaultListStyle(editor) {\n    return (evt, changedItems)=>{\n        changedItems = changedItems.filter((item)=>item.is('element', 'listItem'));\n        editor.model.change((writer)=>{\n            for (const item of changedItems){\n                // Remove the attribute. Post-fixer will restore the proper value.\n                writer.removeAttribute('listStyle', item);\n            }\n        });\n    };\n}\n/**\n * Returns the `listItem` that was inserted or changed.\n *\n * @param changes The changes list returned by the differ.\n */ function getChangedListItems(changes) {\n    const items = [];\n    for (const change of changes){\n        const item = getItemFromChange(change);\n        if (item && item.is('element', 'listItem')) {\n            items.push(item);\n        }\n    }\n    return items;\n}\nfunction getItemFromChange(change) {\n    if (change.type === 'attribute') {\n        return change.range.start.nodeAfter;\n    }\n    if (change.type === 'insert') {\n        return change.position.nodeAfter;\n    }\n    return null;\n}\n\n/**\n * The legacy list properties feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylistproperties/legacylistpropertiesediting~LegacyListPropertiesEditing\n * legacy list properties editing feature} and the\n * {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */ class LegacyListProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListPropertiesEditing,\n            ListPropertiesUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst attributeKey = 'todoListChecked';\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing} as\n * the `checkTodoList` editor command and it is also available via aliased `todoListCheck` name.\n */ class LegacyCheckTodoListCommand extends Command {\n    /**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t *\n\t * @internal\n\t */ _selectedElements;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._selectedElements = [];\n        // Refresh command before executing to be sure all values are up to date.\n        // It is needed when selection has changed before command execution, in the same change block.\n        this.on('execute', ()=>{\n            this.refresh();\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */ refresh() {\n        this._selectedElements = this._getSelectedItems();\n        this.value = this._selectedElements.every((element)=>!!element.getAttribute(attributeKey));\n        this.isEnabled = !!this._selectedElements.length;\n    }\n    /**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t */ _getSelectedItems() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selectionRange = model.document.selection.getFirstRange();\n        const startElement = selectionRange.start.parent;\n        const elements = [];\n        if (schema.checkAttribute(startElement, attributeKey)) {\n            elements.push(startElement);\n        }\n        for (const item of selectionRange.getItems()){\n            if (schema.checkAttribute(item, attributeKey) && !elements.includes(item)) {\n                elements.push(item);\n            }\n        }\n        return elements;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */ execute(options = {}) {\n        this.editor.model.change((writer)=>{\n            for (const element of this._selectedElements){\n                const value = options.forceValue === undefined ? !this.value : options.forceValue;\n                if (value) {\n                    writer.setAttribute(attributeKey, true, element);\n                } else {\n                    writer.removeAttribute(attributeKey, element);\n                }\n            }\n        });\n    }\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It converts the `listItem` model element to an unordered list with a {@link module:engine/view/uielement~ViewUIElement checkbox element}\n * at the beginning of each list item. It also merges the list with surrounding lists (if available).\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @param onCheckboxChecked Callback function.\n * @returns Returns a conversion callback.\n */ function modelViewInsertion(model, onCheckboxChecked) {\n    return (evt, data, conversionApi)=>{\n        const consumable = conversionApi.consumable;\n        if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        if (data.item.getAttribute('listType') != 'todo') {\n            return;\n        }\n        const modelItem = data.item;\n        consumable.consume(modelItem, 'insert');\n        consumable.consume(modelItem, 'attribute:listType');\n        consumable.consume(modelItem, 'attribute:listIndent');\n        consumable.consume(modelItem, 'attribute:todoListChecked');\n        const viewWriter = conversionApi.writer;\n        const viewItem = generateLiInUl(modelItem, conversionApi);\n        const isChecked = !!modelItem.getAttribute('todoListChecked');\n        const checkmarkElement = createCheckmarkElement(modelItem, viewWriter, isChecked, onCheckboxChecked);\n        const span = viewWriter.createContainerElement('span', {\n            class: 'todo-list__label__description'\n        });\n        viewWriter.addClass('todo-list', viewItem.parent);\n        viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), checkmarkElement);\n        viewWriter.insert(viewWriter.createPositionAfter(checkmarkElement), span);\n        injectViewList(modelItem, viewItem, conversionApi, model);\n    };\n}\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function dataModelViewInsertion(model) {\n    return (evt, data, conversionApi)=>{\n        const consumable = conversionApi.consumable;\n        if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        if (data.item.getAttribute('listType') != 'todo') {\n            return;\n        }\n        const modelItem = data.item;\n        consumable.consume(modelItem, 'insert');\n        consumable.consume(modelItem, 'attribute:listType');\n        consumable.consume(modelItem, 'attribute:listIndent');\n        consumable.consume(modelItem, 'attribute:todoListChecked');\n        const viewWriter = conversionApi.writer;\n        const viewItem = generateLiInUl(modelItem, conversionApi);\n        viewWriter.addClass('todo-list', viewItem.parent);\n        const label = viewWriter.createContainerElement('label', {\n            class: 'todo-list__label'\n        });\n        const checkbox = viewWriter.createEmptyElement('input', {\n            type: 'checkbox',\n            disabled: 'disabled'\n        });\n        const span = viewWriter.createContainerElement('span', {\n            class: 'todo-list__label__description'\n        });\n        if (modelItem.getAttribute('todoListChecked')) {\n            viewWriter.setAttribute('checked', 'checked', checkbox);\n        }\n        viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), label);\n        viewWriter.insert(viewWriter.createPositionAt(label, 0), checkbox);\n        viewWriter.insert(viewWriter.createPositionAfter(checkbox), span);\n        injectViewList(modelItem, viewItem, conversionApi, model);\n    };\n}\n/**\n * A view-to-model converter for the checkbox element inside a view list item.\n *\n * It changes the `listType` of the model `listItem` to a `todo` value.\n * When a view checkbox element is marked as checked, an additional `todoListChecked=\"true\"` attribute is added to the model item.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const dataViewModelCheckmarkInsertion = (evt, data, conversionApi)=>{\n    const modelCursor = data.modelCursor;\n    const modelItem = modelCursor.parent;\n    const viewItem = data.viewItem;\n    if (viewItem.getAttribute('type') != 'checkbox' || modelItem.name != 'listItem' || !modelCursor.isAtStart) {\n        return;\n    }\n    if (!conversionApi.consumable.consume(viewItem, {\n        name: true\n    })) {\n        return;\n    }\n    const writer = conversionApi.writer;\n    writer.setAttribute('listType', 'todo', modelItem);\n    if (data.viewItem.hasAttribute('checked')) {\n        writer.setAttribute('todoListChecked', true, modelItem);\n    }\n    data.modelRange = writer.createRange(modelCursor);\n};\n/**\n * A model-to-view converter for the `listType` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes to `<ul class=\"todo-list\">` and a\n * {@link module:engine/view/uielement~ViewUIElement checkbox UI element} is added at the beginning\n * of the list item element (or vice versa).\n *\n * This converter is preceded by {@link module:list/legacylist/legacyconverters~modelViewChangeType} and followed by\n * {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType} to handle splitting and merging surrounding lists\n * of the same type.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @param view Editing view controller.\n * @returns Returns a conversion callback.\n */ function modelViewChangeType(onCheckedChange, view) {\n    return (evt, data, conversionApi)=>{\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const viewItem = conversionApi.mapper.toViewElement(data.item);\n        const viewWriter = conversionApi.writer;\n        const labelElement = findLabel(viewItem, view);\n        if (data.attributeNewValue == 'todo') {\n            const isChecked = !!data.item.getAttribute('todoListChecked');\n            const checkmarkElement = createCheckmarkElement(data.item, viewWriter, isChecked, onCheckedChange);\n            const span = viewWriter.createContainerElement('span', {\n                class: 'todo-list__label__description'\n            });\n            const itemRange = viewWriter.createRangeIn(viewItem);\n            const nestedList = findNestedList(viewItem);\n            const descriptionStart = positionAfterUiElements(itemRange.start);\n            const descriptionEnd = nestedList ? viewWriter.createPositionBefore(nestedList) : itemRange.end;\n            const descriptionRange = viewWriter.createRange(descriptionStart, descriptionEnd);\n            viewWriter.addClass('todo-list', viewItem.parent);\n            viewWriter.move(descriptionRange, viewWriter.createPositionAt(span, 0));\n            viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), checkmarkElement);\n            viewWriter.insert(viewWriter.createPositionAfter(checkmarkElement), span);\n        } else if (data.attributeOldValue == 'todo') {\n            const descriptionSpan = findDescription(viewItem, view);\n            viewWriter.removeClass('todo-list', viewItem.parent);\n            viewWriter.remove(labelElement);\n            viewWriter.move(viewWriter.createRangeIn(descriptionSpan), viewWriter.createPositionBefore(descriptionSpan));\n            viewWriter.remove(descriptionSpan);\n        }\n    };\n}\n/**\n * A model-to-view converter for the `todoListChecked` attribute change on the `listItem` model element.\n *\n * It marks the {@link module:engine/view/uielement~ViewUIElement checkbox UI element} as checked.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @returns Returns a conversion callback.\n */ function modelViewChangeChecked(onCheckedChange) {\n    return (evt, data, conversionApi)=>{\n        // Do not convert `todoListChecked` attribute when to-do list item has changed to other list item.\n        // This attribute will be removed by the model post fixer.\n        if (data.item.getAttribute('listType') != 'todo') {\n            return;\n        }\n        if (!conversionApi.consumable.consume(data.item, 'attribute:todoListChecked')) {\n            return;\n        }\n        const { mapper, writer: viewWriter } = conversionApi;\n        const isChecked = !!data.item.getAttribute('todoListChecked');\n        const viewItem = mapper.toViewElement(data.item);\n        // Because of m -> v position mapper we can be sure checkbox is always at the beginning.\n        const oldCheckmarkElement = viewItem.getChild(0);\n        const newCheckmarkElement = createCheckmarkElement(data.item, viewWriter, isChecked, onCheckedChange);\n        viewWriter.insert(viewWriter.createPositionAfter(oldCheckmarkElement), newCheckmarkElement);\n        viewWriter.remove(oldCheckmarkElement);\n    };\n}\n/**\n * A model-to-view position at zero offset mapper.\n *\n * This helper ensures that position inside todo-list in the view is mapped after the checkbox.\n *\n * It only handles the position at the beginning of a list item as other positions are properly mapped be the default mapper.\n *\n * @internal\n */ function mapModelToViewPosition(view) {\n    return (evt, data)=>{\n        const modelPosition = data.modelPosition;\n        const parent = modelPosition.parent;\n        if (!parent.is('element', 'listItem') || parent.getAttribute('listType') != 'todo') {\n            return;\n        }\n        const viewLi = data.mapper.toViewElement(parent);\n        const descSpan = findDescription(viewLi, view);\n        if (descSpan) {\n            data.viewPosition = data.mapper.findPositionIn(descSpan, modelPosition.offset);\n        }\n    };\n}\n/**\n * Creates a checkbox UI element.\n */ function createCheckmarkElement(modelItem, viewWriter, isChecked, onChange) {\n    const uiElement = viewWriter.createUIElement('label', {\n        class: 'todo-list__label',\n        contenteditable: false\n    }, function(domDocument) {\n        const checkbox = createElement(document, 'input', {\n            type: 'checkbox',\n            tabindex: '-1'\n        });\n        if (isChecked) {\n            checkbox.setAttribute('checked', 'checked');\n        }\n        checkbox.addEventListener('change', ()=>onChange(modelItem));\n        const domElement = this.toDomElement(domDocument);\n        domElement.appendChild(checkbox);\n        return domElement;\n    });\n    return uiElement;\n}\n// Helper method to find label element inside li.\nfunction findLabel(viewItem, view) {\n    const range = view.createRangeIn(viewItem);\n    for (const value of range){\n        if (value.item.is('uiElement', 'label')) {\n            return value.item;\n        }\n    }\n}\nfunction findDescription(viewItem, view) {\n    const range = view.createRangeIn(viewItem);\n    for (const value of range){\n        if (value.item.is('containerElement', 'span') && value.item.hasClass('todo-list__label__description')) {\n            return value.item;\n        }\n    }\n}\n\nconst ITEM_TOGGLE_KEYSTROKE = /* #__PURE__ */ parseKeystroke('Ctrl+Enter');\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing\n * plugin} and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n * - `'todoListCheck'` as an alias for `checkTodoList` command.\n */ class LegacyTodoListEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyTodoListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const { editing, data, model } = editor;\n        // Extend schema.\n        model.schema.extend('listItem', {\n            allowAttributes: [\n                'todoListChecked'\n            ]\n        });\n        // Disallow todoListChecked attribute on other nodes than listItem with to-do listType.\n        model.schema.addAttributeCheck((context, attributeName)=>{\n            const item = context.last;\n            if (attributeName == 'todoListChecked' && item.name == 'listItem' && item.getAttribute('listType') != 'todo') {\n                return false;\n            }\n        });\n        // Register `todoList` command.\n        editor.commands.add('todoList', new LegacyListCommand(editor, 'todo'));\n        const checkTodoListCommand = new LegacyCheckTodoListCommand(editor);\n        // Register `checkTodoList` command and add `todoListCheck` command as an alias for backward compatibility.\n        editor.commands.add('checkTodoList', checkTodoListCommand);\n        editor.commands.add('todoListCheck', checkTodoListCommand);\n        // Define converters.\n        data.downcastDispatcher.on('insert:listItem', dataModelViewInsertion(model), {\n            priority: 'high'\n        });\n        data.upcastDispatcher.on('element:input', dataViewModelCheckmarkInsertion, {\n            priority: 'high'\n        });\n        editing.downcastDispatcher.on('insert:listItem', modelViewInsertion(model, (listItem)=>this._handleCheckmarkChange(listItem)), {\n            priority: 'high'\n        });\n        editing.downcastDispatcher.on('attribute:listType:listItem', modelViewChangeType((listItem)=>this._handleCheckmarkChange(listItem), editing.view));\n        editing.downcastDispatcher.on('attribute:todoListChecked:listItem', modelViewChangeChecked((listItem)=>this._handleCheckmarkChange(listItem)));\n        editing.mapper.on('modelToViewPosition', mapModelToViewPosition(editing.view));\n        data.mapper.on('modelToViewPosition', mapModelToViewPosition(editing.view));\n        // Jump at the end of the previous node on left arrow key press, when selection is after the checkbox.\n        //\n        // <blockquote><p>Foo</p></blockquote>\n        // <ul><li><checkbox/>{}Bar</li></ul>\n        //\n        // press: `<-`\n        //\n        // <blockquote><p>Foo{}</p></blockquote>\n        // <ul><li><checkbox/>Bar</li></ul>\n        //\n        this.listenTo(editing.view.document, 'arrowKey', jumpOverCheckmarkOnSideArrowKeyPress(model, editor.locale), {\n            context: 'li'\n        });\n        // Toggle check state of selected to-do list items on keystroke.\n        this.listenTo(editing.view.document, 'keydown', (evt, data)=>{\n            if (getCode(data) === ITEM_TOGGLE_KEYSTROKE) {\n                editor.execute('checkTodoList');\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        // Remove `todoListChecked` attribute when a host element is no longer a to-do list item.\n        const listItemsToFix = new Set();\n        this.listenTo(model, 'applyOperation', (evt, args)=>{\n            const operation = args[0];\n            if (operation.type == 'rename' && operation.oldName == 'listItem') {\n                const item = operation.position.nodeAfter;\n                if (item.hasAttribute('todoListChecked')) {\n                    listItemsToFix.add(item);\n                }\n            } else if (operation.type == 'changeAttribute' && operation.key == 'listType' && operation.oldValue === 'todo') {\n                for (const item of operation.range.getItems()){\n                    if (item.hasAttribute('todoListChecked') && item.getAttribute('listType') !== 'todo') {\n                        listItemsToFix.add(item);\n                    }\n                }\n            }\n        });\n        model.document.registerPostFixer((writer)=>{\n            let hasChanged = false;\n            for (const listItem of listItemsToFix){\n                writer.removeAttribute('todoListChecked', listItem);\n                hasChanged = true;\n            }\n            listItemsToFix.clear();\n            return hasChanged;\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */ _handleCheckmarkChange(listItem) {\n        const editor = this.editor;\n        const model = editor.model;\n        const previousSelectionRanges = Array.from(model.document.selection.getRanges());\n        model.change((writer)=>{\n            writer.setSelection(listItem, 'end');\n            editor.execute('checkTodoList');\n            writer.setSelection(previousSelectionRanges);\n        });\n    }\n    /**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        let lastFocusedCodeBlock = null;\n        if (!ui) {\n            return;\n        }\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            const lastElementIsTodoList = isLegacyTodoListItemElement(lastFocusedCodeBlock);\n            const currentElementIsTodoList = isLegacyTodoListItemElement(focusParent);\n            if (lastElementIsTodoList && !currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Leaving a to-do list'));\n            } else if (!lastElementIsTodoList && currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Entering a to-do list'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Handles the left/right (LTR/RTL content) arrow key and moves the selection at the end of the previous block element\n * if the selection is just after the checkbox element. In other words, it jumps over the checkbox element when\n * moving the selection to the left/right (LTR/RTL).\n *\n * @returns Callback for 'keydown' events.\n */ function jumpOverCheckmarkOnSideArrowKeyPress(model, locale) {\n    return (eventInfo, domEventData)=>{\n        const direction = getLocalizedArrowKeyCodeDirection(domEventData.keyCode, locale.contentLanguageDirection);\n        if (direction != 'left') {\n            return;\n        }\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (!selection.isCollapsed) {\n            return;\n        }\n        const position = selection.getFirstPosition();\n        const parent = position.parent;\n        if (parent.name === 'listItem' && parent.getAttribute('listType') == 'todo' && position.isAtStart) {\n            const newRange = schema.getNearestSelectionRange(model.createPositionBefore(parent), 'backward');\n            if (newRange) {\n                model.change((writer)=>writer.setSelection(newRange));\n            }\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    };\n}\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */ function isLegacyTodoListItemElement(element) {\n    return !!element && element.is('element', 'listItem') && element.getAttribute('listType') === 'todo';\n}\n\n/**\n * The legacy to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing legacy to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */ class LegacyTodoList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyTodoListEditing,\n            TodoListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyTodoList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nclass AdjacentListsSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AdjacentListsSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.schema.register('listSeparator', {\n            allowWhere: '$block',\n            isBlock: true\n        });\n        editor.conversion.for('upcast')// Add a list separator element between similar list elements on upcast.\n        .add((dispatcher)=>{\n            dispatcher.on('element:ol', listSeparatorUpcastConverter());\n            dispatcher.on('element:ul', listSeparatorUpcastConverter());\n        })// View-to-model transformation.\n        .elementToElement({\n            model: 'listSeparator',\n            view: 'ck-list-separator'\n        });\n        // The list separator element should exist in the view, but should be invisible (hidden).\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'listSeparator',\n            view: {\n                name: 'div',\n                classes: [\n                    'ck-list-separator',\n                    'ck-hidden'\n                ]\n            }\n        });\n        // The list separator element should not exist in the output data.\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'listSeparator',\n            view: (modelElement, conversionApi)=>{\n                const viewElement = conversionApi.writer.createContainerElement('ck-list-separator');\n                conversionApi.writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n                viewElement.getFillerOffset = ()=>null;\n                return viewElement;\n            }\n        });\n    }\n}\n/**\n * Inserts a list separator element between two lists of the same type (`ol` + `ol` or `ul` + `ul`).\n */ function listSeparatorUpcastConverter() {\n    return (evt, data, conversionApi)=>{\n        const element = data.viewItem;\n        const nextSibling = element.nextSibling;\n        if (!nextSibling) {\n            return;\n        }\n        if (element.name !== nextSibling.name) {\n            return;\n        }\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        const writer = conversionApi.writer;\n        const modelElement = writer.createElement('listSeparator');\n        // Try to insert a list separator element on the current model cursor position.\n        if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n            return;\n        }\n        const parts = conversionApi.getSplitParts(modelElement);\n        // Extend the model range with the range of the created list separator element.\n        data.modelRange = writer.createRange(data.modelRange.start, writer.createPositionAfter(parts[parts.length - 1]));\n        conversionApi.updateConversionResult(modelElement, data);\n    };\n}\n\nexport { AdjacentListsSupport, CheckTodoListCommand, LegacyCheckTodoListCommand, LegacyIndentCommand, LegacyList, LegacyListCommand, LegacyListEditing, LegacyListProperties, LegacyListPropertiesEditing, LegacyListReversedCommand, LegacyListStartCommand, LegacyListStyleCommand, LegacyListUtils, LegacyTodoList, LegacyTodoListEditing, List, ListCommand, ListEditing, ListFormatting, ListIndentCommand, ListItemBoldIntegration, ListItemFontColorIntegration, ListItemFontFamilyIntegration, ListItemFontSizeIntegration, ListItemItalicIntegration, ListMergeCommand, ListProperties, ListPropertiesEditing, ListPropertiesUI, ListPropertiesUtils, ListReversedCommand, ListSplitCommand, ListStartCommand, ListStyleCommand, ListUI, ListUtils, TodoList, TodoListEditing, TodoListUI, ListBlocksIterable as _ListBlocksIterable, ListPropertiesView as _ListPropertiesView, ListWalker as _ListWalker, SiblingListBlocksIterator as _SiblingListBlocksIterator, TodoCheckboxChangeObserver as _TodoCheckboxChangeObserver, canBecomeSimpleListItem as _canBecomeSimpleListItem, createListElement as _createListElement, createListItemElement as _createListItemElement, createUIComponents as _createListUIComponents, createModelToViewPositionMapper as _createModelToViewListPositionMapper, expandListBlocksToCompleteItems as _expandListBlocksToCompleteItems, expandListBlocksToCompleteList as _expandListBlocksToCompleteList, findAndAddListHeadToMap as _findAndAddListHeadToMap, findMappedViewElement as _findMappedListItemViewElement, fixListIndents as _fixListIndents, fixListItemIds as _fixListItemIds, getAllListItemBlocks as _getAllListItemBlocks, getAllSupportedStyleTypes as _getAllSupportedListStyleTypes, getIndent$1 as _getListIndent, getListItemBlocks as _getListItemBlocks, getListItems as _getListItems, getListStyleTypeFromTypeAttribute as _getListStyleTypeFromTypeAttribute, getListTypeFromListStyleType$1 as _getListTypeFromListStyleType, getNestedListBlocks as _getNestedListBlocks, getNormalizedConfig as _getNormalizedListConfig, getSelectedBlockObject as _getSelectedBlockObject, getTypeAttributeFromListStyleType as _getTypeAttributeFromListStyleType, getViewElementIdForListType as _getViewElementIdForListType, getViewElementNameForListType as _getViewElementNameForListType, indentBlocks as _indentListBlocks, isFirstBlockOfListItem as _isFirstBlockOfListItem, isLastBlockOfListItem as _isLastBlockOfListItem, isListItemBlock as _isListItemBlock, isListItemView as _isListItemView, isListView as _isListView, isNumberedListType as _isNumberedListType, isSingleListItem as _isSingleListItem, bogusParagraphCreator as _listItemBogusParagraphCreator, listItemDowncastConverter as _listItemDowncastConverter, listItemDowncastRemoveConverter as _listItemDowncastRemoveConverter, listItemUpcastConverter as _listItemUpcastConverter, listPropertiesUpcastConverter as _listPropertiesUpcastConverter, mergeListItemBefore as _mergeListItemBefore, normalizeListStyle as _normalizeListStyle, outdentFollowingItems as _outdentFollowingListItems, outdentBlocksWithMerge as _outdentListBlocksWithMerge, reconvertItemsOnDataChange as _reconvertListItemsOnDataChange, removeListAttributes as _removeListAttributes, sortBlocks as _sortListBlocks, splitListItemBefore as _splitListItemBefore };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/listwalker\n */\n\nimport { first, toArray, type ArrayOrItem } from 'ckeditor5/src/utils.js';\nimport { isListItemBlock, type ListElement } from './model.js';\n\nimport type { ModelElement, ModelNode } from 'ckeditor5/src/engine.js';\n\n/**\n * Document list blocks iterator.\n *\n * @internal\n */\nexport class ListWalker {\n\t/**\n\t * The start list item block element.\n\t */\n\tprivate _startElement: ModelNode;\n\n\t/**\n\t * The reference indent. Initialized by the indent of the start block.\n\t */\n\tprivate _referenceIndent: number;\n\n\t/**\n\t * The iterating direction.\n\t */\n\tprivate _isForward: boolean;\n\n\t/**\n\t * Whether start block should be included in the result (if it's matching other criteria).\n\t */\n\tprivate _includeSelf: boolean;\n\n\t/**\n\t * Additional attributes that must be the same for each block.\n\t */\n\tprivate _sameAttributes: Array<string>;\n\n\t/**\n\t * Whether blocks with the same indent level as the start block should be included in the result.\n\t */\n\tprivate _sameIndent: boolean;\n\n\t/**\n\t * Whether blocks with a lower indent level than the start block should be included in the result.\n\t */\n\tprivate _lowerIndent: boolean;\n\n\t/**\n\t * Whether blocks with a higher indent level than the start block should be included in the result.\n\t */\n\tprivate _higherIndent: boolean;\n\n\t/**\n\t * Creates a document list iterator.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */\n\tconstructor(\n\t\tstartElement: ModelNode,\n\t\toptions: ListWalkerOptions\n\t) {\n\t\tthis._startElement = startElement;\n\t\tthis._referenceIndent = startElement.getAttribute( 'listIndent' ) as number;\n\t\tthis._isForward = options.direction == 'forward';\n\t\tthis._includeSelf = !!options.includeSelf;\n\t\tthis._sameAttributes = toArray( options.sameAttributes || [] );\n\t\tthis._sameIndent = !!options.sameIndent;\n\t\tthis._lowerIndent = !!options.lowerIndent;\n\t\tthis._higherIndent = !!options.higherIndent;\n\t}\n\n\t/**\n\t * Performs only first step of iteration and returns the result.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */\n\tpublic static first(\n\t\tstartElement: ModelNode,\n\t\toptions: ListWalkerOptions\n\t): ListElement | null {\n\t\tconst walker = new this( startElement, options );\n\t\tconst iterator = walker[ Symbol.iterator ]();\n\n\t\treturn first( iterator );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t */\n\tpublic* [ Symbol.iterator ](): Iterator<ListElement> {\n\t\tconst nestedItems: Array<ListElement> = [];\n\n\t\tfor ( const { node } of new SiblingListBlocksIterator( this._getStartNode(), this._isForward ? 'forward' : 'backward' ) ) {\n\t\t\tconst indent = node.getAttribute( 'listIndent' );\n\n\t\t\t// Leaving a nested list.\n\t\t\tif ( indent < this._referenceIndent ) {\n\t\t\t\t// Abort searching blocks.\n\t\t\t\tif ( !this._lowerIndent ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// While searching for lower indents, update the reference indent to find another parent in the next step.\n\t\t\t\tthis._referenceIndent = indent;\n\t\t\t}\n\t\t\t// Entering a nested list.\n\t\t\telse if ( indent > this._referenceIndent ) {\n\t\t\t\t// Ignore nested blocks.\n\t\t\t\tif ( !this._higherIndent ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Collect nested blocks to verify if they are really nested, or it's a different item.\n\t\t\t\tif ( !this._isForward ) {\n\t\t\t\t\tnestedItems.push( node );\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Same indent level block.\n\t\t\telse {\n\t\t\t\t// Ignore same indent block.\n\t\t\t\tif ( !this._sameIndent ) {\n\t\t\t\t\t// While looking for nested blocks, stop iterating while encountering first same indent block.\n\t\t\t\t\tif ( this._higherIndent ) {\n\t\t\t\t\t\t// No more nested blocks so yield nested items.\n\t\t\t\t\t\tif ( nestedItems.length ) {\n\t\t\t\t\t\t\tyield* nestedItems;\n\t\t\t\t\t\t\tnestedItems.length = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Abort if item has any additionally specified attribute different.\n\t\t\t\tif ( this._sameAttributes.some( attr => node.getAttribute( attr ) !== this._startElement.getAttribute( attr ) ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// There is another block for the same list item so the nested items were in the same list item.\n\t\t\tif ( nestedItems.length ) {\n\t\t\t\tyield* nestedItems;\n\t\t\t\tnestedItems.length = 0;\n\t\t\t}\n\n\t\t\tyield node;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the model element to start iterating.\n\t */\n\tprivate _getStartNode() {\n\t\tif ( this._includeSelf ) {\n\t\t\treturn this._startElement;\n\t\t}\n\n\t\treturn this._isForward ?\n\t\t\tthis._startElement.nextSibling :\n\t\t\tthis._startElement.previousSibling;\n\t}\n}\n\n/**\n * Iterates sibling list blocks starting from the given node.\n *\n * @internal\n */\nexport class SiblingListBlocksIterator implements IterableIterator<ListIteratorValue> {\n\tprivate _node: ModelNode | null;\n\tprivate _isForward: boolean;\n\tprivate _previousNodesByIndent: Array<ListElement> = [];\n\tprivate _previous: ListElement | null = null;\n\tprivate _previousNodeIndent: number | null = null;\n\n\t/**\n\t * @param node The model node.\n\t * @param direction Iteration direction.\n\t */\n\tconstructor(\n\t\tnode: ModelNode | null,\n\t\tdirection: 'forward' | 'backward' = 'forward'\n\t) {\n\t\tthis._node = node;\n\t\tthis._isForward = direction === 'forward';\n\t}\n\n\tpublic [ Symbol.iterator ](): IterableIterator<ListIteratorValue> {\n\t\treturn this;\n\t}\n\n\tpublic next(): IteratorResult<ListIteratorValue> {\n\t\tif ( !isListItemBlock( this._node ) ) {\n\t\t\treturn { done: true, value: undefined };\n\t\t}\n\n\t\tconst nodeIndent = this._node.getAttribute( 'listIndent' );\n\t\tlet previousNodeInList: ListElement | null = null;\n\n\t\tif ( this._previous ) {\n\t\t\tconst previousNodeIndent = this._previousNodeIndent!;\n\n\t\t\t// Let's find previous node for the same indent.\n\t\t\t// We're going to need that when we get back to previous indent.\n\t\t\tif ( nodeIndent > previousNodeIndent ) {\n\t\t\t\tthis._previousNodesByIndent[ previousNodeIndent ] = this._previous;\n\t\t\t}\n\t\t\t// Restore the one for given indent.\n\t\t\telse if ( nodeIndent < previousNodeIndent ) {\n\t\t\t\tpreviousNodeInList = this._previousNodesByIndent[ nodeIndent ] || null;\n\t\t\t\tthis._previousNodesByIndent.length = nodeIndent;\n\t\t\t}\n\t\t\t// Same indent.\n\t\t\telse {\n\t\t\t\tpreviousNodeInList = this._previous;\n\t\t\t}\n\t\t}\n\n\t\tconst value = {\n\t\t\tnode: this._node,\n\t\t\tprevious: this._previous,\n\t\t\tpreviousNodeInList\n\t\t};\n\n\t\tthis._previous = this._node as ListElement;\n\t\tthis._previousNodeIndent = nodeIndent;\n\t\tthis._node = this._isForward ? this._node.nextSibling : this._node.previousSibling;\n\n\t\treturn { value, done: false };\n\t}\n}\n\n/**\n * The iterable protocol over the list elements.\n *\n * @internal\n */\nexport class ListBlocksIterable {\n\tprivate _listHead: ModelElement;\n\n\t/**\n\t * @param listHead The head element of a list.\n\t */\n\tconstructor( listHead: ModelElement ) {\n\t\tthis._listHead = listHead;\n\t}\n\n\t/**\n\t * List blocks iterator.\n\t *\n\t * Iterates over all blocks of a list.\n\t */\n\tpublic [ Symbol.iterator ](): Iterator<ListIteratorValue> {\n\t\treturn new SiblingListBlocksIterator( this._listHead );\n\t}\n}\n\n/**\n * Object returned by `SiblingListBlocksIterator` when traversing a list.\n *\n * @internal\n */\nexport interface ListIteratorValue {\n\n\t/**\n\t * The current list node.\n\t */\n\tnode: ListElement;\n\n\t/**\n\t * The previous list node.\n\t */\n\tprevious: ListElement | null;\n\n\t/**\n\t * The previous list node at the same indent as current node.\n\t */\n\tpreviousNodeInList: ListElement | null;\n}\n\n/**\n * Document list blocks iterator options.\n *\n * @internal\n */\nexport type ListWalkerOptions = {\n\tdirection?: 'forward' | 'backward';\n\tincludeSelf?: boolean;\n\tsameAttributes?: ArrayOrItem<string>;\n\tsameIndent?: boolean;\n\tlowerIndent?: boolean;\n\thigherIndent?: boolean;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/model\n */\n\nimport type {\n\tModelDocumentFragment,\n\tModelElement,\n\tModel,\n\tModelNode,\n\tModelWriter,\n\tModelItem,\n\tModelSchema\n} from 'ckeditor5/src/engine.js';\n\nimport { uid, toArray, type ArrayOrItem } from 'ckeditor5/src/utils.js';\n\nimport { ListWalker, type ListWalkerOptions, SiblingListBlocksIterator } from './listwalker.js';\nimport { type ListType } from '../listediting.js';\n\n/**\n * The list item ID generator.\n *\n * @internal\n */\nexport class ListItemUid {\n\t/**\n\t * Returns the next ID.\n\t *\n\t * @internal\n\t */\n\t/* istanbul ignore next: static function definition -- @preserve */\n\tpublic static next(): string {\n\t\treturn uid();\n\t}\n}\n\n/**\n * An {@link module:engine/model/element~ModelElement} that is known to be a list element.\n *\n * @internal\n */\nexport interface ListElement extends ModelElement {\n\tgetAttribute( key: 'listItemId' ): string;\n\tgetAttribute( key: 'listIndent' ): number;\n\tgetAttribute( key: 'listType' ): ListType;\n\tgetAttribute( key: string ): unknown;\n}\n\n/**\n * Returns true if the given model node is a list item block.\n *\n * @internal\n */\nexport function isListItemBlock( node: ModelItem | ModelDocumentFragment | null ): node is ListElement {\n\treturn !!node && node.is( 'element' ) && node.hasAttribute( 'listItemId' );\n}\n\n/**\n * Returns an array with all elements that represents the same list item.\n *\n * It means that values for `listIndent`, and `listItemId` for all items are equal.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n * in the result.\n */\nexport function getAllListItemBlocks(\n\tlistItem: ModelNode,\n\toptions: {\n\t\thigherIndent?: boolean;\n\t} = {}\n): Array<ListElement> {\n\treturn [\n\t\t...getListItemBlocks( listItem, { ...options, direction: 'backward' } ),\n\t\t...getListItemBlocks( listItem, { ...options, direction: 'forward' } )\n\t];\n}\n\n/**\n * Returns an array with elements that represents the same list item in the specified direction.\n *\n * It means that values for `listIndent` and `listItemId` for all items are equal.\n *\n * **Note**: For backward search the provided item is not included, but for forward search it is included in the result.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.direction Walking direction.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included in the result.\n */\nexport function getListItemBlocks(\n\tlistItem: ModelNode,\n\toptions: {\n\t\tdirection?: 'forward' | 'backward';\n\t\thigherIndent?: boolean;\n\t} = {}\n): Array<ListElement> {\n\tconst isForward = options.direction == 'forward';\n\n\tconst items = Array.from( new ListWalker( listItem, {\n\t\t...options,\n\t\tincludeSelf: isForward,\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listItemId'\n\t} ) );\n\n\treturn isForward ? items : items.reverse();\n}\n\n/**\n * Returns a list items nested inside the given list item.\n *\n * @internal\n */\nexport function getNestedListBlocks( listItem: ModelElement ): Array<ListElement> {\n\treturn Array.from( new ListWalker( listItem, {\n\t\tdirection: 'forward',\n\t\thigherIndent: true\n\t} ) );\n}\n\n/**\n * Returns array of all blocks/items of the same list as given block (same indent, same type and properties).\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options Additional list walker options to modify the range of returned list items.\n */\nexport function getListItems( listItem: ModelElement, options?: ListWalkerOptions ): Array<ListElement> {\n\tconst backwardBlocks = new ListWalker( listItem, {\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listType',\n\t\t...options\n\t} );\n\n\tconst forwardBlocks = new ListWalker( listItem, {\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listType',\n\t\tincludeSelf: true,\n\t\tdirection: 'forward',\n\t\t...options\n\t} );\n\n\treturn [\n\t\t...Array.from( backwardBlocks ).reverse(),\n\t\t...forwardBlocks\n\t];\n}\n\n/**\n * Check if the given block is the first in the list item.\n *\n * @internal\n * @param listBlock The list block element.\n */\nexport function isFirstBlockOfListItem( listBlock: ModelNode ): boolean {\n\tconst previousSibling = ListWalker.first( listBlock, {\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listItemId'\n\t} );\n\n\tif ( !previousSibling ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Check if the given block is the last in the list item.\n *\n * @internal\n */\nexport function isLastBlockOfListItem( listBlock: ModelElement ): boolean {\n\tconst nextSibling = ListWalker.first( listBlock, {\n\t\tdirection: 'forward',\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listItemId'\n\t} );\n\n\tif ( !nextSibling ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n *\n * @internal\n * @param blocks The list of selected blocks.\n * @param options.withNested Whether should include nested list items.\n */\nexport function expandListBlocksToCompleteItems(\n\tblocks: ArrayOrItem<ModelElement>,\n\toptions: { withNested?: boolean } = {}\n): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\tconst higherIndent = options.withNested !== false;\n\tconst allBlocks = new Set<ListElement>();\n\n\tfor ( const block of blocks ) {\n\t\tfor ( const itemBlock of getAllListItemBlocks( block, { higherIndent } ) ) {\n\t\t\tallBlocks.add( itemBlock );\n\t\t}\n\t}\n\n\treturn sortBlocks( allBlocks );\n}\n\n/**\n * Expands the given list of selected blocks to include all the items of the lists they're in.\n *\n * @internal\n * @param blocks The list of selected blocks.\n */\nexport function expandListBlocksToCompleteList( blocks: ArrayOrItem<ModelElement> ): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\tconst allBlocks = new Set<ListElement>();\n\n\tfor ( const block of blocks ) {\n\t\tfor ( const itemBlock of getListItems( block ) ) {\n\t\t\tallBlocks.add( itemBlock );\n\t\t}\n\t}\n\n\treturn sortBlocks( allBlocks );\n}\n\n/**\n * Splits the list item just before the provided list block.\n *\n * @internal\n * @param listBlock The list block element.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */\nexport function splitListItemBefore(\n\tlistBlock: ModelElement,\n\twriter: ModelWriter\n): Array<ListElement> {\n\tconst blocks = getListItemBlocks( listBlock, { direction: 'forward' } );\n\tconst id = ListItemUid.next();\n\n\tfor ( const block of blocks ) {\n\t\twriter.setAttribute( 'listItemId', id, block );\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Merges the list item with the parent list item.\n *\n * @internal\n * @param listBlock The list block element.\n * @param parentBlock The list block element to merge with.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */\nexport function mergeListItemBefore(\n\tlistBlock: ModelNode,\n\tparentBlock: ModelElement,\n\twriter: ModelWriter\n): Array<ListElement> {\n\tconst attributes: Record<string, unknown> = {};\n\n\tfor ( const [ key, value ] of parentBlock.getAttributes() ) {\n\t\tif ( key.startsWith( 'list' ) ) {\n\t\t\tattributes[ key ] = value;\n\t\t}\n\t}\n\n\tconst blocks = getListItemBlocks( listBlock, { direction: 'forward' } );\n\n\tfor ( const block of blocks ) {\n\t\twriter.setAttributes( attributes, block );\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Increases indentation of given list blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @param options Additional options.\n * @param options.expand Whether should expand the list of blocks to include complete list items.\n * @param options.indentBy The number of levels the indentation should change (could be negative).\n */\nexport function indentBlocks(\n\tblocks: ArrayOrItem<ListElement>,\n\twriter: ModelWriter,\n\t{ expand, indentBy = 1 }: { expand?: boolean; indentBy?: number } = {}\n): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\t// Expand the selected blocks to contain the whole list items.\n\tconst allBlocks = expand ? expandListBlocksToCompleteItems( blocks ) : blocks;\n\n\tfor ( const block of allBlocks ) {\n\t\tconst blockIndent = block.getAttribute( 'listIndent' ) + indentBy;\n\n\t\tif ( blockIndent < 0 ) {\n\t\t\tremoveListAttributes( block, writer );\n\t\t} else {\n\t\t\twriter.setAttribute( 'listIndent', blockIndent, block );\n\t\t}\n\t}\n\n\treturn allBlocks;\n}\n\n/**\n * Decreases indentation of given list of blocks. If the indentation of some blocks matches the indentation\n * of surrounding blocks, they get merged together.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n */\nexport function outdentBlocksWithMerge(\n\tblocks: ArrayOrItem<ListElement>,\n\twriter: ModelWriter\n): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\t// Expand the selected blocks to contain the whole list items.\n\tconst allBlocks = expandListBlocksToCompleteItems( blocks );\n\tconst visited = new Set<ListElement>();\n\n\tconst referenceIndent = Math.min( ...allBlocks.map( block => block.getAttribute( 'listIndent' ) ) );\n\tconst parentBlocks = new Map();\n\n\t// Collect parent blocks before the list structure gets altered.\n\tfor ( const block of allBlocks ) {\n\t\tparentBlocks.set( block, ListWalker.first( block, { lowerIndent: true } ) );\n\t}\n\n\tfor ( const block of allBlocks ) {\n\t\tif ( visited.has( block ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisited.add( block );\n\n\t\tconst blockIndent = block.getAttribute( 'listIndent' ) - 1;\n\n\t\tif ( blockIndent < 0 ) {\n\t\t\tremoveListAttributes( block, writer );\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Merge with parent list item while outdenting and indent matches reference indent.\n\t\tif ( block.getAttribute( 'listIndent' ) == referenceIndent ) {\n\t\t\tconst mergedBlocks = mergeListItemIfNotLast( block, parentBlocks.get( block ), writer );\n\n\t\t\t// All list item blocks are updated while merging so add those to visited set.\n\t\t\tfor ( const mergedBlock of mergedBlocks ) {\n\t\t\t\tvisited.add( mergedBlock );\n\t\t\t}\n\n\t\t\t// The indent level was updated while merging so continue to next block.\n\t\t\tif ( mergedBlocks.length ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\twriter.setAttribute( 'listIndent', blockIndent, block );\n\t}\n\n\treturn sortBlocks( visited );\n}\n\n/**\n * Removes all list attributes from the given blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */\nexport function removeListAttributes(\n\tblocks: ArrayOrItem<ModelElement>,\n\twriter: ModelWriter\n): Array<ModelElement> {\n\tblocks = toArray( blocks );\n\n\t// Convert simple list items to plain paragraphs.\n\tfor ( const block of blocks ) {\n\t\tif ( block.is( 'element', 'listItem' ) ) {\n\t\t\twriter.rename( block, 'paragraph' );\n\t\t}\n\t}\n\n\t// Remove list attributes.\n\tfor ( const block of blocks ) {\n\t\tfor ( const attributeKey of block.getAttributeKeys() ) {\n\t\t\tif ( attributeKey.startsWith( 'list' ) ) {\n\t\t\t\twriter.removeAttribute( attributeKey, block );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Checks whether the given blocks are related to a single list item.\n *\n * @internal\n * @param blocks The list block elements.\n */\nexport function isSingleListItem( blocks: Array<ModelNode> ): boolean {\n\tif ( !blocks.length ) {\n\t\treturn false;\n\t}\n\n\tconst firstItemId = blocks[ 0 ].getAttribute( 'listItemId' );\n\n\tif ( !firstItemId ) {\n\t\treturn false;\n\t}\n\n\treturn !blocks.some( item => item.getAttribute( 'listItemId' ) != firstItemId );\n}\n\n/**\n * Modifies the indents of list blocks following the given list block so the indentation is valid after\n * the given block is no longer a list item.\n *\n * @internal\n * @param lastBlock The last list block that has become a non-list element.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */\nexport function outdentFollowingItems( lastBlock: ModelElement, writer: ModelWriter ): Array<ListElement> {\n\tconst changedBlocks = [];\n\n\t// Start from the model item that is just after the last turned-off item.\n\tlet currentIndent = Number.POSITIVE_INFINITY;\n\n\t// Correct indent of all items after the last turned off item.\n\t// Rules that should be followed:\n\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t//    should not end up as a child of any of list items that they were not children of before.\n\t// 3. All other items should have their indent changed relatively to it's parent.\n\t//\n\t// For example:\n\t// 1  * --------\n\t// 2     * --------\n\t// 3        * --------\t\t\t<-- this is turned off.\n\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t// 13    * --------\n\t// 14       * --------\n\t//\n\t// After turning off 3 the list becomes:\n\t//\n\t// 1  * --------\n\t// 2     * --------\n\t//\n\t// 3  --------\n\t//\n\t// 4  * --------\n\t// 5     * --------\n\t// 6  * --------\n\t// 7     * --------\n\t// 8  * --------\n\t// 9     * --------\n\t// 10       * --------\n\t// 11       * --------\n\t// 12 * --------\n\t// 13    * --------\n\t// 14       * --------\n\t//\n\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t// less conversion (faster).\n\tfor ( const { node } of new SiblingListBlocksIterator( lastBlock.nextSibling ) ) {\n\t\t// Check each next list item, as long as its indent is higher than 0.\n\t\tconst indent = node.getAttribute( 'listIndent' );\n\n\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\tif ( indent == 0 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// We check if that's item indent is lower than current relative indent.\n\t\tif ( indent < currentIndent ) {\n\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\tcurrentIndent = indent;\n\t\t}\n\n\t\t// Fix indent relatively to current relative indent.\n\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\tconst newIndent = indent - currentIndent;\n\n\t\twriter.setAttribute( 'listIndent', newIndent, node );\n\t\tchangedBlocks.push( node );\n\t}\n\n\treturn changedBlocks;\n}\n\n/**\n * Returns the array of given blocks sorted by model indexes (document order).\n *\n * @internal\n */\nexport function sortBlocks<T extends ModelElement>( blocks: Iterable<T> ): Array<T> {\n\treturn Array.from( blocks )\n\t\t.filter( block => block.root.rootName !== '$graveyard' )\n\t\t.sort( ( a, b ) => a.index! - b.index! );\n}\n\n/**\n * Returns a selected block object. If a selected object is inline or when there is no selected\n * object, `null` is returned.\n *\n * @internal\n * @param model The instance of editor model.\n * @returns Selected block object or `null`.\n */\nexport function getSelectedBlockObject( model: Model ): ModelElement | null {\n\tconst selectedElement = model.document.selection.getSelectedElement();\n\n\tif ( !selectedElement ) {\n\t\treturn null;\n\t}\n\n\tif ( model.schema.isObject( selectedElement ) && model.schema.isBlock( selectedElement ) ) {\n\t\treturn selectedElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * Note that this is possible only when multiBlock = false option is set in feature config.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n * @internal\n */\nexport function canBecomeSimpleListItem( block: ModelElement, schema: ModelSchema ): boolean {\n\treturn schema.checkChild( block.parent as ModelElement, 'listItem' ) &&\n\t\tschema.checkChild( block, '$text' ) &&\n\t\t!schema.isObject( block );\n}\n\n/**\n * Returns true if listType is of type `numbered` or `customNumbered`.\n *\n * @internal\n */\nexport function isNumberedListType( listType: ListType ): boolean {\n\treturn listType == 'numbered' || listType == 'customNumbered';\n}\n\n/**\n * Merges a given block to the given parent block if parent is a list item and there is no more blocks in the same item.\n */\nfunction mergeListItemIfNotLast(\n\tblock: ListElement,\n\tparentBlock: ListElement,\n\twriter: ModelWriter\n) {\n\tconst parentItemBlocks = getListItemBlocks( parentBlock, { direction: 'forward' } );\n\n\t// Merge with parent only if outdented item wasn't the last one in its parent.\n\t// Merge:\n\t// * a\t\t\t->\t\t* a\n\t//   * [b]\t\t->\t\t  b\n\t//   c\t\t\t->\t\t  c\n\t// Don't merge:\n\t// * a\t\t\t->\t\t* a\n\t//   * [b]\t\t-> \t\t* b\n\t// * c\t\t\t->\t\t* c\n\tif ( parentItemBlocks.pop()!.index! > block.index! ) {\n\t\treturn mergeListItemBefore( block, parentBlock, writer );\n\t}\n\n\treturn [];\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listindentcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelDocumentSelection, ModelElement } from 'ckeditor5/src/engine.js';\n\nimport {\n\texpandListBlocksToCompleteItems,\n\tindentBlocks,\n\tisFirstBlockOfListItem,\n\tisListItemBlock,\n\tisSingleListItem,\n\toutdentBlocksWithMerge,\n\tsortBlocks,\n\tsplitListItemBefore,\n\ttype ListElement\n} from './utils/model.js';\nimport { ListWalker } from './utils/listwalker.js';\n\n/**\n * The document list indent command. It is used by the {@link module:list/list~List list feature}.\n */\nexport class ListIndentCommand extends Command {\n\t/**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */\n\tprivate readonly _direction: 'forward' | 'backward';\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor: Editor, indentDirection: 'forward' | 'backward' ) {\n\t\tsuper( editor );\n\n\t\tthis._direction = indentDirection;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst blocks = getSelectedListBlocks( model.document.selection );\n\n\t\tmodel.change( writer => {\n\t\t\tconst changedBlocks = [];\n\n\t\t\t// Handle selection contained in the single list item and starting in the following blocks.\n\t\t\tif ( isSingleListItem( blocks ) && !isFirstBlockOfListItem( blocks[ 0 ] ) ) {\n\t\t\t\t// Allow increasing indent of following list item blocks.\n\t\t\t\tif ( this._direction == 'forward' ) {\n\t\t\t\t\tchangedBlocks.push( ...indentBlocks( blocks, writer ) );\n\t\t\t\t}\n\n\t\t\t\t// For indent make sure that indented blocks have a new ID.\n\t\t\t\t// For outdent just split blocks from the list item (give them a new IDs).\n\t\t\t\tchangedBlocks.push( ...splitListItemBefore( blocks[ 0 ], writer ) );\n\t\t\t}\n\t\t\t// More than a single list item is selected, or the first block of list item is selected.\n\t\t\telse {\n\t\t\t\t// Now just update the attributes of blocks.\n\t\t\t\tif ( this._direction == 'forward' ) {\n\t\t\t\t\tchangedBlocks.push( ...indentBlocks( blocks, writer, { expand: true } ) );\n\t\t\t\t} else {\n\t\t\t\t\tchangedBlocks.push( ...outdentBlocksWithMerge( blocks, writer ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Align the list item type to match the previous list item (from the same list).\n\t\t\tfor ( const block of changedBlocks ) {\n\t\t\t\t// This block become a plain block (for example a paragraph).\n\t\t\t\tif ( !block.hasAttribute( 'listType' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst previousItemBlock = ListWalker.first( block, { sameIndent: true } );\n\n\t\t\t\tif ( previousItemBlock ) {\n\t\t\t\t\twriter.setAttribute( 'listType', previousItemBlock.getAttribute( 'listType' ), block );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<ModelElement> ) {\n\t\tthis.fire<ListIndentCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tlet blocks = getSelectedListBlocks( this.editor.model.document.selection );\n\t\tlet firstBlock = blocks[ 0 ];\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\tif ( this._direction == 'backward' ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// A single block of a list item is selected, so it could be indented as a sublist.\n\t\tif ( isSingleListItem( blocks ) && !isFirstBlockOfListItem( blocks[ 0 ] ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tblocks = expandListBlocksToCompleteItems( blocks );\n\t\tfirstBlock = blocks[ 0 ];\n\n\t\t// Check if there is any list item before selected items that could become a parent of selected items.\n\t\tconst siblingItem = ListWalker.first( firstBlock, { sameIndent: true } );\n\n\t\tif ( !siblingItem ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( siblingItem.getAttribute( 'listType' ) == firstBlock.getAttribute( 'listType' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * Returns an array of selected blocks truncated to the first non list block element.\n */\nfunction getSelectedListBlocks( selection: ModelDocumentSelection ) {\n\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\tconst firstNonListBlockIndex = blocks.findIndex( block => !isListItemBlock( block ) );\n\n\tif ( firstNonListBlockIndex != -1 ) {\n\t\tblocks.length = firstNonListBlockIndex;\n\t}\n\n\treturn blocks as Array<ListElement>;\n}\n\n/**\n * Event fired by the {@link ~ListIndentCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link module:list/list/listcommand~ListCommand#execute}\n * method, for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListIndentCommand#afterExecute\n */\nexport type ListIndentCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<ModelElement> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listcommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport {\n\tsplitListItemBefore,\n\texpandListBlocksToCompleteItems,\n\tgetListItemBlocks,\n\tgetListItems,\n\tremoveListAttributes,\n\toutdentFollowingItems,\n\tListItemUid,\n\tsortBlocks,\n\tgetSelectedBlockObject,\n\tisListItemBlock,\n\tcanBecomeSimpleListItem\n} from './utils/model.js';\nimport { type ListType } from './listediting.js';\nimport type { ListWalkerOptions } from './utils/listwalker.js';\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n */\nexport class ListCommand extends Command {\n\t/**\n\t * The type of the list created by the command.\n\t */\n\tpublic readonly type: ListType;\n\n\t/**\n\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tpublic declare value: boolean;\n\n\t/**\n\t * List Walker options that change the range of the list items to be changed when the selection is collapsed within a list item.\n\t *\n\t * In a multi-level list, when the selection is collapsed within a list item, instead of changing only the list items of the same list\n\t * type and current indent level, the entire list structure is changed (all list items at all indent levels of any list type).\n\t */\n\tprivate readonly _listWalkerOptions?: ListWalkerOptions;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */\n\tconstructor( editor: Editor, type: ListType, options: { multiLevel?: boolean } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.type = type;\n\n\t\tthis._listWalkerOptions = options.multiLevel ? {\n\t\t\thigherIndent: true,\n\t\t\tlowerIndent: true,\n\t\t\tsameAttributes: []\n\t\t} :\tundefined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false` it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t * @param options.additionalAttributes Additional attributes that are set for list items when the command is executed.\n\t */\n\tpublic override execute( options: { forceValue?: boolean; additionalAttributes?: Record<string, unknown> } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selectedBlockObject = getSelectedBlockObject( model );\n\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => model.schema.checkAttribute( block, 'listType' ) || canBecomeSimpleListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( turnOff ) {\n\t\t\t\tconst lastBlock = blocks[ blocks.length - 1 ];\n\n\t\t\t\t// Split the first block from the list item.\n\t\t\t\tconst itemBlocks = getListItemBlocks( lastBlock, { direction: 'forward' } );\n\t\t\t\tconst changedBlocks = [];\n\n\t\t\t\tif ( itemBlocks.length > 1 ) {\n\t\t\t\t\tchangedBlocks.push( ...splitListItemBefore( itemBlocks[ 1 ], writer ) );\n\t\t\t\t}\n\n\t\t\t\t// Strip list attributes.\n\t\t\t\tchangedBlocks.push( ...removeListAttributes( blocks, writer ) );\n\n\t\t\t\t// Outdent items following the selected list item.\n\t\t\t\tchangedBlocks.push( ...outdentFollowingItems( lastBlock, writer ) );\n\n\t\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t\t}\n\t\t\t// Changing type of list items for a collapsed selection inside a list item.\n\t\t\telse if ( ( selectedBlockObject || document.selection.isCollapsed ) && isListItemBlock( blocks[ 0 ] ) ) {\n\t\t\t\tconst changedBlocks = getListItems( selectedBlockObject || blocks[ 0 ], this._listWalkerOptions );\n\n\t\t\t\tfor ( const block of changedBlocks ) {\n\t\t\t\t\twriter.setAttributes( {\n\t\t\t\t\t\t...options.additionalAttributes,\n\t\t\t\t\t\tlistType: this.type\n\t\t\t\t\t}, block );\n\t\t\t\t}\n\n\t\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t\t}\n\t\t\t// Turning on the list items for a non-collapsed selection.\n\t\t\telse {\n\t\t\t\tconst changedBlocks = [];\n\n\t\t\t\tfor ( const block of blocks ) {\n\t\t\t\t\t// Promote the given block to the list item.\n\t\t\t\t\tif ( !block.hasAttribute( 'listType' ) ) {\n\t\t\t\t\t\t// Rename block to a simple list item if this option is enabled.\n\t\t\t\t\t\tif ( !block.is( 'element', 'listItem' ) && canBecomeSimpleListItem( block, model.schema ) ) {\n\t\t\t\t\t\t\twriter.rename( block, 'listItem' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twriter.setAttributes( {\n\t\t\t\t\t\t\t...options.additionalAttributes,\n\t\t\t\t\t\t\tlistIndent: 0,\n\t\t\t\t\t\t\tlistItemId: ListItemUid.next(),\n\t\t\t\t\t\t\tlistType: this.type\n\t\t\t\t\t\t}, block );\n\n\t\t\t\t\t\tchangedBlocks.push( block );\n\t\t\t\t\t}\n\t\t\t\t\t// Change the type of list item.\n\t\t\t\t\telse {\n\t\t\t\t\t\tfor ( const node of expandListBlocksToCompleteItems( block, { withNested: false } ) ) {\n\t\t\t\t\t\t\tif ( node.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t\t\t\twriter.setAttributes( {\n\t\t\t\t\t\t\t\t\t...options.additionalAttributes,\n\t\t\t\t\t\t\t\t\tlistType: this.type\n\t\t\t\t\t\t\t\t}, node );\n\n\t\t\t\t\t\t\t\tchangedBlocks.push( node );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<ModelElement> ) {\n\t\tthis.fire<ListCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue(): boolean {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\n\t\tif ( !blocks.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const block of blocks ) {\n\t\t\tif ( block.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\n\t\tif ( !blocks.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor ( const block of blocks ) {\n\t\t\tif ( schema.checkAttribute( block, 'listType' ) || canBecomeSimpleListItem( block, schema ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * Event fired by the {@link ~ListCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link ~ListCommand#execute} method,\n * for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListCommand#afterExecute\n */\nexport type ListCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<ModelElement> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listmergecommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelDocumentSelection, ModelElement, ModelNode, ModelSelection } from 'ckeditor5/src/engine.js';\n\nimport {\n\tgetNestedListBlocks,\n\tindentBlocks,\n\tsortBlocks,\n\tisFirstBlockOfListItem,\n\tmergeListItemBefore,\n\tisSingleListItem,\n\tgetSelectedBlockObject,\n\tisListItemBlock,\n\ttype ListElement\n} from './utils/model.js';\nimport { ListWalker } from './utils/listwalker.js';\n\n/**\n * The document list merge command. It is used by the {@link module:list/list~List list feature}.\n */\nexport class ListMergeCommand extends Command {\n\t/**\n\t * Whether list item should be merged before or after the selected block.\n\t */\n\tprivate readonly _direction: 'forward' | 'backward';\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be merged before or after the selected block.\n\t */\n\tconstructor( editor: Editor, direction: 'forward' | 'backward' ) {\n\t\tsuper( editor );\n\n\t\tthis._direction = direction;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Merges list blocks together (depending on the {@link #constructor}'s `direction` parameter).\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.shouldMergeOnBlocksContentLevel When set `true`, merging will be performed together\n\t * with {@link module:engine/model/model~Model#deleteContent} to get rid of the inline content in the selection or take advantage\n\t * of the heuristics in `deleteContent()` that helps convert lists into paragraphs in certain cases.\n\t */\n\tpublic override execute(\n\t\t{ shouldMergeOnBlocksContentLevel = false }: { shouldMergeOnBlocksContentLevel?: boolean } = {}\n\t): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst changedBlocks: Array<ModelElement> = [];\n\n\t\tmodel.change( writer => {\n\t\t\tconst { firstElement, lastElement } = this._getMergeSubjectElements( selection, shouldMergeOnBlocksContentLevel );\n\n\t\t\tconst firstIndent = firstElement.getAttribute( 'listIndent' ) || 0;\n\t\t\tconst lastIndent = lastElement.getAttribute( 'listIndent' );\n\t\t\tconst lastElementId = lastElement.getAttribute( 'listItemId' );\n\n\t\t\tif ( firstIndent != lastIndent ) {\n\t\t\t\tconst nestedLastElementBlocks = getNestedListBlocks( lastElement );\n\n\t\t\t\tchangedBlocks.push( ...indentBlocks( [ lastElement, ...nestedLastElementBlocks ], writer, {\n\t\t\t\t\tindentBy: firstIndent - lastIndent,\n\n\t\t\t\t\t// If outdenting, the entire sub-tree that follows must be included.\n\t\t\t\t\texpand: firstIndent < lastIndent\n\t\t\t\t} ) );\n\t\t\t}\n\n\t\t\tif ( shouldMergeOnBlocksContentLevel ) {\n\t\t\t\tlet sel: ModelSelection | ModelDocumentSelection = selection;\n\n\t\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\t\tsel = writer.createSelection( writer.createRange(\n\t\t\t\t\t\twriter.createPositionAt( firstElement, 'end' ),\n\t\t\t\t\t\twriter.createPositionAt( lastElement, 0 )\n\t\t\t\t\t) );\n\t\t\t\t}\n\n\t\t\t\t// Delete selected content. Replace entire content only for non-collapsed selection.\n\t\t\t\tmodel.deleteContent( sel, { doNotResetEntireContent: selection.isCollapsed } );\n\n\t\t\t\t// Get the last \"touched\" element after deleteContent call (can't use the lastElement because\n\t\t\t\t// it could get merged into the firstElement while deleting content).\n\t\t\t\tconst lastElementAfterDelete = sel.getLastPosition()!.parent;\n\n\t\t\t\t// Check if the element after it was in the same list item and adjust it if needed.\n\t\t\t\tconst nextSibling = lastElementAfterDelete.nextSibling;\n\n\t\t\t\tchangedBlocks.push( lastElementAfterDelete as ModelElement );\n\n\t\t\t\tif ( nextSibling && nextSibling !== lastElement && nextSibling.getAttribute( 'listItemId' ) == lastElementId ) {\n\t\t\t\t\tchangedBlocks.push( ...mergeListItemBefore( nextSibling, lastElementAfterDelete, writer ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tchangedBlocks.push( ...mergeListItemBefore( lastElement, firstElement, writer ) );\n\t\t\t}\n\n\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<ModelElement> ) {\n\t\tthis.fire<ListMergeCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedBlockObject = getSelectedBlockObject( model );\n\n\t\tif ( selection.isCollapsed || selectedBlockObject ) {\n\t\t\tconst positionParent = selectedBlockObject || selection.getFirstPosition()!.parent;\n\n\t\t\tif ( !isListItemBlock( positionParent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst siblingNode = this._direction == 'backward' ?\n\t\t\t\tpositionParent.previousSibling :\n\t\t\t\tpositionParent.nextSibling;\n\n\t\t\tif ( !siblingNode ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( isSingleListItem( [ positionParent, siblingNode ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst lastPosition = selection.getLastPosition()!;\n\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\n\t\t\t// If deleting within a single block of a list item, there's no need to merge anything.\n\t\t\t// The default delete should be executed instead.\n\t\t\tif ( lastPosition.parent === firstPosition.parent ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( !isListItemBlock( lastPosition.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the boundary elements the merge should be executed for. These are not necessarily selection's first\n\t * and last position parents but sometimes sibling or even further blocks depending on the context.\n\t *\n\t * @param selection The selection the merge is executed for.\n\t * @param shouldMergeOnBlocksContentLevel When `true`, merge is performed together with\n\t * {@link module:engine/model/model~Model#deleteContent} to remove the inline content within the selection.\n\t */\n\tprivate _getMergeSubjectElements(\n\t\tselection: ModelSelection | ModelDocumentSelection,\n\t\tshouldMergeOnBlocksContentLevel: boolean\n\t) {\n\t\tconst model = this.editor.model;\n\t\tconst selectedBlockObject = getSelectedBlockObject( model );\n\t\tlet firstElement, lastElement;\n\n\t\tif ( selection.isCollapsed || selectedBlockObject ) {\n\t\t\tconst positionParent = selectedBlockObject || selection.getFirstPosition()!.parent as ModelNode;\n\t\t\tconst isFirstBlock = isFirstBlockOfListItem( positionParent );\n\n\t\t\tif ( this._direction == 'backward' ) {\n\t\t\t\tlastElement = positionParent;\n\n\t\t\t\tif ( isFirstBlock && !shouldMergeOnBlocksContentLevel ) {\n\t\t\t\t\t// For the \"c\" as an anchorElement:\n\t\t\t\t\t//  * a\n\t\t\t\t\t//    * b\n\t\t\t\t\t//  * [c]  <-- this block should be merged with \"a\"\n\t\t\t\t\t// It should find \"a\" element to merge with:\n\t\t\t\t\t//  * a\n\t\t\t\t\t//    * b\n\t\t\t\t\t//    c\n\t\t\t\t\tfirstElement = ListWalker.first( positionParent, { sameIndent: true, lowerIndent: true } );\n\t\t\t\t} else {\n\t\t\t\t\tfirstElement = positionParent.previousSibling;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// In case of the forward merge there is no case as above, just merge with next sibling.\n\t\t\t\tfirstElement = positionParent;\n\t\t\t\tlastElement = positionParent.nextSibling;\n\t\t\t}\n\t\t} else {\n\t\t\tfirstElement = selection.getFirstPosition()!.parent;\n\t\t\tlastElement = selection.getLastPosition()!.parent;\n\t\t}\n\n\t\treturn {\n\t\t\tfirstElement: firstElement as ListElement,\n\t\t\tlastElement: lastElement as ListElement\n\t\t};\n\t}\n}\n\n/**\n * Event fired by the {@link ~ListMergeCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link module:list/list/listcommand~ListCommand#execute}\n * method, for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListMergeCommand#afterExecute\n */\nexport type ListMergeCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<ModelElement> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listsplitcommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tisFirstBlockOfListItem,\n\tisListItemBlock,\n\tsortBlocks,\n\tsplitListItemBefore\n} from './utils/model.js';\n\n/**\n * The document list split command that splits the list item at the selection.\n *\n * It is used by the {@link module:list/list~List list feature}.\n */\nexport class ListSplitCommand extends Command {\n\t/**\n\t * Whether list item should be split before or after the selected block.\n\t */\n\tprivate readonly _direction: 'before' | 'after';\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be split before or after the selected block.\n\t */\n\tconstructor( editor: Editor, direction: 'before' | 'after' ) {\n\t\tsuper( editor );\n\n\t\tthis._direction = direction;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Splits the list item at the selection.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\n\t\teditor.model.change( writer => {\n\t\t\tconst changedBlocks = splitListItemBefore( this._getStartBlock(), writer );\n\n\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<ModelElement> ) {\n\t\tthis.fire<ListSplitCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst block = this._getStartBlock();\n\n\t\treturn selection.isCollapsed &&\n\t\t\tisListItemBlock( block ) &&\n\t\t\t!isFirstBlockOfListItem( block );\n\t}\n\n\t/**\n\t * Returns the model element that is the main focus of the command (according to the current selection and command direction).\n\t */\n\tprivate _getStartBlock() {\n\t\tconst doc = this.editor.model.document;\n\t\tconst positionParent = doc.selection.getFirstPosition()!.parent;\n\n\t\treturn ( this._direction == 'before' ? positionParent : positionParent.nextSibling ) as ModelElement;\n\t}\n}\n\n/**\n * Event fired by the {@link ~ListSplitCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link module:list/list/listcommand~ListCommand#execute}\n * method, for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListSplitCommand#afterExecute\n */\nexport type ListSplitCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<ModelElement> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listformatting/listitemboldintegration\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { env } from 'ckeditor5/src/utils.js';\n\nimport { ListEditing } from '../list/listediting.js';\nimport type { ListFormatting } from '../listformatting.js';\n\n/**\n * The list item bold integration plugin.\n */\nexport class ListItemBoldIntegration extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListItemBoldIntegration' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst ListFormatting: ListFormatting = editor.plugins.get( 'ListFormatting' );\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tif ( !editor.plugins.has( 'BoldEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tListFormatting.registerFormatAttribute( 'bold', 'listItemBold' );\n\n\t\t// Register the downcast strategy in init() so that the attribute name is registered before the list editing\n\t\t// registers its converters.\n\t\t// This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'listItemBold',\n\n\t\t\tsetAttributeOnDowncast( writer, value, viewElement, options ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.addClass( 'ck-list-marker-bold', viewElement );\n\n\t\t\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/18790.\n\t\t\t\t\tif ( env.isSafari && !( options && options.dataPipeline ) ) {\n\t\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-dummy-bold', '0', viewElement );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tif ( !editor.plugins.has( 'BoldEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'listItemBold' } );\n\t\tmodel.schema.setAttributeProperties( 'listItemBold', {\n\t\t\tisFormatting: true\n\t\t} );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( !item.getAttribute( 'listItemId' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'listItemBold' );\n\n\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: 'listItemBold',\n\t\t\tview: {\n\t\t\t\tname: 'li',\n\t\t\t\tclasses: 'ck-list-marker-bold'\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listformatting/listitemitalicintegration\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { env } from 'ckeditor5/src/utils.js';\n\nimport { ListEditing } from '../list/listediting.js';\nimport type { ListFormatting } from '../listformatting.js';\n\n/**\n * The list item italic integration plugin.\n */\nexport class ListItemItalicIntegration extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListItemItalicIntegration' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst ListFormatting: ListFormatting = editor.plugins.get( 'ListFormatting' );\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tif ( !editor.plugins.has( 'ItalicEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tListFormatting.registerFormatAttribute( 'italic', 'listItemItalic' );\n\n\t\t// Register the downcast strategy in init() so that the attribute name is registered before the list editing\n\t\t// registers its converters.\n\t\t// This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'listItemItalic',\n\n\t\t\tsetAttributeOnDowncast( writer, value, viewElement, options ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.addClass( 'ck-list-marker-italic', viewElement );\n\n\t\t\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/18790.\n\t\t\t\t\tif ( env.isSafari && !( options && options.dataPipeline ) ) {\n\t\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-dummy-italic', '0', viewElement );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tif ( !editor.plugins.has( 'ItalicEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'listItemItalic' } );\n\t\tmodel.schema.setAttributeProperties( 'listItemItalic', {\n\t\t\tisFormatting: true\n\t\t} );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( !item.getAttribute( 'listItemId' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'listItemItalic' );\n\n\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: 'listItemItalic',\n\t\t\tview: {\n\t\t\t\tname: 'li',\n\t\t\t\tclasses: 'ck-list-marker-italic'\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listformatting/listitemfontsizeintegration\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type { ViewElement } from 'ckeditor5/src/engine.js';\nimport { env } from 'ckeditor5/src/utils.js';\nimport { _normalizeFontSizeOptions } from '@ckeditor/ckeditor5-font';\n\nimport { ListEditing } from '../list/listediting.js';\nimport type { ListFormatting } from '../listformatting.js';\n\n/**\n * The list item font size integration plugin.\n */\nexport class ListItemFontSizeIntegration extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListItemFontSizeIntegration' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst ListFormatting: ListFormatting = editor.plugins.get( 'ListFormatting' );\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tif ( !editor.plugins.has( 'FontSizeEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst normalizedFontSizeOptions = _normalizeFontSizeOptions( editor.config.get( 'fontSize.options' )! );\n\n\t\tListFormatting.registerFormatAttribute( 'fontSize', 'listItemFontSize' );\n\n\t\t// Register the downcast strategy in init() so that the attribute name is registered before the list editing\n\t\t// registers its converters.\n\t\t// This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'listItemFontSize',\n\n\t\t\tsetAttributeOnDowncast( writer, value: string, viewElement, options ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\tconst fontSizeOption = normalizedFontSizeOptions.find( option => option.model == value );\n\n\t\t\t\t\tif ( fontSizeOption && fontSizeOption.view && typeof fontSizeOption.view != 'string' ) {\n\t\t\t\t\t\tif ( fontSizeOption.view.styles ) {\n\t\t\t\t\t\t\twriter.addClass( 'ck-list-marker-font-size', viewElement );\n\t\t\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-font-size', fontSizeOption.view.styles[ 'font-size' ], viewElement );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( fontSizeOption.view.classes ) {\n\t\t\t\t\t\t\twriter.addClass( `ck-list-marker-font-size-${ value }`, viewElement );\n\n\t\t\t\t\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/18790.\n\t\t\t\t\t\t\tif ( env.isSafari && !( options && options.dataPipeline ) ) {\n\t\t\t\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-dummy-font-size', '0', viewElement );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.addClass( 'ck-list-marker-font-size', viewElement );\n\t\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-font-size', value as string, viewElement );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tif ( !editor.plugins.has( 'FontSizeEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'listItemFontSize' } );\n\t\tmodel.schema.setAttributeProperties( 'listItemFontSize', {\n\t\t\tisFormatting: true\n\t\t} );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( !item.getAttribute( 'listItemId' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'listItemFontSize' );\n\n\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: 'listItemFontSize',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => viewElement.getStyle( '--ck-content-list-marker-font-size' )\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tname: 'li',\n\t\t\t\tclasses: 'ck-list-marker-font-size',\n\t\t\t\tstyles: {\n\t\t\t\t\t'--ck-content-list-marker-font-size': /.*/\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tconst fontSizeOptions = _normalizeFontSizeOptions( editor.config.get( 'fontSize.options' )! );\n\n\t\tfor ( const option of fontSizeOptions ) {\n\t\t\tif ( option.model && option.view ) {\n\t\t\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tkey: 'listItemFontSize',\n\t\t\t\t\t\tvalue: option.model\n\t\t\t\t\t},\n\t\t\t\t\tview: {\n\t\t\t\t\t\tname: 'li',\n\t\t\t\t\t\tclasses: `ck-list-marker-font-size-${ option.model }`\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listformatting/listitemfontcolorintegration\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { type ViewElement } from 'ckeditor5/src/engine.js';\n\nimport { ListEditing } from '../list/listediting.js';\nimport type { ListFormatting } from '../listformatting.js';\n\n/**\n * The list item font color integration plugin.\n */\nexport class ListItemFontColorIntegration extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListItemFontColorIntegration' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst ListFormatting: ListFormatting = editor.plugins.get( 'ListFormatting' );\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tif ( !editor.plugins.has( 'FontColorEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tListFormatting.registerFormatAttribute( 'fontColor', 'listItemFontColor' );\n\n\t\t// Register the downcast strategy in init() so that the attribute name is registered before the list editing\n\t\t// registers its converters.\n\t\t// This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'listItemFontColor',\n\n\t\t\tsetAttributeOnDowncast( writer, value, viewElement ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.addClass( 'ck-list-marker-color', viewElement );\n\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-color', value as string, viewElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tif ( !editor.plugins.has( 'FontColorEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'listItemFontColor' } );\n\t\tmodel.schema.setAttributeProperties( 'listItemFontColor', {\n\t\t\tisFormatting: true\n\t\t} );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( !item.getAttribute( 'listItemId' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'listItemFontColor' );\n\n\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: 'listItemFontColor',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\treturn viewElement.getStyle( '--ck-content-list-marker-color' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tname: 'li',\n\t\t\t\tclasses: 'ck-list-marker-color',\n\t\t\t\tstyles: {\n\t\t\t\t\t'--ck-content-list-marker-color': /.*/\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listformatting/listitemfontfamilyintegration\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { type ViewElement } from 'ckeditor5/src/engine.js';\n\nimport { ListEditing } from '../list/listediting.js';\nimport type { ListFormatting } from '../listformatting.js';\n\n/**\n * The list item font family integration plugin.\n */\nexport class ListItemFontFamilyIntegration extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListItemFontFamilyIntegration' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst ListFormatting: ListFormatting = editor.plugins.get( 'ListFormatting' );\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tif ( !editor.plugins.has( 'FontFamilyEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tListFormatting.registerFormatAttribute( 'fontFamily', 'listItemFontFamily' );\n\n\t\t// Register the downcast strategy in init() so that the attribute name is registered before the list editing\n\t\t// registers its converters.\n\t\t// This ensures that the attribute is recognized by downcast strategies and bogus paragraphs are handled correctly.\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'listItemFontFamily',\n\n\t\t\tsetAttributeOnDowncast( writer, value, viewElement ) {\n\t\t\t\t// There is no need of removing the style because downcast strategies handles it automatically.\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.addClass( 'ck-list-marker-font-family', viewElement );\n\t\t\t\t\twriter.setStyle( '--ck-content-list-marker-font-family', value as string, viewElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tif ( !editor.plugins.has( 'FontFamilyEditing' ) || !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'listItemFontFamily' } );\n\t\tmodel.schema.setAttributeProperties( 'listItemFontFamily', {\n\t\t\tisFormatting: true\n\t\t} );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( !item.getAttribute( 'listItemId' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'listItemFontFamily' );\n\n\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: 'listItemFontFamily',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\treturn viewElement.getStyle( '--ck-content-list-marker-font-family' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tname: 'li',\n\t\t\t\tclasses: 'ck-list-marker-font-family',\n\t\t\t\tstyles: {\n\t\t\t\t\t'--ck-content-list-marker-font-family': /.*/\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listformatting\n */\n\nimport { type Editor, Plugin } from 'ckeditor5/src/core.js';\n\nimport { ListItemBoldIntegration } from './listformatting/listitemboldintegration.js';\nimport { ListItemItalicIntegration } from './listformatting/listitemitalicintegration.js';\nimport { ListItemFontSizeIntegration } from './listformatting/listitemfontsizeintegration.js';\nimport { ListItemFontColorIntegration } from './listformatting/listitemfontcolorintegration.js';\nimport { ListItemFontFamilyIntegration } from './listformatting/listitemfontfamilyintegration.js';\n\nimport type {\n\tModel,\n\tModelElement,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tisListItemBlock,\n\tgetAllListItemBlocks,\n\tisFirstBlockOfListItem\n} from './list/utils/model.js';\n\nimport '../theme/listformatting.css';\n\n/**\n * The list formatting plugin.\n *\n * It enables integration with formatting plugins to style the list marker.\n * The list marker is styled based on the consistent formatting applied to the content of the list item.\n *\n * The list of supported formatting plugins includes:\n * * Font color.\n * * Font size.\n * * Font family.\n * * Bold.\n * * Italic.\n */\nexport class ListFormatting extends Plugin {\n\t/**\n\t * The list of loaded formatting.\n\t */\n\tprivate readonly _loadedFormatting: Record<string, string> = {};\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListFormatting' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [\n\t\t\tListItemBoldIntegration,\n\t\t\tListItemItalicIntegration,\n\t\t\tListItemFontSizeIntegration,\n\t\t\tListItemFontColorIntegration,\n\t\t\tListItemFontFamilyIntegration\n\t\t] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list.enableListItemMarkerFormatting', true );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tif ( !this.editor.config.get( 'list.enableListItemMarkerFormatting' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._registerPostfixerForListItemFormatting();\n\t}\n\n\t/**\n\t * Registers a postfixer that ensures that the list item formatting attribute is consistent with the formatting\n\t * applied to the content of the list item.\n\t */\n\tprivate _registerPostfixerForListItemFormatting(): void {\n\t\tconst model = this.editor.model;\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tconst changes = model.document.differ.getChanges();\n\t\t\tconst modifiedListItems = new Set<ModelElement>();\n\t\t\tlet returnValue = false;\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type === 'attribute' ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tentry.attributeKey == 'listItemId' ||\n\t\t\t\t\t\tentry.attributeKey == 'listType' ||\n\t\t\t\t\t\tthis._isInlineOrSelectionFormatting( entry.attributeKey ) ||\n\t\t\t\t\t\tObject.values( this._loadedFormatting ).includes( entry.attributeKey )\n\t\t\t\t\t) {\n\t\t\t\t\t\tif ( isListItemBlock( entry.range.start.nodeAfter ) ) {\n\t\t\t\t\t\t\tmodifiedListItems.add( entry.range.start.nodeAfter );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( isListItemBlock( entry.range.start.parent ) ) {\n\t\t\t\t\t\t\tmodifiedListItems.add( entry.range.start.parent );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( isListItemBlock( entry.position.nodeAfter ) ) {\n\t\t\t\t\t\tmodifiedListItems.add( entry.position.nodeAfter );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isListItemBlock( entry.position.nodeBefore ) ) {\n\t\t\t\t\t\tmodifiedListItems.add( entry.position.nodeBefore );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isListItemBlock( entry.position.parent ) ) {\n\t\t\t\t\t\tmodifiedListItems.add( entry.position.parent );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\t\t\t\tconst range = writer.createRangeIn( entry.position.nodeAfter as ModelElement );\n\n\t\t\t\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\t\t\t\tif ( isListItemBlock( item ) ) {\n\t\t\t\t\t\t\t\tmodifiedListItems.add( item );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( const listItem of modifiedListItems ) {\n\t\t\t\tconst formats = getListItemConsistentFormat( model, listItem, Object.keys( this._loadedFormatting ) );\n\n\t\t\t\tfor ( const [ formatAttributeName, formatValue ] of Object.entries( formats ) ) {\n\t\t\t\t\tconst listItemFormatAttributeName = this._loadedFormatting[ formatAttributeName ];\n\n\t\t\t\t\tif ( formatValue && setFormattingToListItem( writer, listItem, listItemFormatAttributeName, formatValue ) ) {\n\t\t\t\t\t\treturnValue = true;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( !formatValue && removeFormattingFromListItem( writer, listItem, listItemFormatAttributeName ) ) {\n\t\t\t\t\t\treturnValue = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t} );\n\t}\n\n\t/**\n\t * Registers an integration between a default attribute (e.g., `fontFamily`) and a new attribute\n\t * intended specifically for list item elements (e.g., `listItemFontFamily`).\n\t *\n\t * These attributes are later used by the postfixer logic to determine whether to add the new attribute\n\t * to the list item element, based on whether there is a consistent default formatting attribute\n\t * applied within its content.\n\t */\n\tpublic registerFormatAttribute( formatAttribute: string, listItemFormatAttribute: string ): void {\n\t\tthis._loadedFormatting[ formatAttribute ] = listItemFormatAttribute;\n\t}\n\n\t/**\n\t * Returns true if the given model attribute name is a supported inline formatting attribute.\n\t */\n\tprivate _isInlineOrSelectionFormatting( attributeKey: string ): boolean {\n\t\treturn attributeKey.replace( /^selection:/, '' ) in this._loadedFormatting;\n\t}\n}\n\n/**\n * Returns the consistent format of the list item element.\n * If the list item contains multiple blocks, it checks only the first block.\n */\nfunction getListItemConsistentFormat( model: Model, listItem: ModelElement, attributeKeys: Array<string> ) {\n\tif ( isFirstBlockOfListItem( listItem ) ) {\n\t\treturn getSingleListItemConsistentFormat( model, listItem, attributeKeys );\n\t}\n\n\t// Always the first block of the list item should be checked for consistent formatting.\n\tconst listItemBlocks = getAllListItemBlocks( listItem );\n\n\treturn getSingleListItemConsistentFormat( model, listItemBlocks[ 0 ], attributeKeys );\n}\n\n/**\n * Returns the consistent format of a single list item element.\n */\nfunction getSingleListItemConsistentFormat( model: Model, listItem: ModelElement, attributeKeys: Array<string> ) {\n\t// Only bulleted and numbered lists can have formatting (to-do lists are not supported).\n\t// Do not check internals of limit elements (for example, do not check table cells).\n\tif ( !isNumberedOrBulletedList( listItem ) || model.schema.isLimit( listItem ) ) {\n\t\treturn Object.fromEntries( attributeKeys.map( attributeKey => [ attributeKey ] ) ) as Record<string, string | undefined>;\n\t}\n\n\tif ( listItem.isEmpty ) {\n\t\treturn Object.fromEntries( attributeKeys.map( attributeKey => (\n\t\t\t[ attributeKey, listItem.getAttribute( `selection:${ attributeKey }` ) as string | undefined ]\n\t\t) ) );\n\t}\n\n\tconst attributesToCheck = new Set( attributeKeys );\n\tconst valuesMap: Record<string, string | undefined> = {};\n\n\tconst range = model.createRangeIn( listItem );\n\tconst walker = range.getWalker( { ignoreElementEnd: true } );\n\n\tfor ( const { item } of walker ) {\n\t\tfor ( const attributeKey of attributesToCheck ) {\n\t\t\tif ( model.schema.checkAttribute( item, attributeKey ) ) {\n\t\t\t\tconst formatAttribute = item.getAttribute( attributeKey ) as string;\n\n\t\t\t\tif ( formatAttribute === undefined ) {\n\t\t\t\t\tattributesToCheck.delete( attributeKey );\n\t\t\t\t\tvaluesMap[ attributeKey ] = undefined;\n\t\t\t\t}\n\t\t\t\telse if ( valuesMap[ attributeKey ] === undefined ) {\n\t\t\t\t\t// First item inside a list item block.\n\t\t\t\t\tvaluesMap[ attributeKey ] = formatAttribute;\n\t\t\t\t}\n\t\t\t\telse if ( valuesMap[ attributeKey ] !== formatAttribute ) {\n\t\t\t\t\t// Following items in the same block of a list item.\n\t\t\t\t\tattributesToCheck.delete( attributeKey );\n\t\t\t\t\tvaluesMap[ attributeKey ] = undefined;\n\t\t\t\t}\n\t\t\t} else if ( !( attributeKey in valuesMap ) ) {\n\t\t\t\t// Store it so a format would be removed when all items in the given list item does not allow that formatting.\n\t\t\t\tvaluesMap[ attributeKey ] = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// End early if all attributes have been checked and are inconsistent.\n\t\tif ( !attributesToCheck.size ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Jump over inline limit elements as we expect only outside them to be the same formatting.\n\t\tif ( model.schema.isLimit( item ) ) {\n\t\t\twalker.jumpTo( model.createPositionAfter( item ) );\n\t\t}\n\t}\n\n\treturn valuesMap;\n}\n\n/**\n * Adds the specified formatting attribute to the list item element.\n */\nfunction setFormattingToListItem(\n\twriter: ModelWriter,\n\tlistItem: ModelElement,\n\tattributeKey: string,\n\tattributeValue: string\n): boolean {\n\t// Multi-block items should have consistent formatting.\n\tconst listItemBlocks = getAllListItemBlocks( listItem );\n\tlet wasChanged = false;\n\n\tfor ( const listItem of listItemBlocks ) {\n\t\tif ( !listItem.hasAttribute( attributeKey ) || listItem.getAttribute( attributeKey ) !== attributeValue ) {\n\t\t\twriter.setAttribute( attributeKey, attributeValue, listItem );\n\t\t\twasChanged = true;\n\t\t}\n\t}\n\n\treturn wasChanged;\n}\n\n/**\n * Removes the specified formatting attribute from the list item element.\n */\nfunction removeFormattingFromListItem(\n\twriter: ModelWriter,\n\tlistItem: ModelElement,\n\tattributeKey: string\n): boolean {\n\t// Multi-block items should have consistent formatting.\n\tconst listItemBlocks = getAllListItemBlocks( listItem );\n\tlet wasChanged = false;\n\n\tfor ( const listItem of listItemBlocks ) {\n\t\tif ( listItem.hasAttribute( attributeKey ) ) {\n\t\t\twriter.removeAttribute( attributeKey, listItem );\n\t\t\twasChanged = true;\n\t\t}\n\t}\n\n\treturn wasChanged;\n}\n\n/**\n * Checks if the given list type is a numbered or bulleted list.\n */\nfunction isNumberedOrBulletedList( listItem: ModelElement ): boolean {\n\treturn [ 'numbered', 'bulleted', 'customNumbered', 'customBulleted' ].includes( listItem.getAttribute( 'listType' ) as string );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listutils\n */\n\nimport type { ModelElement, ModelNode } from 'ckeditor5/src/engine.js';\nimport type { ArrayOrItem } from 'ckeditor5/src/utils.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\ttype ListElement,\n\texpandListBlocksToCompleteItems,\n\texpandListBlocksToCompleteList,\n\tisFirstBlockOfListItem,\n\tisListItemBlock,\n\tisNumberedListType\n} from './utils/model.js';\nimport type { ListType } from './listediting.js';\n\n/**\n * A set of helpers related to document lists.\n */\nexport class ListUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Expands the given list of selected blocks to include all the items of the lists they're in.\n\t *\n\t * @param blocks The list of selected blocks.\n\t */\n\tpublic expandListBlocksToCompleteList( blocks: ArrayOrItem<ModelElement> ): Array<ModelElement> {\n\t\treturn expandListBlocksToCompleteList( blocks );\n\t}\n\n\t/**\n\t * Check if the given block is the first in the list item.\n\t *\n\t * @param listBlock The list block element.\n\t */\n\tpublic isFirstBlockOfListItem( listBlock: ModelElement ): boolean {\n\t\treturn isFirstBlockOfListItem( listBlock );\n\t}\n\n\t/**\n\t * Returns true if the given model node is a list item block.\n\t *\n\t * @param node A model node.\n\t */\n\tpublic isListItemBlock( node: ModelNode | null ): node is ListElement {\n\t\treturn isListItemBlock( node );\n\t}\n\n\t/**\n\t * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n\t *\n\t * @param blocks The list of selected blocks.\n\t * @param options.withNested Whether should include nested list items.\n\t */\n\tpublic expandListBlocksToCompleteItems(\n\t\tblocks: ArrayOrItem<ModelElement>,\n\t\toptions: { withNested?: boolean } = {}\n\t): Array<ModelElement> {\n\t\treturn expandListBlocksToCompleteItems( blocks, options );\n\t}\n\n\t/**\n\t * Returns true if listType is of type `numbered` or `customNumbered`.\n\t */\n\tpublic isNumberedListType( listType: ListType ): boolean {\n\t\treturn isNumberedListType( listType );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/view\n */\n\nimport type { ViewDowncastWriter, ViewAttributeElement, ViewDocumentFragment, ViewElement, ViewNode } from 'ckeditor5/src/engine.js';\nimport { type ListType } from '../listediting.js';\n\n/**\n * Checks if view element is a list type (ul or ol).\n *\n * @internal\n */\nexport function isListView( viewElement: ViewNode | ViewDocumentFragment ): viewElement is ViewElement & { name: 'ul' | 'ol' } {\n\treturn viewElement.is( 'element', 'ol' ) || viewElement.is( 'element', 'ul' );\n}\n\n/**\n * Checks if view element is a list item (li).\n *\n * @internal\n */\nexport function isListItemView( viewElement: ViewNode | ViewDocumentFragment ): viewElement is ViewElement & { name: 'li' } {\n\treturn viewElement.is( 'element', 'li' );\n}\n\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n *\n * @internal\n */\nexport function getIndent( listItem: ViewElement ): number {\n\tlet indent = 0;\n\tlet parent = listItem.parent;\n\n\twhile ( parent ) {\n\t\t// Each LI in the tree will result in an increased indent for HTML compliant lists.\n\t\tif ( isListItemView( parent ) ) {\n\t\t\tindent++;\n\t\t} else {\n\t\t\t// If however the list is nested in other list we should check previous sibling of any of the list elements...\n\t\t\tconst previousSibling = ( parent as ViewElement ).previousSibling;\n\n\t\t\t// ...because the we might need increase its indent:\n\t\t\t//\t\tbefore:                           fixed list:\n\t\t\t//\t\tOL                                OL\n\t\t\t//\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n\t\t\t//\t\t|-> OL                                |-> OL\n\t\t\t//\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n\t\t\tif ( previousSibling && isListItemView( previousSibling ) ) {\n\t\t\t\tindent++;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n\n\treturn indent;\n}\n\n/**\n * Creates a list attribute element (ol or ul).\n *\n * @internal\n */\nexport function createListElement(\n\twriter: ViewDowncastWriter,\n\tindent: number,\n\ttype: ListType,\n\tid = getViewElementIdForListType( type, indent )\n): ViewAttributeElement {\n\t// Negative priorities so that restricted editing attribute won't wrap lists.\n\treturn writer.createAttributeElement( getViewElementNameForListType( type ), null, {\n\t\tpriority: 2 * indent / 100 - 100,\n\t\tid\n\t} );\n}\n\n/**\n * Creates a list item attribute element (li).\n *\n * @internal\n */\nexport function createListItemElement(\n\twriter: ViewDowncastWriter,\n\tindent: number,\n\tid: string\n): ViewAttributeElement {\n\t// Negative priorities so that restricted editing attribute won't wrap list items.\n\treturn writer.createAttributeElement( 'li', null, {\n\t\tpriority: ( 2 * indent + 1 ) / 100 - 100,\n\t\tid\n\t} );\n}\n\n/**\n * Returns a view element name for the given list type.\n *\n * @internal\n */\nexport function getViewElementNameForListType( type?: ListType ): 'ol' | 'ul' {\n\treturn type == 'numbered' || type == 'customNumbered' ? 'ol' : 'ul';\n}\n\n/**\n * Returns a view element ID for the given list type and indent.\n *\n * @internal\n */\nexport function getViewElementIdForListType( type?: ListType, indent?: number ): string {\n\treturn `list-${ type }-${ indent }`;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/postfixers\n */\n\nimport type { ModelElement, ModelPosition, ModelWriter } from 'ckeditor5/src/engine.js';\nimport { SiblingListBlocksIterator, type ListIteratorValue } from './listwalker.js';\nimport { getListItemBlocks, isListItemBlock, ListItemUid, type ListElement } from './model.js';\n\n/**\n * Based on the provided positions looks for the list head and stores it in the provided map.\n *\n * @internal\n * @param position The search starting position.\n * @param itemToListHead The map from list item element to the list head element.\n * @param visited A set of elements that were already visited.\n */\nexport function findAndAddListHeadToMap(\n\tposition: ModelPosition,\n\titemToListHead: Set<ListElement>,\n\tvisited: Set<ModelElement>\n): void {\n\tconst previousNode = position.nodeBefore;\n\n\tif ( !isListItemBlock( previousNode ) ) {\n\t\tconst item = position.nodeAfter;\n\n\t\tif ( isListItemBlock( item ) ) {\n\t\t\titemToListHead.add( item );\n\t\t}\n\t} else {\n\t\tlet listHead = previousNode;\n\n\t\t// Previously, the loop below was defined like this:\n\t\t//\n\t\t// \t\tfor ( { node: listHead } of new SiblingListBlocksIterator( listHead, 'backward' ) )\n\t\t//\n\t\t// Unfortunately, such a destructuring is incorrectly transpiled by Babel and the loop never ends.\n\t\t// See: https://github.com/ckeditor/ckeditor5-react/issues/345.\n\t\tfor ( const { node } of new SiblingListBlocksIterator( listHead, 'backward' ) ) {\n\t\t\tlistHead = node;\n\n\t\t\tif ( visited.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvisited.add( listHead );\n\n\t\t\tif ( itemToListHead.has( previousNode ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\titemToListHead.add( listHead );\n\t}\n}\n\n/**\n * Scans the list starting from the given list head element and fixes items' indentation.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */\nexport function fixListIndents(\n\tlistNodes: Iterable<ListIteratorValue>,\n\twriter: ModelWriter\n): boolean {\n\tlet maxIndent = 0; // Guards local sublist max indents that need fixing.\n\tlet prevIndent = -1; // Previous item indent.\n\tlet fixBy = null;\n\tlet applied = false;\n\n\tfor ( const { node } of listNodes ) {\n\t\tconst itemIndent = node.getAttribute( 'listIndent' );\n\n\t\tif ( itemIndent > maxIndent ) {\n\t\t\tlet newIndent;\n\n\t\t\tif ( fixBy === null ) {\n\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\tnewIndent = maxIndent;\n\t\t\t} else {\n\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t}\n\n\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t}\n\n\t\t\tif ( newIndent > prevIndent + 1 ) {\n\t\t\t\tnewIndent = prevIndent + 1;\n\t\t\t}\n\n\t\t\twriter.setAttribute( 'listIndent', newIndent, node );\n\n\t\t\tapplied = true;\n\t\t\tprevIndent = newIndent;\n\t\t} else {\n\t\t\tfixBy = null;\n\t\t\tmaxIndent = itemIndent + 1;\n\t\t\tprevIndent = itemIndent;\n\t\t}\n\t}\n\n\treturn applied;\n}\n\n/**\n * Scans the list starting from the given list head element and fixes items' types.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param seenIds The set of already known IDs.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */\nexport function fixListItemIds(\n\tlistNodes: Iterable<ListIteratorValue>,\n\tseenIds: Set<string>,\n\twriter: ModelWriter\n): boolean {\n\tconst visited = new Set();\n\tlet applied = false;\n\n\tfor ( const { node } of listNodes ) {\n\t\tif ( visited.has( node ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet listType = node.getAttribute( 'listType' );\n\t\tlet listItemId = node.getAttribute( 'listItemId' );\n\n\t\t// Use a new ID if this one was spot earlier (even in other list).\n\t\tif ( seenIds.has( listItemId ) ) {\n\t\t\tlistItemId = ListItemUid.next();\n\t\t}\n\n\t\tseenIds.add( listItemId );\n\n\t\t// Make sure that all items in a simple list have unique IDs.\n\t\tif ( node.is( 'element', 'listItem' ) ) {\n\t\t\tif ( node.getAttribute( 'listItemId' ) != listItemId ) {\n\t\t\t\twriter.setAttribute( 'listItemId', listItemId, node );\n\n\t\t\t\tapplied = true;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor ( const block of getListItemBlocks( node, { direction: 'forward' } ) ) {\n\t\t\tvisited.add( block );\n\n\t\t\t// Use a new ID if a block of a bigger list item has different type.\n\t\t\tif ( block.getAttribute( 'listType' ) != listType ) {\n\t\t\t\tlistItemId = ListItemUid.next();\n\t\t\t\tlistType = block.getAttribute( 'listType' );\n\t\t\t}\n\n\t\t\tif ( block.getAttribute( 'listItemId' ) != listItemId ) {\n\t\t\t\twriter.setAttribute( 'listItemId', listItemId, block );\n\n\t\t\t\tapplied = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn applied;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/converters\n */\n\nimport {\n\ttype DowncastAttributeEvent,\n\ttype ViewDowncastWriter,\n\ttype EditingController,\n\ttype ModelElement,\n\ttype DowncastElementCreatorFunction,\n\ttype Mapper,\n\ttype Model,\n\ttype ModelConsumable,\n\ttype ModelNode,\n\ttype UpcastElementEvent,\n\ttype ViewDocumentFragment,\n\ttype ViewElement,\n\ttype ViewRange,\n\ttype DowncastRemoveEvent,\n\ttype EditingView,\n\ttype MapperModelToViewPositionEvent,\n\ttype ViewTreeWalker,\n\ttype ModelSchema\n} from 'ckeditor5/src/engine.js';\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\n\nimport {\n\tgetAllListItemBlocks,\n\tgetListItemBlocks,\n\tisListItemBlock,\n\tisFirstBlockOfListItem,\n\tListItemUid,\n\ttype ListElement\n} from './utils/model.js';\n\nimport {\n\tcreateListElement,\n\tcreateListItemElement,\n\tgetIndent,\n\tisListView,\n\tisListItemView\n} from './utils/view.js';\n\nimport { ListWalker, SiblingListBlocksIterator } from './utils/listwalker.js';\nimport { findAndAddListHeadToMap } from './utils/postfixers.js';\n\nimport type {\n\tListEditing,\n\tListEditingCheckAttributesEvent,\n\tListEditingCheckElementEvent,\n\tListItemAttributesMap,\n\tListDowncastStrategy\n} from './listediting.js';\n\n/**\n * Returns the upcast converter for list items. It's supposed to work after the block converters (content inside list items) are converted.\n *\n * @internal\n */\nexport function listItemUpcastConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, schema } = conversionApi;\n\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst items = Array.from( data.modelRange.getItems( { shallow: true } ) )\n\t\t\t.filter( ( item ): item is ModelElement => schema.checkAttribute( item, 'listItemId' ) );\n\n\t\tif ( !items.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst listItemId = data.viewItem.getAttribute( 'data-list-item-id' ) || ListItemUid.next();\n\n\t\tconversionApi.consumable.consume( data.viewItem, { attributes: 'data-list-item-id' } );\n\n\t\tconst listIndent = getIndent( data.viewItem );\n\t\tlet listType = data.viewItem.parent && data.viewItem.parent.is( 'element', 'ol' ) ? 'numbered' : 'bulleted';\n\n\t\t// Preserve list type if was already set (for example by to-do list feature).\n\t\tconst firstItemListType = items[ 0 ].getAttribute( 'listType' ) as string;\n\n\t\tif ( firstItemListType ) {\n\t\t\tlistType = firstItemListType;\n\t\t}\n\n\t\tconst attributes = {\n\t\t\tlistItemId,\n\t\t\tlistIndent,\n\t\t\tlistType\n\t\t};\n\n\t\tfor ( const item of items ) {\n\t\t\t// Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n\t\t\tif ( !item.hasAttribute( 'listItemId' ) ) {\n\t\t\t\twriter.setAttributes( attributes, item );\n\t\t\t}\n\t\t}\n\n\t\tif ( items.length > 1 ) {\n\t\t\t// Make sure that list item that contain only nested list will preserve paragraph for itself:\n\t\t\t//\t<ul>\n\t\t\t//\t\t<li>\n\t\t\t//\t\t\t<p></p>  <-- this one must be kept\n\t\t\t//\t\t\t<ul>\n\t\t\t//\t\t\t\t<li></li>\n\t\t\t//\t\t\t</ul>\n\t\t\t//\t\t</li>\n\t\t\t//\t</ul>\n\t\t\tif ( items[ 1 ].getAttribute( 'listItemId' ) != attributes.listItemId ) {\n\t\t\t\tconversionApi.keepEmptyElement( items[ 0 ] );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Returns a model document change:data event listener that triggers conversion of related items if needed.\n *\n * @internal\n * @param model The editor model.\n * @param editing The editing controller.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param listEditing The document list editing plugin.\n */\nexport function reconvertItemsOnDataChange(\n\tmodel: Model,\n\tediting: EditingController,\n\tattributeNames: Array<string>,\n\tlistEditing: ListEditing\n): () => void {\n\treturn () => {\n\t\tconst changes = model.document.differ.getChanges();\n\t\tconst itemsToRefresh = [];\n\t\tconst itemToListHead = new Set<ListElement>();\n\t\tconst changedItems = new Set<ModelNode>();\n\t\tconst visited = new Set<ModelElement>();\n\n\t\tfor ( const entry of changes ) {\n\t\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\n\t\t\t\t// Insert of a non-list item.\n\t\t\t\tif ( !entry.attributes.has( 'listItemId' ) ) {\n\t\t\t\t\tfindAndAddListHeadToMap( entry.position.getShiftedBy( entry.length ), itemToListHead, visited );\n\t\t\t\t} else {\n\t\t\t\t\tchangedItems.add( entry.position.nodeAfter! );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Removed list item.\n\t\t\telse if ( entry.type == 'remove' && entry.attributes.has( 'listItemId' ) ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\t\t\t}\n\t\t\t// Changed list attribute.\n\t\t\telse if ( entry.type == 'attribute' ) {\n\t\t\t\tconst item = entry.range.start.nodeAfter!;\n\n\t\t\t\tif ( attributeNames.includes( entry.attributeKey ) ) {\n\t\t\t\t\tfindAndAddListHeadToMap( entry.range.start, itemToListHead, visited );\n\n\t\t\t\t\tif ( entry.attributeNewValue === null ) {\n\t\t\t\t\t\tfindAndAddListHeadToMap( entry.range.start.getShiftedBy( 1 ), itemToListHead, visited );\n\n\t\t\t\t\t\t// Check if paragraph should be converted from bogus to plain paragraph.\n\t\t\t\t\t\tif ( doesItemBlockRequiresRefresh( item as ModelElement ) ) {\n\t\t\t\t\t\t\titemsToRefresh.push( item );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchangedItems.add( item );\n\t\t\t\t\t}\n\t\t\t\t} else if ( isListItemBlock( item ) ) {\n\t\t\t\t\t// Some other attribute was changed on the list item,\n\t\t\t\t\t// check if paragraph does not need to be converted to bogus or back.\n\t\t\t\t\tif ( doesItemBlockRequiresRefresh( item ) ) {\n\t\t\t\t\t\titemsToRefresh.push( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const listHead of itemToListHead.values() ) {\n\t\t\titemsToRefresh.push( ...collectListItemsToRefresh( listHead, changedItems ) );\n\t\t}\n\n\t\tfor ( const item of new Set( itemsToRefresh ) ) {\n\t\t\tediting.reconvertItem( item );\n\t\t}\n\t};\n\n\tfunction collectListItemsToRefresh( listHead: ListElement, changedItems: Set<ModelNode> ) {\n\t\tconst itemsToRefresh = [];\n\t\tconst visited = new Set();\n\t\tconst stack: Array<{\n\t\t\tmodelAttributes: ListItemAttributesMap;\n\t\t\tmodelElement: ListElement;\n\t\t}> = [];\n\n\t\tfor ( const { node, previous } of new SiblingListBlocksIterator( listHead ) ) {\n\t\t\tif ( visited.has( node ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst itemIndent = node.getAttribute( 'listIndent' );\n\n\t\t\t// Current node is at the lower indent so trim the stack.\n\t\t\tif ( previous && itemIndent < previous.getAttribute( 'listIndent' ) ) {\n\t\t\t\tstack.length = itemIndent + 1;\n\t\t\t}\n\n\t\t\t// Update the stack for the current indent level.\n\t\t\tstack[ itemIndent ] = {\n\t\t\t\tmodelAttributes: Object.fromEntries(\n\t\t\t\t\tArray.from( node.getAttributes() )\n\t\t\t\t\t\t.filter( ( [ key ] ) => attributeNames.includes( key ) )\n\t\t\t\t),\n\t\t\t\tmodelElement: node\n\t\t\t};\n\n\t\t\t// Find all blocks of the current node.\n\t\t\tconst blocks = getListItemBlocks( node, { direction: 'forward' } );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tvisited.add( block );\n\n\t\t\t\t// Check if bogus vs plain paragraph needs refresh.\n\t\t\t\tif ( doesItemBlockRequiresRefresh( block, blocks ) ) {\n\t\t\t\t\titemsToRefresh.push( block );\n\t\t\t\t}\n\t\t\t\t// Check if wrapping with UL, OL, LIs needs refresh.\n\t\t\t\telse if ( doesItemWrappingRequiresRefresh( block, stack, changedItems ) ) {\n\t\t\t\t\titemsToRefresh.push( block );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn itemsToRefresh;\n\t}\n\n\tfunction doesItemBlockRequiresRefresh( item: ModelElement, blocks?: Array<ModelNode> ) {\n\t\tconst viewElement = editing.mapper.toViewElement( item );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst needsRefresh = listEditing.fire<ListEditingCheckElementEvent>( 'checkElement', {\n\t\t\tmodelElement: item,\n\t\t\tviewElement\n\t\t} );\n\n\t\tif ( needsRefresh ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !item.is( 'element', 'paragraph' ) && !item.is( 'element', 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst useBogus = shouldUseBogusParagraph( item, attributeNames, blocks );\n\n\t\tif ( useBogus && viewElement.is( 'element', 'p' ) ) {\n\t\t\treturn true;\n\t\t} else if ( !useBogus && viewElement.is( 'element', 'span' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction doesItemWrappingRequiresRefresh(\n\t\titem: ModelElement,\n\t\tstack: Array<{\n\t\t\tmodelAttributes: ListItemAttributesMap;\n\t\t\tmodelElement: ListElement;\n\t\t}>,\n\t\tchangedItems: Set<ModelNode>\n\t) {\n\t\t// Items directly affected by some \"change\" don't need a refresh, they will be converted by their own changes.\n\t\tif ( changedItems.has( item ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewElement = editing.mapper.toViewElement( item )!;\n\t\tlet indent = stack.length - 1;\n\n\t\t// Traverse down the stack to the root to verify if all ULs, OLs, and LIs are as expected.\n\t\tfor (\n\t\t\tlet element = viewElement.parent!;\n\t\t\t!element.is( 'editableElement' );\n\t\t\telement = element.parent!\n\t\t) {\n\t\t\tconst isListItemElement = isListItemView( element );\n\t\t\tconst isListElement = isListView( element );\n\n\t\t\tif ( !isListElement && !isListItemElement ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst eventName = `checkAttributes:${ isListItemElement ? 'item' : 'list' }` as const;\n\t\t\tconst needsRefresh = listEditing.fire<ListEditingCheckAttributesEvent>( eventName, {\n\t\t\t\tviewElement: element as ViewElement,\n\t\t\t\tmodelAttributes: stack[ indent ].modelAttributes,\n\t\t\t\tmodelReferenceElement: stack[ indent ].modelElement\n\t\t\t} );\n\n\t\t\tif ( needsRefresh ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( isListElement ) {\n\t\t\t\tindent--;\n\n\t\t\t\t// Don't need to iterate further if we already know that the item is wrapped appropriately.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n/**\n * Returns the list item downcast converter.\n *\n * @internal\n * @param attributeNames A list of attribute names that should be converted if they are set.\n * @param strategies The strategies.\n * @param model The model.\n */\nexport function listItemDowncastConverter(\n\tattributeNames: Array<string>,\n\tstrategies: Array<ListDowncastStrategy>,\n\tmodel: Model,\n\t{ dataPipeline }: { dataPipeline?: boolean } = {}\n): GetCallback<DowncastAttributeEvent<ListElement>> {\n\tconst consumer = createAttributesConsumer( attributeNames );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tconst listItem = data.item;\n\n\t\tif ( !attributeNames.includes( data.attributeKey ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Test if attributes on the converted items are not consumed.\n\t\tif ( !consumer( listItem, consumable ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = {\n\t\t\t...conversionApi.options,\n\t\t\tdataPipeline\n\t\t};\n\n\t\t// Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n\t\t// This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n\t\tconst viewElement = findMappedViewElement( listItem, mapper, model )!;\n\n\t\t// Remove custom item marker.\n\t\tremoveCustomMarkerElements( viewElement, writer, mapper );\n\n\t\t// Unwrap element from current list wrappers.\n\t\tunwrapListItemBlock( viewElement, writer );\n\n\t\t// Insert custom item marker.\n\t\tconst viewRange = insertCustomMarkerElements( listItem, viewElement, strategies, writer, options );\n\n\t\t// Then wrap them with the new list wrappers (UL, OL, LI).\n\t\twrapListItemBlock( listItem, viewRange, strategies, writer, options );\n\t};\n}\n\n/**\n * The 'remove' downcast converter for custom markers.\n *\n * @internal\n */\nexport function listItemDowncastRemoveConverter( schema: ModelSchema ): GetCallback<DowncastRemoveEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, mapper } = conversionApi;\n\t\tconst elementName = evt.name.split( ':' )[ 1 ];\n\n\t\t// Do not remove marker if the deleted element is some inline object inside paragraph.\n\t\t// See https://github.com/ckeditor/ckeditor5-internal/issues/3680.\n\t\tif ( !schema.checkAttribute( elementName, 'listItemId' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find the view range start position by mapping the model position at which the remove happened.\n\t\tconst viewStart = mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst viewRange = writer.createRange( viewStart, viewEnd ).getTrimmed();\n\n\t\t// Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n\t\t// This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n\t\tconst viewElement = viewRange.end.nodeBefore as ViewElement | null;\n\n\t\t/* istanbul ignore next -- @preserve */\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove custom item marker.\n\t\tremoveCustomMarkerElements( viewElement, writer, mapper );\n\t};\n}\n\n/**\n * Returns the bogus paragraph view element creator. A bogus paragraph is used if a list item contains only a single block or nested list.\n *\n * @internal\n * @param attributeNames The list of all model list attributes (including registered strategies).\n */\nexport function bogusParagraphCreator(\n\tattributeNames: Array<string>,\n\t{ dataPipeline }: { dataPipeline?: boolean } = {}\n): DowncastElementCreatorFunction {\n\treturn ( modelElement, { writer } ) => {\n\t\t// Convert only if a bogus paragraph should be used.\n\t\tif ( !shouldUseBogusParagraph( modelElement, attributeNames ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( !dataPipeline ) {\n\t\t\treturn writer.createContainerElement( 'span', { class: 'ck-list-bogus-paragraph' } );\n\t\t}\n\n\t\t// Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n\t\tconst viewElement = writer.createContainerElement( 'p' );\n\n\t\twriter.setCustomProperty( 'dataPipeline:transparentRendering', true, viewElement );\n\n\t\treturn viewElement;\n\t};\n}\n\n/**\n * Helper for mapping mode to view elements. It's using positions mapping instead of mapper.toViewElement( element )\n * to find outermost view element. This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n *\n * @internal\n * @param element The model element.\n * @param mapper The mapper instance.\n * @param model The model.\n */\nexport function findMappedViewElement( element: ModelElement, mapper: Mapper, model: Model ): ViewElement | null {\n\tconst modelRange = model.createRangeOn( element );\n\tconst viewRange = mapper.toViewRange( modelRange ).getTrimmed();\n\n\treturn viewRange.end.nodeBefore as ViewElement | null;\n}\n\n/**\n * The model to view custom position mapping for cases when marker is injected at the beginning of a block.\n *\n * @internal\n */\nexport function createModelToViewPositionMapper(\n\tstrategies: Array<ListDowncastStrategy>,\n\tview: EditingView\n): GetCallback<MapperModelToViewPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tif ( data.modelPosition.offset > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positionParent = data.modelPosition.parent;\n\n\t\tif ( !isListItemBlock( positionParent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !strategies.some( strategy => (\n\t\t\tstrategy.scope == 'itemMarker' &&\n\t\t\tstrategy.canInjectMarkerIntoElement &&\n\t\t\tstrategy.canInjectMarkerIntoElement( positionParent )\n\t\t) ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = data.mapper.toViewElement( positionParent )!;\n\t\tconst viewRange = view.createRangeIn( viewElement );\n\n\t\tconst viewWalker = viewRange.getWalker();\n\t\tlet positionAfterLastMarker = viewRange.start;\n\n\t\tfor ( const { item } of viewWalker ) {\n\t\t\t// Walk only over the non-mapped elements (UIElements, ViewAttributeElements, $text, or any other element without mapping).\n\t\t\tif ( item.is( 'element' ) && data.mapper.toModelElement( item ) || item.is( '$textProxy' ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( item.is( 'element' ) && item.getCustomProperty( 'listItemMarker' ) ) {\n\t\t\t\tpositionAfterLastMarker = view.createPositionAfter( item );\n\n\t\t\t\t// Jump over the content of the marker (this is not needed for UIElement but required for other element types).\n\t\t\t\tviewWalker.skip( ( { previousPosition } ) => !previousPosition.isEqual( positionAfterLastMarker ) );\n\t\t\t}\n\t\t}\n\n\t\tdata.viewPosition = positionAfterLastMarker;\n\t};\n}\n\n/**\n * Removes a custom marker elements and item wrappers related to that marker.\n */\nfunction removeCustomMarkerElements( viewElement: ViewElement, viewWriter: ViewDowncastWriter, mapper: Mapper ): void {\n\t// Remove item wrapper.\n\twhile ( viewElement.parent!.is( 'attributeElement' ) && viewElement.parent!.getCustomProperty( 'listItemWrapper' ) ) {\n\t\tviewWriter.unwrap( viewWriter.createRangeOn( viewElement ), viewElement.parent );\n\t}\n\n\t// Remove custom item markers.\n\tconst markersToRemove: Array<ViewElement> = [];\n\n\t// Markers before a block.\n\tcollectMarkersToRemove( viewWriter.createPositionBefore( viewElement ).getWalker( { direction: 'backward' } ) );\n\n\t// Markers inside a block.\n\tcollectMarkersToRemove( viewWriter.createRangeIn( viewElement ).getWalker() );\n\n\tfor ( const marker of markersToRemove ) {\n\t\tviewWriter.remove( marker );\n\t}\n\n\tfunction collectMarkersToRemove( viewWalker: ViewTreeWalker ) {\n\t\tfor ( const { item } of viewWalker ) {\n\t\t\t// Walk only over the non-mapped elements (UIElements, ViewAttributeElements, $text, or any other element without mapping).\n\t\t\tif ( item.is( 'element' ) && mapper.toModelElement( item ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( item.is( 'element' ) && item.getCustomProperty( 'listItemMarker' ) ) {\n\t\t\t\tmarkersToRemove.push( item );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Inserts a custom marker elements and wraps first block of a list item if marker requires it.\n */\nfunction insertCustomMarkerElements(\n\tlistItem: ModelElement,\n\tviewElement: ViewElement,\n\tstrategies: Array<ListDowncastStrategy>,\n\twriter: ViewDowncastWriter,\n\t{ dataPipeline }: { dataPipeline?: boolean }\n): ViewRange {\n\tlet viewRange = writer.createRangeOn( viewElement );\n\n\t// Marker can be inserted only before the first block of a list item.\n\tif ( !isFirstBlockOfListItem( listItem ) ) {\n\t\treturn viewRange;\n\t}\n\n\tfor ( const strategy of strategies ) {\n\t\tif ( strategy.scope != 'itemMarker' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Create the custom marker element and inject it before the first block of the list item.\n\t\tconst markerElement = strategy.createElement( writer, listItem, { dataPipeline } );\n\n\t\tif ( !markerElement ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\twriter.setCustomProperty( 'listItemMarker', true, markerElement );\n\n\t\tif ( strategy.canInjectMarkerIntoElement && strategy.canInjectMarkerIntoElement( listItem ) ) {\n\t\t\twriter.insert( writer.createPositionAt( viewElement, 0 ), markerElement );\n\t\t} else {\n\t\t\twriter.insert( viewRange.start, markerElement );\n\n\t\t\tviewRange = writer.createRange(\n\t\t\t\twriter.createPositionBefore( markerElement ),\n\t\t\t\twriter.createPositionAfter( viewElement )\n\t\t\t);\n\t\t}\n\n\t\t// Wrap the marker and optionally the first block with an attribute element (label for to-do lists).\n\t\tif ( !strategy.createWrapperElement || !strategy.canWrapElement ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst wrapper = strategy.createWrapperElement( writer, listItem, { dataPipeline } );\n\n\t\twriter.setCustomProperty( 'listItemWrapper', true, wrapper );\n\n\t\t// The whole block can be wrapped...\n\t\tif ( strategy.canWrapElement( listItem ) ) {\n\t\t\tviewRange = writer.wrap( viewRange, wrapper );\n\t\t} else {\n\t\t\t// ... or only the marker element (if the block is downcasted to heading or block widget).\n\t\t\tviewRange = writer.wrap( writer.createRangeOn( markerElement ), wrapper );\n\n\t\t\tviewRange = writer.createRange(\n\t\t\t\tviewRange.start,\n\t\t\t\twriter.createPositionAfter( viewElement )\n\t\t\t);\n\t\t}\n\t}\n\n\treturn viewRange;\n}\n\n/**\n * Unwraps all ol, ul, and li attribute elements that are wrapping the provided view element.\n */\nfunction unwrapListItemBlock( viewElement: ViewElement, viewWriter: ViewDowncastWriter ) {\n\tlet attributeElement: ViewElement | ViewDocumentFragment = viewElement.parent!;\n\n\twhile ( attributeElement.is( 'attributeElement' ) && [ 'ul', 'ol', 'li' ].includes( attributeElement.name ) ) {\n\t\tconst parentElement = attributeElement.parent;\n\n\t\tviewWriter.unwrap( viewWriter.createRangeOn( viewElement ), attributeElement );\n\n\t\tattributeElement = parentElement!;\n\t}\n}\n\n/**\n * Wraps the given list item with appropriate attribute elements for ul, ol, and li.\n */\nfunction wrapListItemBlock(\n\tlistItem: ListElement,\n\tviewRange: ViewRange,\n\tstrategies: Array<ListDowncastStrategy>,\n\twriter: ViewDowncastWriter,\n\toptions?: Record<string, unknown>\n) {\n\tif ( !listItem.hasAttribute( 'listIndent' ) ) {\n\t\treturn;\n\t}\n\n\tconst listItemIndent = listItem.getAttribute( 'listIndent' );\n\tlet currentListItem: ListElement | null = listItem;\n\n\tfor ( let indent = listItemIndent; indent >= 0; indent-- ) {\n\t\tconst listItemViewElement = createListItemElement( writer, indent, currentListItem.getAttribute( 'listItemId' ) );\n\t\tconst listViewElement = createListElement( writer, indent, currentListItem.getAttribute( 'listType' ) );\n\n\t\tfor ( const strategy of strategies ) {\n\t\t\tif (\n\t\t\t\t( strategy.scope == 'list' || strategy.scope == 'item' ) &&\n\t\t\t\tcurrentListItem.hasAttribute( strategy.attributeName )\n\t\t\t) {\n\t\t\t\tstrategy.setAttributeOnDowncast(\n\t\t\t\t\twriter,\n\t\t\t\t\tcurrentListItem.getAttribute( strategy.attributeName ),\n\t\t\t\t\tstrategy.scope == 'list' ? listViewElement : listItemViewElement,\n\t\t\t\t\toptions\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tviewRange = writer.wrap( viewRange, listItemViewElement );\n\t\tviewRange = writer.wrap( viewRange, listViewElement );\n\n\t\tif ( indent == 0 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcurrentListItem = ListWalker.first( currentListItem, { lowerIndent: true } );\n\n\t\t// There is no list item with lower indent, this means this is a document fragment containing\n\t\t// only a part of nested list (like copy to clipboard) so we don't need to try to wrap it further.\n\t\tif ( !currentListItem ) {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// Returns the function that is responsible for consuming attributes that are set on the model node.\nfunction createAttributesConsumer( attributeNames: Array<string> ) {\n\treturn ( node: ModelNode, consumable: ModelConsumable ) => {\n\t\tconst events = [];\n\n\t\t// Collect all set attributes that are triggering conversion.\n\t\tfor ( const attributeName of attributeNames ) {\n\t\t\tif ( node.hasAttribute( attributeName ) ) {\n\t\t\t\tevents.push( `attribute:${ attributeName }` );\n\t\t\t}\n\t\t}\n\n\t\tif ( !events.every( event => consumable.test( node, event ) !== false ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tevents.forEach( event => consumable.consume( node, event ) );\n\n\t\treturn true;\n\t};\n}\n\n// Whether the given item should be rendered as a bogus paragraph.\nfunction shouldUseBogusParagraph(\n\titem: ModelNode,\n\tattributeNames: Array<string>,\n\tblocks: Array<ModelNode> = getAllListItemBlocks( item )\n) {\n\tif ( !isListItemBlock( item ) ) {\n\t\treturn false;\n\t}\n\n\tfor ( const attributeKey of item.getAttributeKeys() ) {\n\t\t// Ignore selection attributes stored on block elements.\n\t\tif ( attributeKey.startsWith( 'selection:' ) || attributeKey == 'htmlEmptyBlock' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Don't use bogus paragraph if there are attributes from other features.\n\t\tif ( !attributeNames.includes( attributeKey ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn blocks.length < 2;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listediting\n */\n\nimport {\n\tPlugin,\n\ttype Editor,\n\ttype MultiCommand\n} from 'ckeditor5/src/core.js';\n\nimport type {\n\tDowncastAttributeEvent,\n\tModelDocumentChangeEvent,\n\tViewDowncastWriter,\n\tModelElement,\n\tModel,\n\tModelInsertContentEvent,\n\tUpcastElementEvent,\n\tViewDocumentTabEvent,\n\tViewElement,\n\tViewAttributeElement,\n\tModelWriter,\n\tDowncastRemoveEvent,\n\tMapperModelToViewPositionEvent\n} from 'ckeditor5/src/engine.js';\n\nimport { Delete, type ViewDocumentDeleteEvent } from 'ckeditor5/src/typing.js';\nimport { Enter, type EnterCommand, type ViewDocumentEnterEvent } from 'ckeditor5/src/enter.js';\nimport { CKEditorError, type GetCallback } from 'ckeditor5/src/utils.js';\n\nimport { ListIndentCommand } from './listindentcommand.js';\nimport { ListCommand } from './listcommand.js';\nimport { ListMergeCommand } from './listmergecommand.js';\nimport { ListSplitCommand } from './listsplitcommand.js';\nimport { ListFormatting } from '../listformatting.js';\nimport { ListUtils } from './listutils.js';\n\nimport {\n\tbogusParagraphCreator,\n\tcreateModelToViewPositionMapper,\n\tlistItemDowncastConverter,\n\tlistItemDowncastRemoveConverter,\n\tlistItemUpcastConverter,\n\treconvertItemsOnDataChange\n} from './converters.js';\nimport {\n\tfindAndAddListHeadToMap,\n\tfixListIndents,\n\tfixListItemIds\n} from './utils/postfixers.js';\nimport {\n\tgetAllListItemBlocks,\n\tisFirstBlockOfListItem,\n\tisLastBlockOfListItem,\n\tisSingleListItem,\n\tgetSelectedBlockObject,\n\tisListItemBlock,\n\tremoveListAttributes,\n\tListItemUid,\n\ttype ListElement\n} from './utils/model.js';\nimport {\n\tgetViewElementIdForListType,\n\tgetViewElementNameForListType\n} from './utils/view.js';\n\nimport { ListWalker, ListBlocksIterable } from './utils/listwalker.js';\n\nimport {\n\tClipboardPipeline,\n\ttype ClipboardOutputTransformationEvent\n} from 'ckeditor5/src/clipboard.js';\n\nimport '../../theme/documentlist.css';\nimport '../../theme/list.css';\n\n/**\n * A list of base list model attributes.\n */\nconst LIST_BASE_ATTRIBUTES = [ 'listType', 'listIndent', 'listItemId' ];\n\nexport type ListType = 'numbered' | 'bulleted' | 'todo' | 'customNumbered' | 'customBulleted';\n\n/**\n * Map of model attributes applicable to list blocks.\n */\nexport interface ListItemAttributesMap {\n\tlistType?: ListType;\n\tlistIndent?: number;\n\tlistItemId?: string;\n}\n\n/**\n * The editing part of the document-list feature. It handles creating, editing and removing lists and list items.\n */\nexport class ListEditing extends Plugin {\n\t/**\n\t * The list of registered downcast strategies.\n\t */\n\tprivate readonly _downcastStrategies: Array<ListDowncastStrategy> = [];\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Enter, Delete, ListUtils, ClipboardPipeline, ListFormatting ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list.multiBlock', true );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst multiBlock = editor.config.get( 'list.multiBlock' );\n\n\t\tif ( editor.plugins.has( 'LegacyListEditing' ) ) {\n\t\t\t/**\n\t\t\t * The `List` feature cannot be loaded together with the `LegacyList` plugin.\n\t\t\t *\n\t\t\t * @error list-feature-conflict\n\t\t\t * @param {string} conflictPlugin Name of the plugin.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'list-feature-conflict', this, { conflictPlugin: 'LegacyListEditing' } );\n\t\t}\n\n\t\tmodel.schema.register( '$listItem', { allowAttributes: LIST_BASE_ATTRIBUTES } );\n\n\t\tif ( multiBlock ) {\n\t\t\tmodel.schema.extend( '$container', { allowAttributesOf: '$listItem' } );\n\t\t\tmodel.schema.extend( '$block', { allowAttributesOf: '$listItem' } );\n\t\t\tmodel.schema.extend( '$blockObject', { allowAttributesOf: '$listItem' } );\n\t\t} else {\n\t\t\tmodel.schema.register( 'listItem', {\n\t\t\t\tinheritAllFrom: '$block',\n\t\t\t\tallowAttributesOf: '$listItem'\n\t\t\t} );\n\t\t}\n\n\t\tfor ( const attribute of LIST_BASE_ATTRIBUTES ) {\n\t\t\tmodel.schema.setAttributeProperties( attribute, {\n\t\t\t\tcopyOnReplace: true\n\t\t\t} );\n\t\t}\n\n\t\t// Register commands.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\teditor.commands.add( 'customNumberedList', new ListCommand(\teditor,\t'customNumbered', {\tmultiLevel: true } ) );\n\t\teditor.commands.add( 'customBulletedList', new ListCommand( editor, 'customBulleted', {\tmultiLevel: true } ) );\n\n\t\teditor.commands.add( 'indentList', new ListIndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new ListIndentCommand( editor, 'backward' ) );\n\n\t\teditor.commands.add( 'splitListItemBefore', new ListSplitCommand( editor, 'before' ) );\n\t\teditor.commands.add( 'splitListItemAfter', new ListSplitCommand( editor, 'after' ) );\n\n\t\tif ( multiBlock ) {\n\t\t\teditor.commands.add( 'mergeListItemBackward', new ListMergeCommand( editor, 'backward' ) );\n\t\t\teditor.commands.add( 'mergeListItemForward', new ListMergeCommand( editor, 'forward' ) );\n\t\t}\n\n\t\tthis._setupDeleteIntegration();\n\t\tthis._setupEnterIntegration();\n\t\tthis._setupTabIntegration();\n\t\tthis._setupClipboardIntegration();\n\t\tthis._setupAccessibilityIntegration();\n\t\tthis._setupListItemIdConversionStrategy();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst commands = editor.commands;\n\t\tconst indent = commands.get( 'indent' ) as MultiCommand;\n\t\tconst outdent = commands.get( 'outdent' ) as MultiCommand;\n\n\t\tif ( indent ) {\n\t\t\t// Priority is high due to integration with `IndentBlock` plugin. We want to indent list first and if it's not possible\n\t\t\t// user can indent content with `IndentBlock` plugin.\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' )!, { priority: 'high' } );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\t// Priority is lowest due to integration with `IndentBlock` and `IndentCode` plugins.\n\t\t\t// First we want to allow user to outdent all indendations from other features then he can oudent list item.\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' )!, { priority: 'lowest' } );\n\t\t}\n\n\t\t// Register conversion and model post-fixer after other plugins had a chance to register their attribute strategies.\n\t\tthis._setupModelPostFixing();\n\t\tthis._setupConversion();\n\t}\n\n\t/**\n\t * Registers a downcast strategy.\n\t *\n\t * **Note**: Strategies must be registered in the `Plugin#init()` phase so that it can be applied\n\t * in the `ListEditing#afterInit()`.\n\t *\n\t * @param strategy The downcast strategy to register.\n\t */\n\tpublic registerDowncastStrategy( strategy: ListDowncastStrategy ): void {\n\t\tthis._downcastStrategies.push( strategy );\n\t}\n\n\t/**\n\t * Returns list of model attribute names that should affect downcast conversion.\n\t */\n\tpublic getListAttributeNames(): Array<string> {\n\t\treturn [\n\t\t\t...LIST_BASE_ATTRIBUTES,\n\t\t\t...this._downcastStrategies.map( strategy => strategy.attributeName )\n\t\t];\n\t}\n\n\t/**\n\t * Attaches the listener to the {@link module:engine/view/document~ViewDocument#event:delete} event and handles backspace/delete\n\t * keys in and around document lists.\n\t */\n\tprivate _setupDeleteIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst mergeBackwardCommand: ListMergeCommand | undefined = editor.commands.get( 'mergeListItemBackward' );\n\t\tconst mergeForwardCommand: ListMergeCommand | undefined = editor.commands.get( 'mergeListItemForward' );\n\n\t\tthis.listenTo<ViewDocumentDeleteEvent>( editor.editing.view.document, 'delete', ( evt, data ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\t// Let the Widget plugin take care of block widgets while deleting (https://github.com/ckeditor/ckeditor5/issues/11346).\n\t\t\tif ( getSelectedBlockObject( editor.model ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.model.change( () => {\n\t\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\n\t\t\t\tif ( selection.isCollapsed && data.direction == 'backward' ) {\n\t\t\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\t\t\tif ( !isListItemBlock( positionParent ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst previousBlock = ListWalker.first( positionParent, {\n\t\t\t\t\t\tsameAttributes: 'listType',\n\t\t\t\t\t\tsameIndent: true\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Outdent the first block of a first list item.\n\t\t\t\t\tif ( !previousBlock && positionParent.getAttribute( 'listIndent' ) === 0 ) {\n\t\t\t\t\t\tif ( !isLastBlockOfListItem( positionParent ) ) {\n\t\t\t\t\t\t\teditor.execute( 'splitListItemAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\teditor.execute( 'outdentList' );\n\t\t\t\t\t}\n\t\t\t\t\t// Merge block with previous one (on the block level or on the content level).\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ( !mergeBackwardCommand || !mergeBackwardCommand.isEnabled ) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmergeBackwardCommand.execute( {\n\t\t\t\t\t\t\tshouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel( editor.model, 'backward' )\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t\t// Non-collapsed selection or forward delete.\n\t\t\t\telse {\n\t\t\t\t\t// Collapsed selection should trigger forward merging only if at the end of a block.\n\t\t\t\t\tif ( selection.isCollapsed && !selection.getLastPosition()!.isAtEnd ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !mergeForwardCommand || !mergeForwardCommand.isEnabled ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmergeForwardCommand.execute( {\n\t\t\t\t\t\tshouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel( editor.model, 'forward' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t} );\n\t\t}, { context: 'li' } );\n\t}\n\n\t/**\n\t * Attaches a listener to the {@link module:engine/view/document~ViewDocument#event:enter} event and handles enter key press\n\t * in document lists.\n\t */\n\tprivate _setupEnterIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst commands = editor.commands;\n\t\tconst enterCommand: EnterCommand = commands.get( 'enter' )!;\n\n\t\t// Overwrite the default Enter key behavior: outdent or split the list in certain cases.\n\t\tthis.listenTo<ViewDocumentEnterEvent>( editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst doc = model.document;\n\t\t\tconst positionParent = doc.selection.getFirstPosition()!.parent;\n\n\t\t\tif (\n\t\t\t\tdoc.selection.isCollapsed &&\n\t\t\t\tisListItemBlock( positionParent ) &&\n\t\t\t\tpositionParent.isEmpty &&\n\t\t\t\t!data.isSoft\n\t\t\t) {\n\t\t\t\tconst isFirstBlock = isFirstBlockOfListItem( positionParent );\n\t\t\t\tconst isLastBlock = isLastBlockOfListItem( positionParent );\n\n\t\t\t\t// * a      →      * a\n\t\t\t\t// * []     →      []\n\t\t\t\tif ( isFirstBlock && isLastBlock ) {\n\t\t\t\t\teditor.execute( 'outdentList' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t\t// * []     →      * []\n\t\t\t\t//   a      →      * a\n\t\t\t\telse if ( isFirstBlock && !isLastBlock ) {\n\t\t\t\t\teditor.execute( 'splitListItemAfter' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t\t// * a      →      * a\n\t\t\t\t//   []     →      * []\n\t\t\t\telse if ( isLastBlock ) {\n\t\t\t\t\teditor.execute( 'splitListItemBefore' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { context: 'li' } );\n\n\t\t// In some cases, after the default block splitting, we want to modify the new block to become a new list item\n\t\t// instead of an additional block in the same list item.\n\t\tthis.listenTo( enterCommand, 'afterExecute', () => {\n\t\t\tconst splitCommand: ListSplitCommand = commands.get( 'splitListItemBefore' )!;\n\n\t\t\t// The command has not refreshed because the change block related to EnterCommand#execute() is not over yet.\n\t\t\t// Let's keep it up to date and take advantage of ListSplitCommand#isEnabled.\n\t\t\tsplitCommand.refresh();\n\n\t\t\tif ( !splitCommand.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst doc = editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition()!.parent;\n\t\t\tconst listItemBlocks = getAllListItemBlocks( positionParent as any );\n\n\t\t\t// Keep in mind this split happens after the default enter handler was executed. For instance:\n\t\t\t//\n\t\t\t// │       Initial state       │    After default enter    │   Here in #afterExecute   │\n\t\t\t// ├───────────────────────────┼───────────────────────────┼───────────────────────────┤\n\t\t\t// │          * a[]            │           * a             │           * a             │\n\t\t\t// │                           │             []            │           * []            │\n\t\t\tif ( listItemBlocks.length === 2 ) {\n\t\t\t\tsplitCommand.execute();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a listener to the {@link module:engine/view/document~ViewDocument#event:tab} event and handles tab key and tab+shift keys\n\t * presses in document lists.\n\t */\n\tprivate _setupTabIntegration() {\n\t\tconst editor = this.editor;\n\n\t\tthis.listenTo<ViewDocumentTabEvent>( editor.editing.view.document, 'tab', ( evt, data ) => {\n\t\t\tconst commandName = data.shiftKey ? 'outdentList' : 'indentList';\n\t\t\tconst command = this.editor.commands.get( commandName )!;\n\n\t\t\tif ( command.isEnabled ) {\n\t\t\t\teditor.execute( commandName );\n\n\t\t\t\tdata.stopPropagation();\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\t}\n\n\t/**\n\t * Registers the conversion helpers for the document-list feature.\n\t */\n\tprivate _setupConversion() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst attributeNames = this.getListAttributeNames();\n\t\tconst multiBlock = editor.config.get( 'list.multiBlock' );\n\t\tconst elementName = multiBlock ? 'paragraph' : 'listItem';\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t// Convert <li> to a generic paragraph (or listItem element) so the content of <li> is always inside a block.\n\t\t\t// Setting the listType attribute to let other features (to-do list) know that this is part of a list item.\n\t\t\t// This is also important to properly handle simple lists so that paragraphs inside a list item won't break the list item.\n\t\t\t// <li>  <-- converted to listItem\n\t\t\t//   <p></p> <-- should be also converted to listItem, so it won't split and replace the listItem generated from the above li.\n\t\t\t.elementToElement( {\n\t\t\t\tview: 'li',\n\t\t\t\tmodel: ( viewElement, { writer } ) => writer.createElement( elementName, { listType: '' } )\n\t\t\t} )\n\t\t\t// Convert paragraph to the list block (without list type defined yet).\n\t\t\t// This is important to properly handle bogus paragraph and to-do lists.\n\t\t\t// Most of the time the bogus paragraph should not appear in the data of to-do list,\n\t\t\t// but if there is any marker or an attribute on the paragraph then the bogus paragraph\n\t\t\t// is preserved in the data, and we need to be able to detect this case.\n\t\t\t.elementToElement( {\n\t\t\t\tview: 'p',\n\t\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\t\tif ( viewElement.parent && viewElement.parent.is( 'element', 'li' ) ) {\n\t\t\t\t\t\treturn writer.createElement( elementName, { listType: '' } );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:li', listItemUpcastConverter() );\n\t\t\t} );\n\n\t\tif ( !multiBlock ) {\n\t\t\teditor.conversion.for( 'downcast' )\n\t\t\t\t.elementToElement( {\n\t\t\t\t\tmodel: 'listItem',\n\t\t\t\t\tview: 'p'\n\t\t\t\t} );\n\t\t}\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: elementName,\n\t\t\t\tview: bogusParagraphCreator( attributeNames ),\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ListElement>>(\n\t\t\t\t\t'attribute',\n\t\t\t\t\tlistItemDowncastConverter( attributeNames, this._downcastStrategies, model )\n\t\t\t\t);\n\n\t\t\t\tdispatcher.on<DowncastRemoveEvent>( 'remove', listItemDowncastRemoveConverter( model.schema ) );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: elementName,\n\t\t\t\tview: bogusParagraphCreator( attributeNames, { dataPipeline: true } ),\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ListElement>>(\n\t\t\t\t\t'attribute',\n\t\t\t\t\tlistItemDowncastConverter( attributeNames, this._downcastStrategies, model, { dataPipeline: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\tconst modelToViewPositionMapper = createModelToViewPositionMapper( this._downcastStrategies, editor.editing.view );\n\n\t\teditor.editing.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPositionMapper );\n\t\teditor.data.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPositionMapper );\n\n\t\tthis.listenTo<ModelDocumentChangeEvent>(\n\t\t\tmodel.document,\n\t\t\t'change:data',\n\t\t\treconvertItemsOnDataChange( model, editor.editing, attributeNames, this ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\t// For LI verify if an ID of the attribute element is correct.\n\t\tthis.on<ListEditingCheckAttributesEvent>( 'checkAttributes:item', ( evt, { viewElement, modelAttributes } ) => {\n\t\t\tif ( viewElement.id != modelAttributes.listItemId ) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// For UL and OL check if the name and ID of element is correct.\n\t\tthis.on<ListEditingCheckAttributesEvent>( 'checkAttributes:list', ( evt, { viewElement, modelAttributes } ) => {\n\t\t\tif (\n\t\t\t\tviewElement.name != getViewElementNameForListType( modelAttributes.listType ) ||\n\t\t\t\tviewElement.id != getViewElementIdForListType( modelAttributes.listType, modelAttributes.listIndent )\n\t\t\t) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Registers model post-fixers.\n\t */\n\tprivate _setupModelPostFixing() {\n\t\tconst model = this.editor.model;\n\t\tconst attributeNames = this.getListAttributeNames();\n\n\t\t// Register list fixing.\n\t\t// First the low level handler.\n\t\tmodel.document.registerPostFixer( writer => modelChangePostFixer( model, writer, attributeNames, this ) );\n\n\t\t// Then the callbacks for the specific lists.\n\t\t// The indentation fixing must be the first one...\n\t\tthis.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tevt.return = fixListIndents( listNodes, writer ) || evt.return;\n\t\t}, { priority: 'high' } );\n\n\t\t// ...then the item ids... and after that other fixers that rely on the correct indentation and ids.\n\t\tthis.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer, seenIds } ) => {\n\t\t\tevt.return = fixListItemIds( listNodes, seenIds, writer ) || evt.return;\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Integrates the feature with the clipboard via {@link module:engine/model/model~Model#insertContent} and\n\t * {@link module:engine/model/model~Model#getSelectedContent}.\n\t */\n\tprivate _setupClipboardIntegration() {\n\t\tconst model = this.editor.model;\n\t\tconst clipboardPipeline: ClipboardPipeline = this.editor.plugins.get( 'ClipboardPipeline' );\n\n\t\tthis.listenTo<ModelInsertContentEvent>( model, 'insertContent', createModelIndentPasteFixer( model ), { priority: 'high' } );\n\n\t\t// To enhance the UX, the editor should not copy list attributes to the clipboard if the selection\n\t\t// started and ended in the same list item.\n\t\t//\n\t\t// If the selection was enclosed in a single list item, there is a good chance the user did not want it\n\t\t// copied as a list item but plain blocks.\n\t\t//\n\t\t// This avoids pasting orphaned list items instead of paragraphs, for instance, straight into the root.\n\t\t//\n\t\t//\t                       ┌─────────────────────┬───────────────────┐\n\t\t//\t                       │ Selection           │ Clipboard content │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ [* <Widget />]      │ <Widget />        │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ [* Foo]             │ Foo               │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ * Foo [bar] baz     │ bar               │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ * Fo[o              │ o                 │\n\t\t//\t                       │   ba]r              │ ba                │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ * Fo[o              │ * o               │\n\t\t//\t                       │ * ba]r              │ * ba              │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ [* Foo              │ * Foo             │\n\t\t//\t                       │  * bar]             │ * bar             │\n\t\t//\t                       └─────────────────────┴───────────────────┘\n\t\t//\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/11608, https://github.com/ckeditor/ckeditor5/issues/14969\n\t\tthis.listenTo<ClipboardOutputTransformationEvent>( clipboardPipeline, 'outputTransformation', ( evt, data ) => {\n\t\t\tmodel.change( writer => {\n\t\t\t\t// Remove last block if it's empty.\n\t\t\t\tconst allContentChildren = Array.from( data.content.getChildren() );\n\t\t\t\tconst lastItem = allContentChildren[ allContentChildren.length - 1 ];\n\n\t\t\t\tif ( allContentChildren.length > 1 && lastItem.is( 'element' ) && lastItem.isEmpty ) {\n\t\t\t\t\tconst contentChildrenExceptLastItem = allContentChildren.slice( 0, -1 );\n\n\t\t\t\t\tif ( contentChildrenExceptLastItem.every( isListItemBlock ) ) {\n\t\t\t\t\t\twriter.remove( lastItem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Copy/cut only content of a list item (for drag-drop move the whole list item).\n\t\t\t\tif ( data.method == 'copy' || data.method == 'cut' ) {\n\t\t\t\t\tconst allChildren = Array.from( data.content.getChildren() );\n\t\t\t\t\tconst isSingleListItemSelected = isSingleListItem( allChildren );\n\n\t\t\t\t\tif ( isSingleListItemSelected ) {\n\t\t\t\t\t\tremoveListAttributes( allChildren as Array<ModelElement>, writer );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Informs editor accessibility features about keystrokes brought by the plugin.\n\t */\n\tprivate _setupAccessibilityIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t\t\tid: 'list',\n\t\t\tlabel: t( 'Keystrokes that can be used in a list' ),\n\t\t\tkeystrokes: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Increase list item indent' ),\n\t\t\t\t\tkeystroke: 'Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Decrease list item indent' ),\n\t\t\t\t\tkeystroke: 'Shift+Tab'\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Convert `listItemId` attribute to `data-list-item-id` attribute on the view element in both downcast pipelines.\n\t */\n\tprivate _setupListItemIdConversionStrategy() {\n\t\tthis.registerDowncastStrategy( {\n\t\t\tscope: 'item',\n\t\t\tattributeName: 'listItemId',\n\n\t\t\tsetAttributeOnDowncast( writer, attributeValue, viewElement, options ) {\n\t\t\t\tif ( options && ( options.skipListItemIds || options.isClipboardPipeline ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'data-list-item-id', attributeValue, viewElement );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * The attribute to attribute downcast strategy for UL, OL, LI elements.\n */\nexport interface ListAttributeDowncastStrategy {\n\n\t/**\n\t * The scope of the downcast (whether it applies to LI or OL/UL).\n\t */\n\tscope: 'list' | 'item';\n\n\t/**\n\t * The model attribute name.\n\t */\n\tattributeName: string;\n\n\t/**\n\t * Sets the property on the view element.\n\t */\n\tsetAttributeOnDowncast( writer: ViewDowncastWriter, value: unknown, element: ViewElement, options?: Record<string, unknown> ): void;\n}\n\n/**\n * The custom marker downcast strategy.\n */\nexport interface ListItemMarkerDowncastStrategy {\n\n\t/**\n\t * The scope of the downcast.\n\t */\n\tscope: 'itemMarker';\n\n\t/**\n\t * The model attribute name.\n\t */\n\tattributeName: string;\n\n\t/**\n\t * Creates a view element for a custom item marker.\n\t */\n\tcreateElement(\n\t\twriter: ViewDowncastWriter,\n\t\tmodelElement: ModelElement,\n\t\t{ dataPipeline }: { dataPipeline?: boolean }\n\t): ViewElement | null;\n\n\t/**\n\t * Creates an ViewAttributeElement to be used for wrapping a first block of a list item.\n\t */\n\tcreateWrapperElement?(\n\t\twriter: ViewDowncastWriter,\n\t\tmodelElement: ModelElement,\n\t\t{ dataPipeline }: { dataPipeline?: boolean }\n\t): ViewAttributeElement;\n\n\t/**\n\t * Should return true if the given list block can be wrapped with the wrapper created by `createWrapperElement()`\n\t * or only the marker element should be wrapped.\n\t */\n\tcanWrapElement?( modelElement: ModelElement ): boolean;\n\n\t/**\n\t * Should return true if the custom marker can be injected into a given list block.\n\t * Otherwise, custom marker view element is always injected before the block element.\n\t */\n\tcanInjectMarkerIntoElement?( modelElement: ModelElement ): boolean;\n}\n\n/**\n * The downcast strategy.\n */\nexport type ListDowncastStrategy = ListAttributeDowncastStrategy | ListItemMarkerDowncastStrategy;\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states (invalid `listItemId` and `listIndent` values).\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=1>Item 2</paragraph>   <--- this is removed.\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=1>Item 3</paragraph>   <--- note that indent got post-fixed.\n * ```\n *\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param ListEditing The document list editing plugin.\n * @returns `true` if any change has been applied, `false` otherwise.\n */\nfunction modelChangePostFixer(\n\tmodel: Model,\n\twriter: ModelWriter,\n\tattributeNames: Array<string>,\n\tlistEditing: ListEditing\n) {\n\tconst changes = model.document.differ.getChanges();\n\tconst visited = new Set<ModelElement>();\n\tconst itemToListHead = new Set<ListElement>();\n\tconst multiBlock = listEditing.editor.config.get( 'list.multiBlock' );\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\tconst item = entry.position.nodeAfter!;\n\n\t\t\t// Remove attributes in case of renamed element.\n\t\t\tif ( !model.schema.checkAttribute( item, 'listItemId' ) ) {\n\t\t\t\tfor ( const attributeName of Array.from( item.getAttributeKeys() ) ) {\n\t\t\t\t\tif ( attributeNames.includes( attributeName ) ) {\n\t\t\t\t\t\twriter.removeAttribute( attributeName, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\n\t\t\t// Insert of a non-list item - check if there is a list after it.\n\t\t\tif ( !entry.attributes.has( 'listItemId' ) ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.position.getShiftedBy( entry.length ), itemToListHead, visited );\n\t\t\t}\n\n\t\t\t// Check if there is no nested list.\n\t\t\tfor ( const { item: innerItem, previousPosition } of model.createRangeIn( item as ModelElement ) ) {\n\t\t\t\tif ( isListItemBlock( innerItem ) ) {\n\t\t\t\t\tfindAndAddListHeadToMap( previousPosition, itemToListHead, visited );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Removed list item or block adjacent to a list.\n\t\telse if ( entry.type == 'remove' ) {\n\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\t\t}\n\t\t// Changed list item indent or type.\n\t\telse if ( entry.type == 'attribute' && attributeNames.includes( entry.attributeKey ) ) {\n\t\t\tfindAndAddListHeadToMap( entry.range.start, itemToListHead, visited );\n\n\t\t\tif ( entry.attributeNewValue === null ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.range.start.getShiftedBy( 1 ), itemToListHead, visited );\n\t\t\t}\n\t\t}\n\n\t\t// Make sure that there is no left over listItem element without attributes or a block with list attributes that is not a listItem.\n\t\tif ( !multiBlock && entry.type == 'attribute' && LIST_BASE_ATTRIBUTES.includes( entry.attributeKey ) ) {\n\t\t\tconst element = entry.range.start.nodeAfter!;\n\n\t\t\tif ( entry.attributeNewValue === null && element && element.is( 'element', 'listItem' ) ) {\n\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\tapplied = true;\n\t\t\t} else if ( entry.attributeOldValue === null && element && element.is( 'element' ) && element.name != 'listItem' ) {\n\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\tapplied = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Make sure that IDs are not shared by split list.\n\tconst seenIds = new Set<string>();\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\tapplied = listEditing.fire<ListEditingPostFixerEvent>( 'postFixer', {\n\t\t\tlistNodes: new ListBlocksIterable( listHead ),\n\t\t\tlistHead,\n\t\t\twriter,\n\t\t\tseenIds\n\t\t} ) || applied;\n\t}\n\n\treturn applied;\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">B^</paragraph>\n * // At ^ paste:  <paragraph listType=\"numbered\" listItemId=\"x\" listIndent=\"0\">X</paragraph>\n * //              <paragraph listType=\"numbered\" listItemId=\"y\" listIndent=\"1\">Y</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">BX</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"y\" listIndent=\"2\">Y/paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n */\nfunction createModelIndentPasteFixer( model: Model ): GetCallback<ModelInsertContentEvent> {\n\treturn ( evt, [ content, selectable ] ) => {\n\t\tconst items = content.is( 'documentFragment' ) ?\n\t\t\tArray.from( content.getChildren() ) :\n\t\t\t[ content ];\n\n\t\tif ( !items.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = selectable ?\n\t\t\tmodel.createSelection( selectable ) :\n\t\t\tmodel.document.selection;\n\n\t\tconst position = selection.getFirstPosition()!;\n\n\t\t// Get a reference list item. Attributes of the inserted list items will be fixed according to that item.\n\t\tlet refItem: ListElement;\n\n\t\tif ( isListItemBlock( position.parent ) ) {\n\t\t\trefItem = position.parent;\n\t\t} else if ( isListItemBlock( position.nodeBefore ) && isListItemBlock( position.nodeAfter ) ) {\n\t\t\trefItem = position.nodeBefore;\n\t\t} else {\n\t\t\treturn; // Content is not copied into a list.\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst refType = refItem.getAttribute( 'listType' );\n\t\t\tconst refIndent = refItem.getAttribute( 'listIndent' );\n\t\t\tconst firstElementIndent = items[ 0 ].getAttribute( 'listIndent' ) as number || 0;\n\t\t\tconst indentDiff = Math.max( refIndent - firstElementIndent, 0 );\n\n\t\t\tfor ( const item of items ) {\n\t\t\t\tconst isListItem = isListItemBlock( item );\n\n\t\t\t\tif ( refItem.is( 'element', 'listItem' ) && item.is( 'element', 'paragraph' ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * When paragraphs or a plain text list is pasted into a simple list, convert\n\t\t\t\t\t * the `<paragraphs>' to `<listItem>' to avoid breaking the target list.\n\t\t\t\t\t *\n\t\t\t\t\t * See https://github.com/ckeditor/ckeditor5/issues/13826.\n\t\t\t\t\t */\n\t\t\t\t\twriter.rename( item as ModelElement, 'listItem' );\n\t\t\t\t}\n\n\t\t\t\twriter.setAttributes( {\n\t\t\t\t\tlistIndent: ( isListItem ? item.getAttribute( 'listIndent' ) : 0 ) + indentDiff,\n\t\t\t\t\tlistItemId: isListItem ? item.getAttribute( 'listItemId' ) : ListItemUid.next(),\n\t\t\t\t\tlistType: refType\n\t\t\t\t}, item );\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Decides whether the merge should be accompanied by the model's `deleteContent()`, for instance, to get rid of the inline\n * content in the selection or take advantage of the heuristics in `deleteContent()` that helps convert lists into paragraphs\n * in certain cases.\n */\nfunction shouldMergeOnBlocksContentLevel( model: Model, direction: 'backward' | 'forward' ) {\n\tconst selection = model.document.selection;\n\n\tif ( !selection.isCollapsed ) {\n\t\treturn !getSelectedBlockObject( model );\n\t}\n\n\tif ( direction === 'forward' ) {\n\t\treturn true;\n\t}\n\n\tconst firstPosition = selection.getFirstPosition()!;\n\tconst positionParent = firstPosition.parent;\n\tconst previousSibling = positionParent.previousSibling!;\n\n\tif ( model.schema.isObject( previousSibling ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ( previousSibling as ModelElement ).isEmpty ) {\n\t\treturn true;\n\t}\n\n\treturn isSingleListItem( [ positionParent as ModelElement, previousSibling ] );\n}\n\n/**\n * Event fired on changes detected on the model list element to verify if the view representation of a list element\n * is representing those attributes.\n *\n * It allows triggering a re-wrapping of a list item.\n *\n * @eventName ~ListEditing#postFixer\n * @param listHead The head element of a list.\n * @param writer The writer to do changes with.\n * @param seenIds The set of already known IDs.\n * @returns If a post-fixer made a change of the model tree, it should return `true`.\n */\nexport type ListEditingPostFixerEvent = {\n\tname: 'postFixer';\n\targs: [ {\n\t\tlistNodes: ListBlocksIterable;\n\t\tlistHead: ModelElement;\n\t\twriter: ModelWriter;\n\t\tseenIds: Set<string>;\n\t} ];\n\treturn: boolean;\n};\n\n/**\n * Event fired on changes detected on the model list element to verify if the view representation of a list element\n * is representing those attributes.\n *\n * It allows triggering a re-wrapping of a list item.\n *\n * **Note**: For convenience this event is namespaced and could be captured as `checkAttributes:list` or `checkAttributes:item`.\n *\n * @internal\n * @eventName ~ListEditing#checkAttributes\n */\nexport type ListEditingCheckAttributesEvent = {\n\tname: 'checkAttributes' | 'checkAttributes:list' | 'checkAttributes:item';\n\targs: [ {\n\t\tviewElement: ViewElement & { id?: string };\n\t\tmodelAttributes: ListItemAttributesMap;\n\t\tmodelReferenceElement: ListElement;\n\t} ];\n\treturn: boolean;\n};\n\n/**\n * Event fired on changes detected on the model list element to verify if the view representation of a list block element\n * is representing those attributes.\n *\n * It allows triggering a reconversion of a list item block.\n *\n * @internal\n * @eventName ~ListEditing#checkElement\n */\nexport type ListEditingCheckElementEvent = {\n\tname: 'checkElement';\n\targs: [ {\n\t\tviewElement: ViewElement;\n\t\tmodelElement: ModelElement;\n\t} ];\n\treturn: boolean;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport { ButtonView, MenuBarMenuListItemButtonView, type ButtonExecuteEvent } from 'ckeditor5/src/ui.js';\n\n/**\n * Helper method for creating toolbar and menu buttons and linking them with an appropriate command.\n *\n * @internal\n * @param editor The editor instance to which the UI component will be added.\n * @param commandName The name of the command.\n * @param label The button label.\n * @param icon The source of the icon.\n */\nexport function createUIComponents(\n\teditor: Editor,\n\tcommandName: 'bulletedList' | 'numberedList' | 'todoList',\n\tlabel: string,\n\ticon: string\n): void {\n\teditor.ui.componentFactory.add( commandName, () => {\n\t\tconst buttonView = _createButton( ButtonView, editor, commandName, label, icon );\n\n\t\tbuttonView.set( {\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\treturn buttonView;\n\t} );\n\n\teditor.ui.componentFactory.add( `menuBar:${ commandName }`, () => {\n\t\tconst buttonView = _createButton( MenuBarMenuListItemButtonView, editor, commandName, label, icon );\n\n\t\tbuttonView.set( {\n\t\t\trole: 'menuitemcheckbox',\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\treturn buttonView;\n\t} );\n}\n\n/**\n * Creates a button to use either in toolbar or in menu bar.\n */\nfunction _createButton<T extends typeof ButtonView | typeof MenuBarMenuListItemButtonView>(\n\tButtonClass: T,\n\teditor: Editor,\n\tcommandName: 'bulletedList' | 'numberedList' | 'todoList',\n\tlabel: string,\n\ticon: string\n): InstanceType<T> {\n\tconst command = editor.commands.get( commandName )!;\n\tconst view = new ButtonClass( editor.locale ) as InstanceType<T>;\n\n\tview.set( {\n\t\tlabel,\n\t\ticon\n\t} );\n\n\t// Bind button model to command.\n\tview.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t// Execute the command.\n\tview.on<ButtonExecuteEvent>( 'execute', () => {\n\t\teditor.execute( commandName );\n\t\teditor.editing.view.focus();\n\t} );\n\n\treturn view;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listui\n */\n\nimport { createUIComponents } from './utils.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { IconBulletedList, IconNumberedList } from 'ckeditor5/src/icons.js';\n\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n */\nexport class ListUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst t = this.editor.t;\n\n\t\t// Create button numberedList.\n\t\tif ( !this.editor.ui.componentFactory.has( 'numberedList' ) ) {\n\t\t\tcreateUIComponents( this.editor, 'numberedList', t( 'Numbered List' ), IconNumberedList );\n\t\t}\n\n\t\t// Create button bulletedList.\n\t\tif ( !this.editor.ui.componentFactory.has( 'bulletedList' ) ) {\n\t\t\tcreateUIComponents( this.editor, 'bulletedList', t( 'Bulleted List' ), IconBulletedList );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ListEditing } from './list/listediting.js';\nimport { ListUI } from './list/listui.js';\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/list/listediting~ListEditing  list\n * editing feature} and {@link module:list/list/listui~ListUI list UI feature}.\n */\nexport class List extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing, ListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'List' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/liststartcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport {\n\texpandListBlocksToCompleteList,\n\tisListItemBlock,\n\tisNumberedListType\n} from '../list/utils/model.js';\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items,\n * letting the user to choose the starting point of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */\nexport class ListStartCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: number | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options Execute options.\n\t * @param options.startIndex The list start index.\n\t */\n\tpublic override execute( { startIndex = 1 }: { startIndex?: number } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tlet blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block =>\n\t\t\t\tisListItemBlock( block ) &&\n\t\t\t\tisNumberedListType( block.getAttribute( 'listType' ) )\n\t\t\t);\n\n\t\tblocks = expandListBlocksToCompleteList( blocks );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\twriter.setAttribute( 'listStart', startIndex >= 0 ? startIndex : 1, block );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tif (\n\t\t\tblock &&\n\t\t\tisListItemBlock( block ) &&\n\t\t\tisNumberedListType( block.getAttribute( 'listType' ) )\n\t\t) {\n\t\t\treturn block.getAttribute( 'listStart' ) as number;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n* @module list/listproperties/utils/style\n*/\n\nconst LIST_STYLE_TO_LIST_TYPE: Record<string, 'bulleted' | 'numbered' | undefined> = {};\nconst LIST_STYLE_TO_TYPE_ATTRIBUTE: Record<string, string | null | undefined> = {};\nconst TYPE_ATTRIBUTE_TO_LIST_STYLE: Record<string, string | undefined> = {};\n\nconst LIST_STYLE_TYPES: Array<{ listStyle: string; typeAttribute: string | null; listType: 'bulleted' | 'numbered' }> = [\n\t{ listStyle: 'disc', typeAttribute: 'disc', listType: 'bulleted' },\n\t{ listStyle: 'circle', typeAttribute: 'circle', listType: 'bulleted' },\n\t{ listStyle: 'square', typeAttribute: 'square', listType: 'bulleted' },\n\t{ listStyle: 'decimal', typeAttribute: '1', listType: 'numbered' },\n\t{ listStyle: 'decimal-leading-zero', typeAttribute: null, listType: 'numbered' },\n\t{ listStyle: 'lower-roman', typeAttribute: 'i', listType: 'numbered' },\n\t{ listStyle: 'upper-roman', typeAttribute: 'I', listType: 'numbered' },\n\t{ listStyle: 'lower-alpha', typeAttribute: 'a', listType: 'numbered' },\n\t{ listStyle: 'upper-alpha', typeAttribute: 'A', listType: 'numbered' },\n\t{ listStyle: 'lower-latin', typeAttribute: 'a', listType: 'numbered' },\n\t{ listStyle: 'upper-latin', typeAttribute: 'A', listType: 'numbered' }\n];\n\nfor ( const { listStyle, typeAttribute, listType } of LIST_STYLE_TYPES ) {\n\tLIST_STYLE_TO_LIST_TYPE[ listStyle ] = listType;\n\tLIST_STYLE_TO_TYPE_ATTRIBUTE[ listStyle ] = typeAttribute;\n\n\tif ( typeAttribute ) {\n\t\tTYPE_ATTRIBUTE_TO_LIST_STYLE[ typeAttribute ] = listStyle;\n\t}\n}\n\n/**\n * Gets all the style types supported by given list type.\n *\n * @internal\n */\nexport function getAllSupportedStyleTypes(): Array<string> {\n\treturn LIST_STYLE_TYPES.map( x => x.listStyle );\n}\n\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n *\n * @internal\n */\nexport function getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\treturn LIST_STYLE_TO_LIST_TYPE[ listStyleType ] || null;\n}\n\n/**\n * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n *\n * @internal\n */\nexport function getListStyleTypeFromTypeAttribute( value: string ): string | null {\n\treturn TYPE_ATTRIBUTE_TO_LIST_STYLE[ value ] || null;\n}\n\n/**\n * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n *\n * @internal\n */\nexport function getTypeAttributeFromListStyleType( value: string ): string | null {\n\treturn LIST_STYLE_TO_TYPE_ATTRIBUTE[ value ] || null;\n}\n\n/**\n * Normalizes list style by converting aliases to their canonical form.\n *\n * @internal\n * @param listStyle The list style value to normalize.\n * @returns The canonical form of the list style.\n *\n * @example\n * normalizeListStyle( 'lower-alpha' ); // Returns 'lower-latin'\n * normalizeListStyle( 'upper-alpha' ); // Returns 'upper-latin'\n * normalizeListStyle( 'disc' ); // Returns 'disc'\n */\nexport function normalizeListStyle( listStyle: string ): string {\n\tswitch ( listStyle ) {\n\t\tcase 'lower-alpha':\n\t\t\treturn 'lower-latin';\n\t\tcase 'upper-alpha':\n\t\t\treturn 'upper-latin';\n\t\tdefault:\n\t\t\treturn listStyle;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/liststylecommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport {\n\texpandListBlocksToCompleteList,\n\tisListItemBlock\n} from '../list/utils/model.js';\nimport { getListTypeFromListStyleType } from './utils/style.js';\n\n/**\n * The list style command. It changes `listStyle` attribute of the selected list items,\n * letting the user choose styles for the list item markers.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */\nexport class ListStyleCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: string | null;\n\n\t/**\n\t * The default type of the list style.\n\t */\n\tpublic readonly defaultType: string;\n\n\t/**\n\t * The list of supported style types by this command.\n\t */\n\tprivate _supportedTypes: Array<string> | undefined;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t * @param supportedTypes The list of supported style types by this command.\n\t */\n\tconstructor( editor: Editor, defaultType: string, supportedTypes?: Array<string> ) {\n\t\tsuper( editor );\n\n\t\tthis.defaultType = defaultType;\n\t\tthis._supportedTypes = supportedTypes;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */\n\tpublic override execute( options: { type?: string | null } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tthis._tryToConvertItemsToList( options );\n\n\t\t\tlet blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => block.hasAttribute( 'listType' ) );\n\n\t\t\tif ( !blocks.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tblocks = expandListBlocksToCompleteList( blocks );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\twriter.setAttribute( 'listStyle', options.type || this.defaultType, block );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if the given style type is supported by this plugin.\n\t */\n\tpublic isStyleTypeSupported( value: string ): boolean {\n\t\tif ( !this._supportedTypes ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this._supportedTypes.includes( value );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tif ( isListItemBlock( listItem ) ) {\n\t\t\treturn listItem.getAttribute( 'listStyle' ) as string;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\tconst editor = this.editor;\n\n\t\tconst numberedList = editor.commands.get( 'numberedList' )!;\n\t\tconst bulletedList = editor.commands.get( 'bulletedList' )!;\n\n\t\treturn numberedList.isEnabled || bulletedList.isEnabled;\n\t}\n\n\t/**\n\t * Check if the provided list style is valid. Also change the selection to a list if it's not set yet.\n\t *\n\t * @param options.type The type of the list style. If `null` is specified, the function does nothing.\n\t*/\n\tprivate _tryToConvertItemsToList( options: { type?: string | null } ) {\n\t\tif ( !options.type ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst listType = getListTypeFromListStyleType( options.type );\n\n\t\tif ( !listType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst commandName = `${ listType }List` as const;\n\t\tconst command = editor.commands.get( commandName )!;\n\n\t\tif ( !command.value ) {\n\t\t\teditor.execute( commandName );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listreversedcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport {\n\texpandListBlocksToCompleteList,\n\tisListItemBlock\n} from '../list/utils/model.js';\n\n/**\n * The list reversed command. It changes the `listReversed` attribute of the selected list items,\n * letting the user to choose the order of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */\nexport class ListReversedCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: boolean | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */\n\tpublic override execute( options: { reversed?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tlet blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => isListItemBlock( block ) && block.getAttribute( 'listType' ) == 'numbered' );\n\n\t\tblocks = expandListBlocksToCompleteList( blocks );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\twriter.setAttribute( 'listReversed', !!options.reversed, block );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t */\n\tprivate _getValue() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tif ( isListItemBlock( block ) && block.getAttribute( 'listType' ) == 'numbered' ) {\n\t\t\treturn block.getAttribute( 'listReversed' ) as boolean;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/converters\n */\n\nimport type { UpcastElementEvent } from 'ckeditor5/src/engine.js';\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\n\nimport type { AttributeStrategy } from './listpropertiesediting.js';\n\n/**\n * Returns a converter that consumes the `style`, `reversed`, and `start` attributes.\n * In `style`, it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n *\n * @internal\n * @param strategy\n */\nexport function listPropertiesUpcastConverter( strategy: AttributeStrategy ): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, schema, consumable } = conversionApi;\n\n\t\t// If there is no view consumable to consume, set the default attribute value to be able to reconvert nested lists on parent change.\n\t\t// So abort converting if attribute was directly consumed.\n\t\tif ( consumable.test( data.viewItem, strategy.viewConsumables ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !data.modelRange ) {\n\t\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\tlet applied = false;\n\n\t\tfor ( const item of data.modelRange!.getItems( { shallow: true } ) ) {\n\t\t\tif ( !schema.checkAttribute( item, strategy.attributeName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( !strategy.appliesToListItem( item ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n\t\t\tif ( item.hasAttribute( strategy.attributeName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\twriter.setAttribute( strategy.attributeName, strategy.getAttributeOnUpcast( data.viewItem ), item );\n\t\t\tapplied = true;\n\t\t}\n\n\t\tif ( applied ) {\n\t\t\tconsumable.consume( data.viewItem, strategy.viewConsumables );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listpropertiesutils\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\tgetAllSupportedStyleTypes,\n\tgetListStyleTypeFromTypeAttribute,\n\tgetListTypeFromListStyleType,\n\tgetTypeAttributeFromListStyleType\n} from './utils/style.js';\n\n/**\n * A set of helpers related to document lists.\n */\nexport class ListPropertiesUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListPropertiesUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets all the style types supported by given list type.\n\t */\n\tpublic getAllSupportedStyleTypes(): Array<string> {\n\t\treturn getAllSupportedStyleTypes();\n\t}\n\n\t/**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */\n\tpublic getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\t\treturn getListTypeFromListStyleType( listStyleType );\n\t}\n\n\t/**\n\t * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n\t */\n\tpublic getListStyleTypeFromTypeAttribute( value: string ): string | null {\n\t\treturn getListStyleTypeFromTypeAttribute( value );\n\t}\n\n\t/**\n\t * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n\t */\n\tpublic getTypeAttributeFromListStyleType( value: string ): string | null {\n\t\treturn getTypeAttributeFromListStyleType( value );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/utils/config\n */\n\nimport { toArray } from 'ckeditor5/src/utils.js';\nimport type { ListPropertiesConfig, ListPropertiesStyleListType } from '../../listconfig.js';\n\n/**\n * Normalizes {@link module:list/listconfig~ListPropertiesConfig} in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tstyles: {\n * \t\tlistTypes: [ 'bulleted', 'numbered' ],\n * \t\tuseAttribute: false\n * \t},\n * \tstartIndex: true,\n * \treversed: true\n * }\n * ```\n *\n * @internal\n * @param config The list properties {@link module:list/listconfig~ListPropertiesConfig config}.\n * @returns An object with normalized list properties options.\n */\nexport function getNormalizedConfig( config: ListPropertiesConfig ): NormalizedListPropertiesConfig {\n\tconst { startIndex, reversed, styles } = config;\n\n\treturn {\n\t\tstyles: getNormalizedStylesConfig( styles ),\n\t\tstartIndex: startIndex || false,\n\t\treversed: reversed || false\n\t};\n}\n\n/**\n * Normalizes styles in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tlistTypes: [ 'bulleted', 'numbered' ],\n * \tuseAttribute: false\n * }\n * ```\n *\n * @param styles The list properties styles.\n * @returns An object with normalized list properties styles.\n */\nfunction getNormalizedStylesConfig( styles: ListPropertiesConfig[ 'styles' ] ): NormalizedListPropertiesConfig[ 'styles' ] {\n\tconst normalizedConfig: NormalizedListPropertiesConfig[ 'styles' ] = {\n\t\tlistTypes: [ 'bulleted', 'numbered' ],\n\t\tuseAttribute: false\n\t};\n\n\tif ( styles === true ) {\n\t\treturn normalizedConfig;\n\t}\n\n\tif ( !styles ) {\n\t\tnormalizedConfig.listTypes = [];\n\t}\n\telse if ( Array.isArray( styles ) || typeof styles == 'string' ) {\n\t\tnormalizedConfig.listTypes = toArray( styles );\n\t}\n\telse {\n\t\tnormalizedConfig.listTypes = styles.listTypes ?\n\t\t\ttoArray( styles.listTypes ) :\n\t\t\tnormalizedConfig.listTypes;\n\n\t\tnormalizedConfig.useAttribute = !!styles.useAttribute;\n\n\t\tif ( styles.listStyleTypes ) {\n\t\t\tnormalizedConfig.listStyleTypes = styles.listStyleTypes;\n\t\t}\n\t}\n\n\treturn normalizedConfig;\n}\n\n/**\n* Normalized list properties config.\n*\n* @internal\n*/\nexport type NormalizedListPropertiesConfig = {\n\tstyles: {\n\t\tlistTypes: Array<ListPropertiesStyleListType>;\n\t\tlistStyleTypes?: {\n\t\t\tnumbered?: Array<string>;\n\t\t\tbulleted?: Array<string>;\n\t\t};\n\t\tuseAttribute: boolean;\n\t};\n\tstartIndex: boolean;\n\treversed: boolean;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listpropertiesediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport type {\n\tConsumables,\n\tViewDowncastWriter,\n\tModelElement,\n\tModelItem,\n\tUpcastElementEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tListEditing,\n\ttype ListType,\n\ttype ListEditingCheckAttributesEvent,\n\ttype ListEditingPostFixerEvent,\n\ttype ListItemAttributesMap\n} from '../list/listediting.js';\n\nimport { ListStartCommand } from './liststartcommand.js';\nimport { ListStyleCommand } from './liststylecommand.js';\nimport { ListReversedCommand } from './listreversedcommand.js';\nimport { listPropertiesUpcastConverter } from './converters.js';\nimport {\n\tgetAllSupportedStyleTypes,\n\tgetListTypeFromListStyleType,\n\tgetListStyleTypeFromTypeAttribute,\n\tgetTypeAttributeFromListStyleType,\n\tnormalizeListStyle\n} from './utils/style.js';\nimport { ListPropertiesUtils } from './listpropertiesutils.js';\nimport {\n\tisNumberedListType\n} from '../list/utils/model.js';\n\nimport type { ListIndentCommandAfterExecuteEvent } from '../list/listindentcommand.js';\nimport type { ListPropertiesConfig } from '../listconfig.js';\nimport { getNormalizedConfig } from './utils/config.js';\n\nconst DEFAULT_LIST_TYPE = 'default';\n\n/**\n * The document list properties engine feature.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */\nexport class ListPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing, ListPropertiesUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListPropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list.properties', {\n\t\t\tstyles: true,\n\t\t\tstartIndex: false,\n\t\t\treversed: false\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tconst enabledProperties = editor.config.get( 'list.properties' )!;\n\t\tconst strategies = createAttributeStrategies( enabledProperties );\n\n\t\tfor ( const strategy of strategies ) {\n\t\t\tstrategy.addCommand( editor );\n\n\t\t\tmodel.schema.extend( '$listItem', { allowAttributes: strategy.attributeName } );\n\n\t\t\t// Register downcast strategy.\n\t\t\tlistEditing.registerDowncastStrategy( {\n\t\t\t\tscope: 'list',\n\t\t\t\tattributeName: strategy.attributeName,\n\n\t\t\t\tsetAttributeOnDowncast( writer, attributeValue, viewElement ) {\n\t\t\t\t\tstrategy.setAttributeOnDowncast( writer, attributeValue, viewElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Set up conversion.\n\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ol', listPropertiesUpcastConverter( strategy ) );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ul', listPropertiesUpcastConverter( strategy ) );\n\t\t\t}\n\t\t} );\n\n\t\t// Verify if the list view element (ul or ol) requires refreshing.\n\t\tlistEditing.on<ListEditingCheckAttributesEvent>(\n\t\t\t'checkAttributes:list',\n\t\t\t( evt, { viewElement, modelAttributes, modelReferenceElement } ) => {\n\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\tif ( !strategy.appliesToListItem( modelReferenceElement ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( strategy.getAttributeOnUpcast( viewElement ) != modelAttributes[ strategy.attributeName ] ) {\n\t\t\t\t\t\tevt.return = true;\n\t\t\t\t\t\tevt.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// Reset list properties after indenting list items.\n\t\tthis.listenTo<ListIndentCommandAfterExecuteEvent>(\n\t\t\teditor.commands.get( 'indentList' )!,\n\t\t\t'afterExecute',\n\t\t\t( evt, changedBlocks ) => {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tfor ( const node of changedBlocks ) {\n\t\t\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\t\t\tif ( strategy.appliesToListItem( node ) ) {\n\t\t\t\t\t\t\t\t// Just reset the attribute.\n\t\t\t\t\t\t\t\t// If there is a previous indented list that this node should be merged into,\n\t\t\t\t\t\t\t\t// the postfixer will unify all the attributes of both sub-lists.\n\t\t\t\t\t\t\t\twriter.setAttribute( strategy.attributeName, strategy.defaultValue, node );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t);\n\n\t\t// Add or remove list properties attributes depending on the list type.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node } of listNodes ) {\n\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\t// Check if attribute is valid.\n\t\t\t\t\tif ( strategy.hasValidAttribute( node ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add missing default property attributes...\n\t\t\t\t\tif ( strategy.appliesToListItem( node ) ) {\n\t\t\t\t\t\twriter.setAttribute( strategy.attributeName, strategy.defaultValue, node );\n\t\t\t\t\t}\n\t\t\t\t\t// ...or remove invalid property attributes.\n\t\t\t\t\telse {\n\t\t\t\t\t\twriter.removeAttribute( strategy.attributeName, node );\n\t\t\t\t\t}\n\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Make sure that all items in a single list (items at the same level & listType) have the same properties.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node, previousNodeInList } of listNodes ) {\n\t\t\t\t// This is a first item of a nested list.\n\t\t\t\tif ( !previousNodeInList ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// This is a first block of a list of a different type.\n\t\t\t\tif ( previousNodeInList.getAttribute( 'listType' ) != node.getAttribute( 'listType' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Copy properties from the previous one.\n\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\tconst { attributeName } = strategy;\n\n\t\t\t\t\tif ( !strategy.appliesToListItem( node ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = previousNodeInList.getAttribute( attributeName );\n\n\t\t\t\t\tif ( node.getAttribute( attributeName ) != value ) {\n\t\t\t\t\t\twriter.setAttribute( attributeName, value, node );\n\t\t\t\t\t\tevt.return = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Strategy for dealing with `listItem` attributes supported by this plugin.\n *\n * @internal\n */\nexport interface AttributeStrategy {\n\n\t/**\n\t * The model attribute name.\n\t */\n\tattributeName: keyof ListItemAttributesMap;\n\n\t/**\n\t * The model attribute default value.\n\t */\n\tdefaultValue: unknown;\n\n\t/**\n\t * The view consumable as expected by {@link module:engine/conversion/viewconsumable~ViewConsumable#consume `ViewConsumable`}.\n\t */\n\tviewConsumables: Consumables;\n\n\t/**\n\t * Registers an editor command.\n\t */\n\taddCommand( editor: Editor ): void;\n\n\t/**\n\t * Verifies whether the strategy is applicable for the specified model element.\n\t */\n\tappliesToListItem( element: ModelItem ): boolean;\n\n\t/**\n\t * Verifies whether the model attribute value is valid.\n\t */\n\thasValidAttribute( element: ModelElement ): boolean;\n\n\t/**\n\t * Sets the property on the view element.\n\t */\n\tsetAttributeOnDowncast( writer: ViewDowncastWriter, value: unknown, element: ViewElement ): void;\n\n\t/**\n\t * Retrieves the property value from the view element.\n\t */\n\tgetAttributeOnUpcast( element: ViewElement ): unknown;\n}\n\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */\nfunction createAttributeStrategies( enabledProperties: ListPropertiesConfig ) {\n\tconst strategies: Array<AttributeStrategy> = [];\n\tconst normalizedConfig = getNormalizedConfig( enabledProperties );\n\n\tif ( enabledProperties.styles ) {\n\t\tconst useAttribute = normalizedConfig.styles.useAttribute;\n\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStyle',\n\t\t\tdefaultValue: DEFAULT_LIST_TYPE,\n\t\t\tviewConsumables: { styles: 'list-style-type' },\n\n\t\t\taddCommand( editor ) {\n\t\t\t\tlet supportedTypes = getAllSupportedStyleTypes();\n\n\t\t\t\tif ( useAttribute ) {\n\t\t\t\t\tsupportedTypes = supportedTypes.filter( styleType => !!getTypeAttributeFromListStyleType( styleType ) );\n\t\t\t\t}\n\n\t\t\t\teditor.commands.add( 'listStyle', new ListStyleCommand( editor, DEFAULT_LIST_TYPE, supportedTypes ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered' || item.getAttribute( 'listType' ) == 'bulleted';\n\t\t\t},\n\n\t\t\thasValidAttribute( item ) {\n\t\t\t\tif ( !this.appliesToListItem( item ) ) {\n\t\t\t\t\treturn !item.hasAttribute( 'listStyle' );\n\t\t\t\t}\n\n\t\t\t\tif ( !item.hasAttribute( 'listStyle' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst value = item.getAttribute( 'listStyle' );\n\n\t\t\t\tif ( value == DEFAULT_LIST_TYPE ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn getListTypeFromListStyleType( value as string ) == item.getAttribute( 'listType' );\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStyle, element ) {\n\t\t\t\tif ( listStyle && listStyle !== DEFAULT_LIST_TYPE ) {\n\t\t\t\t\tif ( useAttribute ) {\n\t\t\t\t\t\tconst value = getTypeAttributeFromListStyleType( listStyle as string );\n\n\t\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\t\twriter.setAttribute( 'type', value, element );\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.setStyle( 'list-style-type', listStyle as string, element );\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twriter.removeStyle( 'list-style-type', element );\n\t\t\t\twriter.removeAttribute( 'type', element );\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\tconst style = listParent.getStyle( 'list-style-type' );\n\n\t\t\t\tif ( style ) {\n\t\t\t\t\treturn normalizeListStyle( style );\n\t\t\t\t}\n\n\t\t\t\tconst attribute = listParent.getAttribute( 'type' );\n\n\t\t\t\tif ( attribute ) {\n\t\t\t\t\treturn getListStyleTypeFromTypeAttribute( attribute );\n\t\t\t\t}\n\n\t\t\t\treturn DEFAULT_LIST_TYPE;\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.reversed ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listReversed',\n\t\t\tdefaultValue: false,\n\t\t\tviewConsumables: { attributes: 'reversed' },\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listReversed', new ListReversedCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered';\n\t\t\t},\n\n\t\t\thasValidAttribute( item ) {\n\t\t\t\treturn this.appliesToListItem( item ) == item.hasAttribute( 'listReversed' );\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listReversed, element ) {\n\t\t\t\tif ( listReversed ) {\n\t\t\t\t\twriter.setAttribute( 'reversed', 'reversed', element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'reversed', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\treturn listParent.hasAttribute( 'reversed' );\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.startIndex ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStart',\n\t\t\tdefaultValue: 1,\n\t\t\tviewConsumables: { attributes: 'start' },\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listStart', new ListStartCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn isNumberedListType( item.getAttribute( 'listType' ) as ListType );\n\t\t\t},\n\n\t\t\thasValidAttribute( item ) {\n\t\t\t\treturn this.appliesToListItem( item ) == item.hasAttribute( 'listStart' );\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStart, element ) {\n\t\t\t\tif ( listStart == 0 || ( listStart as number ) > 1 ) {\n\t\t\t\t\twriter.setAttribute( 'start', listStart, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'start', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\tconst startAttributeValue: any = listParent.getAttribute( 'start' );\n\n\t\t\t\treturn startAttributeValue >= 0 ? startAttributeValue : 1;\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn strategies;\n}\n\ndeclare module '../list/listediting' {\n\tinterface ListItemAttributesMap {\n\t\tlistStyle?: string;\n\t\tlistStart?: number;\n\t\tlistReversed?: boolean;\n\t}\n}\n\ndeclare module '../list/utils/model' {\n\tinterface ListElement {\n\t\tgetAttribute( key: 'listStyle' ): string;\n\t\tgetAttribute( key: 'listStart' ): number;\n\t\tgetAttribute( key: 'listReversed' ): boolean;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/ui/listpropertiesview\n */\n\nimport {\n\tButtonView,\n\tView,\n\tViewCollection,\n\tFocusCycler,\n\tSwitchButtonView,\n\tLabeledFieldView,\n\tcreateLabeledInputNumber,\n\taddKeyboardHandlingForGrid,\n\tCollapsibleView,\n\ttype InputNumberView,\n\ttype FocusableView\n} from 'ckeditor5/src/ui.js';\n\nimport {\n\tFocusTracker,\n\tKeystrokeHandler,\n\tglobal,\n\ttype Locale\n} from 'ckeditor5/src/utils.js';\n\nimport type { NormalizedListPropertiesConfig } from '../utils/config.js';\n\nimport '../../../theme/listproperties.css';\n\n/**\n * The list properties view to be displayed in the list dropdown.\n *\n * Contains a grid of available list styles and, for numbered list, also the list start index and reversed fields.\n *\n * @internal\n */\nexport class ListPropertiesView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public locale: Locale;\n\n\t/**\n\t * A collection of the child views.\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * A view that renders the grid of list styles.\n\t */\n\tpublic readonly stylesView: StylesView | null = null;\n\n\t/**\n\t * A collapsible view that hosts additional list property fields ({@link #startIndexFieldView} and\n\t * {@link #reversedSwitchButtonView}) to visually separate them from the {@link #stylesView grid of styles}.\n\t *\n\t * **Note**: Only present when:\n\t * * the view represents **numbered** list properties,\n\t * * and the {@link #stylesView} is rendered,\n\t * * and either {@link #startIndexFieldView} or {@link #reversedSwitchButtonView} is rendered.\n\t *\n\t * @readonly\n\t */\n\tpublic additionalPropertiesCollapsibleView: CollapsibleView | null = null;\n\n\t/**\n\t * A labeled number field allowing the user to set the start index of the list.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */\n\tpublic startIndexFieldView: LabeledFieldView<InputNumberView> | null = null;\n\n\t/**\n\t * A switch button allowing the user to make the edited list reversed.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */\n\tpublic reversedSwitchButtonView: SwitchButtonView | null = null;\n\n\t/**\n\t * Tracks information about the DOM focus in the view.\n\t */\n\tpublic readonly focusTracker: FocusTracker = new FocusTracker();\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler = new KeystrokeHandler();\n\n\t/**\n\t * A collection of views that can be focused in the properties view.\n\t */\n\tpublic readonly focusables = new ViewCollection<FocusableView>();\n\n\t/**\n\t * Helps cycling over {@link #focusables} in the view.\n\t */\n\tpublic readonly focusCycler: FocusCycler;\n\n\t/**\n\t * Creates an instance of the list properties view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Options of the view.\n\t * @param options.enabledProperties An object containing the configuration of enabled list property names.\n\t * Allows conditional rendering the sub-components of the properties view.\n\t * @param options.styleButtonViews A list of style buttons to be rendered\n\t * inside the styles grid. The grid will not be rendered when `enabledProperties` does not include the `'styles'` key.\n\t * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n\t */\n\tconstructor(\n\t\tlocale: Locale,\n\t\t{ enabledProperties, styleButtonViews, styleGridAriaLabel }: {\n\t\t\tenabledProperties: NormalizedListPropertiesConfig;\n\t\t\tstyleButtonViews: Array<ButtonView> | null;\n\t\t\tstyleGridAriaLabel: string;\n\t\t}\n\t) {\n\t\tsuper( locale );\n\n\t\tconst elementCssClasses = [\n\t\t\t'ck',\n\t\t\t'ck-list-properties'\n\t\t];\n\n\t\tthis.children = this.createCollection();\n\n\t\tthis.focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate #children backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate #children forwards using the <kbd>Tab</kbd> key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// The rendering of the styles grid is conditional. When there is no styles grid, the view will render without collapsible\n\t\t// for numbered list properties, hence simplifying the layout.\n\t\tif ( styleButtonViews && styleButtonViews.length ) {\n\t\t\tthis.stylesView = this._createStylesView( styleButtonViews!, styleGridAriaLabel );\n\t\t\tthis.children.add( this.stylesView );\n\t\t} else {\n\t\t\telementCssClasses.push( 'ck-list-properties_without-styles' );\n\t\t}\n\n\t\t// The rendering of the numbered list property views is also conditional. It only makes sense for the numbered list\n\t\t// dropdown. The unordered list does not have such properties.\n\t\tif ( enabledProperties.startIndex || enabledProperties.reversed ) {\n\t\t\tthis._addNumberedListPropertyViews( enabledProperties );\n\n\t\t\telementCssClasses.push( 'ck-list-properties_with-numbered-properties' );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: elementCssClasses\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\tif ( this.stylesView ) {\n\t\t\tthis.focusables.add( this.stylesView );\n\t\t\tthis.focusTracker.add( this.stylesView.element! );\n\n\t\t\t// Register the collapsible toggle button to the focus system.\n\t\t\tif ( this.startIndexFieldView || this.reversedSwitchButtonView ) {\n\t\t\t\tthis.focusables.add( ( this.children.last as any ).buttonView );\n\t\t\t\tthis.focusTracker.add( ( this.children.last as any ).buttonView.element );\n\t\t\t}\n\n\t\t\tfor ( const item of this.stylesView.children ) {\n\t\t\t\tthis.stylesView.focusTracker.add( item.element! );\n\t\t\t}\n\n\t\t\taddKeyboardHandlingForGrid( {\n\t\t\t\tkeystrokeHandler: this.stylesView.keystrokes,\n\t\t\t\tfocusTracker: this.stylesView.focusTracker,\n\t\t\t\tgridItems: this.stylesView.children,\n\t\t\t\t// Note: The styles view has a different number of columns depending on whether the other properties\n\t\t\t\t// are enabled in the dropdown or not (https://github.com/ckeditor/ckeditor5/issues/12340)\n\t\t\t\tnumberOfColumns: () => global.window\n\t\t\t\t\t.getComputedStyle( this.stylesView!.element! )\n\t\t\t\t\t.getPropertyValue( 'grid-template-columns' )\n\t\t\t\t\t.split( ' ' )\n\t\t\t\t\t.length,\n\t\t\t\tuiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.startIndexFieldView ) {\n\t\t\tthis.focusables.add( this.startIndexFieldView );\n\t\t\tthis.focusTracker.add( this.startIndexFieldView.element! );\n\n\t\t\tconst stopPropagation = ( data: Event ) => data.stopPropagation();\n\n\t\t\t// Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n\t\t\t// keystroke handler would take over the key management in the input. We need to prevent\n\t\t\t// this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\t\t\tthis.keystrokes.set( 'arrowright', stopPropagation );\n\t\t\tthis.keystrokes.set( 'arrowleft', stopPropagation );\n\t\t\tthis.keystrokes.set( 'arrowup', stopPropagation );\n\t\t\tthis.keystrokes.set( 'arrowdown', stopPropagation );\n\t\t}\n\n\t\tif ( this.reversedSwitchButtonView ) {\n\t\t\tthis.focusables.add( this.reversedSwitchButtonView );\n\t\t\tthis.focusTracker.add( this.reversedSwitchButtonView.element! );\n\t\t}\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focus(): void {\n\t\tthis.focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focusLast(): void {\n\t\tthis.focusCycler.focusLast();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Creates the list styles grid.\n\t *\n\t * @param styleButtons Buttons to be placed in the grid.\n\t * @param styleGridAriaLabel The assistive technology label of the grid.\n\t */\n\tprivate _createStylesView( styleButtons: Array<ButtonView>, styleGridAriaLabel: string ) {\n\t\tconst stylesView = new View( this.locale ) as StylesView;\n\n\t\tstylesView.children = stylesView.createCollection();\n\t\tstylesView.children.addMany( styleButtons );\n\n\t\tstylesView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\t'aria-label': styleGridAriaLabel,\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list-styles-list'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: stylesView.children\n\t\t} );\n\n\t\tstylesView.children.delegate( 'execute' ).to( this );\n\n\t\tstylesView.focus = function( this: any ) {\n\t\t\t// If there is a button that is already on, focus it.\n\t\t\t// It's counterintuitive to focus the first button when there is already a button on.\n\t\t\tfor ( const child of this.children ) {\n\t\t\t\tif ( child instanceof ButtonView && child.isOn ) {\n\t\t\t\t\tchild.focus();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ... otherwise focus the first button.\n\t\t\tthis.children.first.focus();\n\t\t};\n\n\t\tstylesView.focusTracker = new FocusTracker();\n\t\tstylesView.keystrokes = new KeystrokeHandler();\n\n\t\tstylesView.render();\n\n\t\tstylesView.keystrokes.listenTo( stylesView.element! );\n\n\t\treturn stylesView;\n\t}\n\n\t/**\n\t * Renders {@link #startIndexFieldView} and/or {@link #reversedSwitchButtonView} depending on the configuration of the properties view.\n\t *\n\t * @param enabledProperties An object containing the configuration of enabled list property names\n\t * (see {@link #constructor}).\n\t */\n\tprivate _addNumberedListPropertyViews( enabledProperties: NormalizedListPropertiesConfig ) {\n\t\tconst t = this.locale.t;\n\t\tconst numberedPropertyViews = [];\n\n\t\tif ( enabledProperties.startIndex ) {\n\t\t\tthis.startIndexFieldView = this._createStartIndexField();\n\t\t\tnumberedPropertyViews.push( this.startIndexFieldView );\n\t\t}\n\n\t\tif ( enabledProperties.reversed ) {\n\t\t\tthis.reversedSwitchButtonView = this._createReversedSwitchButton();\n\t\t\tnumberedPropertyViews.push( this.reversedSwitchButtonView );\n\t\t}\n\n\t\t// When there are some style buttons, pack the numbered list properties into a collapsible to separate them.\n\t\tif ( this.stylesView ) {\n\t\t\tthis.additionalPropertiesCollapsibleView = new CollapsibleView( this.locale, numberedPropertyViews );\n\n\t\t\tthis.additionalPropertiesCollapsibleView.set( {\n\t\t\t\tlabel: t( 'List properties' ),\n\t\t\t\tisCollapsed: true\n\t\t\t} );\n\n\t\t\t// Don't enable the collapsible view unless either start index or reversed field is enabled (e.g. when no list is selected).\n\t\t\tthis.additionalPropertiesCollapsibleView.buttonView.bind( 'isEnabled' ).toMany(\n\t\t\t\tnumberedPropertyViews, 'isEnabled', ( ...areEnabled ) => areEnabled.some( isEnabled => isEnabled ) );\n\n\t\t\t// Automatically collapse the additional properties collapsible when either start index or reversed field gets disabled.\n\t\t\tthis.additionalPropertiesCollapsibleView.buttonView.on( 'change:isEnabled', ( evt, data, isEnabled ) => {\n\t\t\t\tif ( !isEnabled ) {\n\t\t\t\t\tthis.additionalPropertiesCollapsibleView!.isCollapsed = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.children.add( this.additionalPropertiesCollapsibleView );\n\t\t} else {\n\t\t\tthis.children.addMany( numberedPropertyViews );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the list start index labeled field.\n\t */\n\tprivate _createStartIndexField() {\n\t\tconst t = this.locale.t;\n\t\tconst startIndexFieldView = new LabeledFieldView( this.locale, createLabeledInputNumber );\n\n\t\tstartIndexFieldView.set( {\n\t\t\tlabel: t( 'Start at' ),\n\t\t\tclass: 'ck-numbered-list-properties__start-index'\n\t\t} );\n\n\t\tstartIndexFieldView.fieldView.set( {\n\t\t\tmin: 0,\n\t\t\tstep: 1,\n\t\t\tvalue: 1,\n\t\t\tinputMode: 'numeric'\n\t\t} );\n\n\t\tstartIndexFieldView.fieldView.on( 'input', () => {\n\t\t\tconst inputElement = startIndexFieldView.fieldView.element!;\n\t\t\tconst startIndex = inputElement.valueAsNumber;\n\n\t\t\tif ( Number.isNaN( startIndex ) ) {\n\t\t\t\t// Number inputs allow for the entry of characters that may result in NaN,\n\t\t\t\t// such as 'e', '+', '123e', '2-'.\n\t\t\t\tstartIndexFieldView.errorText = t( 'Invalid start index value.' );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !inputElement.checkValidity() ) {\n\t\t\t\tstartIndexFieldView.errorText = t( 'Start index must be greater than 0.' );\n\t\t\t} else {\n\t\t\t\tthis.fire<ListPropertiesViewListStartEvent>( 'listStart', { startIndex } );\n\t\t\t}\n\t\t} );\n\n\t\treturn startIndexFieldView;\n\t}\n\n\t/**\n\t * Creates the reversed list switch button.\n\t */\n\tprivate _createReversedSwitchButton() {\n\t\tconst t = this.locale.t;\n\t\tconst reversedButtonView = new SwitchButtonView( this.locale );\n\n\t\treversedButtonView.set( {\n\t\t\twithText: true,\n\t\t\tlabel: t( 'Reversed order' ),\n\t\t\tclass: 'ck-numbered-list-properties__reversed-order'\n\t\t} );\n\n\t\treversedButtonView.delegate( 'execute' ).to( this, 'listReversed' );\n\n\t\treturn reversedButtonView;\n\t}\n}\n\n/**\n * The view that renders the grid of styles.\n *\n * @internal\n */\nexport type StylesView = View & {\n\tchildren: ViewCollection;\n\tfocusTracker: FocusTracker;\n\tkeystrokes: KeystrokeHandler;\n\tfocus(): void;\n};\n\n/**\n * Fired when the list start index value has changed via {@link ~ListPropertiesView#startIndexFieldView}.\n *\n * @eventName ~ListPropertiesView#listStart\n */\nexport type ListPropertiesViewListStartEvent = {\n\tname: 'listStart';\n\targs: [ data: { startIndex: number } ];\n};\n\n/**\n * Fired when the list order has changed (reversed) via {@link ~ListPropertiesView#reversedSwitchButtonView}.\n *\n * @eventName ~ListPropertiesView#listReversed\n */\nexport type ListPropertiesViewListReversedEvent = {\n\tname: 'listReversed';\n\targs: [];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listpropertiesui\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport {\n\tIconBulletedList,\n\tIconNumberedList,\n\tIconListStyleCircle,\n\tIconListStyleDecimal,\n\tIconListStyleDecimalLeadingZero,\n\tIconListStyleDisc,\n\tIconListStyleLowerLatin,\n\tIconListStyleLowerRoman,\n\tIconListStyleSquare,\n\tIconListStyleUpperLatin,\n\tIconListStyleUpperRoman\n} from 'ckeditor5/src/icons.js';\nimport {\n\tButtonView,\n\tSplitButtonView,\n\tcreateDropdown,\n\tfocusChildOnDropdownOpen,\n\tMenuBarMenuView,\n\ttype DropdownView\n} from 'ckeditor5/src/ui.js';\n\nimport type { Locale } from 'ckeditor5/src/utils.js';\n\nimport { ListPropertiesView } from './ui/listpropertiesview.js';\n\nimport { type LegacyListStyleCommand } from '../legacylistproperties/legacyliststylecommand.js';\nimport { type ListStyleCommand } from '../listproperties/liststylecommand.js';\nimport { type LegacyListStartCommand } from '../legacylistproperties/legacyliststartcommand.js';\nimport { type ListStartCommand } from '../listproperties/liststartcommand.js';\nimport { type LegacyListReversedCommand } from '../legacylistproperties/legacylistreversedcommand.js';\nimport { type ListReversedCommand } from '../listproperties/listreversedcommand.js';\n\nimport { getNormalizedConfig, type NormalizedListPropertiesConfig } from './utils/config.js';\nimport { type ListPropertiesStyleListType } from '../listconfig.js';\n\nimport '../../theme/liststyles.css';\n\n/**\n * The list properties UI plugin. It introduces the extended `'bulletedList'` and `'numberedList'` toolbar\n * buttons that allow users to control such aspects of list as the marker, start index or order.\n *\n * **Note**: Buttons introduced by this plugin override implementations from the {@link module:list/list/listui~ListUI}\n * (because they share the same names).\n */\nexport class ListPropertiesUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListPropertiesUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.locale.t;\n\t\tconst propertiesConfig = editor.config.get( 'list.properties' )!;\n\t\tconst normalizedConfig = getNormalizedConfig( propertiesConfig );\n\t\tconst stylesListTypes = normalizedConfig.styles.listTypes;\n\n\t\t// Note: When this plugin does not register the \"bulletedList\" dropdown due to properties configuration,\n\t\t// a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n\t\t// in most editor configuration because the List plugin automatically requires ListUI.\n\t\tif ( stylesListTypes.includes( 'bulleted' ) ) {\n\t\t\tconst styleDefinitions = [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the disc list style' ),\n\t\t\t\t\ttooltip: t( 'Disc' ),\n\t\t\t\t\ttype: 'disc',\n\t\t\t\t\ticon: IconListStyleDisc\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the circle list style' ),\n\t\t\t\t\ttooltip: t( 'Circle' ),\n\t\t\t\t\ttype: 'circle',\n\t\t\t\t\ticon: IconListStyleCircle\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the square list style' ),\n\t\t\t\t\ttooltip: t( 'Square' ),\n\t\t\t\t\ttype: 'square',\n\t\t\t\t\ticon: IconListStyleSquare\n\t\t\t\t}\n\t\t\t];\n\t\t\tconst buttonLabel = t( 'Bulleted List' );\n\t\t\tconst styleGridAriaLabel = t( 'Bulleted list styles toolbar' );\n\t\t\tconst commandName = 'bulletedList';\n\n\t\t\teditor.ui.componentFactory.add( commandName, getDropdownViewCreator( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tparentCommandName: commandName,\n\t\t\t\tbuttonLabel,\n\t\t\t\tbuttonIcon: IconBulletedList,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} ) );\n\n\t\t\t// Add the menu bar item for bulleted list.\n\t\t\teditor.ui.componentFactory.add( `menuBar:${ commandName }`, getMenuBarStylesMenuCreator( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tparentCommandName: commandName,\n\t\t\t\tbuttonLabel,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} ) );\n\t\t}\n\n\t\t// Note: When this plugin does not register the \"numberedList\" dropdown due to properties configuration,\n\t\t// a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n\t\t// in most editor configuration because the List plugin automatically requires ListUI.\n\t\tif ( stylesListTypes.includes( 'numbered' ) || propertiesConfig.startIndex || propertiesConfig.reversed ) {\n\t\t\tconst styleDefinitions = [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the decimal list style' ),\n\t\t\t\t\ttooltip: t( 'Decimal' ),\n\t\t\t\t\ttype: 'decimal',\n\t\t\t\t\ticon: IconListStyleDecimal\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the decimal with leading zero list style' ),\n\t\t\t\t\ttooltip: t( 'Decimal with leading zero' ),\n\t\t\t\t\ttype: 'decimal-leading-zero',\n\t\t\t\t\ticon: IconListStyleDecimalLeadingZero\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the lower–roman list style' ),\n\t\t\t\t\ttooltip: t( 'Lower–roman' ),\n\t\t\t\t\ttype: 'lower-roman',\n\t\t\t\t\ticon: IconListStyleLowerRoman\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the upper–roman list style' ),\n\t\t\t\t\ttooltip: t( 'Upper-roman' ),\n\t\t\t\t\ttype: 'upper-roman',\n\t\t\t\t\ticon: IconListStyleUpperRoman\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the lower–latin list style' ),\n\t\t\t\t\ttooltip: t( 'Lower-latin' ),\n\t\t\t\t\ttype: 'lower-latin',\n\t\t\t\t\ticon: IconListStyleLowerLatin\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the upper–latin list style' ),\n\t\t\t\t\ttooltip: t( 'Upper-latin' ),\n\t\t\t\t\ttype: 'upper-latin',\n\t\t\t\t\ticon: IconListStyleUpperLatin\n\t\t\t\t}\n\t\t\t];\n\t\t\tconst buttonLabel = t( 'Numbered List' );\n\t\t\tconst styleGridAriaLabel = t( 'Numbered list styles toolbar' );\n\t\t\tconst commandName = 'numberedList';\n\n\t\t\teditor.ui.componentFactory.add( commandName, getDropdownViewCreator( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tparentCommandName: commandName,\n\t\t\t\tbuttonLabel,\n\t\t\t\tbuttonIcon: IconNumberedList,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} ) );\n\n\t\t\t// Menu bar menu does not display list start index or reverse UI. If there are no styles enabled,\n\t\t\t// the menu makes no sense and should be omitted.\n\t\t\tif ( stylesListTypes.includes( 'numbered' ) ) {\n\t\t\t\teditor.ui.componentFactory.add( `menuBar:${ commandName }`, getMenuBarStylesMenuCreator( {\n\t\t\t\t\teditor,\n\t\t\t\t\tnormalizedConfig,\n\t\t\t\t\tparentCommandName: commandName,\n\t\t\t\t\tbuttonLabel,\n\t\t\t\t\tstyleGridAriaLabel,\n\t\t\t\t\tstyleDefinitions\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A helper that returns a function that creates a split button with a toolbar in the dropdown,\n * which in turn contains buttons allowing users to change list styles in the context of the current selection.\n *\n * @param options.editor\n * @param options.normalizedConfig List properties configuration.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.buttonLabel Label of the main part of the split button.\n * @param options.buttonIcon The SVG string of an icon for the main part of the split button.\n * @param options.styleGridAriaLabel The ARIA label for the styles grid in the split button dropdown.\n * @param options.styleDefinitions Definitions of the style buttons.\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */\nfunction getDropdownViewCreator( {\n\teditor,\n\tnormalizedConfig,\n\tparentCommandName,\n\tbuttonLabel,\n\tbuttonIcon,\n\tstyleGridAriaLabel,\n\tstyleDefinitions\n}: {\n\teditor: Editor;\n\tnormalizedConfig: Readonly<NormalizedListPropertiesConfig>;\n\tparentCommandName: string;\n\tbuttonLabel: string;\n\tbuttonIcon: string;\n\tstyleGridAriaLabel: string;\n\tstyleDefinitions: Array<StyleDefinition>;\n} ) {\n\tconst parentCommand = editor.commands.get( parentCommandName )!;\n\n\treturn ( locale: Locale ) => {\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst mainButtonView = dropdownView.buttonView;\n\n\t\tdropdownView.bind( 'isEnabled' ).to( parentCommand );\n\t\tdropdownView.class = 'ck-list-styles-dropdown';\n\n\t\t// Main button was clicked.\n\t\tmainButtonView.on( 'execute', () => {\n\t\t\teditor.execute( parentCommandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\tmainButtonView.set( {\n\t\t\tlabel: buttonLabel,\n\t\t\ticon: buttonIcon,\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\tmainButtonView.bind( 'isOn' ).to( parentCommand, 'value', value => !!value );\n\n\t\tdropdownView.once( 'change:isOpen', () => {\n\t\t\tconst listPropertiesView = createListPropertiesView( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tdropdownView,\n\t\t\t\tparentCommandName,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} );\n\n\t\t\tdropdownView.panelView.children.add( listPropertiesView );\n\t\t} );\n\n\t\t// Focus the editable after executing the command.\n\t\t// Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n\t\tdropdownView.on( 'execute', () => {\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t};\n}\n\n/**\n * A helper that returns a function (factory) that creates individual buttons used by users to change styles\n * of lists.\n *\n * @param options.editor\n * @param options.listStyleCommand The instance of the `ListStylesCommand` class.\n * @param options.parentCommandName The name of the higher-order command associated with a\n * particular list style (e.g. \"bulletedList\" is associated with \"square\" and \"numberedList\" is associated with \"roman\").\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */\nfunction getStyleButtonCreator( {\n\teditor,\n\tlistStyleCommand,\n\tparentCommandName\n}: {\n\teditor: Editor;\n\tlistStyleCommand: LegacyListStyleCommand | ListStyleCommand;\n\tparentCommandName: string;\n} ) {\n\tconst locale = editor.locale;\n\tconst parentCommand = editor.commands.get( parentCommandName )!;\n\n\treturn ( { label, type, icon, tooltip }: StyleDefinition ) => {\n\t\tconst button = new ButtonView( locale );\n\n\t\tbutton.set( { label, icon, tooltip } );\n\n\t\tbutton.bind( 'isOn' ).to( listStyleCommand, 'value', value => value === type );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\t// If the content the selection is anchored to is a list, let's change its style.\n\t\t\tif ( parentCommand.value ) {\n\t\t\t\t// Remove the list when the current list style is the same as the one that would normally be applied.\n\t\t\t\tif ( listStyleCommand.value === type ) {\n\t\t\t\t\teditor.execute( parentCommandName );\n\t\t\t\t}\n\t\t\t\t// If the current list style is not set in the model or the style is different than the\n\t\t\t\t// one to be applied, simply apply the new style.\n\t\t\t\telse if ( listStyleCommand.value !== type ) {\n\t\t\t\t\teditor.execute( 'listStyle', { type } );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Otherwise, leave the creation of the styled list to the `ListStyleCommand`.\n\t\t\telse {\n\t\t\t\teditor.model.change( () => {\n\t\t\t\t\teditor.execute( 'listStyle', { type } );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn button;\n\t};\n}\n\n/**\n * A helper that creates the properties view for the individual style dropdown.\n *\n * @param options.editor Editor instance.\n * @param options.normalizedConfig List properties configuration.\n * @param options.dropdownView Styles dropdown view that hosts the properties view.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.styleDefinitions Definitions of the style buttons.\n * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n */\nfunction createListPropertiesView( {\n\teditor,\n\tnormalizedConfig,\n\tdropdownView,\n\tparentCommandName,\n\tstyleDefinitions,\n\tstyleGridAriaLabel\n}: {\n\teditor: Editor;\n\tnormalizedConfig: Readonly<NormalizedListPropertiesConfig>;\n\tdropdownView: DropdownView;\n\tparentCommandName: string;\n\tstyleDefinitions: Array<StyleDefinition>;\n\tstyleGridAriaLabel: string;\n} ) {\n\tconst locale = editor.locale;\n\tconst enabledProperties = {\n\t\t...normalizedConfig,\n\n\t\t...( parentCommandName != 'numberedList' ? {\n\t\t\tstartIndex: false,\n\t\t\treversed: false\n\t\t} : null )\n\t};\n\tconst listType = parentCommandName.replace( 'List', '' ) as ListPropertiesStyleListType;\n\n\tlet styleButtonViews = null;\n\n\tif ( normalizedConfig.styles.listTypes.includes( listType ) ) {\n\t\tconst listStyleCommand: LegacyListStyleCommand | ListStyleCommand = editor.commands.get( 'listStyle' )!;\n\t\tconst styleButtonCreator = getStyleButtonCreator( {\n\t\t\teditor,\n\t\t\tparentCommandName,\n\t\t\tlistStyleCommand\n\t\t} );\n\n\t\tconst configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n\t\tlet filteredDefinitions = styleDefinitions;\n\n\t\tif ( configuredListStylesTypes ) {\n\t\t\tconst allowedTypes = configuredListStylesTypes[ listType ];\n\n\t\t\tif ( allowedTypes ) {\n\t\t\t\tfilteredDefinitions = styleDefinitions.filter( def => allowedTypes.includes( def.type ) );\n\t\t\t}\n\t\t}\n\n\t\tconst isStyleTypeSupported = getStyleTypeSupportChecker( listStyleCommand );\n\t\tstyleButtonViews = filteredDefinitions\n\t\t\t.filter( isStyleTypeSupported )\n\t\t\t.map( styleButtonCreator );\n\t}\n\n\tconst listPropertiesView = new ListPropertiesView( locale, {\n\t\tstyleGridAriaLabel,\n\t\tenabledProperties,\n\t\tstyleButtonViews\n\t} );\n\n\tif ( normalizedConfig.styles.listTypes.includes( listType ) ) {\n\t\t// Accessibility: focus the first active style when opening the dropdown.\n\t\tfocusChildOnDropdownOpen( dropdownView, () => {\n\t\t\treturn listPropertiesView.stylesView!.children.find( ( child: any ) => child.isOn );\n\t\t} );\n\t}\n\n\tif ( enabledProperties.startIndex ) {\n\t\tconst listStartCommand: LegacyListStartCommand | ListStartCommand = editor.commands.get( 'listStart' )!;\n\n\t\tlistPropertiesView.startIndexFieldView!.bind( 'isEnabled' ).to( listStartCommand );\n\t\tlistPropertiesView.startIndexFieldView!.fieldView.bind( 'value' ).to( listStartCommand as any );\n\t\tlistPropertiesView.on( 'listStart', ( evt, data ) => editor.execute( 'listStart', data ) );\n\t}\n\n\tif ( enabledProperties.reversed ) {\n\t\tconst listReversedCommand: LegacyListReversedCommand | ListReversedCommand = editor.commands.get( 'listReversed' )!;\n\n\t\tlistPropertiesView.reversedSwitchButtonView!.bind( 'isEnabled' ).to( listReversedCommand );\n\t\tlistPropertiesView.reversedSwitchButtonView!.bind( 'isOn' ).to( listReversedCommand, 'value', value => !!value );\n\t\tlistPropertiesView.on( 'listReversed', () => {\n\t\t\tconst isReversed = listReversedCommand.value;\n\n\t\t\teditor.execute( 'listReversed', { reversed: !isReversed } );\n\t\t} );\n\t}\n\n\t// Make sure applying styles closes the dropdown.\n\tlistPropertiesView.delegate( 'execute' ).to( dropdownView );\n\n\treturn listPropertiesView;\n}\n\n/**\n * A helper that creates the list style submenu for menu bar.\n *\n * @param editor Editor instance.\n * @param normalizedConfig List properties configuration.\n * @param parentCommandName Name of the list command.\n * @param buttonLabel Label of the menu button.\n * @param styleGridAriaLabel ARIA label of the styles grid.\n */\nfunction getMenuBarStylesMenuCreator(\n\t{\n\t\teditor,\n\t\tnormalizedConfig,\n\t\tparentCommandName,\n\t\tbuttonLabel,\n\t\tstyleGridAriaLabel,\n\t\tstyleDefinitions\n\t}: {\n\t\teditor: Editor;\n\t\tnormalizedConfig: Readonly<NormalizedListPropertiesConfig>;\n\t\tparentCommandName: 'bulletedList' | 'numberedList';\n\t\tbuttonLabel: string;\n\t\tstyleGridAriaLabel: string;\n\t\tstyleDefinitions: Array<StyleDefinition>;\n\t}\n) {\n\treturn ( locale: Locale ) => {\n\t\tconst menuView = new MenuBarMenuView( locale );\n\t\tconst listCommand = editor.commands.get( parentCommandName )!;\n\t\tconst listStyleCommand = editor.commands.get( 'listStyle' )!;\n\t\tconst isStyleTypeSupported = getStyleTypeSupportChecker( listStyleCommand );\n\t\tconst styleButtonCreator = getStyleButtonCreator( {\n\t\t\teditor,\n\t\t\tparentCommandName,\n\t\t\tlistStyleCommand\n\t\t} );\n\n\t\tconst configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n\t\tlet filteredDefinitions = styleDefinitions;\n\n\t\tif ( configuredListStylesTypes ) {\n\t\t\tconst listType = listCommand.type as 'numbered' | 'bulleted';\n\t\t\tconst allowedTypes = configuredListStylesTypes[ listType ];\n\n\t\t\tif ( allowedTypes ) {\n\t\t\t\tfilteredDefinitions = styleDefinitions.filter( def => allowedTypes.includes( def.type ) );\n\t\t\t}\n\t\t}\n\n\t\tconst styleButtonViews = filteredDefinitions.filter( isStyleTypeSupported ).map( styleButtonCreator );\n\t\tconst listPropertiesView = new ListPropertiesView( locale, {\n\t\t\tstyleGridAriaLabel,\n\t\t\tenabledProperties: {\n\t\t\t\t...normalizedConfig,\n\n\t\t\t\t// Disable list start index and reversed in the menu bar.\n\t\t\t\tstartIndex: false,\n\t\t\t\treversed: false\n\t\t\t},\n\t\t\tstyleButtonViews\n\t\t} );\n\n\t\tlistPropertiesView.delegate( 'execute' ).to( menuView );\n\n\t\tmenuView.buttonView.set( {\n\t\t\tlabel: buttonLabel,\n\t\t\ticon: parentCommandName === 'bulletedList' ? IconBulletedList : IconNumberedList\n\t\t} );\n\t\tmenuView.panelView.children.add( listPropertiesView );\n\t\tmenuView.bind( 'isEnabled' ).to( listCommand, 'isEnabled' );\n\t\tmenuView.on( 'execute', () => {\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn menuView;\n\t};\n}\n\nfunction getStyleTypeSupportChecker( listStyleCommand: LegacyListStyleCommand | ListStyleCommand ) {\n\tif ( typeof listStyleCommand.isStyleTypeSupported == 'function' ) {\n\t\treturn ( styleDefinition: StyleDefinition ) => listStyleCommand.isStyleTypeSupported( styleDefinition.type );\n\t} else {\n\t\treturn () => true;\n\t}\n}\n\ninterface StyleDefinition {\n\n\t/**\n\t * The label of the style button.\n\t */\n\tlabel: string;\n\n\t/**\n\t * The type of the style button (e.g. \"roman\" or \"circle\").\n\t */\n\ttype: string;\n\n\t/**\n\t * The SVG string of an icon of the style button.\n\t */\n\ticon: string;\n\n\t/**\n\t * The tooltip text of the button (shorter than verbose label).\n\t */\n\ttooltip: string;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ListPropertiesEditing } from './listproperties/listpropertiesediting.js';\nimport { ListPropertiesUI } from './listproperties/listpropertiesui.js';\n\n/**\n * The list properties feature.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:list/listproperties/listpropertiesediting~ListPropertiesEditing list properties\n * editing feature} and the {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */\nexport class ListProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListPropertiesEditing, ListPropertiesUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/checktodolistcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport { getAllListItemBlocks } from '../list/utils/model.js';\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/todolist/todolistediting~TodoListEditing} as\n * the `checkTodoList` editor command.\n */\nexport class CheckTodoListCommand extends Command {\n\t/**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t// Refresh command before executing to be sure all values are up to date.\n\t\t// It is needed when selection has changed before command execution, in the same change block.\n\t\tthis.on( 'execute', () => {\n\t\t\tthis.refresh();\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */\n\tpublic override refresh(): void {\n\t\tconst selectedElements = this._getSelectedItems();\n\n\t\tthis.value = this._getValue( selectedElements );\n\t\tthis.isEnabled = !!selectedElements.length;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\tconst selectedElements = this._getSelectedItems();\n\t\t\tconst value = ( options.forceValue === undefined ) ? !this._getValue( selectedElements ) : options.forceValue;\n\n\t\t\tfor ( const element of selectedElements ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setAttribute( 'todoListChecked', true, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'todoListChecked', element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a value for the command.\n\t */\n\tprivate _getValue( selectedElements: Array<ModelElement> ): boolean {\n\t\treturn selectedElements.every( element => element.getAttribute( 'todoListChecked' ) );\n\t}\n\n\t/**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t */\n\tprivate _getSelectedItems() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\n\t\tconst selectionRange = model.document.selection.getFirstRange()!;\n\t\tconst startElement = selectionRange.start.parent as ModelElement;\n\t\tconst elements: Array<ModelElement> = [];\n\n\t\tif ( schema.checkAttribute( startElement, 'todoListChecked' ) ) {\n\t\t\telements.push( ...getAllListItemBlocks( startElement ) );\n\t\t}\n\n\t\tfor ( const item of selectionRange.getItems( { shallow: true } ) as Iterable<ModelElement> ) {\n\t\t\tif ( schema.checkAttribute( item, 'todoListChecked' ) && !elements.includes( item ) ) {\n\t\t\t\telements.push( ...getAllListItemBlocks( item ) );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/todocheckboxchangeobserver\n */\n\nimport { DomEventObserver, type ViewDocumentDomEventData } from 'ckeditor5/src/engine.js';\n\n/**\n * Observes all to-do list checkboxes state changes.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~EditingView} by {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * @internal\n */\nexport class TodoCheckboxChangeObserver extends DomEventObserver<'change'> {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic readonly domEventType = [ 'change' ] as const;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic onDomEvent( domEvent: Event ): void {\n\t\tif ( domEvent.target ) {\n\t\t\tconst viewTarget = this.view.domConverter.mapDomToView( domEvent.target as HTMLElement );\n\n\t\t\tif (\n\t\t\t\tviewTarget &&\n\t\t\t\tviewTarget.is( 'element', 'input' ) &&\n\t\t\t\tviewTarget.getAttribute( 'type' ) == 'checkbox' &&\n\t\t\t\tviewTarget.findAncestor( { classes: 'todo-list__label' } )\n\t\t\t) {\n\t\t\t\tthis.fire( 'todoCheckboxChange', domEvent );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Fired when the to-do list checkbox is toggled.\n *\n * Introduced by {@link module:list/todolist/todocheckboxchangeobserver~TodoCheckboxChangeObserver}.\n *\n * Note that this event is not available by default. To make it available,\n * {@link module:list/todolist/todocheckboxchangeobserver~TodoCheckboxChangeObserver}\n * needs to be added to {@link module:engine/view/view~EditingView} by the {@link module:engine/view/view~EditingView#addObserver} method.\n *\n * @see module:list/todolist/todocheckboxchangeobserver~TodoCheckboxChangeObserver\n * @eventName module:engine/view/document~ViewDocument#todoCheckboxChange\n * @param data The event data.\n */\nexport type ViewDocumentTodoCheckboxChangeEvent = {\n\tname: 'todoCheckboxChange';\n\targs: [ data: ViewDocumentDomEventData<Event> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/todolistediting\n */\n\nimport {\n\tMatcher,\n\ttype UpcastElementEvent,\n\ttype Model,\n\ttype MatcherPattern,\n\ttype ViewElement,\n\ttype ViewDocumentKeyDownEvent,\n\ttype ViewDocumentArrowKeyEvent,\n\ttype MapperViewToModelPositionEvent,\n\ttype ViewDocumentFragment,\n\ttype ModelSelectionChangeRangeEvent,\n\ttype ModelDocumentFragment,\n\ttype ModelElement\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tgetCode,\n\tparseKeystroke,\n\tgetLocalizedArrowKeyCodeDirection,\n\ttype GetCallback,\n\ttype Locale\n} from 'ckeditor5/src/utils.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { getAllListItemBlocks, isFirstBlockOfListItem, isListItemBlock } from '../list/utils/model.js';\nimport {\n\tListEditing,\n\ttype ListEditingCheckElementEvent,\n\ttype ListEditingPostFixerEvent\n} from '../list/listediting.js';\nimport { ListCommand } from '../list/listcommand.js';\nimport { CheckTodoListCommand } from './checktodolistcommand.js';\nimport { TodoCheckboxChangeObserver, type ViewDocumentTodoCheckboxChangeEvent } from './todocheckboxchangeobserver.js';\n\nconst ITEM_TOGGLE_KEYSTROKE = /* #__PURE__ */ parseKeystroke( 'Ctrl+Enter' );\n\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/list/listediting~ListEditing list editing plugin}\n * and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n */\nexport class TodoListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst editing = editor.editing;\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\t\tconst multiBlock = editor.config.get( 'list.multiBlock' );\n\t\tconst elementName = multiBlock ? 'paragraph' : 'listItem';\n\n\t\teditor.commands.add( 'todoList', new ListCommand( editor, 'todo' ) );\n\t\teditor.commands.add( 'checkTodoList', new CheckTodoListCommand( editor ) );\n\n\t\tediting.view.addObserver( TodoCheckboxChangeObserver );\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'todoListChecked' } );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\t// Don't allow `todoListChecked` attribute on elements which are not todo list items.\n\t\t\tif ( !item.getAttribute( 'listItemId' ) || item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'todoListChecked' );\n\n\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t\t\t// Upcast of to-do list item is based on a checkbox at the beginning of a <li> to keep compatibility with markdown input.\n\t\t\tdispatcher.on( 'element:input', todoItemInputConverter() );\n\n\t\t\t// Priority is set to low to allow generic list item converter to run first.\n\t\t\tdispatcher.on( 'element:li', todoListItemUpcastConverter(), {\n\t\t\t\tpriority: 'low'\n\t\t\t} );\n\n\t\t\t// Consume other elements that are normally generated in data downcast, so they won't get captured by GHS.\n\t\t\tdispatcher.on( 'element:label', elementUpcastConsumingConverter(\n\t\t\t\t{ name: 'label', classes: 'todo-list__label' }\n\t\t\t) );\n\t\t\tdispatcher.on( 'element:label', elementUpcastConsumingConverter(\n\t\t\t\t{ name: 'label', classes: [ 'todo-list__label', 'todo-list__label_without-description' ] }\n\t\t\t) );\n\t\t\tdispatcher.on( 'element:span', elementUpcastConsumingConverter(\n\t\t\t\t{ name: 'span', classes: 'todo-list__label__description' }\n\t\t\t) );\n\n\t\t\tdispatcher.on( 'element:ul', attributeUpcastConsumingConverter(\n\t\t\t\t{ name: 'ul', classes: 'todo-list' }\n\t\t\t) );\n\t\t} );\n\n\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t\t\tmodel: elementName,\n\t\t\tview: ( element, { writer } ) => {\n\t\t\t\tif ( isDescriptionBlock( element, listEditing.getListAttributeNames() ) ) {\n\t\t\t\t\treturn writer.createContainerElement( 'span', { class: 'todo-list__label__description' } );\n\t\t\t\t}\n\t\t\t},\n\t\t\tconverterPriority: 'highest'\n\t\t} );\n\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'list',\n\t\t\tattributeName: 'listType',\n\n\t\t\tsetAttributeOnDowncast( writer, value, element ) {\n\t\t\t\tif ( value == 'todo' ) {\n\t\t\t\t\twriter.addClass( 'todo-list', element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeClass( 'todo-list', element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'itemMarker',\n\t\t\tattributeName: 'todoListChecked',\n\n\t\t\tcreateElement( writer, modelElement, { dataPipeline } ) {\n\t\t\t\tif ( modelElement.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst viewElement = writer.createUIElement( 'input', {\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t...( modelElement.getAttribute( 'todoListChecked' ) ?\n\t\t\t\t\t\t{ checked: 'checked' } :\n\t\t\t\t\t\tnull\n\t\t\t\t\t),\n\t\t\t\t\t...( dataPipeline ?\n\t\t\t\t\t\t{ disabled: 'disabled' } :\n\t\t\t\t\t\t{ tabindex: '-1' }\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\tif ( dataPipeline ) {\n\t\t\t\t\treturn viewElement;\n\t\t\t\t}\n\n\t\t\t\tconst wrapper = writer.createContainerElement( 'span', { contenteditable: 'false' }, viewElement );\n\n\t\t\t\twrapper.getFillerOffset = () => null;\n\n\t\t\t\treturn wrapper;\n\t\t\t},\n\n\t\t\tcanWrapElement( modelElement ) {\n\t\t\t\treturn isDescriptionBlock( modelElement, listEditing.getListAttributeNames() );\n\t\t\t},\n\n\t\t\tcreateWrapperElement( writer, modelElement, { dataPipeline } ) {\n\t\t\t\tconst classes = [ 'todo-list__label' ];\n\n\t\t\t\tif ( !isDescriptionBlock( modelElement, listEditing.getListAttributeNames() ) ) {\n\t\t\t\t\tclasses.push( 'todo-list__label_without-description' );\n\t\t\t\t}\n\n\t\t\t\treturn writer.createAttributeElement( dataPipeline ? 'label' : 'span', {\n\t\t\t\t\tclass: classes.join( ' ' )\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\t// Verifies if a to-do list block requires reconversion of a first item downcasted as an item description.\n\t\tlistEditing.on<ListEditingCheckElementEvent>( 'checkElement', ( evt, { modelElement, viewElement } ) => {\n\t\t\tconst isFirstTodoModelParagraphBlock = isDescriptionBlock( modelElement, listEditing.getListAttributeNames() );\n\t\t\tconst hasViewClass = viewElement.hasClass( 'todo-list__label__description' );\n\n\t\t\tif ( hasViewClass != isFirstTodoModelParagraphBlock ) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Verifies if a to-do list block requires reconversion of a checkbox element\n\t\t// (for example there is a new paragraph inserted as a first block of a list item).\n\t\tlistEditing.on<ListEditingCheckElementEvent>( 'checkElement', ( evt, { modelElement, viewElement } ) => {\n\t\t\tconst isFirstTodoModelItemBlock = modelElement.getAttribute( 'listType' ) == 'todo' && isFirstBlockOfListItem( modelElement );\n\n\t\t\tlet hasViewItemMarker = false;\n\t\t\tconst viewWalker = editor.editing.view.createPositionBefore( viewElement ).getWalker( { direction: 'backward' } );\n\n\t\t\tfor ( const { item } of viewWalker ) {\n\t\t\t\tif ( item.is( 'element' ) && editor.editing.mapper.toModelElement( item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( item.is( 'element', 'input' ) && item.getAttribute( 'type' ) == 'checkbox' ) {\n\t\t\t\t\thasViewItemMarker = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( hasViewItemMarker != isFirstTodoModelItemBlock ) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Make sure that all blocks of the same list item have the same todoListChecked attribute.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node, previousNodeInList } of listNodes ) {\n\t\t\t\t// This is a first item of a nested list.\n\t\t\t\tif ( !previousNodeInList ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( previousNodeInList.getAttribute( 'listItemId' ) != node.getAttribute( 'listItemId' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst previousHasAttribute = previousNodeInList.hasAttribute( 'todoListChecked' );\n\t\t\t\tconst nodeHasAttribute = node.hasAttribute( 'todoListChecked' );\n\n\t\t\t\tif ( nodeHasAttribute && !previousHasAttribute ) {\n\t\t\t\t\twriter.removeAttribute( 'todoListChecked', node );\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t\telse if ( !nodeHasAttribute && previousHasAttribute ) {\n\t\t\t\t\twriter.setAttribute( 'todoListChecked', true, node );\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Make sure that todoListChecked attribute is only present for to-do list items.\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tconst changes = model.document.differ.getChanges();\n\t\t\tlet wasFixed = false;\n\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'attribute' && change.attributeKey == 'listType' ) {\n\t\t\t\t\tconst element = change.range.start.nodeAfter!;\n\n\t\t\t\t\tif ( change.attributeOldValue == 'todo' && element.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\t\twriter.removeAttribute( 'todoListChecked', element );\n\t\t\t\t\t\twasFixed = true;\n\t\t\t\t\t}\n\t\t\t\t} else if ( change.type == 'insert' && change.name != '$text' ) {\n\t\t\t\t\tfor ( const { item } of writer.createRangeOn( change.position.nodeAfter! ) ) {\n\t\t\t\t\t\tif ( item.is( 'element' ) && item.getAttribute( 'listType' ) != 'todo' && item.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\t\t\twriter.removeAttribute( 'todoListChecked', item );\n\t\t\t\t\t\t\twasFixed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn wasFixed;\n\t\t} );\n\n\t\t// Toggle check state of selected to-do list items on keystroke.\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( editing.view.document, 'keydown', ( evt, data ) => {\n\t\t\tif ( getCode( data ) === ITEM_TOGGLE_KEYSTROKE ) {\n\t\t\t\teditor.execute( 'checkTodoList' );\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// Toggle check state of a to-do list item clicked on the checkbox.\n\t\tthis.listenTo<ViewDocumentTodoCheckboxChangeEvent>( editing.view.document, 'todoCheckboxChange', ( evt, data ) => {\n\t\t\tconst viewTarget = data.target;\n\n\t\t\tif ( !viewTarget || !viewTarget.is( 'element', 'input' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewPositionAfter = editing.view.createPositionAfter( viewTarget );\n\t\t\tconst modelPositionAfter = editing.mapper.toModelPosition( viewPositionAfter );\n\t\t\tconst modelElement = modelPositionAfter.parent;\n\n\t\t\tif ( modelElement && isListItemBlock( modelElement ) && modelElement.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\t\tthis._handleCheckmarkChange( modelElement );\n\t\t\t}\n\t\t} );\n\n\t\t// Jump at the start/end of the next node on right arrow key press, when selection is before the checkbox.\n\t\t//\n\t\t// <blockquote><p>Foo{}</p></blockquote>\n\t\t// <ul><li><checkbox/>Bar</li></ul>\n\t\t//\n\t\t// press: `->`\n\t\t//\n\t\t// <blockquote><p>Foo</p></blockquote>\n\t\t// <ul><li><checkbox/>{}Bar</li></ul>\n\t\t//\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tediting.view.document,\n\t\t\t'arrowKey',\n\t\t\tjumpOverCheckmarkOnSideArrowKeyPress( model, editor.locale ),\n\t\t\t{ context: '$text' }\n\t\t);\n\n\t\t// Map view positions inside the checkbox and wrappers to the position in the first block of the list item.\n\t\tthis.listenTo<MapperViewToModelPositionEvent>( editing.mapper, 'viewToModelPosition', ( evt, data ) => {\n\t\t\tconst viewParent = data.viewPosition.parent as ViewElement;\n\n\t\t\tconst isStartOfListItem = viewParent.is( 'attributeElement', 'li' ) && data.viewPosition.offset == 0;\n\t\t\tconst isStartOfListLabel = isLabelElement( viewParent ) && data.viewPosition.offset <= 1;\n\n\t\t\tconst isInInputWrapper = viewParent.is( 'element', 'span' ) &&\n\t\t\t\tviewParent.getAttribute( 'contenteditable' ) == 'false' &&\n\t\t\t\tisLabelElement( viewParent.parent );\n\n\t\t\tif ( !isStartOfListItem && !isStartOfListLabel && !isInInputWrapper ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeAfter = data.modelPosition!.nodeAfter;\n\n\t\t\tif ( nodeAfter && nodeAfter.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\t\tdata.modelPosition = model.createPositionAt( nodeAfter, 0 );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis._initAriaAnnouncements();\n\t}\n\n\t/**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */\n\tprivate _handleCheckmarkChange( listItem: ModelElement ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst previousSelectionRanges = Array.from( model.document.selection.getRanges() );\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( listItem, 'end' );\n\t\t\teditor.execute( 'checkTodoList' );\n\t\t\twriter.setSelection( previousSelectionRanges );\n\t\t} );\n\t}\n\n\t/**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */\n\tprivate _initAriaAnnouncements( ) {\n\t\tconst { model, ui, t } = this.editor;\n\t\tlet lastFocusedCodeBlock: ModelElement | ModelDocumentFragment | null = null;\n\n\t\tif ( !ui ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.document.selection.on<ModelSelectionChangeRangeEvent>( 'change:range', () => {\n\t\t\tconst focusParent = model.document.selection.focus!.parent;\n\t\t\tconst lastElementIsTodoList = isTodoListItemElement( lastFocusedCodeBlock );\n\t\t\tconst currentElementIsTodoList = isTodoListItemElement( focusParent );\n\n\t\t\tif ( lastElementIsTodoList && !currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Leaving a to-do list' ) );\n\t\t\t} else if ( !lastElementIsTodoList && currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Entering a to-do list' ) );\n\t\t\t}\n\n\t\t\tlastFocusedCodeBlock = focusParent;\n\t\t} );\n\t}\n}\n\n/**\n * Returns an upcast converter for to-do list items.\n */\nfunction todoListItemUpcastConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, schema } = conversionApi;\n\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Group to-do list items by their listItemId attribute to ensure that all items of the same list item have the same checked state.\n\t\tconst groupedItems = Array\n\t\t\t.from( data.modelRange.getItems( { shallow: true } ) )\n\t\t\t.filter( ( item ): item is ModelElement =>\n\t\t\t\titem.getAttribute( 'listType' ) === 'todo' && schema.checkAttribute( item, 'listItemId' )\n\t\t\t)\n\t\t\t.reduce( ( acc, item ) => {\n\t\t\t\tconst listItemId = item.getAttribute( 'listItemId' ) as string;\n\n\t\t\t\tif ( !acc.has( listItemId ) ) {\n\t\t\t\t\tacc.set( listItemId, getAllListItemBlocks( item ) );\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, new Map<string, Array<ModelElement>>() );\n\n\t\t// During the upcast, we need to ensure that all items of the same list have the same checked state. From time to time\n\t\t// the checked state of the items can be different when the user pastes content from the clipboard with <input type=\"checkbox\">\n\t\t// that has checked state set to true. In such cases, we need to ensure that all items of the same list have the same checked state.\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/15602\n\t\tfor ( const [ , items ] of groupedItems.entries() ) {\n\t\t\tif ( items.some( item => item.getAttribute( 'todoListChecked' ) ) ) {\n\t\t\t\tfor ( const item of items ) {\n\t\t\t\t\twriter.setAttribute( 'todoListChecked', true, item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Returns an upcast converter that detects a to-do list checkbox and marks the list item as a to-do list.\n */\nfunction todoItemInputConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst modelCursor = data.modelCursor;\n\t\tconst modelItem = modelCursor.parent as ModelElement;\n\t\tconst viewItem = data.viewItem;\n\n\t\tif ( !conversionApi.consumable.test( viewItem, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewItem.getAttribute( 'type' ) != 'checkbox' || !modelCursor.isAtStart || !modelItem.hasAttribute( 'listType' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconversionApi.consumable.consume( viewItem, { name: true } );\n\n\t\tconst writer = conversionApi.writer;\n\n\t\twriter.setAttribute( 'listType', 'todo', modelItem );\n\n\t\tif ( data.viewItem.hasAttribute( 'checked' ) ) {\n\t\t\twriter.setAttribute( 'todoListChecked', true, modelItem );\n\t\t}\n\n\t\tdata.modelRange = writer.createRange( modelCursor );\n\t};\n}\n\n/**\n * Returns an upcast converter that consumes element matching the given matcher pattern.\n */\nfunction elementUpcastConsumingConverter( matcherPattern: MatcherPattern ): GetCallback<UpcastElementEvent> {\n\tconst matcher = new Matcher( matcherPattern );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\tif ( !matcherResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.viewItem, matcherResult.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t};\n}\n\n/**\n * Returns an upcast converter that consumes attributes matching the given matcher pattern.\n */\nfunction attributeUpcastConsumingConverter( matcherPattern: MatcherPattern ): GetCallback<UpcastElementEvent> {\n\tconst matcher = new Matcher( matcherPattern );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\tif ( !matcherResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst match = matcherResult.match;\n\n\t\tmatch.name = false;\n\t\tconversionApi.consumable.consume( data.viewItem, match );\n\t};\n}\n\n/**\n * Returns true if the given list item block should be converted as a description block of a to-do list item.\n */\nfunction isDescriptionBlock( modelElement: ModelElement, listAttributeNames: Array<string> ): boolean {\n\treturn ( modelElement.is( 'element', 'paragraph' ) || modelElement.is( 'element', 'listItem' ) ) &&\n\t\tmodelElement.getAttribute( 'listType' ) == 'todo' &&\n\t\tisFirstBlockOfListItem( modelElement ) &&\n\t\thasOnlyListAttributes( modelElement, listAttributeNames );\n}\n\n/**\n * Returns true if only attributes from the given list are present on the model element.\n */\nfunction hasOnlyListAttributes( modelElement: ModelElement, attributeNames: Array<string> ): boolean {\n\tfor ( const attributeKey of modelElement.getAttributeKeys() ) {\n\t\t// Ignore selection attributes stored on block elements.\n\t\tif ( attributeKey.startsWith( 'selection:' ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( !attributeNames.includes( attributeKey ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Jump at the start and end of a to-do list item.\n */\nfunction jumpOverCheckmarkOnSideArrowKeyPress( model: Model, locale: Locale ): GetCallback<ViewDocumentArrowKeyEvent> {\n\treturn ( eventInfo, domEventData ) => {\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( domEventData.keyCode, locale.contentLanguageDirection );\n\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = selection.getFirstPosition()!;\n\t\tconst parent = position.parent as ModelElement;\n\n\t\t// Right arrow before a to-do list item.\n\t\tif ( direction == 'right' && position.isAtEnd ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionAfter( parent ), 'forward' );\n\n\t\t\tif ( !newRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newRangeParent = newRange.start.parent;\n\n\t\t\tif ( newRangeParent && isListItemBlock( newRangeParent ) && newRangeParent.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\tdomEventData.stopPropagation();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\t\t}\n\t\t// Left arrow at the beginning of a to-do list item.\n\t\telse if ( direction == 'left' && position.isAtStart && isListItemBlock( parent ) && parent.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionBefore( parent ), 'backward' );\n\n\t\t\tif ( !newRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t};\n}\n\n/**\n * Returns true if the given element is a label element of a to-do list item.\n */\nfunction isLabelElement( viewElement: ViewElement | ViewDocumentFragment | null ): boolean {\n\treturn !!viewElement && viewElement.is( 'attributeElement' ) && viewElement.hasClass( 'todo-list__label' );\n}\n\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */\nfunction isTodoListItemElement( element: ModelElement | ModelDocumentFragment | null ): boolean {\n\tif ( !element ) {\n\t\treturn false;\n\t}\n\n\tif ( !element.is( 'element', 'paragraph' ) && !element.is( 'element', 'listItem' ) ) {\n\t\treturn false;\n\t}\n\n\treturn element.getAttribute( 'listType' ) == 'todo';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/todolistui\n */\n\nimport { createUIComponents } from '../list/utils.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { IconTodoList } from 'ckeditor5/src/icons.js';\n\n/**\n * The to-do list UI feature. It introduces the `'todoList'` button that\n * allows to convert elements to and from to-do list items and to indent or outdent them.\n */\nexport class TodoListUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoListUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst t = this.editor.t;\n\n\t\tcreateUIComponents( this.editor, 'todoList', t( 'To-do List' ), IconTodoList );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist\n */\n\nimport { TodoListEditing } from './todolist/todolistediting.js';\nimport { TodoListUI } from './todolist/todolistui.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport '../theme/todolist.css';\n\n/**\n * The to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/todolist/todolistediting~TodoListEditing to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */\nexport class TodoList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TodoListEditing, TodoListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacylistcommand\n */\n\nimport type { ModelElement, ModelNode, ModelSchema } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport { first } from 'ckeditor5/src/utils.js';\nimport { type ListType } from '../list/listediting.js';\n\n/**\n * The list command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */\nexport class LegacyListCommand extends Command {\n\t/**\n\t * The type of the list created by the command.\n\t */\n\tpublic readonly type: ListType;\n\n\t/**\n\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t *\n\t * @readonly\n\t */\n\tdeclare public value: boolean;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */\n\tconstructor( editor: Editor, type: ListType ) {\n\t\tsuper( editor );\n\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false`, it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n\n\t\t// If we are turning off items, we are going to rename them to paragraphs.\n\n\t\tmodel.change( writer => {\n\t\t\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n\t\t\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\n\t\t\tif ( turnOff ) {\n\t\t\t\t// Start from the model item that is just after the last turned-off item.\n\t\t\t\tlet next = blocks[ blocks.length - 1 ].nextSibling as ModelElement;\n\t\t\t\tlet currentIndent = Number.POSITIVE_INFINITY;\n\t\t\t\tlet changes = [];\n\n\t\t\t\t// Correct indent of all items after the last turned off item.\n\t\t\t\t// Rules that should be followed:\n\t\t\t\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t\t\t\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t\t\t\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t\t\t\t//    should not end up as a child of any of list items that they were not children of before.\n\t\t\t\t// 3. All other items should have their indent changed relatively to it's parent.\n\t\t\t\t//\n\t\t\t\t// For example:\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t// 3        * --------\t\t\t<-- this is turned off.\n\t\t\t\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t\t\t\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t\t\t\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t\t\t\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t\t\t\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t\t\t\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t\t\t\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// After turning off 3 the list becomes:\n\t\t\t\t//\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t//\n\t\t\t\t// 3  --------\n\t\t\t\t//\n\t\t\t\t// 4  * --------\n\t\t\t\t// 5     * --------\n\t\t\t\t// 6  * --------\n\t\t\t\t// 7     * --------\n\t\t\t\t// 8  * --------\n\t\t\t\t// 9     * --------\n\t\t\t\t// 10       * --------\n\t\t\t\t// 11       * --------\n\t\t\t\t// 12 * --------\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t\t\t\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t\t\t\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t\t\t\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t\t\t\t// less conversion (faster).\n\t\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) !== 0 ) {\n\t\t\t\t\t// Check each next list item, as long as its indent is bigger than 0.\n\t\t\t\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\t\t\t\tconst indent = next.getAttribute( 'listIndent' ) as number;\n\n\t\t\t\t\t// We check if that's item indent is lower as current relative indent.\n\t\t\t\t\tif ( indent < currentIndent ) {\n\t\t\t\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\t\t\t\tcurrentIndent = indent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix indent relatively to current relative indent.\n\t\t\t\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\t\t\t\tconst newIndent = indent - currentIndent;\n\n\t\t\t\t\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\n\t\t\t\t\t// reverse the changes so the last item is changed first.\n\t\t\t\t\t// This is to keep model in correct state all the time.\n\t\t\t\t\tchanges.push( { element: next, listIndent: newIndent } );\n\n\t\t\t\t\t// Find next item.\n\t\t\t\t\tnext = next.nextSibling as ModelElement;\n\t\t\t\t}\n\n\t\t\t\tchanges = changes.reverse();\n\n\t\t\t\tfor ( const item of changes ) {\n\t\t\t\t\twriter.setAttribute( 'listIndent', item.listIndent, item.element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\n\t\t\t// Changing one nested list item to other type should also trigger changing all its siblings so the\n\t\t\t// whole nested list is of the same type.\n\t\t\t// Example (assume changing to numbered list):\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ---[--\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t// * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n\t\t\t//   * ---]--\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\tif ( !turnOff ) {\n\t\t\t\t// Find lowest indent among selected items. This will be indicator what is the indent of\n\t\t\t\t// top-most list affected by the command.\n\t\t\t\tlet lowestIndent = Number.POSITIVE_INFINITY;\n\n\t\t\t\tfor ( const item of blocks ) {\n\t\t\t\t\tif ( item.is( 'element', 'listItem' ) && ( item.getAttribute( 'listIndent' ) as number ) < lowestIndent ) {\n\t\t\t\t\t\tlowestIndent = item.getAttribute( 'listIndent' ) as number;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do not execute the fix for top-level lists.\n\t\t\t\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n\n\t\t\t\t// Fix types of list items that are \"before\" the selected blocks.\n\t\t\t\t_fixType( blocks, true, lowestIndent );\n\n\t\t\t\t// Fix types of list items that are \"after\" the selected blocks.\n\t\t\t\t_fixType( blocks, false, lowestIndent );\n\t\t\t}\n\n\t\t\t// Phew! Now it will be easier :).\n\t\t\t// For each block element that was in the selection, we will either: turn it to list item,\n\t\t\t// turn it to paragraph, or change it's type. Or leave it as it is.\n\t\t\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\n\t\t\tfor ( const element of blocks.reverse() ) {\n\t\t\t\tif ( turnOff && element.name == 'listItem' ) {\n\t\t\t\t\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n\t\t\t\t\t// List item specific attributes are removed by post fixer.\n\t\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\t} else if ( !turnOff && element.name != 'listItem' ) {\n\t\t\t\t\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n\t\t\t\t\t// The order of operations is important to keep model in correct state.\n\t\t\t\t\twriter.setAttributes( { listType: this.type, listIndent: 0 }, element );\n\t\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t// We are turning on and the element is a `listItem` but has different type - change it's type and\n\t\t\t\t\t// type of it's all siblings that have same indent.\n\t\t\t\t\twriter.setAttribute( 'listType', this.type, element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Event fired by the {@link #execute} method.\n\t\t\t *\n\t\t\t * It allows to execute an action after executing the {@link ~ListCommand#execute} method, for example adjusting\n\t\t\t * attributes of changed blocks.\n\t\t\t *\n\t\t\t * @protected\n\t\t\t * @event _executeCleanup\n\t\t\t */\n\t\t\tthis.fire( '_executeCleanup', blocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue(): boolean {\n\t\t// Check whether closest `listItem` ancestor of the position has a correct type.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\treturn !!listItem && listItem.is( 'element', 'listItem' ) && listItem.getAttribute( 'listType' ) == this.type;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Otherwise, check if list item can be inserted at the position start.\n\t\treturn checkCanBecomeListItem( firstBlock, schema );\n\t}\n}\n\n/**\n * Helper function used when one or more list item have their type changed. Fixes type of other list items\n * that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n * not to duplicated code, as same fix has to be performed before and after selection.\n *\n * @param blocks Blocks that are in selection.\n * @param isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n * or blocks after last selected block (`false`).\n * @param lowestIndent Lowest indent among selected blocks.\n */\nfunction _fixType(\n\tblocks: Array<ModelNode>,\n\tisBackward: boolean,\n\tlowestIndent: number\n) {\n\t// We need to check previous sibling of first changed item and next siblings of last changed item.\n\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\n\n\tif ( startingItem.is( 'element', 'listItem' ) ) {\n\t\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t// During processing items, keeps the lowest indent of already processed items.\n\t\t// This saves us from changing too many items.\n\t\t// Following example is for going forward as it is easier to read, however same applies to going backward.\n\t\t// * ------\n\t\t//   * ------\n\t\t//     * --[---\n\t\t//   * ------\t\t<-- `lowestIndent` should be 1\n\t\t//     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n\t\t//     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n\t\t//     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n\t\t// * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\t\tlet currentIndent = startingItem.getAttribute( 'listIndent' ) as number;\n\n\t\t// Look back until a list item with indent lower than reference `lowestIndent`.\n\t\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\n\t\twhile ( item && item.is( 'element', 'listItem' ) && ( item.getAttribute( 'listIndent' ) as number ) >= lowestIndent ) {\n\t\t\tif ( currentIndent > ( item.getAttribute( 'listIndent' ) as number ) ) {\n\t\t\t\tcurrentIndent = item.getAttribute( 'listIndent' ) as number;\n\t\t\t}\n\n\t\t\t// Found an item that is in the same nested sublist.\n\t\t\tif ( item.getAttribute( 'listIndent' ) == currentIndent ) {\n\t\t\t\t// Just add the item to selected blocks like it was selected by the user.\n\t\t\t\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\n\t\t\t}\n\n\t\t\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t}\n\t}\n}\n\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */\nfunction checkCanBecomeListItem( block: ModelElement, schema: ModelSchema ) {\n\treturn schema.checkChild( block.parent as any, 'listItem' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacyindentcommand\n */\n\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\n/**\n * The list indent command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */\nexport class LegacyIndentCommand extends Command {\n\t/**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */\n\tprivate readonly _indentBy: 1 | -1;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command will outdent a list item.\n\t */\n\tconstructor( editor: Editor, indentDirection: 'forward' | 'backward' ) {\n\t\tsuper( editor );\n\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling as ModelElement | null;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile (\n\t\t\t\tnext && next.name == 'listItem' &&\n\t\t\t\t( next.getAttribute( 'listIndent' ) as number ) > ( lastItem.getAttribute( 'listIndent' ) as number )\n\t\t\t) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling as ModelElement | null;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = ( item.getAttribute( 'listIndent' ) as number ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// It allows to execute an action after executing the `~IndentCommand#execute` method, for example adjusting\n\t\t\t// attributes of changed list items.\n\t\t\tthis.fire( '_executeCleanup', itemsToChange );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' ) as number;\n\t\t\tconst type = listItem.getAttribute( 'listType' ) as string;\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'element', 'listItem' ) && ( prev.getAttribute( 'listIndent' ) as number ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacyutils\n */\n\nimport {\n\tModelTreeWalker,\n\tgetViewFillerOffset,\n\ttype DowncastConversionApi,\n\ttype ViewDowncastWriter,\n\ttype ModelElement,\n\ttype ModelItem,\n\ttype Model,\n\ttype ModelPosition,\n\ttype ViewContainerElement,\n\ttype ViewElement,\n\ttype ViewItem,\n\ttype ViewPosition\n} from 'ckeditor5/src/engine.js';\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ViewContainerElement}.\n *\n * @internal\n * @param writer The writer instance.\n */\nexport function createViewListItemElement( writer: ViewDowncastWriter ): ViewContainerElement {\n\tconst viewItem = writer.createContainerElement( 'li' );\n\n\tviewItem.getFillerOffset = getListItemFillerOffset;\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (`<li>`) with the model `listItem` element.\n * The function then returns the created view list item (`<li>`).\n *\n * @internal\n * @param modelItem Model list item.\n * @param conversionApi Conversion interface.\n * @returns View list element.\n */\nexport function generateLiInUl( modelItem: ModelItem, conversionApi: DowncastConversionApi ): ViewContainerElement {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'listType' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement( viewWriter );\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\n\tviewWriter.insert( viewWriter.createPositionAt( viewList, 0 ), viewItem );\n\n\tmapper.bindElements( modelItem as any, viewItem );\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @internal\n * @param modelItem Model list item.\n * @param injectedItem\n * @param conversionApi Conversion interface.\n * @param model The model instance.\n */\nexport function injectViewList(\n\tmodelItem: ModelElement,\n\tinjectedItem: ViewContainerElement,\n\tconversionApi: DowncastConversionApi,\n\tmodel: Model\n): void {\n\tconst injectedList = injectedItem.parent as ViewElement;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// The position where the view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\n\t// 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n\t// that is a \"parent\" or \"sibling\" of the injected model item.\n\t// If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem.previousSibling, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: modelItem.getAttribute( 'listIndent' ) as number\n\t} );\n\tconst prevItem = modelItem.previousSibling as ModelElement | null;\n\n\tif ( refItem && refItem.getAttribute( 'listIndent' ) == modelItem.getAttribute( 'listIndent' ) ) {\n\t\t// There is a list item with the same indent - we found the same-level sibling.\n\t\t// Break the list after it. The inserted view item will be added in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem )!;\n\t\tinsertPosition = viewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with the same indent. Check the previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have a lower indent.\n\t\t\t// It means that the inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionAt( prevItem, 'end' ) );\n\n\t\t\t// There could be some not mapped elements (eg. span in to-do list) but we need to insert\n\t\t\t// a nested list directly inside the li element.\n\t\t\tconst mappedViewAncestor = mapper.findMappedViewAncestor( insertPosition );\n\t\t\tconst nestedList = findNestedList( mappedViewAncestor );\n\n\t\t\t// If there already is some nested list, then use it's position.\n\t\t\tif ( nestedList ) {\n\t\t\t\tinsertPosition = viewWriter.createPositionBefore( nestedList );\n\t\t\t} else {\n\t\t\t\t// Else just put new list on the end of list item content.\n\t\t\t\tinsertPosition = viewWriter.createPositionAt( mappedViewAncestor, 'end' );\n\t\t\t}\n\t\t} else {\n\t\t\t// The previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at the mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of the injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem )!;\n\n\t\tconst walkerBoundaries = viewWriter.createRange( viewWriter.createPositionAt( prevView, 0 ), insertPosition );\n\t\tconst walker = walkerBoundaries.getWalker( { ignoreElementEnd: true } );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'element', 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( viewWriter.createPositionBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent as ViewElement;\n\n\t\t\t\tconst targetPosition = viewWriter.createPositionAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore!, targetPosition.nodeAfter! );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( viewList ), targetPosition );\n\n\t\t\t\t// This is bad, but those lists will be removed soon anyway.\n\t\t\t\t( walker as any )._position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'element', 'ul' ) || nextViewList.is( 'element', 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() as Iterable<ViewElement> ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif (\n\t\t\t\t\tmodelChild &&\n\t\t\t\t\t( modelChild.getAttribute( 'listIndent' ) as number ) > ( modelItem.getAttribute( 'listIndent' ) as number )\n\t\t\t\t) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move(\n\t\t\t\t\tviewWriter.createRangeOn( lastSubChild.parent as any ),\n\t\t\t\t\tviewWriter.createPositionAt( injectedItem, 'end' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge the inserted view list with its possible neighbor lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling! );\n\tmergeViewLists( viewWriter, injectedList.previousSibling!, injectedList );\n}\n\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @internal\n * @param viewWriter The writer instance.\n * @param firstList The first element to compare.\n * @param secondList The second element to compare.\n * @returns The position after merge or `null` when there was no merge.\n */\nexport function mergeViewLists(\n\tviewWriter: ViewDowncastWriter,\n\tfirstList: ViewItem,\n\tsecondList: ViewItem\n): ViewPosition | null;\n\nexport function mergeViewLists(\n\tviewWriter: ViewDowncastWriter,\n\tfirstList: any,\n\tsecondList: any\n): ViewPosition | null {\n\t// Check if two lists are going to be merged.\n\tif ( !firstList || !secondList || ( firstList.name != 'ul' && firstList.name != 'ol' ) ) {\n\t\treturn null;\n\t}\n\n\t// Both parameters are list elements, so compare types now.\n\tif ( firstList.name != secondList.name || firstList.getAttribute( 'class' ) !== secondList.getAttribute( 'class' ) ) {\n\t\treturn null;\n\t}\n\n\treturn viewWriter.mergeContainers( viewWriter.createPositionAfter( firstList ) );\n}\n\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @internal\n */\nexport function positionAfterUiElements( viewPosition: ViewPosition ): ViewPosition {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @internal\n * @param options Search criteria.\n * @param options.sameIndent Whether the sought sibling should have the same indentation.\n * @param options.smallerIndent Whether the sought sibling should have a smaller indentation.\n * @param options.listIndent The reference indentation.\n * @param options.direction Walking direction.\n */\nexport function getSiblingListItem(\n\tmodelItem: ModelItem | null,\n\toptions: {\n\t\tsameIndent?: boolean;\n\t\tsmallerIndent?: boolean;\n\t\tlistIndent?: number;\n\t\tdirection?: 'forward' | 'backward';\n\t}\n): ModelElement | null {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\tconst indent = options.listIndent;\n\n\tlet item: any = modelItem;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'listIndent' ) as number;\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent as number > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\tif ( options.direction === 'forward' ) {\n\t\t\titem = item.nextSibling;\n\t\t} else {\n\t\t\titem = item.previousSibling;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a first list view element that is direct child of the given view element.\n *\n * @internal\n */\nexport function findNestedList( viewElement: ViewElement ): ViewElement | null {\n\tfor ( const node of ( viewElement.getChildren() as Iterable<ViewElement> ) ) {\n\t\tif ( node.name == 'ul' || node.name == 'ol' ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns an array with all `listItem` elements that represent the same list.\n *\n * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n *\n * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n *\n * @internal\n * @param position Starting position.\n * @param direction Walking direction.\n */\nexport function getSiblingNodes( position: ModelPosition, direction: 'forward' | 'backward' ): Array<ModelElement> {\n\tconst items: Array<ModelElement> = [];\n\tconst listItem = position.parent as ModelElement;\n\tconst walkerOptions = {\n\t\tignoreElementEnd: false,\n\t\tstartPosition: position,\n\t\tshallow: true,\n\t\tdirection\n\t};\n\tconst limitIndent = listItem.getAttribute( 'listIndent' ) as number;\n\tconst nodes = [ ...new ModelTreeWalker( walkerOptions ) ]\n\t\t.filter( value => value.item.is( 'element' ) )\n\t\t.map( value => value.item );\n\n\tfor ( const element of nodes ) {\n\t\t// If found something else than `listItem`, we're out of the list scope.\n\t\tif ( !element.is( 'element', 'listItem' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// If current parsed item has lower indent that element that the element that was a starting point,\n\t\t// it means we left a nested list. Abort searching items.\n\t\t//\n\t\t// ■ List item 1.       [listIndent=0]\n\t\t//     ○ List item 2.[] [listIndent=1], limitIndent = 1,\n\t\t//     ○ List item 3.   [listIndent=1]\n\t\t// ■ List item 4.       [listIndent=0]\n\t\t//\n\t\t// Abort searching when leave nested list.\n\t\tif ( ( element.getAttribute( 'listIndent' ) as number ) < limitIndent ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ■ List item 1.[]     [listIndent=0] limitIndent = 0,\n\t\t//     ○ List item 2.   [listIndent=1]\n\t\t//     ○ List item 3.   [listIndent=1]\n\t\t// ■ List item 4.       [listIndent=0]\n\t\t//\n\t\t// Ignore nested lists.\n\t\tif ( ( element.getAttribute( 'listIndent' ) as number ) > limitIndent ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// ■ List item 1.[]  [listType=bulleted]\n\t\t// 1. List item 2.   [listType=numbered]\n\t\t// 2.List item 3.    [listType=numbered]\n\t\t//\n\t\t// Abort searching when found a different kind of a list.\n\t\tif ( element.getAttribute( 'listType' ) !== listItem.getAttribute( 'listType' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ■ List item 1.[]  [listType=bulleted]\n\t\t// ■ List item 2.    [listType=bulleted]\n\t\t// ○ List item 3.    [listType=bulleted]\n\t\t// ○ List item 4.    [listType=bulleted]\n\t\t//\n\t\t// Abort searching when found a different list style,\n\t\tif ( element.getAttribute( 'listStyle' ) !== listItem.getAttribute( 'listStyle' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ... different direction\n\t\tif ( element.getAttribute( 'listReversed' ) !== listItem.getAttribute( 'listReversed' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ... and different start index\n\t\tif ( element.getAttribute( 'listStart' ) !== listItem.getAttribute( 'listStart' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif ( direction === 'backward' ) {\n\t\t\titems.unshift( element );\n\t\t} else {\n\t\t\titems.push( element );\n\t\t}\n\t}\n\n\treturn items;\n}\n\n/**\n * Returns an array with all `listItem` elements in the model selection.\n *\n * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n * If no list is selected, it returns an empty array.\n * The order of the elements is not specified.\n *\n * @internal\n */\nexport function getSelectedListItems( model: Model ): Array<ModelElement> {\n\tconst document = model.document;\n\n\t// For all selected blocks find all list items that are being selected\n\t// and update the `listStyle` attribute in those lists.\n\tlet listItems = [ ...document.selection.getSelectedBlocks() ]\n\t\t.filter( element => element.is( 'element', 'listItem' ) )\n\t\t.map( element => {\n\t\t\tconst position = model.change( writer => writer.createPositionAt( element, 0 ) );\n\n\t\t\treturn [\n\t\t\t\t...getSiblingNodes( position, 'backward' ),\n\t\t\t\t...getSiblingNodes( position, 'forward' )\n\t\t\t];\n\t\t} )\n\t\t.flat();\n\n\t// Since `getSelectedBlocks()` can return items that belong to the same list, and\n\t// `getSiblingNodes()` returns the entire list, we need to remove duplicated items.\n\tlistItems = [ ...new Set( listItems ) ];\n\n\treturn listItems;\n}\n\nconst BULLETED_LIST_STYLE_TYPES = [ 'disc', 'circle', 'square' ];\n\n// There's a lot of them (https://www.w3.org/TR/css-counter-styles-3/#typedef-counter-style).\n// Let's support only those that can be selected by ListPropertiesUI.\nconst NUMBERED_LIST_STYLE_TYPES = [\n\t'decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-latin',\n\t'upper-latin'\n];\n\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n *\n * @internal\n */\nexport function getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\tif ( BULLETED_LIST_STYLE_TYPES.includes( listStyleType ) ) {\n\t\treturn 'bulleted';\n\t}\n\n\tif ( NUMBERED_LIST_STYLE_TYPES.includes( listStyleType ) ) {\n\t\treturn 'numbered';\n\t}\n\n\treturn null;\n}\n\n/**\n * Implementation of getFillerOffset for view list item element.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */\nfunction getListItemFillerOffset( this: any ): number | null {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\tif ( this.isEmpty || hasOnlyLists ) {\n\t\treturn 0;\n\t}\n\n\treturn getViewFillerOffset.call( this );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacylistutils\n */\n\nimport type { ModelElement, Model, ModelPosition } from 'ckeditor5/src/engine.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetListTypeFromListStyleType,\n\tgetSelectedListItems,\n\tgetSiblingNodes\n} from './legacyutils.js';\n\n/**\n * A set of helpers related to legacy lists.\n */\nexport class LegacyListUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */\n\tpublic getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\t\treturn getListTypeFromListStyleType( listStyleType );\n\t}\n\n\t/**\n\t * Returns an array with all `listItem` elements in the model selection.\n\t *\n\t * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n\t * If no list is selected, it returns an empty array.\n\t * The order of the elements is not specified.\n\t */\n\tpublic getSelectedListItems( model: Model ): Array<ModelElement> {\n\t\treturn getSelectedListItems( model );\n\t}\n\n\t/**\n\t * Returns an array with all `listItem` elements that represent the same list.\n\t *\n\t * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n\t *\n\t * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n\t *\n\t * @param position Starting position.\n\t * @param direction Walking direction.\n\t */\n\tpublic getSiblingNodes( position: ModelPosition, direction: 'forward' | 'backward' ): Array<ModelElement> {\n\t\treturn getSiblingNodes( position, direction );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacyconverters\n */\n\nimport {\n\tModelTreeWalker,\n\ttype DowncastAttributeEvent,\n\ttype DowncastConversionApi,\n\ttype DowncastInsertEvent,\n\ttype DowncastRemoveEvent,\n\ttype ModelElement,\n\ttype MapperModelToViewPositionEvent,\n\ttype MapperViewToModelPositionEvent,\n\ttype Model,\n\ttype ModelInsertContentEvent,\n\ttype ModelNode,\n\ttype ModelPosition,\n\ttype UpcastConversionApi,\n\ttype UpcastElementEvent,\n\ttype EditingView,\n\ttype ViewContainerElement,\n\ttype ViewElement,\n\ttype ViewNode,\n\ttype ViewPosition,\n\ttype ViewTypeCheckable,\n\ttype ModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\n\nimport {\n\tgenerateLiInUl,\n\tinjectViewList,\n\tmergeViewLists,\n\tgetSiblingListItem,\n\tpositionAfterUiElements\n} from './legacyutils.js';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n */\nexport function modelViewInsertion( model: Model ): GetCallback<DowncastInsertEvent<ModelElement>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.item, 'insert' );\n\t\tconsumable.consume( data.item, 'attribute:listType' );\n\t\tconsumable.consume( data.item, 'attribute:listIndent' );\n\n\t\tconst modelItem = data.item;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function modelViewRemove( model: Model ): GetCallback<DowncastRemoveEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\t\tconst viewStart = viewPosition.getLastMatchingPosition( value => !value.item.is( 'element', 'li' ) );\n\t\tconst viewItem = viewStart.nodeAfter as ViewElement;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item - the one to remove.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Remove the list with the item to remove.\n\t\tconst viewList = viewItem.parent as ViewElement;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\t// 3. Merge the whole created by breaking and removing the list.\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 4. Bring back nested list that was in the removed <li>.\n\t\tconst modelItem = conversionApi.mapper.toModelElement( viewItem )!;\n\n\t\thoistNestedLists(\n\t\t\tmodelItem.getAttribute( 'listIndent' ) as number + 1,\n\t\t\tdata.position,\n\t\t\tremoveRange.start,\n\t\t\tviewItem,\n\t\t\tconversionApi,\n\t\t\tmodel\n\t\t);\n\n\t\t// 5. Unbind removed view item and all children.\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child as ViewElement );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/legacytodolist/legacytodolistconverters~modelViewChangeType} to see an example of it.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */\nexport const modelViewChangeType: GetCallback<DowncastAttributeEvent<ModelElement>> = ( evt, data, conversionApi ) => {\n\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item )!;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t// Change name of the view list that holds the changed view item.\n\t// We cannot just change name property, because that would not render properly.\n\tconst viewList = viewItem.parent as ViewContainerElement;\n\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n\n\tviewWriter.rename( listName, viewList );\n};\n\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/legacylist/legacyconverters~modelViewChangeType}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */\nexport const modelViewMergeAfterChangeType: GetCallback<DowncastAttributeEvent<ModelElement>> = ( evt, data, conversionApi ) => {\n\tconversionApi.consumable.consume( data.item, evt.name );\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item )!;\n\tconst viewList = viewItem.parent as ViewContainerElement;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Merge the changed view list with other lists, if possible.\n\tmergeViewLists( viewWriter, viewList, viewList.nextSibling! );\n\tmergeViewLists( viewWriter, viewList.previousSibling!, viewList );\n};\n\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function modelViewChangeIndent( model: Model ): GetCallback<DowncastAttributeEvent<ModelElement>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listIndent' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item ) as ViewContainerElement;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item -- the one that changed type.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\t\tconst viewList = viewItem.parent as ViewElement;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tviewWriter.remove( removeRange );\n\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 3. Bring back nested list that was in the removed <li>.\n\t\thoistNestedLists(\n\t\t\tdata.attributeOldValue as number + 1,\n\t\t\tdata.range.start,\n\t\t\tremoveRange.start,\n\t\t\tviewItem,\n\t\t\tconversionApi,\n\t\t\tmodel\n\t\t);\n\n\t\t// 4. Inject view list like it is newly inserted.\n\t\tinjectViewList( data.item, viewItem, conversionApi, model );\n\n\t\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\t\tfor ( const child of data.item.getChildren() ) {\n\t\t\tconversionApi.consumable.consume( child, 'insert' );\n\t\t}\n\t};\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n * <paragraph>xxx</paragraph>       // Instead of this wrong view state:\n * <listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n * ```\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n */\nexport const modelViewSplitOnInsert: GetCallback<DowncastInsertEvent<ModelElement>> = ( evt, data, conversionApi ) => {\n\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\treturn;\n\t}\n\n\tif ( data.item.name != 'listItem' ) {\n\t\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst lists = [];\n\n\t\t// Break multiple ULs/OLs if there are.\n\t\t//\n\t\t// Imagine following list:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// Insert paragraph after item 1.1.1:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// In this case 1.1.2 has to become beginning of a new list.\n\t\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n\t\t// Then we need to move those broken pieces one after another and merge:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t// 1.1.2 --------\n\t\t//   1.1.3 --------\n\t\t//     1.1.3.1 --------\n\t\t// 1.2 --------\n\t\t//   1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\twhile ( ( viewPosition.parent as any ).name == 'ul' || ( viewPosition.parent as any ).name == 'ol' ) {\n\t\t\tviewPosition = viewWriter.breakContainer( viewPosition );\n\n\t\t\tif ( ( viewPosition.parent as any ).name != 'li' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Remove lists that are after inserted element.\n\t\t\t// They will be brought back later, below the inserted element.\n\t\t\tconst removeStart = viewPosition;\n\t\t\tconst removeEnd = viewWriter.createPositionAt( viewPosition.parent as any, 'end' );\n\n\t\t\t// Don't remove if there is nothing to remove.\n\t\t\tif ( !removeStart.isEqual( removeEnd ) ) {\n\t\t\t\tconst removed = viewWriter.remove( viewWriter.createRange( removeStart, removeEnd ) );\n\t\t\t\tlists.push( removed );\n\t\t\t}\n\n\t\t\tviewPosition = viewWriter.createPositionAfter( viewPosition.parent as any );\n\t\t}\n\n\t\t// Bring back removed lists.\n\t\tif ( lists.length > 0 ) {\n\t\t\tfor ( let i = 0; i < lists.length; i++ ) {\n\t\t\t\tconst previousList = viewPosition.nodeBefore;\n\t\t\t\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\n\t\t\t\tviewPosition = insertedRange.end;\n\n\t\t\t\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tconst mergePos = mergeViewLists( viewWriter, previousList!, previousList!.nextSibling! );\n\n\t\t\t\t\t// If `mergePos` is in `previousList` it means that the lists got merged.\n\t\t\t\t\t// In this case, we need to fix insert position.\n\t\t\t\t\tif ( mergePos && mergePos.parent == previousList ) {\n\t\t\t\t\t\tviewPosition.offset--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Merge last inserted list with element after it.\n\t\t\tmergeViewLists( viewWriter, viewPosition.nodeBefore!, viewPosition.nodeAfter! );\n\t\t}\n\t}\n};\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul>\n * <paragraph>xxx</paragraph>       <p>xxx</p>\n * <listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n * ```\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n */\nexport const modelViewMergeAfter: GetCallback<DowncastRemoveEvent> = ( evt, data, conversionApi ) => {\n\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\tconst viewItemPrev = viewPosition.nodeBefore;\n\tconst viewItemNext = viewPosition.nodeAfter;\n\n\t// Merge lists if something (remove, move) was done from inside of list.\n\t// Merging will be done only if both items are view lists of the same type.\n\t// The check is done inside the helper function.\n\tmergeViewLists( conversionApi.writer, viewItemPrev!, viewItemNext! );\n};\n\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const viewModelConverter: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\tconst writer = conversionApi.writer;\n\n\t\t// 1. Create `listItem` model element.\n\t\tconst listItem = writer.createElement( 'listItem' );\n\n\t\t// 2. Handle `listItem` model element attributes.\n\t\tconst indent = getIndent( data.viewItem );\n\n\t\twriter.setAttribute( 'listIndent', indent, listItem );\n\n\t\t// Set 'bulleted' as default. If this item is pasted into a context,\n\t\tconst type = data.viewItem.parent && ( data.viewItem.parent as any ).name == 'ol' ? 'numbered' : 'bulleted';\n\t\twriter.setAttribute( 'listType', type, listItem );\n\n\t\tif ( !conversionApi.safeInsert( listItem, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextPosition = viewToModelListItemChildrenConverter( listItem, data.viewItem.getChildren(), conversionApi );\n\n\t\t// Result range starts before the first item and ends after the last.\n\t\tdata.modelRange = writer.createRange( data.modelCursor, nextPosition );\n\n\t\tconversionApi.updateConversionResult( listItem, data );\n\t}\n};\n\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const cleanList: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t// Caching children because when we start removing them iterating fails.\n\t\tconst children = Array.from( data.viewItem.getChildren() );\n\n\t\tfor ( const child of children ) {\n\t\t\tconst isWrongElement = !( child.is( 'element', 'li' ) || isList( child ) );\n\n\t\t\tif ( isWrongElement ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const cleanListItem: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\tif ( data.viewItem.childCount === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [ ...data.viewItem.getChildren() ];\n\n\t\tlet foundList = false;\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( foundList && !isList( child ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\n\t\t\tif ( isList( child ) ) {\n\t\t\t\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n\t\t\t\tfoundList = true;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @internal\n */\nexport function modelToViewPosition( view: EditingView ): GetCallback<MapperModelToViewPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tif ( data.isPhantom ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.modelPosition.nodeBefore;\n\n\t\tif ( modelItem && modelItem.is( 'element', 'listItem' ) ) {\n\t\t\tconst viewItem = data.mapper.toViewElement( modelItem )!;\n\t\t\tconst topmostViewList = viewItem.getAncestors().find( isList );\n\t\t\tconst walker = view.createPositionAt( viewItem, 0 ).getWalker();\n\n\t\t\tfor ( const value of walker ) {\n\t\t\t\tif ( value.type == 'elementStart' && value.item.is( 'element', 'li' ) ) {\n\t\t\t\t\tdata.viewPosition = value.previousPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\n\t\t\t\t\tdata.viewPosition = value.nextPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @internal\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function viewToModelPosition( model: Model ): GetCallback<MapperViewToModelPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tconst viewPos = data.viewPosition;\n\t\tconst viewParent = viewPos.parent as ViewElement;\n\t\tconst mapper = data.mapper;\n\n\t\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\n\t\t\t// Position is directly in <ul> or <ol>.\n\t\t\tif ( !viewPos.isAtEnd ) {\n\t\t\t\t// If position is not at the end, it must be before <li>.\n\t\t\t\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter as any )!;\n\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode );\n\t\t\t} else {\n\t\t\t\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n\t\t\t\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n\t\t\t\t// because that <li> may contain nested items.\n\t\t\t\t// We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore as any );\n\t\t\t\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore! );\n\n\t\t\t\t// Then we get model position before mapped `listItem` and shift it accordingly.\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode! ).getShiftedBy( modelLength );\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t} else if (\n\t\t\tviewParent.name == 'li' &&\n\t\t\tviewPos.nodeBefore &&\n\t\t\t( ( viewPos.nodeBefore as any ).name == 'ul' || ( viewPos.nodeBefore as any ).name == 'ol' )\n\t\t) {\n\t\t\t// In most cases when view position is in <li> it is in text and this is a correct position.\n\t\t\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n\t\t\tconst modelNode = mapper.toModelElement( viewParent );\n\n\t\t\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n\t\t\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\t\t\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\t\t\tlet viewList: ViewNode | null = viewPos.nodeBefore;\n\n\t\t\twhile ( viewList && isList( viewList ) ) {\n\t\t\t\tmodelLength += mapper.getModelLength( viewList );\n\n\t\t\t\tviewList = viewList.previousSibling;\n\t\t\t}\n\n\t\t\tdata.modelPosition = model.createPositionBefore( modelNode! ).getShiftedBy( modelLength );\n\n\t\t\tevt.stop();\n\t\t}\n\t};\n}\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n * ```\n *\n * @internal\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @returns `true` if any change has been applied, `false` otherwise.\n */\nexport function modelChangePostFixer( model: Model, writer: ModelWriter ): boolean {\n\tconst changes = model.document.differ.getChanges();\n\tconst itemToListHead = new Map<ModelElement, ModelElement>();\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\n\t\t\tif ( entry.name != '$text' ) {\n\t\t\t\t// In case of renamed element.\n\t\t\t\tconst item = entry.position.nodeAfter as ModelElement;\n\n\t\t\t\tif ( item.hasAttribute( 'listIndent' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listIndent', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listType' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listType', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listStyle' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listStyle', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listReversed' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listReversed', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listStart' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listStart', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tfor ( const innerItem of Array.from( model.createRangeIn( item ) ).filter( e => e.item.is( 'element', 'listItem' ) ) ) {\n\t\t\t\t\t_addListToFix( innerItem.previousPosition );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst posAfter = entry.position.getShiftedBy( entry.length );\n\n\t\t\t_addListToFix( posAfter );\n\t\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listIndent' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listType' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t}\n\t}\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\t_fixListIndents( listHead );\n\t\t_fixListTypes( listHead );\n\t}\n\n\treturn applied;\n\n\tfunction _addListToFix( position: ModelPosition ) {\n\t\tconst previousNode = position.nodeBefore;\n\n\t\tif ( !previousNode || !previousNode.is( 'element', 'listItem' ) ) {\n\t\t\tconst item = position.nodeAfter;\n\n\t\t\tif ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\t\titemToListHead.set( item, item );\n\t\t\t}\n\t\t} else {\n\t\t\tlet listHead = previousNode;\n\n\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (\n\t\t\t\t// Cache previousSibling and reuse for performance reasons. See #6581.\n\t\t\t\tlet previousSibling = listHead.previousSibling;\n\t\t\t\tpreviousSibling && previousSibling.is( 'element', 'listItem' );\n\t\t\t\tpreviousSibling = listHead.previousSibling\n\t\t\t) {\n\t\t\t\tlistHead = previousSibling;\n\n\t\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemToListHead.set( previousNode, listHead );\n\t\t}\n\t}\n\n\tfunction _fixListIndents( item: ModelNode | null ) {\n\t\tlet maxIndent = 0;\n\t\tlet fixBy = null;\n\n\t\twhile ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' ) as number;\n\n\t\t\tif ( itemIndent > maxIndent ) {\n\t\t\t\tlet newIndent;\n\n\t\t\t\tif ( fixBy === null ) {\n\t\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\t\tnewIndent = maxIndent;\n\t\t\t\t} else {\n\t\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'listIndent', newIndent, item );\n\n\t\t\t\tapplied = true;\n\t\t\t} else {\n\t\t\t\tfixBy = null;\n\t\t\t\tmaxIndent = item.getAttribute( 'listIndent' ) as number + 1;\n\t\t\t}\n\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n\n\tfunction _fixListTypes( item: ModelNode | null ) {\n\t\tlet typesStack: Array<string> = [];\n\t\tlet prev = null;\n\n\t\twhile ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' ) as number;\n\n\t\t\tif ( prev && prev.getAttribute( 'listIndent' ) as number > itemIndent ) {\n\t\t\t\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\n\t\t\t}\n\n\t\t\tif ( itemIndent != 0 ) {\n\t\t\t\tif ( typesStack[ itemIndent ] ) {\n\t\t\t\t\tconst type = typesStack[ itemIndent ];\n\n\t\t\t\t\tif ( item.getAttribute( 'listType' ) != type ) {\n\t\t\t\t\t\twriter.setAttribute( 'listType', type, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttypesStack[ itemIndent ] = item.getAttribute( 'listType' ) as string;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprev = item;\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n * // At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n * //              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n *\n * @internal\n */\nexport const modelIndentPasteFixer: GetCallback<ModelInsertContentEvent> = function( evt, [ content, selectable ] ) {\n\tconst model = this as Model;\n\n\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\n\t// that list will be broken.\n\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n\t// would create incorrect model.\n\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\n\n\tlet selection;\n\n\tif ( !selectable ) {\n\t\tselection = model.document.selection;\n\t} else {\n\t\tselection = model.createSelection( selectable );\n\t}\n\n\tif ( item && item.is( 'element', 'listItem' ) ) {\n\t\t// Get a reference list item. Inserted list items will be fixed according to that item.\n\t\tconst pos = selection.getFirstPosition()!;\n\t\tlet refItem = null;\n\n\t\tif ( pos.parent.is( 'element', 'listItem' ) ) {\n\t\t\trefItem = pos.parent;\n\t\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'element', 'listItem' ) ) {\n\t\t\trefItem = pos.nodeBefore;\n\t\t}\n\n\t\t// If there is `refItem` it means that we do insert list items into an existing list.\n\t\tif ( refItem ) {\n\t\t\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n\t\t\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n\t\t\t// Indent of all those items has to be adjusted to reference item.\n\t\t\tconst indentChange = refItem.getAttribute( 'listIndent' ) as number;\n\n\t\t\t// Fix only if there is anything to fix.\n\t\t\tif ( indentChange > 0 ) {\n\t\t\t\t// Adjust indent of all \"first\" list items in inserted data.\n\t\t\t\twhile ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\t\t\titem._setAttribute( 'listIndent', item.getAttribute( 'listIndent' ) as number + indentChange );\n\n\t\t\t\t\titem = item.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Helper function that converts children of a given `<li>` view element into corresponding model elements.\n * The function maintains proper order of elements if model `listItem` is split during the conversion\n * due to block children conversion.\n *\n * @param listItemModel List item model element to which converted children will be inserted.\n * @param viewChildren View elements which will be converted.\n * @param conversionApi Conversion interface to be used by the callback.\n * @returns Position on which next elements should be inserted after children conversion.\n */\nfunction viewToModelListItemChildrenConverter(\n\tlistItemModel: ModelElement,\n\tviewChildren: Iterable<ViewNode>,\n\tconversionApi: UpcastConversionApi\n) {\n\tconst { writer, schema } = conversionApi;\n\n\t// A position after the last inserted `listItem`.\n\tlet nextPosition = writer.createPositionAfter( listItemModel );\n\n\t// Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n\t// in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n\tfor ( const child of viewChildren ) {\n\t\tif ( ( child as any ).name == 'ul' || ( child as any ).name == 'ol' ) {\n\t\t\t// If the children is a list, we will insert its conversion result after currently handled `listItem`.\n\t\t\t// Then, next insertion position will be set after all the new list items (and maybe other elements if\n\t\t\t// something split list item).\n\t\t\t//\n\t\t\t// If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n\t\t\t// should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n\t\t\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\n\t\t} else {\n\t\t\t// If this is not a list, try inserting content at the end of the currently handled `listItem`.\n\t\t\tconst result = conversionApi.convertItem( child, writer.createPositionAt( listItemModel, 'end' ) );\n\n\t\t\t// It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n\t\t\t//\n\t\t\t// <li><p>Foo</p></li>\n\t\t\t//\n\t\t\t// will be converted to:\n\t\t\t//\n\t\t\t// <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n\t\t\t//\n\t\t\tconst convertedChild = result.modelRange!.start.nodeAfter;\n\t\t\tconst wasSplit = convertedChild && convertedChild.is( 'element' ) && !schema.checkChild( listItemModel, convertedChild.name );\n\n\t\t\tif ( wasSplit ) {\n\t\t\t\t// As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n\t\t\t\t//\n\t\t\t\t// `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n\t\t\t\t// that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n\t\t\t\t//\n\t\t\t\t// However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// or after an element if another element broken auto-paragraphed element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// We need to check for such cases and use proper list item and position based on it.\n\t\t\t\t//\n\t\t\t\tif ( result.modelCursor.parent.is( 'element', 'listItem' ) ) {\n\t\t\t\t\t// (1).\n\t\t\t\t\tlistItemModel = result.modelCursor.parent;\n\t\t\t\t} else {\n\t\t\t\t\t// (2), (3).\n\t\t\t\t\tlistItemModel = findNextListItem( result.modelCursor );\n\t\t\t\t}\n\n\t\t\t\tnextPosition = writer.createPositionAfter( listItemModel );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nextPosition;\n}\n\n/**\n * Helper function that seeks for a next list item starting from given `startPosition`.\n */\nfunction findNextListItem( startPosition: ModelPosition ) {\n\tconst treeWalker = new ModelTreeWalker( { startPosition } );\n\n\tlet value;\n\n\tdo {\n\t\tvalue = treeWalker.next();\n\t} while ( !value.value.item.is( 'element', 'listItem' ) );\n\n\treturn value.value.item;\n}\n\n/**\n * Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n * to other given parameters.\n */\nfunction hoistNestedLists(\n\tnextIndent: number,\n\tmodelRemoveStartPosition: ModelPosition,\n\tviewRemoveStartPosition: ViewPosition,\n\tviewRemovedItem: ViewElement,\n\tconversionApi: DowncastConversionApi,\n\tmodel: Model\n) {\n\t// Find correct previous model list item element.\n\t// The element has to have either same or smaller indent than given reference indent.\n\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n\t// Keep in mind that such element might not be found, if removed item was the first item.\n\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition.nodeBefore, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: nextIndent\n\t} );\n\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Indent of found element or `null` if the element has not been found.\n\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'listIndent' ) : null;\n\n\tlet insertPosition;\n\n\tif ( !prevModelItem ) {\n\t\t// If element has not been found, simply insert lists at the position where the removed item was:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n\t\t//   1.1 --------       <--- this is reference indent.\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1.1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t// 1.2 --------\n\t\tinsertPosition = viewRemoveStartPosition;\n\t} else if ( prevIndent == nextIndent ) {\n\t\t// If element has been found and has same indent as reference indent it means that nested items should\n\t\t// become siblings of found element:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------       <--- this is `prevModelItem`.\n\t\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n\t\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n\t\t//   2.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------\n\t\t//   2.1 --------\n\t\t//   2.2 --------\n\t\tconst prevViewList = mapper.toViewElement( prevModelItem )!.parent as ViewElement;\n\t\tinsertPosition = viewWriter.createPositionAfter( prevViewList );\n\t} else {\n\t\t// If element has been found and has smaller indent as reference indent it means that nested items\n\t\t// should become nested items of found item:\n\t\t//\n\t\t// 1 --------           <--- this is `prevModelItem`.\n\t\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n\t\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n\t\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\n\t\tconst modelPosition = model.createPositionAt( prevModelItem, 'end' );\n\t\tinsertPosition = mapper.toViewPosition( modelPosition );\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n\t// are inserted after the first list (no need to recalculate insertion position for them).\n\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\n\t\tif ( isList( child ) ) {\n\t\t\tinsertPosition = viewWriter.move( viewWriter.createRangeOn( child ), insertPosition ).end;\n\n\t\t\tmergeViewLists( viewWriter, child, child.nextSibling! );\n\t\t\tmergeViewLists( viewWriter, child.previousSibling!, child );\n\t\t}\n\t}\n}\n\n/**\n * Checks if view element is a list type (ul or ol).\n */\nfunction isList( viewElement: ViewTypeCheckable ): viewElement is ViewElement & { name: 'ol' | 'ul' } {\n\treturn viewElement.is( 'element', 'ol' ) || viewElement.is( 'element', 'ul' );\n}\n\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n */\nfunction getIndent( listItem: ViewElement ) {\n\tlet indent = 0;\n\n\tlet parent = listItem.parent as ViewElement;\n\n\twhile ( parent ) {\n\t\t// Each LI in the tree will result in an increased indent for HTML compliant lists.\n\t\tif ( parent.is( 'element', 'li' ) ) {\n\t\t\tindent++;\n\t\t} else {\n\t\t\t// If however the list is nested in other list we should check previous sibling of any of the list elements...\n\t\t\tconst previousSibling = parent.previousSibling;\n\n\t\t\t// ...because the we might need increase its indent:\n\t\t\t//\t\tbefore:                           fixed list:\n\t\t\t//\t\tOL                                OL\n\t\t\t//\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n\t\t\t//\t\t|-> OL                                |-> OL\n\t\t\t//\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n\t\t\tif ( previousSibling && previousSibling.is( 'element', 'li' ) ) {\n\t\t\t\tindent++;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parent as ViewElement;\n\t}\n\n\treturn indent;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacylistediting\n */\n\nimport { LegacyListCommand } from './legacylistcommand.js';\nimport { LegacyIndentCommand } from './legacyindentcommand.js';\nimport { LegacyListUtils } from './legacylistutils.js';\n\nimport { Plugin, type MultiCommand } from 'ckeditor5/src/core.js';\n\nimport { Enter, type ViewDocumentEnterEvent } from 'ckeditor5/src/enter.js';\nimport { Delete, type ViewDocumentDeleteEvent } from 'ckeditor5/src/typing.js';\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastInsertEvent,\n\tDowncastRemoveEvent,\n\tModelElement,\n\tMapperModelToViewPositionEvent,\n\tMapperViewToModelPositionEvent,\n\tModelInsertContentEvent,\n\tUpcastElementEvent,\n\tViewDocumentTabEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfterChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './legacyconverters.js';\n\nimport '../../theme/list.css';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n */\nexport class LegacyListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Enter, Delete, LegacyListUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\t\tediting.mapper.on<MapperViewToModelPositionEvent>( 'viewToModelPosition', viewToModelPosition( editor.model ) );\n\t\tdata.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastInsertEvent<ModelElement>>( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\t\t\tdispatcher.on<DowncastInsertEvent<ModelElement>>( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ModelElement>>(\n\t\t\t\t\t'attribute:listType:listItem', modelViewChangeType, { priority: 'high' }\n\t\t\t\t);\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ModelElement>>(\n\t\t\t\t\t'attribute:listType:listItem', modelViewMergeAfterChangeType, { priority: 'low' } );\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ModelElement>>(\n\t\t\t\t\t'attribute:listIndent:listItem', modelViewChangeIndent( editor.model )\n\t\t\t\t);\n\t\t\t\tdispatcher.on<DowncastRemoveEvent>( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\t\t\tdispatcher.on<DowncastRemoveEvent>( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastInsertEvent<ModelElement>>( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\t\t\tdispatcher.on<DowncastInsertEvent<ModelElement>>( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ul', cleanList, { priority: 'high' } );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ol', cleanList, { priority: 'high' } );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:li', cleanListItem, { priority: 'high' } );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:li', viewModelConverter );\n\t\t\t} );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on<ModelInsertContentEvent>( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new LegacyListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new LegacyListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new LegacyIndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new LegacyIndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo<ViewDocumentEnterEvent>( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition()!.parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo<ViewDocumentDeleteEvent>( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && ( positionParent.previousSibling as any ).name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'li' } );\n\n\t\tthis.listenTo<ViewDocumentTabEvent>( editor.editing.view.document, 'tab', ( evt, data ) => {\n\t\t\tconst commandName = data.shiftKey ? 'outdentList' : 'indentList';\n\t\t\tconst command = this.editor.commands.get( commandName )!;\n\n\t\t\tif ( command.isEnabled ) {\n\t\t\t\teditor.execute( commandName );\n\n\t\t\t\tdata.stopPropagation();\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst commands = this.editor.commands;\n\n\t\tconst indent = commands.get( 'indent' ) as MultiCommand;\n\t\tconst outdent = commands.get( 'outdent' ) as MultiCommand;\n\n\t\tif ( indent ) {\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' )! );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' )! );\n\t\t}\n\t}\n}\n\nfunction getViewListItemLength( element: ViewElement ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() as Iterable<ViewElement> ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item as ViewElement );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist\n */\n\nimport { LegacyListEditing } from './legacylist/legacylistediting.js';\nimport { ListUI } from './list/listui.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\n/**\n * The legacy list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing feature}\n * and {@link module:list/list/listui~ListUI list UI feature}.\n */\nexport class LegacyList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListEditing, ListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacyliststylecommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { getListTypeFromListStyleType, getSelectedListItems } from '../legacylist/legacyutils.js';\n\n/**\n * The list style command. It changes the `listStyle` attribute of the selected list items.\n *\n * If the list type (numbered or bulleted) can be inferred from the passed style type,\n * the command tries to convert selected items to a list of that type.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */\nexport class LegacyListStyleCommand extends Command {\n\tdeclare public isStyleTypeSupported: undefined;\n\n\t/**\n\t * @inheritDoc\n\t * @readonly\n\t */\n\tdeclare public value: string | null;\n\n\t/**\n\t * The default type of the list style.\n\t */\n\tpublic readonly defaultType: string;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t */\n\tconstructor( editor: Editor, defaultType: string ) {\n\t\tsuper( editor );\n\n\t\tthis.defaultType = defaultType;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */\n\tpublic override execute( options: { type?: string | null } = {} ): void {\n\t\tthis._tryToConvertItemsToList( options );\n\n\t\tconst model = this.editor.model;\n\t\tconst listItems = getSelectedListItems( model );\n\n\t\tif ( !listItems.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listStyle', options.type || this.defaultType, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition()!.parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn listItem.getAttribute( 'listStyle' ) as string;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\tconst editor = this.editor;\n\n\t\tconst numberedList = editor.commands.get( 'numberedList' )!;\n\t\tconst bulletedList = editor.commands.get( 'bulletedList' )!;\n\n\t\treturn numberedList.isEnabled || bulletedList.isEnabled;\n\t}\n\n\t/**\n\t * Checks if the provided list style is valid. Also changes the selection to a list if it's not set yet.\n\t *\n\t * @param options Additional options.\n\t * @param options.type The type of the list style. If `null` is specified, the function does nothing.\n\t*/\n\tprivate _tryToConvertItemsToList( options: { type?: string | null } ) {\n\t\tif ( !options.type ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst listType = getListTypeFromListStyleType( options.type );\n\n\t\t/* istanbul ignore next -- @preserve */\n\t\tif ( !listType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst commandName = `${ listType }List` as const;\n\t\tconst command = editor.commands.get( commandName )!;\n\n\t\tif ( !command.value ) {\n\t\t\teditor.execute( commandName );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacylistreversedcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { getSelectedListItems } from '../legacylist/legacyutils.js';\n\n/**\n * The reversed list command. It changes the `listReversed` attribute of the selected list items. As a result, the list order will be\n * reversed.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */\nexport class LegacyListReversedCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: boolean | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */\n\tpublic override execute( options: { reversed?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst listItems = getSelectedListItems( model )\n\t\t\t.filter( item => item.getAttribute( 'listType' ) == 'numbered' );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listReversed', !!options.reversed, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition()!.parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) && listItem.getAttribute( 'listType' ) == 'numbered' ) {\n\t\t\treturn listItem.getAttribute( 'listReversed' ) as boolean;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacyliststartcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { getSelectedListItems } from '../legacylist/legacyutils.js';\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */\nexport class LegacyListStartCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: number | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options Execute options.\n\t * @param options.startIndex The list start index.\n\t */\n\tpublic override execute( { startIndex = 1 }: { startIndex?: number } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst listItems = getSelectedListItems( model )\n\t\t\t.filter( item => item.getAttribute( 'listType' ) == 'numbered' );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listStart', startIndex >= 0 ? startIndex : 1, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition()!.parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) && listItem.getAttribute( 'listType' ) == 'numbered' ) {\n\t\t\treturn listItem.getAttribute( 'listStart' ) as number;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacylistpropertiesediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport type {\n\tDifferItem,\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tViewDowncastWriter,\n\tModelElement,\n\tModelDeleteContentEvent,\n\tModelNode,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement,\n\tModelWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { LegacyListEditing } from '../legacylist/legacylistediting.js';\nimport { LegacyListStyleCommand } from './legacyliststylecommand.js';\nimport { LegacyListReversedCommand } from './legacylistreversedcommand.js';\nimport { LegacyListStartCommand } from './legacyliststartcommand.js';\nimport { getSiblingListItem, getSiblingNodes } from '../legacylist/legacyutils.js';\nimport type { ListPropertiesConfig } from '../listconfig.js';\nimport { normalizeListStyle } from '../listproperties/utils/style.js';\n\nconst DEFAULT_LIST_TYPE = 'default';\n\n/**\n * The engine of the list properties feature.\n *\n * It sets the value for the `listItem` attribute of the {@link module:list/legacylist~LegacyList `<listItem>`} element that\n * allows modifying the list style type.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */\nexport class LegacyListPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListPropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list', {\n\t\t\tproperties: {\n\t\t\t\tstyles: true,\n\t\t\t\tstartIndex: false,\n\t\t\t\treversed: false\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tconst enabledProperties = editor.config.get( 'list.properties' )!;\n\t\tconst strategies = createAttributeStrategies( enabledProperties );\n\n\t\t// Extend schema.\n\t\tmodel.schema.extend( 'listItem', {\n\t\t\tallowAttributes: strategies.map( s => s.attributeName )\n\t\t} );\n\n\t\tfor ( const strategy of strategies ) {\n\t\t\tstrategy.addCommand( editor );\n\t\t}\n\n\t\t// Fix list attributes when modifying their nesting levels (the `listIndent` attribute).\n\t\tthis.listenTo( editor.commands.get( 'indentList' )!, '_executeCleanup', fixListAfterIndentListCommand( editor, strategies ) );\n\t\tthis.listenTo( editor.commands.get( 'outdentList' )!, '_executeCleanup', fixListAfterOutdentListCommand( editor, strategies ) );\n\n\t\tthis.listenTo( editor.commands.get( 'bulletedList' )!, '_executeCleanup', restoreDefaultListStyle( editor ) );\n\t\tthis.listenTo( editor.commands.get( 'numberedList' )!, '_executeCleanup', restoreDefaultListStyle( editor ) );\n\n\t\t// Register a post-fixer that ensures that the attributes is specified in each `listItem` element.\n\t\tmodel.document.registerPostFixer( fixListAttributesOnListItemElements( editor, strategies ) );\n\n\t\t// Set up conversion.\n\t\teditor.conversion.for( 'upcast' ).add( upcastListItemAttributes( strategies ) );\n\t\teditor.conversion.for( 'downcast' ).add( downcastListItemAttributes( strategies ) );\n\n\t\t// Handle merging two separated lists into the single one.\n\t\tthis._mergeListAttributesWhileMergingLists( strategies );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Enable post-fixer that removes the attributes from to-do list items only if the \"TodoList\" plugin is on.\n\t\t// We need to registry the hook here since the `TodoList` plugin can be added after the `ListPropertiesEditing`.\n\t\tif ( editor.commands.get( 'todoList' ) ) {\n\t\t\teditor.model.document.registerPostFixer( removeListItemAttributesFromTodoList( editor ) );\n\t\t}\n\t}\n\n\t/**\n\t * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether two lists will be merged into a single\n\t * one after deleting the content.\n\t *\n\t * The purpose of this action is to adjust the `listStyle`, `listReversed` and `listStart` values\n\t * for the list that was merged.\n\t *\n\t * Consider the following model's content:\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <paragraph>[A paragraph.]</paragraph>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * After removing the paragraph element, the second list will be merged into the first one.\n\t * We want to inherit the `listStyle` attribute for the second list from the first one.\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/7879.\n\t *\n\t * @param attributeStrategies Strategies for the enabled attributes.\n\t */\n\tprivate _mergeListAttributesWhileMergingLists( attributeStrategies: Array<AttributeStrategy> ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\t// First the outer-most`listItem` in the first list reference.\n\t\t// If found, the lists should be merged and this `listItem` provides the attributes\n\t\t// and it is also a starting point when searching for items in the second list.\n\t\tlet firstMostOuterItem: ModelElement | null;\n\n\t\t// Check whether the removed content is between two lists.\n\t\tthis.listenTo<ModelDeleteContentEvent>( model, 'deleteContent', ( evt, [ selection ] ) => {\n\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\t\t\tconst lastPosition = selection.getLastPosition()!;\n\n\t\t\t// Typing or removing content in a single item. Aborting.\n\t\t\tif ( firstPosition.parent === lastPosition.parent ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// An element before the content that will be removed is not a list.\n\t\t\tif ( !firstPosition.parent.is( 'element', 'listItem' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextSibling = lastPosition.parent.nextSibling;\n\n\t\t\t// An element after the content that will be removed is not a list.\n\t\t\tif ( !nextSibling || !nextSibling.is( 'element', 'listItem' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find the outermost list item based on the `listIndent` attribute. We can't assume that `listIndent=0`\n\t\t\t// because the selection can be hooked in nested lists.\n\t\t\t//\n\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t\t\t// <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List [item 1.1</listItem>\n\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1.</listItem>\n\t\t\t// <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"circle\">UL List ]item 1.1</listItem>\n\t\t\t//\n\t\t\t// After deleting the content, we would like to inherit the \"square\" attribute for the last element:\n\t\t\t//\n\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t\t\t// <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List []item 1.1</listItem>\n\t\t\tconst mostOuterItemList = getSiblingListItem( firstPosition.parent, {\n\t\t\t\tsameIndent: true,\n\t\t\t\tlistIndent: nextSibling.getAttribute( 'listIndent' ) as number\n\t\t\t} );\n\n\t\t\t// The outermost list item may not exist while removing elements between lists with different value\n\t\t\t// of the `listIndent` attribute. In such a case we don't want to update anything. See: #8073.\n\t\t\tif ( !mostOuterItemList ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( mostOuterItemList.getAttribute( 'listType' ) === nextSibling.getAttribute( 'listType' ) ) {\n\t\t\t\tfirstMostOuterItem = mostOuterItemList;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// If so, update the `listStyle` attribute for the second list.\n\t\tthis.listenTo<ModelDeleteContentEvent>( model, 'deleteContent', () => {\n\t\t\tif ( !firstMostOuterItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => {\n\t\t\t\t// Find the first most-outer item list in the merged list.\n\t\t\t\t// A case when the first list item in the second list was merged into the last item in the first list.\n\t\t\t\t//\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1</listItem>\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n\t\t\t\tconst secondListMostOuterItem = getSiblingListItem( firstMostOuterItem!.nextSibling, {\n\t\t\t\t\tsameIndent: true,\n\t\t\t\t\tlistIndent: firstMostOuterItem!.getAttribute( 'listIndent' ) as number,\n\t\t\t\t\tdirection: 'forward'\n\t\t\t\t} );\n\n\t\t\t\t// If the selection ends in a non-list element, there are no <listItem>s that would require adjustments.\n\t\t\t\t// See: #8642.\n\t\t\t\tif ( !secondListMostOuterItem ) {\n\t\t\t\t\tfirstMostOuterItem = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst items = [\n\t\t\t\t\tsecondListMostOuterItem,\n\t\t\t\t\t...getSiblingNodes( writer.createPositionAt( secondListMostOuterItem, 0 ), 'forward' )\n\t\t\t\t];\n\n\t\t\t\tfor ( const listItem of items ) {\n\t\t\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\t\t\tif ( strategy.appliesToListItem( listItem ) ) {\n\t\t\t\t\t\t\tconst attributeName = strategy.attributeName;\n\t\t\t\t\t\t\tconst value = firstMostOuterItem!.getAttribute( attributeName );\n\n\t\t\t\t\t\t\twriter.setAttribute( attributeName, value, listItem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tfirstMostOuterItem = null;\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Strategy for dealing with `listItem` attributes supported by this plugin.\n */\ninterface AttributeStrategy {\n\tattributeName: string;\n\tdefaultValue: unknown;\n\taddCommand: ( editor: Editor ) => void;\n\tappliesToListItem: ( element: ModelNode ) => boolean;\n\tsetAttributeOnDowncast: ( writer: ViewDowncastWriter, value: any, element: ViewElement ) => void;\n\tgetAttributeOnUpcast: ( element: ViewElement ) => unknown;\n}\n\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */\nfunction createAttributeStrategies( enabledProperties: ListPropertiesConfig ) {\n\tconst strategies: Array<AttributeStrategy> = [];\n\n\tif ( enabledProperties.styles ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStyle',\n\t\t\tdefaultValue: DEFAULT_LIST_TYPE,\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listStyle', new LegacyListStyleCommand( editor, DEFAULT_LIST_TYPE ) );\n\t\t\t},\n\n\t\t\tappliesToListItem() {\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStyle, element ) {\n\t\t\t\tif ( listStyle && listStyle !== DEFAULT_LIST_TYPE ) {\n\t\t\t\t\twriter.setStyle( 'list-style-type', listStyle, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeStyle( 'list-style-type', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\treturn normalizeListStyle( listParent.getStyle( 'list-style-type' )! ) || DEFAULT_LIST_TYPE;\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.reversed ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listReversed',\n\t\t\tdefaultValue: false,\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listReversed', new LegacyListReversedCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered';\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listReversed, element ) {\n\t\t\t\tif ( listReversed ) {\n\t\t\t\t\twriter.setAttribute( 'reversed', 'reversed', element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'reversed', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\treturn listParent.hasAttribute( 'reversed' );\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.startIndex ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStart',\n\t\t\tdefaultValue: 1,\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listStart', new LegacyListStartCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered';\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStart, element ) {\n\t\t\t\tif ( listStart == 0 || listStart > 1 ) {\n\t\t\t\t\twriter.setAttribute( 'start', listStart, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'start', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\tconst startAttributeValue: any = listParent.getAttribute( 'start' );\n\n\t\t\t\treturn startAttributeValue >= 0 ? startAttributeValue : 1;\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn strategies;\n}\n\n/**\n * Returns a converter consumes the `style`, `reversed` and `start` attribute.\n * In `style` it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n */\nfunction upcastListItemAttributes( attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:li', ( evt, data, conversionApi ) => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/13858\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst listParent = data.viewItem.parent as ViewElement;\n\t\t\tconst listItem = data.modelRange.start.nodeAfter || data.modelRange.end.nodeBefore;\n\n\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\tif ( strategy.appliesToListItem( listItem! ) ) {\n\t\t\t\t\tconst listStyle = strategy.getAttributeOnUpcast( listParent );\n\t\t\t\t\tconversionApi.writer.setAttribute( strategy.attributeName, listStyle, listItem! );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Returns a converter that adds `reversed`, `start` attributes and adds `list-style-type` definition as a value for the `style` attribute.\n * The `\"default\"` values are removed and not present in the view/data.\n */\nfunction downcastListItemAttributes( attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\tdispatcher.on<DowncastAttributeEvent>( `attribute:${ strategy.attributeName }:listItem`, ( evt, data, conversionApi ) => {\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\t\tconst currentElement = data.item as ModelElement;\n\n\t\t\t\tconst previousElement = getSiblingListItem( currentElement.previousSibling, {\n\t\t\t\t\tsameIndent: true,\n\t\t\t\t\tlistIndent: currentElement.getAttribute( 'listIndent' ) as number,\n\t\t\t\t\tdirection: 'backward'\n\t\t\t\t} );\n\n\t\t\t\tconst viewItem = conversionApi.mapper.toViewElement( currentElement )!;\n\n\t\t\t\t// A case when elements represent different lists. We need to separate their container.\n\t\t\t\tif ( !areRepresentingSameList( currentElement, previousElement ) ) {\n\t\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\t\t\t}\n\t\t\t\tstrategy.setAttributeOnDowncast( viewWriter, data.attributeNewValue, viewItem.parent as ViewElement );\n\t\t\t}, { priority: 'low' } );\n\t\t}\n\t};\n\n\t/**\n\t * Checks whether specified list items belong to the same list.\n\t */\n\tfunction areRepresentingSameList( listItem1: ModelElement, listItem2: ModelElement | null ) {\n\t\treturn listItem2 &&\n\t\t\tlistItem1.getAttribute( 'listType' ) === listItem2.getAttribute( 'listType' ) &&\n\t\t\tlistItem1.getAttribute( 'listIndent' ) === listItem2.getAttribute( 'listIndent' ) &&\n\t\t\tlistItem1.getAttribute( 'listStyle' ) === listItem2.getAttribute( 'listStyle' ) &&\n\t\t\tlistItem1.getAttribute( 'listReversed' ) === listItem2.getAttribute( 'listReversed' ) &&\n\t\t\tlistItem1.getAttribute( 'listStart' ) === listItem2.getAttribute( 'listStart' );\n\t}\n}\n\n/**\n * When indenting list, nested list should clear its value for the attributes or inherit from nested lists.\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n * editor.execute( 'indentList' );\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n */\nfunction fixListAfterIndentListCommand( editor: Editor, attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( evt: unknown, changedItems: Array<ModelElement> ) => {\n\t\tconst root = changedItems[ 0 ];\n\t\tconst rootIndent = root.getAttribute( 'listIndent' ) as number;\n\n\t\tconst itemsToUpdate = changedItems.filter( item => item.getAttribute( 'listIndent' ) === rootIndent );\n\n\t\t// A case where a few list items are indented must be checked separately\n\t\t// since `getSiblingListItem()` returns the first changed element.\n\t\t// ■ List item 1.\n\t\t//     ○ [List item 2.\n\t\t//     ○ List item 3.]\n\t\t// ■ List item 4.\n\t\t//\n\t\t// List items: `2` and `3` should be adjusted.\n\t\tlet previousSibling: ModelElement | null = null;\n\n\t\tif ( root.previousSibling!.getAttribute( 'listIndent' ) as number + 1 !== rootIndent ) {\n\t\t\tpreviousSibling = getSiblingListItem( root.previousSibling, {\n\t\t\t\tsameIndent: true, direction: 'backward', listIndent: rootIndent\n\t\t\t} );\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\tfor ( const item of itemsToUpdate ) {\n\t\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\t\tif ( strategy.appliesToListItem( item ) ) {\n\t\t\t\t\t\tconst valueToSet = previousSibling == null ?\n\t\t\t\t\t\t\tstrategy.defaultValue :\n\t\t\t\t\t\t\tpreviousSibling.getAttribute( strategy.attributeName );\n\n\t\t\t\t\t\twriter.setAttribute( strategy.attributeName, valueToSet, item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * When outdenting a list, a nested list should copy attribute values\n * from the previous sibling list item including the same value for the `listIndent` value.\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n *\n * editor.execute( 'outdentList' );\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n */\nfunction fixListAfterOutdentListCommand( editor: Editor, attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( evt: unknown, changedItems: Array<ModelElement> ) => {\n\t\tchangedItems = changedItems.reverse().filter( item => item.is( 'element', 'listItem' ) );\n\n\t\tif ( !changedItems.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst indent = changedItems[ 0 ].getAttribute( 'listIndent' );\n\t\tconst listType = changedItems[ 0 ].getAttribute( 'listType' );\n\t\tlet listItem: ModelNode | null = changedItems[ 0 ].previousSibling!;\n\n\t\t// ■ List item 1.\n\t\t//     ○ List item 2.\n\t\t//     ○ List item 3.[]\n\t\t// ■ List item 4.\n\t\t//\n\t\t// After outdenting a list, `List item 3` should inherit the `listStyle` attribute from `List item 1`.\n\t\t//\n\t\t// ■ List item 1.\n\t\t//     ○ List item 2.\n\t\t// ■ List item 3.[]\n\t\t// ■ List item 4.\n\t\tif ( listItem.is( 'element', 'listItem' ) ) {\n\t\t\twhile ( listItem!.getAttribute( 'listIndent' ) !== indent ) {\n\t\t\t\tlistItem = listItem!.previousSibling;\n\t\t\t}\n\t\t} else {\n\t\t\tlistItem = null;\n\t\t}\n\n\t\t// Outdenting such a list should restore values based on `List item 4`.\n\t\t// ■ List item 1.[]\n\t\t//     ○ List item 2.\n\t\t//     ○ List item 3.\n\t\t// ■ List item 4.\n\t\tif ( !listItem ) {\n\t\t\tlistItem = changedItems[ changedItems.length - 1 ].nextSibling;\n\t\t}\n\n\t\t// And such a list should not modify anything.\n\t\t// However, `listItem` can indicate a node below the list. Be sure that we have the `listItem` element.\n\t\t// ■ List item 1.[]\n\t\t//     ○ List item 2.\n\t\t//     ○ List item 3.\n\t\t// <paragraph>The later if check.</paragraph>\n\t\tif ( !listItem || !listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not modify the list if found `listItem` represents other type of list than outdented list items.\n\t\tif ( listItem.getAttribute( 'listType' ) !== listType ) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\tconst itemsToUpdate = changedItems.filter( item => item.getAttribute( 'listIndent' ) === indent );\n\n\t\t\tfor ( const item of itemsToUpdate ) {\n\t\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\t\tif ( strategy.appliesToListItem( item ) ) {\n\t\t\t\t\t\tconst attributeName = strategy.attributeName;\n\t\t\t\t\t\tconst valueToSet = listItem!.getAttribute( attributeName );\n\n\t\t\t\t\t\twriter.setAttribute( attributeName, valueToSet, item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Each `listItem` element must have specified the `listStyle`, `listReversed` and `listStart` attributes\n * if they are enabled and supported by its `listType`.\n * This post-fixer checks whether inserted elements `listItem` elements should inherit the attribute values from\n * their sibling nodes or should use the default values.\n *\n * Paragraph[]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'bulletedList' )\n *\n * ■ Paragraph[]  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.\n * ■ List item 3.\n *\n * It also covers a such change:\n *\n * [Paragraph 1\n * Paragraph 2]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'numberedList' )\n *\n * 1. [Paragraph 1 // [listStyle=\"default\", listType=\"numbered\"]\n * 2. Paragraph 2] // [listStyle=\"default\", listType=\"numbered\"]\n * ■ List item 1.  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.  // ...\n * ■ List item 3.  // ...\n */\nfunction fixListAttributesOnListItemElements( editor: Editor, attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( writer: ModelWriter ) => {\n\t\tlet wasFixed = false;\n\n\t\tconst insertedListItems = getChangedListItems( editor.model.document.differ.getChanges() )\n\t\t\t.filter( item => {\n\t\t\t\t// Don't touch todo lists. They are handled in another post-fixer.\n\t\t\t\treturn item.getAttribute( 'listType' ) !== 'todo';\n\t\t\t} );\n\n\t\tif ( !insertedListItems.length ) {\n\t\t\treturn wasFixed;\n\t\t}\n\n\t\t// Check whether the last inserted element is next to the `listItem` element.\n\t\t//\n\t\t// ■ Paragraph[]  // <-- The inserted item.\n\t\t// ■ List item 1.\n\t\tlet existingListItem = insertedListItems[ insertedListItems.length - 1 ].nextSibling;\n\n\t\t// If it doesn't, maybe the `listItem` was inserted at the end of the list.\n\t\t//\n\t\t// ■ List item 1.\n\t\t// ■ Paragraph[]  // <-- The inserted item.\n\t\tif ( !existingListItem || !existingListItem.is( 'element', 'listItem' ) ) {\n\t\t\texistingListItem = insertedListItems[ 0 ].previousSibling;\n\n\t\t\tif ( existingListItem ) {\n\t\t\t\tconst indent = insertedListItems[ 0 ].getAttribute( 'listIndent' );\n\n\t\t\t\t// But we need to find a `listItem` with the `listIndent=0` attribute.\n\t\t\t\t// If doesn't, maybe the `listItem` was inserted at the end of the list.\n\t\t\t\t//\n\t\t\t\t// ■ List item 1.\n\t\t\t\t//     ○ List item 2.\n\t\t\t\t// ■ Paragraph[]  // <-- The inserted item.\n\t\t\t\twhile ( existingListItem.is( 'element', 'listItem' ) && existingListItem.getAttribute( 'listIndent' ) !== indent ) {\n\t\t\t\t\texistingListItem = existingListItem.previousSibling;\n\n\t\t\t\t\t// If the item does not exist, most probably there is no other content in the editor. See: #8072.\n\t\t\t\t\tif ( !existingListItem ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\tconst attributeName = strategy.attributeName;\n\n\t\t\tfor ( const item of insertedListItems ) {\n\t\t\t\tif ( !strategy.appliesToListItem( item ) ) {\n\t\t\t\t\twriter.removeAttribute( attributeName, item );\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( !item.hasAttribute( attributeName ) ) {\n\t\t\t\t\tif ( shouldInheritListType( existingListItem, item, strategy ) ) {\n\t\t\t\t\t\twriter.setAttribute( attributeName, existingListItem!.getAttribute( attributeName ), item );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.setAttribute( attributeName, strategy.defaultValue, item );\n\t\t\t\t\t}\n\t\t\t\t\twasFixed = true;\n\t\t\t\t} else {\n\t\t\t\t\t// Adjust the `listStyle`, `listReversed` and `listStart`\n\t\t\t\t\t// attributes for inserted (pasted) items. See #8160.\n\t\t\t\t\t//\n\t\t\t\t\t// ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ [] (selection is here)\n\t\t\t\t\t//\n\t\t\t\t\t// Then, pasting a list with different attributes (listStyle, listType):\n\t\t\t\t\t//\n\t\t\t\t\t// 1. First. // [listStyle=\"decimal\", listType=\"numbered\"]\n\t\t\t\t\t// 2. Second // [listStyle=\"decimal\", listType=\"numbered\"]\n\t\t\t\t\t//\n\t\t\t\t\t// The `listType` attribute will be corrected by the `ListEditing` converters.\n\t\t\t\t\t// We need to adjust the `listStyle` attribute. Expected structure:\n\t\t\t\t\t//\n\t\t\t\t\t// ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ First. // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ Second // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\tconst previousSibling = item.previousSibling;\n\n\t\t\t\t\tif ( shouldInheritListTypeFromPreviousItem( previousSibling, item, strategy.attributeName ) ) {\n\t\t\t\t\t\twriter.setAttribute( attributeName, previousSibling!.getAttribute( attributeName ), item );\n\n\t\t\t\t\t\twasFixed = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn wasFixed;\n\t};\n}\n\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from the `baseItem` element.\n *\n * The attribute should be copied if the inserted element does not have defined it and\n * the value for the element is other than default in the base element.\n */\nfunction shouldInheritListType( baseItem: ModelNode | null, itemToChange: ModelElement, attributeStrategy: AttributeStrategy ) {\n\tif ( !baseItem ) {\n\t\treturn false;\n\t}\n\n\tconst baseListAttribute = baseItem.getAttribute( attributeStrategy.attributeName );\n\n\tif ( !baseListAttribute ) {\n\t\treturn false;\n\t}\n\n\tif ( baseListAttribute == attributeStrategy.defaultValue ) {\n\t\treturn false;\n\t}\n\n\tif ( baseItem.getAttribute( 'listType' ) !== itemToChange.getAttribute( 'listType' ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from previous list item.\n *\n * The attribute should be copied if there's a mismatch of styles of the pasted list into a nested list.\n * Top-level lists are not normalized as we allow side-by-side list of different types.\n */\nfunction shouldInheritListTypeFromPreviousItem( previousItem: ModelNode | null, itemToChange: ModelElement, attributeName: string ) {\n\tif ( !previousItem || !previousItem.is( 'element', 'listItem' ) ) {\n\t\treturn false;\n\t}\n\n\tif ( itemToChange.getAttribute( 'listType' ) !== previousItem.getAttribute( 'listType' ) ) {\n\t\treturn false;\n\t}\n\n\tconst previousItemIndent = previousItem.getAttribute( 'listIndent' ) as number;\n\n\tif ( previousItemIndent < 1 || previousItemIndent !== itemToChange.getAttribute( 'listIndent' ) ) {\n\t\treturn false;\n\t}\n\n\tconst previousItemListAttribute = previousItem.getAttribute( attributeName );\n\n\tif ( !previousItemListAttribute || previousItemListAttribute === itemToChange.getAttribute( attributeName ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Removes the `listStyle`, `listReversed` and `listStart` attributes from \"todo\" list items.\n */\nfunction removeListItemAttributesFromTodoList( editor: Editor ) {\n\treturn ( writer: ModelWriter ) => {\n\t\tconst todoListItems = getChangedListItems( editor.model.document.differ.getChanges() )\n\t\t\t.filter( item => {\n\t\t\t\t// Handle the todo lists only. The rest is handled in another post-fixer.\n\t\t\t\treturn item.getAttribute( 'listType' ) === 'todo' && (\n\t\t\t\t\titem.hasAttribute( 'listStyle' ) ||\n\t\t\t\t\titem.hasAttribute( 'listReversed' ) ||\n\t\t\t\t\titem.hasAttribute( 'listStart' )\n\t\t\t\t);\n\t\t\t} );\n\n\t\tif ( !todoListItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const item of todoListItems ) {\n\t\t\twriter.removeAttribute( 'listStyle', item );\n\t\t\twriter.removeAttribute( 'listReversed', item );\n\t\t\twriter.removeAttribute( 'listStart', item );\n\t\t}\n\n\t\treturn true;\n\t};\n}\n\n/**\n * Restores the `listStyle` attribute after changing the list type.\n */\nfunction restoreDefaultListStyle( editor: Editor ) {\n\treturn ( evt: unknown, changedItems: Array<ModelElement> ) => {\n\t\tchangedItems = changedItems.filter( item => item.is( 'element', 'listItem' ) );\n\n\t\teditor.model.change( writer => {\n\t\t\tfor ( const item of changedItems ) {\n\t\t\t\t// Remove the attribute. Post-fixer will restore the proper value.\n\t\t\t\twriter.removeAttribute( 'listStyle', item );\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Returns the `listItem` that was inserted or changed.\n *\n * @param changes The changes list returned by the differ.\n */\nfunction getChangedListItems( changes: Array<DifferItem> ) {\n\tconst items: Array<ModelElement> = [];\n\n\tfor ( const change of changes ) {\n\t\tconst item = getItemFromChange( change );\n\n\t\tif ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\titems.push( item );\n\t\t}\n\t}\n\n\treturn items;\n}\n\nfunction getItemFromChange( change: DifferItem ) {\n\tif ( change.type === 'attribute' ) {\n\t\treturn change.range.start.nodeAfter;\n\t}\n\n\tif ( change.type === 'insert' ) {\n\t\treturn change.position.nodeAfter;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { LegacyListPropertiesEditing } from './legacylistproperties/legacylistpropertiesediting.js';\nimport { ListPropertiesUI } from './listproperties/listpropertiesui.js';\n\n/**\n * The legacy list properties feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylistproperties/legacylistpropertiesediting~LegacyListPropertiesEditing\n * legacy list properties editing feature} and the\n * {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */\nexport class LegacyListProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListPropertiesEditing, ListPropertiesUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist/legacychecktodolistcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { ModelElement } from 'ckeditor5/src/engine.js';\n\nconst attributeKey = 'todoListChecked';\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing} as\n * the `checkTodoList` editor command and it is also available via aliased `todoListCheck` name.\n */\nexport class LegacyCheckTodoListCommand extends Command {\n\t/**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: boolean;\n\n\t/**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t *\n\t * @internal\n\t */\n\tpublic _selectedElements: Array<ModelElement>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._selectedElements = [];\n\n\t\t// Refresh command before executing to be sure all values are up to date.\n\t\t// It is needed when selection has changed before command execution, in the same change block.\n\t\tthis.on( 'execute', () => {\n\t\t\tthis.refresh();\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */\n\tpublic override refresh(): void {\n\t\tthis._selectedElements = this._getSelectedItems();\n\t\tthis.value = this._selectedElements.every( element => !!element.getAttribute( attributeKey ) );\n\t\tthis.isEnabled = !!this._selectedElements.length;\n\t}\n\n\t/**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~ModelSelection}.\n\t */\n\tprivate _getSelectedItems() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\n\t\tconst selectionRange = model.document.selection.getFirstRange()!;\n\t\tconst startElement = selectionRange.start.parent as ModelElement;\n\t\tconst elements: Array<ModelElement> = [];\n\n\t\tif ( schema.checkAttribute( startElement, attributeKey ) ) {\n\t\t\telements.push( startElement );\n\t\t}\n\n\t\tfor ( const item of selectionRange.getItems() as Iterable<ModelElement> ) {\n\t\t\tif ( schema.checkAttribute( item, attributeKey ) && !elements.includes( item ) ) {\n\t\t\t\telements.push( item );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\tfor ( const element of this._selectedElements ) {\n\t\t\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setAttribute( attributeKey, true, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( attributeKey, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist/legacytodolistconverters\n */\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastInsertEvent,\n\tViewDowncastWriter,\n\tModelElement,\n\tMapperModelToViewPositionEvent,\n\tModel,\n\tUpcastElementEvent,\n\tEditingView,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { createElement, type GetCallback } from 'ckeditor5/src/utils.js';\n\nimport { generateLiInUl, injectViewList, positionAfterUiElements, findNestedList } from '../legacylist/legacyutils.js';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It converts the `listItem` model element to an unordered list with a {@link module:engine/view/uielement~ViewUIElement checkbox element}\n * at the beginning of each list item. It also merges the list with surrounding lists (if available).\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @param onCheckboxChecked Callback function.\n * @returns Returns a conversion callback.\n */\nexport function modelViewInsertion(\n\tmodel: Model,\n\tonCheckboxChecked: ( element: ModelElement ) => void\n): GetCallback<DowncastInsertEvent<ModelElement>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.item;\n\n\t\tconsumable.consume( modelItem, 'insert' );\n\t\tconsumable.consume( modelItem, 'attribute:listType' );\n\t\tconsumable.consume( modelItem, 'attribute:listIndent' );\n\t\tconsumable.consume( modelItem, 'attribute:todoListChecked' );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tconst isChecked = !!modelItem.getAttribute( 'todoListChecked' );\n\t\tconst checkmarkElement = createCheckmarkElement( modelItem, viewWriter, isChecked, onCheckboxChecked );\n\n\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\tclass: 'todo-list__label__description'\n\t\t} );\n\n\t\tviewWriter.addClass( 'todo-list', viewItem.parent as any );\n\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), checkmarkElement );\n\t\tviewWriter.insert( viewWriter.createPositionAfter( checkmarkElement ), span );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function dataModelViewInsertion( model: Model ): GetCallback<DowncastInsertEvent<ModelElement>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.item;\n\n\t\tconsumable.consume( modelItem, 'insert' );\n\t\tconsumable.consume( modelItem, 'attribute:listType' );\n\t\tconsumable.consume( modelItem, 'attribute:listIndent' );\n\t\tconsumable.consume( modelItem, 'attribute:todoListChecked' );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tviewWriter.addClass( 'todo-list', viewItem.parent as any );\n\n\t\tconst label = viewWriter.createContainerElement( 'label', {\n\t\t\tclass: 'todo-list__label'\n\t\t} );\n\n\t\tconst checkbox = viewWriter.createEmptyElement( 'input', {\n\t\t\ttype: 'checkbox',\n\t\t\tdisabled: 'disabled'\n\t\t} );\n\n\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\tclass: 'todo-list__label__description'\n\t\t} );\n\n\t\tif ( modelItem.getAttribute( 'todoListChecked' ) ) {\n\t\t\tviewWriter.setAttribute( 'checked', 'checked', checkbox );\n\t\t}\n\n\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), label );\n\t\tviewWriter.insert( viewWriter.createPositionAt( label, 0 ), checkbox );\n\t\tviewWriter.insert( viewWriter.createPositionAfter( checkbox ), span );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A view-to-model converter for the checkbox element inside a view list item.\n *\n * It changes the `listType` of the model `listItem` to a `todo` value.\n * When a view checkbox element is marked as checked, an additional `todoListChecked=\"true\"` attribute is added to the model item.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @internal\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const dataViewModelCheckmarkInsertion: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tconst modelCursor = data.modelCursor;\n\tconst modelItem = modelCursor.parent;\n\tconst viewItem = data.viewItem;\n\n\tif ( viewItem.getAttribute( 'type' ) != 'checkbox' || modelItem.name != 'listItem' || !modelCursor.isAtStart ) {\n\t\treturn;\n\t}\n\n\tif ( !conversionApi.consumable.consume( viewItem, { name: true } ) ) {\n\t\treturn;\n\t}\n\n\tconst writer = conversionApi.writer;\n\n\twriter.setAttribute( 'listType', 'todo', modelItem );\n\n\tif ( data.viewItem.hasAttribute( 'checked' ) ) {\n\t\twriter.setAttribute( 'todoListChecked', true, modelItem );\n\t}\n\n\tdata.modelRange = writer.createRange( modelCursor );\n};\n\n/**\n * A model-to-view converter for the `listType` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes to `<ul class=\"todo-list\">` and a\n * {@link module:engine/view/uielement~ViewUIElement checkbox UI element} is added at the beginning\n * of the list item element (or vice versa).\n *\n * This converter is preceded by {@link module:list/legacylist/legacyconverters~modelViewChangeType} and followed by\n * {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType} to handle splitting and merging surrounding lists\n * of the same type.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @param view Editing view controller.\n * @returns Returns a conversion callback.\n */\nexport function modelViewChangeType(\n\tonCheckedChange: ( element: ModelElement ) => void,\n\tview: EditingView\n): GetCallback<DowncastAttributeEvent<ModelElement>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item )!;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tconst labelElement = findLabel( viewItem, view )!;\n\n\t\tif ( data.attributeNewValue == 'todo' ) {\n\t\t\tconst isChecked = !!data.item.getAttribute( 'todoListChecked' );\n\t\t\tconst checkmarkElement = createCheckmarkElement( data.item, viewWriter, isChecked, onCheckedChange );\n\n\t\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\t\tclass: 'todo-list__label__description'\n\t\t\t} );\n\n\t\t\tconst itemRange = viewWriter.createRangeIn( viewItem );\n\t\t\tconst nestedList = findNestedList( viewItem );\n\n\t\t\tconst descriptionStart = positionAfterUiElements( itemRange.start );\n\t\t\tconst descriptionEnd = nestedList ? viewWriter.createPositionBefore( nestedList ) : itemRange.end;\n\t\t\tconst descriptionRange = viewWriter.createRange( descriptionStart, descriptionEnd );\n\n\t\t\tviewWriter.addClass( 'todo-list', viewItem.parent as any );\n\t\t\tviewWriter.move( descriptionRange, viewWriter.createPositionAt( span, 0 ) );\n\t\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), checkmarkElement );\n\t\t\tviewWriter.insert( viewWriter.createPositionAfter( checkmarkElement ), span );\n\t\t} else if ( data.attributeOldValue == 'todo' ) {\n\t\t\tconst descriptionSpan = findDescription( viewItem, view )!;\n\n\t\t\tviewWriter.removeClass( 'todo-list', viewItem.parent as any );\n\t\t\tviewWriter.remove( labelElement );\n\t\t\tviewWriter.move( viewWriter.createRangeIn( descriptionSpan ), viewWriter.createPositionBefore( descriptionSpan ) );\n\t\t\tviewWriter.remove( descriptionSpan );\n\t\t}\n\t};\n}\n\n/**\n * A model-to-view converter for the `todoListChecked` attribute change on the `listItem` model element.\n *\n * It marks the {@link module:engine/view/uielement~ViewUIElement checkbox UI element} as checked.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @internal\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @returns Returns a conversion callback.\n */\nexport function modelViewChangeChecked(\n\tonCheckedChange: ( element: ModelElement ) => void\n): GetCallback<DowncastAttributeEvent<ModelElement>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Do not convert `todoListChecked` attribute when to-do list item has changed to other list item.\n\t\t// This attribute will be removed by the model post fixer.\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:todoListChecked' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { mapper, writer: viewWriter } = conversionApi;\n\t\tconst isChecked = !!data.item.getAttribute( 'todoListChecked' );\n\t\tconst viewItem = mapper.toViewElement( data.item )!;\n\t\t// Because of m -> v position mapper we can be sure checkbox is always at the beginning.\n\t\tconst oldCheckmarkElement = viewItem.getChild( 0 )!;\n\t\tconst newCheckmarkElement = createCheckmarkElement( data.item, viewWriter, isChecked, onCheckedChange );\n\n\t\tviewWriter.insert( viewWriter.createPositionAfter( oldCheckmarkElement ), newCheckmarkElement );\n\t\tviewWriter.remove( oldCheckmarkElement );\n\t};\n}\n\n/**\n * A model-to-view position at zero offset mapper.\n *\n * This helper ensures that position inside todo-list in the view is mapped after the checkbox.\n *\n * It only handles the position at the beginning of a list item as other positions are properly mapped be the default mapper.\n *\n * @internal\n */\nexport function mapModelToViewPosition( view: EditingView ): GetCallback<MapperModelToViewPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tconst modelPosition = data.modelPosition;\n\t\tconst parent = modelPosition.parent;\n\n\t\tif ( !parent.is( 'element', 'listItem' ) || parent.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewLi = data.mapper.toViewElement( parent )!;\n\t\tconst descSpan = findDescription( viewLi, view );\n\n\t\tif ( descSpan ) {\n\t\t\tdata.viewPosition = data.mapper.findPositionIn( descSpan, modelPosition.offset );\n\t\t}\n\t};\n}\n\n/**\n * Creates a checkbox UI element.\n */\nfunction createCheckmarkElement(\n\tmodelItem: ModelElement,\n\tviewWriter: ViewDowncastWriter,\n\tisChecked: boolean,\n\tonChange: ( element: ModelElement ) => void\n) {\n\tconst uiElement = viewWriter.createUIElement(\n\t\t'label',\n\t\t{\n\t\t\tclass: 'todo-list__label',\n\t\t\tcontenteditable: false\n\t\t},\n\t\tfunction( domDocument ) {\n\t\t\tconst checkbox = createElement( document, 'input', { type: 'checkbox', tabindex: '-1' } );\n\n\t\t\tif ( isChecked ) {\n\t\t\t\tcheckbox.setAttribute( 'checked', 'checked' );\n\t\t\t}\n\n\t\t\tcheckbox.addEventListener( 'change', () => onChange( modelItem ) );\n\n\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\tdomElement.appendChild( checkbox );\n\n\t\t\treturn domElement;\n\t\t}\n\t);\n\n\treturn uiElement;\n}\n\n// Helper method to find label element inside li.\nfunction findLabel( viewItem: ViewElement, view: EditingView ) {\n\tconst range = view.createRangeIn( viewItem );\n\n\tfor ( const value of range ) {\n\t\tif ( value.item.is( 'uiElement', 'label' ) ) {\n\t\t\treturn value.item;\n\t\t}\n\t}\n}\n\nfunction findDescription( viewItem: ViewElement, view: EditingView ) {\n\tconst range = view.createRangeIn( viewItem );\n\n\tfor ( const value of range ) {\n\t\tif ( value.item.is( 'containerElement', 'span' ) && value.item.hasClass( 'todo-list__label__description' ) ) {\n\t\t\treturn value.item;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist/legacytodolistediting\n */\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastInsertEvent,\n\tModelElement,\n\tModelItem,\n\tMapperModelToViewPositionEvent,\n\tModel,\n\tModelApplyOperationEvent,\n\tUpcastElementEvent,\n\tViewDocumentArrowKeyEvent,\n\tViewDocumentKeyDownEvent,\n\tAttributeOperation,\n\tRenameOperation,\n\tModelSelectionChangeRangeEvent,\n\tModelDocumentFragment\n} from 'ckeditor5/src/engine.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetCode,\n\tparseKeystroke,\n\tgetLocalizedArrowKeyCodeDirection,\n\ttype Locale,\n\ttype GetCallback\n} from 'ckeditor5/src/utils.js';\n\nimport { LegacyListCommand } from '../legacylist/legacylistcommand.js';\nimport { LegacyListEditing } from '../legacylist/legacylistediting.js';\nimport { LegacyCheckTodoListCommand } from './legacychecktodolistcommand.js';\nimport {\n\tdataModelViewInsertion,\n\tdataViewModelCheckmarkInsertion,\n\tmapModelToViewPosition,\n\tmodelViewChangeChecked,\n\tmodelViewChangeType,\n\tmodelViewInsertion\n} from './legacytodolistconverters.js';\n\nconst ITEM_TOGGLE_KEYSTROKE = /* #__PURE__ */ parseKeystroke( 'Ctrl+Enter' );\n\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing\n * plugin} and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n * - `'todoListCheck'` as an alias for `checkTodoList` command.\n */\nexport class LegacyTodoListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyTodoListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst { editing, data, model } = editor;\n\n\t\t// Extend schema.\n\t\tmodel.schema.extend( 'listItem', {\n\t\t\tallowAttributes: [ 'todoListChecked' ]\n\t\t} );\n\n\t\t// Disallow todoListChecked attribute on other nodes than listItem with to-do listType.\n\t\tmodel.schema.addAttributeCheck( ( context: any, attributeName ) => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( attributeName == 'todoListChecked' && item.name == 'listItem' && item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Register `todoList` command.\n\t\teditor.commands.add( 'todoList', new LegacyListCommand( editor, 'todo' ) );\n\n\t\tconst checkTodoListCommand = new LegacyCheckTodoListCommand( editor );\n\n\t\t// Register `checkTodoList` command and add `todoListCheck` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'checkTodoList', checkTodoListCommand );\n\t\teditor.commands.add( 'todoListCheck', checkTodoListCommand );\n\n\t\t// Define converters.\n\t\tdata.downcastDispatcher.on<DowncastInsertEvent<ModelElement>>(\n\t\t\t'insert:listItem',\n\t\t\tdataModelViewInsertion( model ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\tdata.upcastDispatcher.on<UpcastElementEvent>(\n\t\t\t'element:input',\n\t\t\tdataViewModelCheckmarkInsertion,\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tediting.downcastDispatcher.on<DowncastInsertEvent<ModelElement>>(\n\t\t\t'insert:listItem',\n\t\t\tmodelViewInsertion( model, listItem => this._handleCheckmarkChange( listItem ) ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\tediting.downcastDispatcher.on<DowncastAttributeEvent<ModelElement>>(\n\t\t\t'attribute:listType:listItem',\n\t\t\tmodelViewChangeType( listItem => this._handleCheckmarkChange( listItem ), editing.view )\n\t\t);\n\t\tediting.downcastDispatcher.on<DowncastAttributeEvent<ModelElement>>(\n\t\t\t'attribute:todoListChecked:listItem',\n\t\t\tmodelViewChangeChecked( listItem => this._handleCheckmarkChange( listItem ) )\n\t\t);\n\n\t\tediting.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', mapModelToViewPosition( editing.view ) );\n\t\tdata.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', mapModelToViewPosition( editing.view ) );\n\n\t\t// Jump at the end of the previous node on left arrow key press, when selection is after the checkbox.\n\t\t//\n\t\t// <blockquote><p>Foo</p></blockquote>\n\t\t// <ul><li><checkbox/>{}Bar</li></ul>\n\t\t//\n\t\t// press: `<-`\n\t\t//\n\t\t// <blockquote><p>Foo{}</p></blockquote>\n\t\t// <ul><li><checkbox/>Bar</li></ul>\n\t\t//\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tediting.view.document,\n\t\t\t'arrowKey',\n\t\t\tjumpOverCheckmarkOnSideArrowKeyPress( model, editor.locale ),\n\t\t\t{ context: 'li' }\n\t\t);\n\n\t\t// Toggle check state of selected to-do list items on keystroke.\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( editing.view.document, 'keydown', ( evt, data ) => {\n\t\t\tif ( getCode( data ) === ITEM_TOGGLE_KEYSTROKE ) {\n\t\t\t\teditor.execute( 'checkTodoList' );\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// Remove `todoListChecked` attribute when a host element is no longer a to-do list item.\n\t\tconst listItemsToFix = new Set<ModelItem>();\n\n\t\tthis.listenTo<ModelApplyOperationEvent>( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ] as RenameOperation | AttributeOperation;\n\n\t\t\tif ( operation.type == 'rename' && operation.oldName == 'listItem' ) {\n\t\t\t\tconst item = operation.position.nodeAfter!;\n\n\t\t\t\tif ( item.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\tlistItemsToFix.add( item );\n\t\t\t\t}\n\t\t\t} else if ( operation.type == 'changeAttribute' && operation.key == 'listType' && operation.oldValue === 'todo' ) {\n\t\t\t\tfor ( const item of operation.range.getItems() ) {\n\t\t\t\t\tif ( item.hasAttribute( 'todoListChecked' ) && item.getAttribute( 'listType' ) !== 'todo' ) {\n\t\t\t\t\t\tlistItemsToFix.add( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tlet hasChanged = false;\n\n\t\t\tfor ( const listItem of listItemsToFix ) {\n\t\t\t\twriter.removeAttribute( 'todoListChecked', listItem );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tlistItemsToFix.clear();\n\n\t\t\treturn hasChanged;\n\t\t} );\n\n\t\tthis._initAriaAnnouncements();\n\t}\n\n\t/**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */\n\tprivate _handleCheckmarkChange( listItem: ModelElement ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst previousSelectionRanges = Array.from( model.document.selection.getRanges() );\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( listItem, 'end' );\n\t\t\teditor.execute( 'checkTodoList' );\n\t\t\twriter.setSelection( previousSelectionRanges );\n\t\t} );\n\t}\n\n\t/**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */\n\tprivate _initAriaAnnouncements( ) {\n\t\tconst { model, ui, t } = this.editor;\n\t\tlet lastFocusedCodeBlock: ModelElement | ModelDocumentFragment | null = null;\n\n\t\tif ( !ui ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.document.selection.on<ModelSelectionChangeRangeEvent>( 'change:range', () => {\n\t\t\tconst focusParent = model.document.selection.focus!.parent;\n\t\t\tconst lastElementIsTodoList = isLegacyTodoListItemElement( lastFocusedCodeBlock );\n\t\t\tconst currentElementIsTodoList = isLegacyTodoListItemElement( focusParent );\n\n\t\t\tif ( lastElementIsTodoList && !currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Leaving a to-do list' ) );\n\t\t\t} else if ( !lastElementIsTodoList && currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Entering a to-do list' ) );\n\t\t\t}\n\n\t\t\tlastFocusedCodeBlock = focusParent;\n\t\t} );\n\t}\n}\n\n/**\n * Handles the left/right (LTR/RTL content) arrow key and moves the selection at the end of the previous block element\n * if the selection is just after the checkbox element. In other words, it jumps over the checkbox element when\n * moving the selection to the left/right (LTR/RTL).\n *\n * @returns Callback for 'keydown' events.\n */\nfunction jumpOverCheckmarkOnSideArrowKeyPress( model: Model, locale: Locale ): GetCallback<ViewDocumentArrowKeyEvent> {\n\treturn ( eventInfo, domEventData ) => {\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( domEventData.keyCode, locale.contentLanguageDirection );\n\n\t\tif ( direction != 'left' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = selection.getFirstPosition()!;\n\t\tconst parent = position.parent;\n\n\t\tif ( parent.name === 'listItem' && parent.getAttribute( 'listType' ) == 'todo' && position.isAtStart ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionBefore( parent ), 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\t\t\t}\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t};\n}\n\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */\nfunction isLegacyTodoListItemElement( element: ModelElement | ModelDocumentFragment | null ): boolean {\n\treturn !!element && element.is( 'element', 'listItem' ) && element.getAttribute( 'listType' ) === 'todo';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist\n */\n\nimport { LegacyTodoListEditing } from './legacytodolist/legacytodolistediting.js';\nimport { TodoListUI } from './todolist/todolistui.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport '../theme/todolist.css';\n\n/**\n * The legacy to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing legacy to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */\nexport class LegacyTodoList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyTodoListEditing, TodoListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyTodoList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/adjacentlistssupport\n */\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport type { UpcastElementEvent, ViewElement } from 'ckeditor5/src/engine.js';\n\nexport class AdjacentListsSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'AdjacentListsSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.schema.register( 'listSeparator', {\n\t\t\tallowWhere: '$block',\n\t\t\tisBlock: true\n\t\t} );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t// Add a list separator element between similar list elements on upcast.\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ol', listSeparatorUpcastConverter() );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ul', listSeparatorUpcastConverter() );\n\t\t\t} )\n\t\t\t// View-to-model transformation.\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'listSeparator',\n\t\t\t\tview: 'ck-list-separator'\n\t\t\t} );\n\n\t\t// The list separator element should exist in the view, but should be invisible (hidden).\n\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'listSeparator',\n\t\t\tview: {\n\t\t\t\tname: 'div',\n\t\t\t\tclasses: [ 'ck-list-separator', 'ck-hidden' ]\n\t\t\t}\n\t\t} );\n\n\t\t// The list separator element should not exist in the output data.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'listSeparator',\n\t\t\tview: ( modelElement, conversionApi ) => {\n\t\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'ck-list-separator' );\n\n\t\t\t\tconversionApi.writer.setCustomProperty( 'dataPipeline:transparentRendering', true, viewElement );\n\n\t\t\t\tviewElement.getFillerOffset = () => null;\n\n\t\t\t\treturn viewElement;\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Inserts a list separator element between two lists of the same type (`ol` + `ol` or `ul` + `ul`).\n */\nfunction listSeparatorUpcastConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst element: ViewElement = data.viewItem;\n\t\tconst nextSibling = element.nextSibling as ViewElement | null;\n\n\t\tif ( !nextSibling ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( element.name !== nextSibling.name ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !data.modelRange ) {\n\t\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\tconst writer = conversionApi.writer;\n\t\tconst modelElement = writer.createElement( 'listSeparator' );\n\n\t\t// Try to insert a list separator element on the current model cursor position.\n\t\tif ( !conversionApi.safeInsert( modelElement, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parts = conversionApi.getSplitParts( modelElement );\n\n\t\t// Extend the model range with the range of the created list separator element.\n\t\tdata.modelRange = writer.createRange(\n\t\t\tdata.modelRange!.start,\n\t\t\twriter.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t);\n\n\t\tconversionApi.updateConversionResult( modelElement, data );\n\t};\n}\n"],"names":["ListWalker","_startElement","_referenceIndent","_isForward","_includeSelf","_sameAttributes","_sameIndent","_lowerIndent","_higherIndent","startElement","options","getAttribute","direction","includeSelf","toArray","sameAttributes","sameIndent","lowerIndent","higherIndent","first","walker","iterator","Symbol","nestedItems","node","SiblingListBlocksIterator","_getStartNode","indent","push","length","some","attr","nextSibling","previousSibling","_node","_previousNodesByIndent","_previous","_previousNodeIndent","next","isListItemBlock","done","value","undefined","nodeIndent","previousNodeInList","previousNodeIndent","previous","ListBlocksIterable","_listHead","listHead","ListItemUid","uid","is","hasAttribute","getAllListItemBlocks","listItem","getListItemBlocks","isForward","items","Array","from","reverse","getNestedListBlocks","getListItems","backwardBlocks","forwardBlocks","isFirstBlockOfListItem","listBlock","isLastBlockOfListItem","expandListBlocksToCompleteItems","blocks","withNested","allBlocks","Set","block","itemBlock","add","sortBlocks","expandListBlocksToCompleteList","splitListItemBefore","writer","id","setAttribute","mergeListItemBefore","parentBlock","attributes","key","getAttributes","startsWith","setAttributes","indentBlocks","expand","indentBy","blockIndent","removeListAttributes","outdentBlocksWithMerge","visited","referenceIndent","Math","min","map","parentBlocks","Map","set","has","mergedBlocks","mergeListItemIfNotLast","get","mergedBlock","rename","attributeKey","getAttributeKeys","removeAttribute","isSingleListItem","firstItemId","item","outdentFollowingItems","lastBlock","changedBlocks","currentIndent","Number","POSITIVE_INFINITY","newIndent","filter","root","rootName","sort","a","b","index","getSelectedBlockObject","model","selectedElement","document","selection","getSelectedElement","schema","isObject","isBlock","canBecomeSimpleListItem","checkChild","parent","isNumberedListType","listType","parentItemBlocks","pop","ListIndentCommand","Command","_direction","editor","indentDirection","refresh","isEnabled","_checkEnabled","execute","getSelectedListBlocks","change","previousItemBlock","_fireAfterExecute","fire","firstBlock","siblingItem","getSelectedBlocks","firstNonListBlockIndex","findIndex","ListCommand","type","_listWalkerOptions","multiLevel","_getValue","selectedBlockObject","checkAttribute","turnOff","forceValue","itemBlocks","isCollapsed","additionalAttributes","listIndent","listItemId","ListMergeCommand","shouldMergeOnBlocksContentLevel","firstElement","lastElement","_getMergeSubjectElements","firstIndent","lastIndent","lastElementId","nestedLastElementBlocks","sel","createSelection","createRange","createPositionAt","deleteContent","doNotResetEntireContent","lastElementAfterDelete","getLastPosition","positionParent","getFirstPosition","siblingNode","lastPosition","firstPosition","isFirstBlock","ListSplitCommand","_getStartBlock","doc","ListItemBoldIntegration","Plugin","pluginName","isOfficialPlugin","requires","ListEditing","init","ListFormatting","plugins","listEditing","config","registerFormatAttribute","registerDowncastStrategy","scope","attributeName","setAttributeOnDowncast","viewElement","addClass","env","isSafari","dataPipeline","setStyle","afterInit","extend","allowAttributes","setAttributeProperties","isFormatting","addAttributeCheck","context","last","conversion","for","attributeToAttribute","view","name","classes","ListItemItalicIntegration","ListItemFontSizeIntegration","normalizedFontSizeOptions","_normalizeFontSizeOptions","fontSizeOption","find","option","styles","elementToAttribute","getStyle","fontSizeOptions","ListItemFontColorIntegration","ListItemFontFamilyIntegration","_loadedFormatting","define","_registerPostfixerForListItemFormatting","registerPostFixer","changes","differ","getChanges","modifiedListItems","returnValue","entry","_isInlineOrSelectionFormatting","Object","values","includes","range","start","nodeAfter","position","nodeBefore","createRangeIn","getItems","formats","getListItemConsistentFormat","keys","formatAttributeName","formatValue","entries","listItemFormatAttributeName","setFormattingToListItem","removeFormattingFromListItem","formatAttribute","listItemFormatAttribute","replace","attributeKeys","getSingleListItemConsistentFormat","listItemBlocks","isNumberedOrBulletedList","isLimit","fromEntries","isEmpty","attributesToCheck","valuesMap","getWalker","ignoreElementEnd","delete","size","jumpTo","createPositionAfter","attributeValue","wasChanged","ListUtils","isListView","isListItemView","getIndent","createListElement","getViewElementIdForListType","createAttributeElement","getViewElementNameForListType","priority","createListItemElement","findAndAddListHeadToMap","itemToListHead","previousNode","fixListIndents","listNodes","maxIndent","prevIndent","fixBy","applied","itemIndent","fixListItemIds","seenIds","listItemUpcastConverter","evt","data","conversionApi","modelRange","shallow","viewItem","consumable","consume","firstItemListType","keepEmptyElement","reconvertItemsOnDataChange","editing","attributeNames","itemsToRefresh","changedItems","getShiftedBy","attributeNewValue","doesItemBlockRequiresRefresh","collectListItemsToRefresh","reconvertItem","stack","modelAttributes","modelElement","doesItemWrappingRequiresRefresh","mapper","toViewElement","needsRefresh","useBogus","shouldUseBogusParagraph","element","isListItemElement","isListElement","eventName","modelReferenceElement","listItemDowncastConverter","strategies","consumer","createAttributesConsumer","findMappedViewElement","removeCustomMarkerElements","unwrapListItemBlock","viewRange","insertCustomMarkerElements","wrapListItemBlock","listItemDowncastRemoveConverter","elementName","split","viewStart","toViewPosition","modelEnd","viewEnd","isPhantom","getTrimmed","end","bogusParagraphCreator","createContainerElement","class","setCustomProperty","createRangeOn","toViewRange","createModelToViewPositionMapper","modelPosition","offset","strategy","canInjectMarkerIntoElement","viewWalker","positionAfterLastMarker","toModelElement","getCustomProperty","skip","previousPosition","isEqual","viewPosition","viewWriter","unwrap","markersToRemove","collectMarkersToRemove","createPositionBefore","marker","remove","markerElement","createElement","insert","createWrapperElement","canWrapElement","wrapper","wrap","attributeElement","parentElement","listItemIndent","currentListItem","listItemViewElement","listViewElement","events","every","event","test","forEach","LIST_BASE_ATTRIBUTES","_downcastStrategies","Enter","Delete","ClipboardPipeline","multiBlock","CKEditorError","conflictPlugin","register","allowAttributesOf","inheritAllFrom","attribute","copyOnReplace","commands","_setupDeleteIntegration","_setupEnterIntegration","_setupTabIntegration","_setupClipboardIntegration","_setupAccessibilityIntegration","_setupListItemIdConversionStrategy","outdent","registerChildCommand","_setupModelPostFixing","_setupConversion","getListAttributeNames","mergeBackwardCommand","mergeForwardCommand","listenTo","isAtStart","previousBlock","preventDefault","stop","isAtEnd","enterCommand","isSoft","isLastBlock","splitCommand","commandName","shiftKey","command","stopPropagation","elementToElement","converterPriority","dispatcher","on","modelToViewPositionMapper","return","modelChangePostFixer","clipboardPipeline","createModelIndentPasteFixer","allContentChildren","content","getChildren","lastItem","contentChildrenExceptLastItem","slice","method","allChildren","isSingleListItemSelected","t","accessibility","addKeystrokeInfoGroup","label","keystrokes","keystroke","skipListItemIds","isClipboardPipeline","innerItem","attributeOldValue","selectable","refItem","refType","refIndent","firstElementIndent","indentDiff","max","isListItem","createUIComponents","icon","ui","componentFactory","buttonView","_createButton","ButtonView","tooltip","isToggleable","MenuBarMenuListItemButtonView","role","ButtonClass","locale","bind","to","focus","ListUI","IconNumberedList","IconBulletedList","List","ListStartCommand","startIndex","LIST_STYLE_TO_LIST_TYPE","LIST_STYLE_TO_TYPE_ATTRIBUTE","TYPE_ATTRIBUTE_TO_LIST_STYLE","LIST_STYLE_TYPES","listStyle","typeAttribute","getAllSupportedStyleTypes","x","getListTypeFromListStyleType","listStyleType","getListStyleTypeFromTypeAttribute","getTypeAttributeFromListStyleType","normalizeListStyle","ListStyleCommand","defaultType","_supportedTypes","supportedTypes","_tryToConvertItemsToList","isStyleTypeSupported","numberedList","bulletedList","ListReversedCommand","reversed","listPropertiesUpcastConverter","viewConsumables","assign","convertChildren","modelCursor","appliesToListItem","getAttributeOnUpcast","ListPropertiesUtils","getNormalizedConfig","getNormalizedStylesConfig","normalizedConfig","listTypes","useAttribute","isArray","listStyleTypes","DEFAULT_LIST_TYPE","ListPropertiesEditing","enabledProperties","createAttributeStrategies","addCommand","defaultValue","hasValidAttribute","styleType","removeStyle","listParent","style","listReversed","listStart","startAttributeValue","ListPropertiesView","View","children","stylesView","additionalPropertiesCollapsibleView","startIndexFieldView","reversedSwitchButtonView","focusTracker","FocusTracker","KeystrokeHandler","focusables","ViewCollection","focusCycler","styleButtonViews","styleGridAriaLabel","elementCssClasses","createCollection","FocusCycler","keystrokeHandler","actions","focusPrevious","focusNext","_createStylesView","_addNumberedListPropertyViews","setTemplate","tag","render","addKeyboardHandlingForGrid","gridItems","numberOfColumns","global","window","getComputedStyle","getPropertyValue","uiLanguageDirection","focusFirst","focusLast","destroy","styleButtons","addMany","delegate","child","isOn","numberedPropertyViews","_createStartIndexField","_createReversedSwitchButton","CollapsibleView","toMany","areEnabled","LabeledFieldView","createLabeledInputNumber","fieldView","step","inputMode","inputElement","valueAsNumber","isNaN","errorText","checkValidity","reversedButtonView","SwitchButtonView","withText","ListPropertiesUI","propertiesConfig","stylesListTypes","styleDefinitions","IconListStyleDisc","IconListStyleCircle","IconListStyleSquare","buttonLabel","getDropdownViewCreator","parentCommandName","buttonIcon","getMenuBarStylesMenuCreator","IconListStyleDecimal","IconListStyleDecimalLeadingZero","IconListStyleLowerRoman","IconListStyleUpperRoman","IconListStyleLowerLatin","IconListStyleUpperLatin","parentCommand","dropdownView","createDropdown","SplitButtonView","mainButtonView","once","listPropertiesView","createListPropertiesView","panelView","getStyleButtonCreator","listStyleCommand","button","styleButtonCreator","configuredListStylesTypes","filteredDefinitions","allowedTypes","def","getStyleTypeSupportChecker","focusChildOnDropdownOpen","listStartCommand","listReversedCommand","isReversed","menuView","MenuBarMenuView","listCommand","styleDefinition","ListProperties","CheckTodoListCommand","selectedElements","_getSelectedItems","selectionRange","getFirstRange","elements","TodoCheckboxChangeObserver","DomEventObserver","domEventType","onDomEvent","domEvent","target","viewTarget","domConverter","mapDomToView","findAncestor","ITEM_TOGGLE_KEYSTROKE","parseKeystroke","TodoListEditing","addObserver","todoItemInputConverter","todoListItemUpcastConverter","elementUpcastConsumingConverter","attributeUpcastConsumingConverter","isDescriptionBlock","removeClass","createUIElement","checked","disabled","tabindex","contenteditable","getFillerOffset","join","isFirstTodoModelParagraphBlock","hasViewClass","hasClass","isFirstTodoModelItemBlock","hasViewItemMarker","previousHasAttribute","nodeHasAttribute","wasFixed","getCode","viewPositionAfter","modelPositionAfter","toModelPosition","_handleCheckmarkChange","jumpOverCheckmarkOnSideArrowKeyPress","viewParent","isStartOfListItem","isStartOfListLabel","isLabelElement","isInInputWrapper","_initAriaAnnouncements","previousSelectionRanges","getRanges","setSelection","lastFocusedCodeBlock","focusParent","lastElementIsTodoList","isTodoListItemElement","currentElementIsTodoList","ariaLiveAnnouncer","announce","groupedItems","reduce","acc","modelItem","matcherPattern","matcher","Matcher","matcherResult","match","listAttributeNames","hasOnlyListAttributes","eventInfo","domEventData","getLocalizedArrowKeyCodeDirection","keyCode","contentLanguageDirection","newRange","getNearestSelectionRange","newRangeParent","TodoListUI","IconTodoList","TodoList","LegacyListCommand","checkCanBecomeListItem","lowestIndent","_fixType","isBackward","startingItem","LegacyIndentCommand","_indentBy","itemsToChange","prev","createViewListItemElement","getListItemFillerOffset","generateLiInUl","viewList","bindElements","injectViewList","injectedItem","injectedList","insertPosition","getSiblingListItem","smallerIndent","prevItem","breakContainer","mappedViewAncestor","findMappedViewAncestor","nestedList","findNestedList","positionAfterUiElements","prevView","walkerBoundaries","breakPosition","targetPosition","mergeViewLists","move","_position","nextViewList","lastSubChild","modelChild","firstList","secondList","mergeContainers","getLastMatchingPosition","getSiblingNodes","walkerOptions","startPosition","limitIndent","nodes","ModelTreeWalker","unshift","getSelectedListItems","listItems","flat","BULLETED_LIST_STYLE_TYPES","NUMBERED_LIST_STYLE_TYPES","hasOnlyLists","getChild","getViewFillerOffset","call","LegacyListUtils","modelViewInsertion","modelViewRemove","viewListPrev","removeRange","removed","hoistNestedLists","unbindViewElement","modelViewChangeType","listName","modelViewMergeAfterChangeType","modelViewChangeIndent","modelViewSplitOnInsert","lists","removeStart","removeEnd","i","previousList","insertedRange","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","safeInsert","nextPosition","viewToModelListItemChildrenConverter","updateConversionResult","cleanList","isWrongElement","isList","_remove","cleanListItem","childCount","foundList","modelToViewPosition","topmostViewList","getAncestors","viewToModelPosition","viewPos","modelNode","modelLength","getModelLength","_addListToFix","e","posAfter","_fixListIndents","_fixListTypes","typesStack","modelIndentPasteFixer","pos","indentChange","_setAttribute","listItemModel","viewChildren","convertItem","result","convertedChild","wasSplit","findNextListItem","treeWalker","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","prevViewList","LegacyListEditing","registerViewToModelLength","getViewListItemLength","viewDocument","previousIsAListItem","LegacyList","LegacyListStyleCommand","LegacyListReversedCommand","LegacyListStartCommand","LegacyListPropertiesEditing","properties","s","fixListAfterIndentListCommand","fixListAfterOutdentListCommand","restoreDefaultListStyle","fixListAttributesOnListItemElements","upcastListItemAttributes","downcastListItemAttributes","_mergeListAttributesWhileMergingLists","removeListItemAttributesFromTodoList","attributeStrategies","firstMostOuterItem","mostOuterItemList","secondListMostOuterItem","currentElement","previousElement","areRepresentingSameList","listItem1","listItem2","rootIndent","itemsToUpdate","valueToSet","insertedListItems","getChangedListItems","existingListItem","shouldInheritListType","shouldInheritListTypeFromPreviousItem","baseItem","itemToChange","attributeStrategy","baseListAttribute","previousItem","previousItemIndent","previousItemListAttribute","todoListItems","getItemFromChange","LegacyListProperties","LegacyCheckTodoListCommand","_selectedElements","onCheckboxChecked","isChecked","checkmarkElement","createCheckmarkElement","span","dataModelViewInsertion","checkbox","createEmptyElement","dataViewModelCheckmarkInsertion","onCheckedChange","labelElement","findLabel","itemRange","descriptionStart","descriptionEnd","descriptionRange","descriptionSpan","findDescription","modelViewChangeChecked","oldCheckmarkElement","newCheckmarkElement","mapModelToViewPosition","viewLi","descSpan","findPositionIn","onChange","uiElement","domDocument","addEventListener","domElement","toDomElement","appendChild","LegacyTodoListEditing","checkTodoListCommand","downcastDispatcher","upcastDispatcher","listItemsToFix","args","operation","oldName","oldValue","hasChanged","clear","isLegacyTodoListItemElement","LegacyTodoList","AdjacentListsSupport","allowWhere","listSeparatorUpcastConverter","parts","getSplitParts"],"mappings":"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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAClB,CAAC,CAAA;gBACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACb,CAAC,CAAA;gBACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAClB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACrB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACrB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACf,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"debugId":null}}]
}